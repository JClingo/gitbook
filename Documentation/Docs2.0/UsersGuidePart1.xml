<?xml version="1.0"?>
<part id="DUGP1UsingDataphor"> 
	 <partinfo><date role="LastMod">Monday, November 20, 2006 12:32:09 PM</date>
		  
	 </partinfo> 
	 <title><indexterm><primary>Using Dataphor</primary></indexterm>Using
		  Dataphor</title> 
	 <partintro> 
		  <para><indexterm><primary>Application
						  Development</primary><secondary>Procedural vs
						  Declarative</secondary></indexterm>Application development in the software
				industry is a complex and multi-faceted problem. Software architects and
				engineers are faced with a multitude of issues ranging from performance and
				scalability to security and usability. Over the years, more and more of these
				issues have been resolved generally by implementing the solutions in server
				layer software. With each layer of automation, application development becomes
				more and more <emphasis>declarative</emphasis>, and less and less
				<emphasis>procedural</emphasis>. In other words, the developer simply states
				<emphasis>what</emphasis> is to be done, not <emphasis>how</emphasis> it should
				be accomplished. </para> 
		  <para>Dataphor represents a next step in that evolution from procedural
				to 
				<indexterm><primary>declarative
						  development</primary></indexterm>declarative development. The product is
				designed from the ground up to be a declarative development environment. This
				part of the Dataphor User's Guide provides an introduction to the Dataphor
				application development platform and the technologies it contains. It
				introduces each component of the product, and provides detailed information on
				using the product to develop, deploy, and maintain Dataphor
				applications.</para> 
		  <para>This part is organized as follows: 
				<itemizedlist> 
					 <listitem> 
						  <para><citetitle>Product Tour</citetitle></para> 
						  <para>Provides an overview of the entire Dataphor platform,
								and describes the concrete elements of the architecture.</para> 
					 </listitem> 
					 <listitem> 
						  <para><citetitle>Dataphoria</citetitle></para> 
						  <para>Covers Dataphoria, the Dataphor development
								environment.</para> 
					 </listitem> 
					 <listitem> 
						  <para><citetitle>Dataphor Service</citetitle></para> 
						  <para>Discusses installation and administration of the
								Dataphor Service.</para> 
					 </listitem> 
					 <listitem> 
						  <para><citetitle>Security</citetitle></para> 
						  <para>Discusses the Dataphor Security Model from the
								Administrator's perspective.</para> 
					 </listitem> 
					 <listitem> 
						  <para><citetitle>Using Dataphor
									 Applications</citetitle></para> 
						  <para>Contains an in-depth discussion on using Dataphor
								applications from the perspective of an end-user.</para> 
					 </listitem> 
				</itemizedlist></para> 
		  <para>The first four chapters are intended to be read by Dataphor
				developers and administrators, while the final chapter is intended to be read
				by anyone using a Dataphor application.</para> 
		  <para>The Dataphor Platform is largely based on the concepts portrayed
				in 
				<citetitle>The Third Manifesto: Foundation for Future Database
					 Systems</citetitle> [3] by C. J. Date and Hugh Darwen. The book is the
				culmination of thirty years of research and development in the relational
				model, and brings together in one volume the current state of the art in
				relational theory. For a complete list of the references used in building the
				Dataphor Server, refer to the Notices and References section of this manual.
				Alphora gratefully acknowledges all those who have contributed time and energy
				to the computer science field in general, and the relational field in
				particular.</para></partintro> 
	 <chapter id="DUGP1ProductTour"> 
		  <title><indexterm><primary>Product
						  Tour</primary></indexterm><indexterm><primary>Using
						  Dataphor</primary><secondary>Product
						  Tour</secondary></indexterm><indexterm><primary>Dataphor</primary><secondary>Product
						  Tour</secondary></indexterm><indexterm><primary>Dataphor</primary><secondary>Product
						  Overview</secondary></indexterm>Product Tour</title> 
		  <para>In order to achieve a more declarative application development
				platform, Dataphor provides an environment for describing applications in terms
				of the core structures and logic required. These descriptions are called 
				<indexterm><primary>application
						  schemas</primary></indexterm><emphasis>application schemas</emphasis> and are
				stored and maintained centrally. These application schemas can then be mapped
				onto existing database systems to provide storage and integration capabilities,
				and consumed by Dataphor clients to provide the presentation layer of the
				application.</para> 
		  <para>This chapter provides an overview of what the Dataphor product
				is, and how it enables declarative development using the concept of an
				application schema. The first section provides an architectural overview of the
				product, introducing the components of the architecture. Each component is then
				considered in detail in the following sections.</para> 
		  <para>This chapter is intended to be read by Dataphor developers and
				administrators, and provides a big-picture overview of the entire product. No
				prior knowledge of the Dataphor platform is necessary to understand the
				material covered in this chapter.</para> 
		  <sect1 id="DUGP1ProductTour-ArchitecturalOverview"> 
				<title><indexterm><primary>Architectural
								Overview</primary></indexterm><indexterm><primary>Dataphor</primary><secondary>Architectural
								Overview</secondary></indexterm>Architectural Overview</title> 
				<para>Dataphor is an application development platform designed to
					 streamline the process of designing, developing, and maintaining software
					 applications. In order to realize these goals, the architecture of the Dataphor
					 product is segmented into three main layers: the Physical Layer, the Logical
					 Layer, and the Presentation Layer. Each layer is responsible for a specific set
					 of functionality within the overall product. The Physical Layer is responsible
					 for managing the persistent data of the applications. The Presentation Layer is
					 responsible for managing the interaction with users of the applications. The
					 Logical Layer is responsible for providing the actual descriptions of the
					 applications.</para> 
				<para>The following diagram depicts these layers:</para> 
				<para> 
					 <figure id="DataphorOverall"> 
						  <title><indexterm><primary>Dataphor Overall
										  Architecture</primary></indexterm>Dataphor Overall Architecture</title> 
						  <mediaobject><imageobject role="fo"><imagedata
									 fileref="Images\Dataphor Overall - Simplified.svg" width="1023" depth="1200"
									 scalefit="1" format="SVG"/></imageobject> 
								<imageobject role="html"><imagedata
									 fileref="Images\Dataphor Overall - Simplified.emf" width="1023" depth="1200"
									 scalefit="1"/></imageobject> 
						  </mediaobject> 
					 </figure></para> 
				<para>This diagram shows the components of the Dataphor
					 architecture, and the interactions between them. At the center of the
					 architecture is the Dataphor Data Access Engine (DAE), or Dataphor Server. The
					 Dataphor Server exposes application schemas that are consumed by Windows-based,
					 Web-based and other clients, and manages the coordination of the presentation
					 layer data retrieval and manipulation requests with the various storage devices
					 in the physical layer.</para> 
				<para><indexterm><primary>Dataphor
								Platform</primary><secondary>Components</secondary></indexterm><indexterm><primary>Dataphor</primary><secondary>Components</secondary></indexterm>The
					 concrete components of the Dataphor product are then: 
					 <itemizedlist> 
						  <listitem> 
								<para>Dataphor Server</para> 
								<para>The Dataphor Application platform which exposes
									 the capabilities and services required to develop and run Dataphor
									 Applications.</para> 
						  </listitem> 
						  <listitem> 
								<para>Frontend Server</para> 
								<para>A library of routines and services deployed
									 within a Dataphor Server enabling the presentation layer of a Dataphor
									 Application.</para> 
						  </listitem> 
						  <listitem> 
								<para>Dataphoria</para> 
								<para>An Integrated Development Environment (IDE) for
									 developing, testing, and administering Dataphor Applications.</para> 
						  </listitem> 
						  <listitem> 
								<para>Frontend Clients</para> 
								<para>A set of "thin-client" software components that
									 manage the presentation layer for their respective platforms. The Dataphor
									 product ships with a Microsoft Windows-based client, and a Web client.
									 Additional clients can be developed as necessary.</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>These components together provide the services and
					 functionality required by the Dataphor platform to enable the declarative
					 approach. The resulting paradigm is called 
					 <indexterm><primary>Automated Application
								Development</primary></indexterm><indexterm><primary>AAD</primary></indexterm><emphasis>Automated
					 Application Development (AAD)</emphasis>. Each of these components are
					 introduced in the following sections. Complete information on using each
					 component is then provided in the subsequent chapters of this manual.</para> 
				<para>The Dataphor product is built using the Microsoft .NET
					 Framework. The .NET Framework provides a component library, a set of compilers,
					 and an execution runtime. The Dataphor platform can be altered and extended
					 using capabilities of the .NET Framework such as dynamic class loading.</para> 
		  </sect1> 
		  <sect1 id="DUGP1ProductTour-DataphorServer"> 
				<title><indexterm><primary>Dataphor
								Server</primary></indexterm><indexterm><primary>Dataphor</primary><secondary>Dataphor
								Server</secondary></indexterm><indexterm><primary>Declarative
								Programming</primary></indexterm>Dataphor Server</title> 
				<para>The core of the Dataphor technology is a Data Access Engine
					 called the Dataphor Server. This component is a virtual Database Management
					 System (DBMS) that provides a mapping layer between the presentation layer, and
					 the physical persistence and manipulation of the data. A running Dataphor
					 Server is called a Dataphor Server <emphasis>instance</emphasis>, and can be
					 hosted within a Microsoft Windows Service, or directly within a .NET
					 application domain.</para> 
				<para><indexterm><primary>Dataphor
								Server</primary><secondary>Roles</secondary></indexterm>In providing the
					 services necessary to enable AAD, the Dataphor Server plays many different
					 roles that have traditionally been filled by independent software systems. Some
					 of these roles include: 
					 <itemizedlist> 
						  <listitem> 
								<para>Database Management System</para> 
						  </listitem> 
						  <listitem> 
								<para>Application Server</para> 
						  </listitem> 
						  <listitem> 
								<para>Business Rules Engine</para> 
						  </listitem> 
						  <listitem> 
								<para>Metadata Repository</para> 
						  </listitem> 
						  <listitem> 
								<para>Integration Server</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>As a Database Management System, the Dataphor Server is
					 responsible for providing concurrent and efficient access to the persistent
					 data stored for an application.</para> 
				<para>As an Application Server, the Dataphor Server fulfills
					 presentation layer requests such as form definitions, presentation layer value
					 translations and other presentation layer logic requests.</para> 
				<para>As a Business Rules Engine, the Dataphor Server is
					 responsible for ensuring that no data manipulation requests result in the
					 violation of a business rule. The Dataphor Server also ensures that business
					 processes are carried out in response to events that may occur during data
					 modifications.</para> 
				<para>As a Metadata Repository, the Dataphor Server provides
					 capabilities for adorning application schemas with information such as
					 presentation layer descriptions, or catalog documentation. This metadata is
					 then made available to clients of the Dataphor Server in the same way that any
					 other data is exposed.</para> 
				<para>As an Integration Server, the Dataphor Server allows multiple
					 existing systems to be integrated using a common data access and management
					 paradigm. In this role, the Dataphor Server functions as a distributed query
					 processor and distributed transaction manager.</para> 
				<para>By providing all these services in a single, integrated
					 platform, the Dataphor Server provides an excellent environment for declarative
					 application development. These services and capabilities are exposed in layers
					 of enabling technologies that successively provide higher and higher levels of
					 abstraction, and therefore automation, of the development process.</para> 
				<sect2 id="DUGP1ProductTour-DataphorServer-DataphorApplications"> 
					 <title><indexterm><primary>Dataphor
									 Applications</primary></indexterm><indexterm><primary>Dataphor
									 Server</primary><secondary>Dataphor
									 Applications</secondary></indexterm><indexterm><primary>Business
									 Model</primary></indexterm><indexterm><primary>Data
									 Model</primary></indexterm>Dataphor Applications</title> 
					 <para>In general, a database application is a data (or
						  business) model, together with the information about how it is to be presented
						  and maintained. The business model is all the data and process logic of
						  interest to a particular enterprise or entity organized in a useful manner.
						  This business model is then manipulated and analyzed by users of the database
						  application. One key goal of the Dataphor product is to centralize the
						  definition of the business model, and extend it with enough information to make
						  the process of presentation as automatic as possible. In a Dataphor
						  application, this extended business model is called the 
						  <indexterm><primary>Application
									 Schema</primary></indexterm><emphasis>application schema</emphasis>.</para> 
					 <para><indexterm><primary>Developing a Dataphor
									 application</primary></indexterm>Developing a Dataphor application involves
						  designing the application schema, and describing it to the Dataphor Server.
						  This description is expressed in a programming language called D4. This
						  language is a full-featured programming language that includes complete data
						  management and manipulation functionality, as well as capabilities for
						  describing and managing the application schema.</para> 
					 <sect3 id="DUGP1ComponentsofaDataphorApplication"> 
						  <title><indexterm><primary>Components of a Dataphor
										  Application</primary></indexterm><indexterm><primary>Dataphor
										  Applications</primary><secondary>Components of a Dataphor
										  Application</secondary></indexterm><indexterm><primary>Application
										  Schema</primary></indexterm><indexterm><primary>Business
										  Rules</primary></indexterm>Components of a Dataphor Application</title> 
						  <para>The various components of an Application Schema can
								be loosely grouped into the following categories:</para> 
						  <para> 
								<itemizedlist> 
									 <listitem> 
										  <para>Structure</para> 
									 </listitem> 
									 <listitem> 
										  <para>Business Rules</para> 
									 </listitem> 
									 <listitem> 
										  <para>Process Logic</para> 
									 </listitem> 
									 <listitem> 
										  <para>Metadata</para> 
									 </listitem> 
									 <listitem> 
										  <para>Presentation Layer</para> 
									 </listitem> 
									 <listitem> 
										  <para>Physical Layer</para> 
									 </listitem> 
								</itemizedlist></para> 
						  <para>The structural elements of a Dataphor Application
								constitute the core of the data model. They include the data types, tables and
								views that are used to describe the data involved with the model.</para> 
						  <para>The business rules in a Dataphor Application
								determine the legal values of data in the database. Business rules ensure that
								the data conforms to the requirements for the applications. These include
								everything from simple constraints that enforce valid values for the columns of
								tables, to referential integrity constraints and other multi-table constraints,
								to complex stimulus-response rules invoked in response to events occurring
								within the system.</para> 
						  <para>Application processes that involve sequences of
								actions to be taken, or work-flows, are modelled with process logic in a
								Dataphor application schema. These elements consist of pre-compiled statements
								of D4 that accomplish some task, and can be invoked either by the users of the
								application, or as the result of a stimulus-response rule.</para> 
						  <para>Metadata in a Dataphor Application allows
								application-specific information to be attached to the data model. This
								includes presentation layer information such as titles for user-interface
								elements, as well as hints for controlling how user-interfaces should be built
								from the application schema.</para> 
						  <para>The presentation layer elements of a Dataphor
								Application describe the user-interfaces required to manipulate the data in the
								data model. Because the Dataphor platform enables a high level of automation,
								the majority of the user-interfaces required by the presentation layer can be
								built as needed based on the information contained in the application
								schema.</para> 
						  <para>In order to persist the data described by the
								application schema, the elements of the physical layer describe the mapping
								between the structural elements of the application schema and the tables and
								views in external database systems that actually persist the data.</para> 
					 </sect3> 
					 <sect3 id="DUGP1ImplementationofaDataphorApplication"> 
						  <title><indexterm><primary>Implementation of a Dataphor
										  Application</primary></indexterm><indexterm><primary>Dataphor
										  Applications</primary><secondary>Implementation of a Dataphor
										  Application</secondary></indexterm>Implementation of a Dataphor
								Application</title> 
						  <para>The concrete implementation of a Dataphor Application
								involves describing all the components discussed in the previous section in a
								running Dataphor Server instance. Application schemas in the Dataphor Server
								are exposed using the following concepts: 
								<itemizedlist> 
									 <listitem> 
										  <para>Catalog</para> 
									 </listitem> 
									 <listitem> 
										  <para>Libraries</para> 
									 </listitem> 
									 <listitem> 
										  <para>Documents</para> 
									 </listitem> 
								</itemizedlist></para> 
						  <para>The catalog of a Dataphor Server contains the
								definitions for all the objects in the data model. These objects include data
								types, tables, views, business rules, process logic, security roles, and
								storage devices. In addition, the catalog contains any metadata associated with
								these objects.</para> 
						  <para>Libraries within a Dataphor Server provide a logical
								grouping for catalog objects. They are a deployment unit for application
								schemas, and allow the architecture of a Dataphor Application to be segmented
								into manageable units of related schema elements. Many of the capabilities
								provided by the Dataphor platform are built as libraries such as 
								<phrase>Frontend</phrase> and 
								<phrase>MSSQLDevice</phrase>. In addition to utilizing
								various system libraries, a typical Dataphor Application will consist of
								several interrelated libraries.</para> 
						  <para>Dataphor libraries also contain various documents
								that essentially constitute the "source code" for the library. These include D4
								scripts that are used to "install" the application by constructing the initial
								state of the catalog, as well as user-interface definitions and customizations
								stored as Dataphor Form Documents.</para> 
					 </sect3> 
				</sect2> 
				<sect2 id="DUGP1ProductTour-DataphorServer-DataAccessLayer"> 
					 <title><indexterm><primary>Data Access
									 Layer</primary></indexterm><indexterm><primary>Dataphor
									 Server</primary><secondary>Data Access Layer</secondary></indexterm>Data Access
						  Layer</title> 
					 <para>At the lowest level, all communication with the Dataphor
						  Server is performed through the Call-Level Interface (CLI). Although developers
						  can communicate directly with the Dataphor Server through this CLI, it is
						  usually advantageous to utilize the high-level Data Access Components (DAC)
						  provided with Dataphor.</para> 
					 <para>The Data Access Components are a set of components and
						  controls built in Microsoft C# that provide a high-level wrapper for
						  communication with the Dataphor Server. They manage client-side buffering and
						  state management, as well as data-binding to visual controls such as text boxes
						  and grids. These components form the basis for connectivity in the Windows and
						  Web clients, as well as the forms layer in Windows-based applications like
						  Dataphoria or the Windows Client.</para> 
				</sect2> 
				<sect2 id="DUGP1ProductTour-DataphorServer-HostingaDataphorServer">
					 
					 <title><indexterm><primary>Hosting a Dataphor
									 Server</primary></indexterm><indexterm><primary>Dataphor
									 Server</primary><secondary>Hosting a Dataphor
									 Server</secondary></indexterm>Hosting a Dataphor Server</title> 
					 <para>The Dataphor Server can be hosted in a Microsoft Windows
						  Service, or within a .NET application domain, typically within the Dataphoria
						  IDE.</para> 
					 <para>When running as a Microsoft Windows Service, the Dataphor
						  Server can be started and stopped from the Windows service control manager
						  (services snap-in), or by using the Dataphor Service Configuration
						  Utility.</para> 
					 <para>The Dataphor Service Configuration Utility is a .NET
						  application for configuring and maintaining the Dataphor Service instance on a
						  particular machine. It provides interfaces to stop and start the Dataphor
						  service as well as change configuration options for the service.</para> 
				</sect2> 
				<sect2 id="DUGP1ProductTour-DataphorServer-DeploymentScenarios"> 
					 <title><indexterm><primary>Deployment
									 Scenarios</primary></indexterm><indexterm><primary>Dataphor
									 Server</primary><secondary>Deployment
									 Scenarios</secondary></indexterm>Deployment Scenarios</title> 
					 <para>Because the Dataphor Server is essentially "middleware",
						  it can be deployed in a variety of different scenarios. Conceptually, a
						  Dataphor deployment consists of the following roles: 
						  <itemizedlist> 
								<listitem> 
									 <para>Dataphor Server</para> 
								</listitem> 
								<listitem> 
									 <para>Storage Device(s)</para> 
								</listitem> 
								<listitem> 
									 <para>Web Client Server (optional)</para> 
								</listitem> 
								<listitem> 
									 <para>Windows Client</para> 
								</listitem> 
						  </itemizedlist></para> 
					 <para>In the simplest deployment scenario, all these components
						  can be run on the same physical machine. In the most demanding enterprise
						  environments, each of these roles can be filled by a load-balanced,
						  fault-tolerant cluster of machines. Due to the flexibility of the architecture,
						  Dataphor Applications can be scaled anywhere in-between these two extremes as
						  necessary.</para> 
					 <para>A typical development scenario consists of: 
						  <itemizedlist> 
								<listitem> 
									 <para>Storage system such as Microsoft SQL Server
										  running on the development machine, or a development server.</para> 
								</listitem> 
								<listitem> 
									 <para>Dataphor Server running in-process within a
										  Dataphoria IDE running on the development machine.</para> 
								</listitem> 
						  </itemizedlist></para> 
					 <para>Of course there are other issues such as versioning and
						  source control that must be taken into account in a development scenario,
						  especially when considering a team development environment. These and other
						  development issues are discussed at length in the Dataphor Developer's
						  Guide.</para> 
					 <para>A typical client-server deployment scenario consists of: 
						  <itemizedlist> 
								<listitem> 
									 <para>Dataphor Server running as a service on the
										  "Server" machine.</para> 
								</listitem> 
								<listitem> 
									 <para>Storage system such as Microsoft SQL Server
										  running on the "Server" machine.</para> 
								</listitem> 
								<listitem> 
									 <para>Dataphor Windows Client installed on each
										  "Client" machine accessing the "Server".</para> 
								</listitem> 
						  </itemizedlist></para> 
					 <para>In order to provide a web-based client in this scenario,
						  the Web Client Server can be deployed on the "Server" machine.</para> 
					 <para>A typical n-tier deployment scenario consists of: 
						  <itemizedlist> 
								<listitem> 
									 <para>Dataphor Server running as a service on a
										  dedicated machine or cluster.</para> 
								</listitem> 
								<listitem> 
									 <para>Storage system running on a dedicated machine
										  or cluster.</para> 
								</listitem> 
								<listitem> 
									 <para>Web Client Server running on a dedicated
										  machine or cluster.</para> 
								</listitem> 
						  </itemizedlist></para> 
					 <para>These example scenarios illustrate the typical software
						  and hardware environment for a Dataphor Application.<!-- For more in-depth
						  discussion of these issues, refer to the 
						  <ulink url="DUGP3DeploymentandMaintenance.html">Deployment
								chapter</ulink> of the Administrative part of this manual.--></para> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1ProductTour-DataphorFrontend"> 
				<title><indexterm><primary>Dataphor
								Frontend</primary></indexterm><indexterm><primary>Product
								Tour</primary><secondary>Dataphor Frontend</secondary></indexterm>Dataphor
					 Frontend</title> 
				<para>The Dataphor Frontend builds on the foundation provided by
					 the Dataphor Server to provide automated user-interface support. The Frontend
					 technologies enable Automated Application Development by dramatically reducing
					 user-interface development time, allowing applications to be built and
					 maintained more quickly and easily. </para> 
				<para>The Frontend clients are "thin", in that there is no
					 application-specific code in the client. All presentation layer definitions
					 reside in either dynamically created user-interfaces or form definitions
					 contained within documents on the Dataphor Server. The result is a rich client
					 with all the deployment and maintenance characteristics of a web-based
					 solution.</para> 
				<sect2 id="DUGP1ProductTour-DataphorFrontend-FrontendServer"> 
					 <title><indexterm><primary>Frontend
									 Server</primary></indexterm><indexterm><primary>Dataphor
									 Frontend</primary><secondary>Frontend Server</secondary></indexterm>Frontend
						  Server</title> 
					 <para>The Frontend Server is a library of services within the
						  Dataphor Server which exposes the user-interface derivation capabilities of the
						  Dataphor product. It also introduces the concepts of
						  <emphasis>documents</emphasis> and <emphasis>applications</emphasis> into the
						  Dataphor Server.</para> 
					 <para>Derivation is the process of using the information in the
						  application schema to dynamically create user-interfaces for the presentation
						  layer of an application. The rules used in derivation embody several years of
						  usable user-interface design. The first forms are navigation-centric, or browse
						  forms, useful for selecting an individual row representing a single item.
						  Secondary forms are data-centric, useful for reviewing and/or editing the data
						  representing a single item.</para> 
					 <para>The Frontend Server exposes the process of derivation to
						  the clients of the Dataphor application for the manipulation and presentation
						  of the business model. These user-interfaces are based not only on the
						  definitions of the data structures within the business model, but on the
						  relationships between those structures. This means that not only are the basic
						  forms of an application automatable, but navigation through the business model
						  from any perspective is also enabled.</para> 
					 <para>Often, complete applications can be built by simply
						  utilizing the dynamic user-interface derivation and customization capabilities
						  of the Frontend Server. Dataphor Frontend Clients request user-interface
						  descriptions (or Dataphor user-Interface Language (DIL) documents) from the
						  Dataphor Server in much the same way that a web browser requests HTML
						  documents. This gives a Dataphor Application the same deployment and
						  maintenance characteristics as an n-tier web solution.</para> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1ProductTour-Dataphoria"> 
				<title><indexterm><primary>Dataphoria</primary></indexterm><indexterm><primary>Product
								Tour</primary><secondary>Dataphoria</secondary></indexterm>Dataphoria</title> 
				<para>Dataphoria is an Integrated Development Environment (IDE) for
					 the Dataphor platform. Dataphoria connects with instances of the Dataphor
					 Server for administration, and can host an in-process Dataphor Server instance
					 for testing and development. The environment provides user-interfaces for
					 building and maintaining the application schema, as well as a visual forms
					 designer for building and customizing presentation layer forms.</para> 
				<para>The Dataphoria IDE provides a hierarchical representation of
					 the catalog of a Dataphor Server instance. This view, called the Dataphor
					 Explorer, is used to navigate and manage the objects in the catalog.
					 User-interfaces are provided to manage various aspects of the Dataphor Server
					 such as library and document management; application installation, upgrading,
					 and configuration; and security management.</para> 
				<para>The Dataphoria IDE exposes the document system introduced by
					 the Frontend Server in much the same way that an operating system shell
					 provides a frontend for the file system. The IDE includes various
					 <emphasis>designers</emphasis> for use in creating and manipulating documents,
					 as well as user-interfaces for managing documents such as moving, renaming, and
					 deleting documents.</para> 
				<para>The Dataphoria IDE also enables ad-hoc query capabilities
					 using the D4 Script Editor. Arbitrary statements can be executed against the
					 Dataphor Server, and if desired, the results of those operations displayed
					 within the IDE.</para> 
				<para>Applications can be installed, configured and tested using
					 the Dataphoria IDE. A special version of the Windows Client can be launched
					 directly from the IDE to enable testing, as well as on-the-fly
					 development.</para> 
				<para>It is worth noting that the Dataphoria IDE is itself a
					 Dataphor Frontend Client, and the majority of the user-interfaces exposed in
					 the IDE are derived from the system catalog of the Dataphor Server.</para> 
		  </sect1> 
		  <sect1 id="DUGP1ProductTour-FrontendClients"> 
				<title><indexterm><primary>Frontend
								Clients</primary></indexterm><indexterm><primary>Product
								Tour</primary><secondary>Frontend Clients</secondary></indexterm>Frontend
					 Clients</title> 
				<para>Dataphor Frontend Clients are responsible for two distinct
					 functions. First, a Frontend Client manages the connectivity and data access
					 for the presentation layer, and second, it processes Dataphor Form Documents,
					 rendering them as user-interfaces appropriate for the platform on which they
					 are running.</para> 
				<para>The connectivity and data access mechanisms are managed using
					 the Data Access Layer exposed by the Dataphor Server. This involves managing
					 connection state with the server, as well as data presentation and state
					 management such as buffering, and editing data.</para> 
				<para>The process of rendering user-interfaces is specific to each
					 client, but all the clients request Dataphor Form Documents from the Dataphor
					 Server using the Document API exposed by the Frontend Server.</para> 
				<para>Because the Dataphor Frontend Client architecture is designed
					 to be consumed from multiple clients, the same application schema will be
					 available on any general-purpose Dataphor Frontend Client.</para> 
				<sect2 id="DUGP1ProductTour-FrontendClients-WindowsClient"> 
					 <title><indexterm><primary>Windows
									 Client</primary></indexterm><indexterm><primary>Frontend
									 Clients</primary><secondary>Windows Client</secondary></indexterm>Windows
						  Client</title> 
					 <para>The Windows Client is a Windows executable program that
						  communicates with the Dataphor Server to request user-interface descriptions,
						  and to retrieve and manipulate the data in the database. The Windows Client
						  makes use of the Dataphor Data Access Components to provide access to the
						  Dataphor Server. These components take full advantage of the
						  application-targeted features exposed by the Dataphor Server.</para> 
				</sect2> 
				<sect2 id="DUGP1ProductTour-FrontendClients-WebClient"> 
					 <title><indexterm><primary>Web
									 Client</primary></indexterm><indexterm><primary>Frontend
									 Clients</primary><secondary>Web Client</secondary></indexterm>Web
						  Client</title> 
					 <para>The Web Client is an ASP.NET web application that
						  provides HTML based user-interface pages to browser clients. These pages are
						  produced by combining the DIL documents retrieved from the Frontend Server with
						  data from an instance of the Dataphor Server. The user-interfaces produced are
						  very similar to those provided by the Windows client because both clients
						  consume the same user-interface description. This also means that
						  customizations to the user-interface descriptions appear across clients.</para>
					 
				</sect2> 
		  </sect1> 
	 </chapter> 
	 <chapter id="DUGP1Dataphoria"> 
		  <title><indexterm><primary>Dataphoria</primary></indexterm><indexterm><primary>Using
						  Dataphor</primary><secondary>Dataphoria</secondary></indexterm><indexterm><primary>Dataphoria
						  in-depth</primary></indexterm>Dataphoria</title> 
		  <para>Dataphoria is the Integrated Development Environment used to
				create Dataphor applications. It is also an administrative tool for managing a
				Dataphor Server installation and the applications it hosts. This chapter
				provides an in-depth look at the Dataphoria environment from the user's
				perspective.</para> 
		  <para>This chapter should be read by Dataphor developers and
				administrators and assumes that the material covered in the first chapter is
				understood.</para> 
		  <sect1 id="DUGP1Dataphoria-Introduction"> 
				<title><indexterm><primary>Dataphoria</primary><secondary>Introduction</secondary></indexterm>Introduction</title>
				
				<para>The Dataphoria environment provides access to all the
					 capabilities and functionality of the Dataphor product. As such this discussion
					 will be lengthy and involved. The discussion will be driven largely from the
					 standpoint of covering all the topics, rather than a sequential exposition of
					 the concepts involved. It will center largely on usability issues, rather than
					 design topics or development concerns. Topics are discussed as they are
					 encountered in the tour, and the interested reader is referred to other areas
					 of the documentation for more detailed coverage of each concept. For a complete
					 discussion of how to use the Dataphor product from a development standpoint,
					 refer to the Dataphor Developer's Guide.</para> 
				<sect2 id="DUGP1Dataphoria-Introduction-Environment"> 
					 <title><indexterm><primary>Dataphoria</primary><secondary>Environment</secondary></indexterm>Environment</title>
					 
					 <para>The following screen capture displays the default state
						  of the IDE on startup:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\Dataphoria.bmp" width="648" depth="455"/></imageobject> 
						  </mediaobject></para> 
					 <para>There are three main interfaces in the Dataphoria IDE:
						  the Dataphor Explorer, the designer surface, and the messages view.</para> 
					 <para>The Dataphor Explorer provides a visual interface for
						  managing the various aspects of a Dataphor Server, from application development
						  to administration.</para> 
					 <para>The designer surface is the main interface for creating,
						  viewing, and interacting with documents in libraries in the Dataphor
						  Server.</para> 
					 <para>The messages window provides a common view of all error
						  messages and warnings from the various designers in the Dataphor IDE. Compiler
						  errors from D4 scripts, as well as serialization warnings from Dataphor forms
						  are all displayed here.</para> 
					 <para>In addition to these main interfaces, the Dataphor IDE
						  exposes various interfaces through the main menu. These include launching new
						  designers, opening files from disk, and setting configuration options for the
						  IDE.</para> 
					 <para>The help menu allows access to the Dataphor Help
						  Collection, which includes this manual as well as the Dataphor Developer's
						  Guide, and the Dataphor Reference. An about box displaying the version of the
						  Dataphor platform is available from this menu.</para> 
					 <para>Context-sensitive help is available throughout the
						  Dataphoria IDE by pressing 
						  <keycap>F1</keycap>.</para> 
					 <para>All the windows in the IDE use a common docking and
						  layout mechanism which allows the windows to be docked to the Dataphor IDE.
						  While docked, each window can be pinned in place, or unpinned, allowing the
						  window to slide out of view while it is not being used. While unpinned,
						  hovering the mouse over the window's "handle" will cause it to slide back into
						  view.</para> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1Dataphoria-Aliases"> 
				<title><indexterm><primary>Aliases</primary></indexterm><indexterm><primary>Dataphoria</primary><secondary>Aliases</secondary></indexterm><indexterm><primary>Aliases</primary><secondary>In-process</secondary></indexterm><indexterm><primary>Aliases</primary><secondary>Out-of-process</secondary></indexterm>Aliases</title>
				
				<para>All connections to a Dataphor Server begin with the process
					 of selecting an <emphasis>alias</emphasis>. Aliases provide a named connection
					 configuration for a Dataphor Server. They allow for the management of different
					 connection configurations on a given client machine, or for different users on
					 the machine. There are two types of aliases, <emphasis>in-process</emphasis>,
					 and <emphasis>out-of-process</emphasis>.</para> 
				<para><indexterm><primary>In-process</primary></indexterm>In-process
					 aliases allow for the configuration of a complete Dataphor Server instance to
					 be hosted within the client process. Typically, an in-process alias is used
					 when connecting with Dataphoria in development scenarios.</para> 
				<para><indexterm><primary>Out-of-process</primary></indexterm>Out-of-process
					 aliases allow for connection to an existing Dataphor Server instance. The
					 instance can be hosted in a Windows Service, or an in-process instance in
					 Dataphoria running on the same machine, or another machine on the
					 network.</para> 
				<para>Both types of aliases include session configuration
					 information, which supplies the credentials for the user and governs the
					 behavior of the session. Once the session has been established, changing these
					 settings has no effect. The System library provides operators for manipulating
					 the configuration settings of an open session where appropriate.</para> 
				<para>Each alias is specified as either a machine-specific alias,
					 or a user-specific alias. If a given user-specific alias has the same name as a
					 machine-specific alias, the user-specific alias will be used.</para> 
				<para>Dataphoria and the Frontend Clients provide the ability to
					 select an alias using the Connect To Server dialog:</para> 
				<para> 
					 <mediaobject><imageobject><imagedata
								fileref="Images\DataphorServerLogin.bmp" width="406"
								depth="357"/></imageobject> 
					 </mediaobject></para> 
				<para>This interface provides for the selection and management of
					 server aliases. It also functions as a login screen, allowing the default
					 credentials specified in the alias to be given. Clicking 
					 <guibutton>Add...</guibutton> or 
					 <guibutton>Edit...</guibutton> displays the alias edit
					 screen.</para> 
				<para> 
					 <mediaobject><imageobject><imagedata
								fileref="Images\DataphorServerAliasEdit.bmp" width="330"
								depth="449"/></imageobject> 
					 </mediaobject></para> 
				<sect2 id="DUGP1Dataphoria-Aliases-SessionInformation"> 
					 <title><indexterm><primary>Session
									 Information</primary></indexterm><indexterm><primary>Aliases</primary><secondary>Session
									 Information</secondary></indexterm>Session Information</title> 
					 <para>The configuration information for a session is specified
						  through a set of properties available on both types of aliases. Clicking the 
						  <guibutton>Advanced &gt;&gt;</guibutton> button on the
						  alias edit screen provides access to these properties. 
						  <informaltable> 
								<tgroup cols="2"><colspec colnum="1" colname="col1"
									 colwidth=".25*"/><colspec colnum="2" colname="col2" colwidth="*"/><thead> 
										  <row><entry
												colname="col1">Property</entry><entry colname="col2">Description</entry> 
										  </row></thead><tbody> 
										  <row><entry
												colname="col1">DefaultIsolationLevel</entry><entry colname="col2">Determines
													 the default isolation level setting for processes started on this
													 session.</entry> 
										  </row> 
										  <row><entry
												colname="col1">DefaultLibraryName</entry><entry colname="col2">Determines the
													 default library for the session. If specified, the current library for the
													 session is initially set to this value.</entry> 
										  </row> 
										  <row><entry
												colname="col1">DefaultMaxCallDepth</entry><entry colname="col2">Determines the
													 default maximum call depth for processes on this session. The default value is
													 1024.</entry> 
										  </row> 
										  <row><entry
												colname="col1">DefaultMaxStackDepth</entry><entry colname="col2">Determines the
													 default maximum stack depth for processes on this session. The default value is
													 32767.</entry> 
										  </row> 
										  <row><entry
												colname="col1">DefaultUseDTC</entry><entry colname="col2">Determines the
													 default UseDTC setting for processes started on this session. Defaults to
													 false.</entry> 
										  </row> 
										  <row><entry
												colname="col1">DefaultUseImplicitTransactions</entry><entry
												colname="col2">Determines the default UseImplicitTransactions setting for
													 processes started on this session. Defaults to true.</entry> 
										  </row> 
										  <row><entry
												colname="col1">FetchAtOpen</entry><entry colname="col2">Determines whether or
													 not the CLI will fetch as part of the open call.</entry> 
										  </row> 
										  <row><entry
												colname="col1">FetchCount</entry><entry colname="col2">Determines the number of
													 rows which will be buffered by the CLI. A FetchCount of 1 effectively disables
													 row buffering.</entry> 
										  </row> 
										  <row><entry
												colname="col1">Password</entry><entry colname="col2">Password used to login to
													 the Dataphor Server. The default login for the Dataphor Server is Admin with a
													 blank password.</entry> 
										  </row> 
										  <row><entry
												colname="col1">UsePlanCache</entry><entry colname="col2">Determines whether or
													 not to use the server plan cache on this session.</entry> 
										  </row> 
										  <row><entry colname="col1">UserID</entry><entry
												colname="col2">User ID used to login to the Dataphor Server. The default login
													 for the Dataphor Server is Admin with a blank password.</entry> 
										  </row></tbody> 
								</tgroup> 
						  </informaltable></para> 
					 <sect3 id="DUGP1UserCredentials"> 
						  <title><indexterm><primary>User
										  Credentials</primary></indexterm><indexterm><primary>Session
										  Information</primary><secondary>User Credentials</secondary></indexterm>User
								Credentials</title> 
						  <para>The 
								<phrase role="code">UserID</phrase> and 
								<phrase role="code">Password</phrase> properties
								specify the security credentials used to login to the Dataphor Server. These
								are defaults for the server alias, and are overridden by the information
								provided by the connecting user in the Dataphor Server Login screen. These
								values are only used to connect if the alias is used explicitly by the client,
								bypassing the login screen. <!--For more information on
								how to do this, refer to the Frontend Windows Client
								documentation.--></para> 
						  <para>The default UserID and Password for a Dataphor Server
								instance is <userinput>Admin</userinput>, <userinput>blank</userinput>. Alphora
								recommends changing this default, and safeguarding the administrative password,
								as it allows a user complete access to a Dataphor Server.</para> 
					 </sect3> 
					 <sect3 id="DUGP1DefaultLibraryName"> 
						  <title><indexterm><primary>Default Library
										  Name</primary></indexterm><indexterm><primary>Session
										  Information</primary><secondary>Default Library
										  Name</secondary></indexterm>Default Library Name</title> 
						  <para>The 
								<phrase role="code">DefaultLibraryName</phrase> setting
								determines the initial current library for the session. Once the session has
								been established, changing this setting will have no effect. Setting the
								current library for a session is accomplished using the 
								<phrase role="code">SetLibrary</phrase> operator. The
								current library name for the current session can be retrieved using the 
								<phrase role="code">LibraryName</phrase> operator with
								no parameters.</para> 
						  <para>The current library is used to determine the
								<emphasis>name resolution path</emphasis> for the session, which is used in the
								name resolution process. The current library is also the default container for
								newly created catalog objects. For more information on libraries in D4, refer
								to the 
								<ulink url="DDGWorkingWithLibraries.html"
								type="olinkb"><citetitle>Working With Libraries</citetitle></ulink> chapter in
								the Logical Application Design part of the Dataphor Developer's Guide.</para> 
						  <para>The default value for this setting is blank, meaning
								that the Dataphor Server will select a suitable default current library.
								Typically, the Dataphor Server selects the 
								<phrase role="code">General</phrase> library for this
								purpose.</para> 
					 </sect3> 
					 <sect3 id="DUGP1ProcessDefaults"> 
						  <title><indexterm><primary>Process
										  Defaults</primary></indexterm><indexterm><primary>Session
										  Information</primary><secondary>Process Defaults</secondary></indexterm>Process
								Defaults</title> 
						  <para>The session configuration information provides
								several properties which control the default settings for processes started on
								the session. Once the session is connected, changing these settings has no
								effect.</para> 
						  <sect4 id="DUGP1DefaultIsolationLevel"> 
								<title><indexterm><primary>DefaultIsolationLevel</primary></indexterm><indexterm><primary>Process
												Defaults</primary><secondary>DefaultIsolationLevel</secondary></indexterm>DefaultIsolationLevel</title>
								
								<para>The 
									 <phrase role="code">DefaultIsolationLevel</phrase>
									 property determines the default setting for the isolation level of processes
									 started on this session. This in turn determines the isolation level for
									 transactions started on the process when no isolation level is specified with
									 the begin transaction call. The following table lists the available isolation
									 levels. 
									 <informaltable> 
										  <tgroup cols="2"><colspec colnum="1"
												colname="col1" colwidth=".25*"/><colspec colnum="2" colname="col2"
												colwidth="*"/><thead> 
													 <row><entry colname="col1">Isolation
																Level</entry><entry colname="col2">Description</entry> 
													 </row></thead><tbody> 
													 <row><entry
														  colname="col1">Browse</entry><entry colname="col2">Also called <emphasis>read
																uncommitted</emphasis>, this isolation level allows the transaction to read
																uncommitted data from other transactions. The transaction will take exclusive
																locks on data that it writes.</entry> 
													 </row> 
													 <row><entry colname="col1">Cursor
																Stability</entry><entry colname="col2">Also called <emphasis>read
																committed</emphasis>, this isolation level will read only committed data from
																other transactions. The transaction will take exclusive locks on data that it
																writes.</entry> 
													 </row> 
													 <row><entry
														  colname="col1">Isolated</entry><entry colname="col2">Also called
																<emphasis>serializable</emphasis>, this isolation level guarantees repeatable
																reads. The transaction will take exclusive locks on data that it
																writes.</entry> 
													 </row></tbody> 
										  </tgroup> 
									 </informaltable></para> 
								<para>These isolation levels balance concurrency with
									 contention. The browse isolation level has low contention, but is subject to
									 certain update anomalies resulting from the interaction of other transactions.
									 The higher the isolation level, the better the isolation from other
									 transactions, but the more contention a transaction running at that isolation
									 level will cause.</para> 
								<para>The default setting for this value is 
									 <phrase role="code">Isolated</phrase>. However, the
									 Frontend Clients use 
									 <phrase role="code">Browse</phrase> isolation when
									 it is known that the statement to be executed will not update any information.
									 For example, scrolling through data in a browse interface uses 
									 <phrase role="code">Browse</phrase> isolation. When
									 data modification statements are executed, the Frontend Clients will use the 
									 <phrase role="code">Isolated</phrase> level. In
									 addition, the Frontend Clients use optimistic concurrency checks to ensure that
									 data that has been read while in browse isolation has not been changed by other
									 transactions since it was read.</para> 
								<para>The default isolation level for a session can be
									 set using the 
									 <phrase
									  role="code">SetDefaultIsolationLevel</phrase> operator. The current value for
									 the setting can be retrieved from the 
									 <phrase role="code">Sessions</phrase> system
									 table.</para> 
								<para>The default isolation level for a process can be
									 set using the 
									 <phrase role="code">SetIsolationLevel</phrase>
									 operator. The current value for the setting can be retrieved from the 
									 <phrase role="code">Processes</phrase> system
									 table.</para> 
								<para>For more information on concurrency and
									 transaction isolation levels, refer to the 
									 <ulink url="DDGP1TransactionManagement.html"
									  type="olinkb"><citetitle>Transaction Management</citetitle></ulink> chapter of
									 the Introduction part of the Dataphor Developer's Guide.</para> 
						  </sect4> 
						  <sect4 id="DUGP1DefaultMaxCallDepth"> 
								<title><indexterm><primary>DefaultMaxCallDepth</primary></indexterm><indexterm><primary>Process
												Defaults</primary><secondary>DefaultMaxCallDepth</secondary></indexterm>DefaultMaxCallDepth</title>
								
								<para>The 
									 <phrase role="code">DefaultMaxCallDepth</phrase>
									 property determines the default maximum call depth for processes started on
									 this session. The Dataphor Server attempts to prevent runaway recursion by
									 limiting the maximum call depth on any given process.</para> 
								<para>The default maximum call depth for a session can
									 be set using the 
									 <phrase role="code">SetDefaultMaxCallDepth</phrase>
									 operator. The current value for the setting can be retrieved from the 
									 <phrase role="code">Sessions</phrase> system
									 table.</para> 
								<para>The maximum call depth for the current process
									 can be set using the 
									 <phrase role="code">SetMaxCallDepth</phrase>
									 operator. The current value for the setting can be retrieved from the 
									 <phrase role="code">Processes</phrase> system
									 table.</para> 
								<para>The default value for this property is
									 1024.</para> 
						  </sect4> 
						  <sect4 id="DUGP1DefaultMaxStackDepth"> 
								<title><indexterm><primary>DefaultMaxStackDepth</primary></indexterm><indexterm><primary>Process
												Defaults</primary><secondary>DefaultMaxStackDepth</secondary></indexterm>DefaultMaxStackDepth</title>
								
								<para>The 
									 <phrase role="code">DefaultMaxStackDepth</phrase>
									 property determines the default maximum stack depth for processes started on
									 this session. The Dataphor Server stack is a logical stack, meaning that the
									 depth is determined strictly by the number of items on the stack, not by their
									 relative sizes. This property prevents a process from overrunning due to
									 recursive calls.</para> 
								<para>The default maximum stack depth for a session can
									 be set using the 
									 <phrase
									 role="code">SetDefaultMaxStackDepth</phrase> operator. The current value for
									 the setting can be retrieved from the 
									 <phrase role="code">Sessions</phrase> system
									 table.</para> 
								<para>The maximum stack depth for the current process
									 can be set using the 
									 <phrase role="code">SetMaxStackDepth</phrase>
									 operator. The current value for the setting can be retrieved from the 
									 <phrase role="code">Processes</phrase> system
									 table.</para> 
								<para>The default value for this property is
									 32767.</para> 
						  </sect4> 
						  <sect4 id="DUGP1DefaultUseDTC"> 
								<title><indexterm><primary>DefaultUseDTC</primary></indexterm><indexterm><primary>Process
												Defaults</primary><secondary>DefaultUseDTC</secondary></indexterm>DefaultUseDTC</title>
								
								<para>The 
									 <phrase role="code">DefaultUseDTC</phrase> property
									 determines the default 
									 <phrase role="code">UseDTC</phrase> setting for
									 processes started on this session. This setting in turn determines whether or
									 not the Microsoft Distributed Transaction Coordinator (DTC) will be used to
									 coordinate distributed transactions on the process.</para> 
								<para>Because of the Dataphor Server's open-ended
									 storage architecture, transactions must be coordinated with each system
									 involved in a given operation. This type of transaction is known as a
									 <emphasis>distributed transaction</emphasis>. The Dataphor Server can function
									 as a distributed transaction coordinator, or it can employ the services of the
									 Microsoft Distributed Transaction Coordinator (MSDTC), based on the value of
									 this setting.</para> 
								<para>The default value for this property is false. It
									 is an error to attempt to use the Distributed Transaction Coordinator if the
									 platform is not Microsoft Windows 2000 or later.</para> 
								<para>For more information on transaction management in
									 the Dataphor Server, refer to the 
									 <ulink
									  url="DDGModelingProcessLogic-TransactionManagement.html">Transaction
										  Management</ulink> section of the 
									 <citetitle>Modeling Process Logic</citetitle>
									 chapter of the Logical Application Design part of the Dataphor Developer's
									 Guide.</para> 
						  </sect4> 
						  <sect4 id="DUGP1DefaultUseImplicitTransactions"> 
								<title><indexterm><primary>DefaultUseImplicitTransactions</primary></indexterm><indexterm><primary>Process
												Defaults</primary><secondary>DefaultUseImplicitTransactions</secondary></indexterm><indexterm><primary>transactional
												call protocol</primary></indexterm>DefaultUseImplicitTransactions</title> 
								<para>The 
									 <phrase
									 role="code">DefaultUseImplicitTransactions</phrase> property determines the
									 default 
									 <phrase
									 role="code">UseImplicitTransactions</phrase> setting for processes started on
									 this session. This setting in turn determines whether calls made through the
									 CLI boundary will start an implicit transaction if one is not started on the
									 process.</para> 
								<para>If UseImplicitTransactions is true, every call
									 that crosses the CLI boundary will ensure that if no transaction is currently
									 in progress on the process, then one is started. When the call returns, if any
									 unhandled exceptions occurred, the implicit transaction is rolled back,
									 otherwise it is committed. Note that any nested transactions started during the
									 call are rolled back or committed as well. This behavior is called
									 <emphasis>transactional call protocol</emphasis>.</para> 
								<para>The 
									 <phrase
									 role="code">DefaultUseImplicitTransactions</phrase> setting can be configured
									 using the 
									 <phrase
									 role="code">SetDefaultUseImplicitTransactions</phrase> operator. The current
									 value can be retrieved from the 
									 <phrase role="code">Sessions</phrase> system
									 table.</para> 
								<para>The 
									 <phrase
									 role="code">UseImplicitTransactions</phrase> setting can be configured using
									 the 
									 <phrase
									 role="code">SetUseImplicitTransactions</phrase> operator. The current value can
									 be retrieved from the 
									 <phrase role="code">Processes</phrase> system
									 table.</para> 
								<para>The default value for this property is true. Note
									 that this property only affects calls that cross the CLI boundary, so setting
									 it within a statement block will have no affect on subsequent statements within
									 that block.</para> 
						  </sect4> 
					 </sect3> 
					 <sect3 id="DUGP1Client-SideBufferingControls"> 
						  <title><indexterm><primary>Client-Side Buffering
										  Controls</primary></indexterm><indexterm><primary>Session
										  Information</primary><secondary>Client-Side Buffering
										  Controls</secondary></indexterm>Client-Side Buffering Controls</title> 
						  <para>The CLI performs client-side buffering of result sets
								to minimize network round trips. There are two properties that control various
								aspects of this buffering mechanism, 
								<phrase role="code">FetchAtOpen</phrase> and 
								<phrase role="code">FetchCount</phrase>. Once the
								session is connected, changing these settings has no affect.</para> 
						  <sect4 id="DUGP1FetchAtOpen"> 
								<title><indexterm><primary>FetchAtOpen</primary></indexterm><indexterm><primary>Client-Side
												Buffering
												Controls</primary><secondary>FetchAtOpen</secondary></indexterm>FetchAtOpen</title>
								
								<para>The 
									 <phrase role="code">FetchAtOpen</phrase> property
									 determines whether the results of the open call will fetch the initial buffer.
									 This property is used by the Frontend Clients to minimize network round
									 trips.</para> 
								<para>The default value for this property is
									 false.</para> 
						  </sect4> 
						  <sect4 id="DUGP1FetchCount"> 
								<title><indexterm><primary>FetchCount</primary></indexterm><indexterm><primary>Client-Side
												Buffering
												Controls</primary><secondary>FetchCount</secondary></indexterm>FetchCount</title>
								
								<para>The 
									 <phrase role="code">FetchCount</phrase> property
									 determines the size in rows of the client-side buffer.</para> 
								<para>The default value for this setting is 20. Setting
									 the value of this property to 1 effectively disables client-side
									 buffering.</para> 
						  </sect4> 
					 </sect3> 
				</sect2> 
				<sect2 id="DUGP1Dataphoria-Aliases-Out-Of-ProcessAliases"> 
					 <title><indexterm><primary>Out-Of-Process
									 Aliases</primary></indexterm><indexterm><primary>Aliases</primary><secondary>Out-Of-Process
									 Aliases</secondary></indexterm>Out-Of-Process Aliases</title> 
					 <para>An out-of-process server alias indicates that the client
						  will connect to an existing Dataphor Server instance. The Dataphor Server may
						  be located in another process on the same machine, on another machine on the
						  network, or even on the internet.</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphorServerAliasEdit.bmp" width="330"
									 depth="449"/></imageobject> 
						  </mediaobject></para> 
					 <para>The server alias for an out-of-process connection only
						  needs to specify a host name, and a port number. The host name is the name of
						  the machine on which the Dataphor Server is running, and the port number is the
						  TCP/IP port on which the server is listening for connections. The port number
						  for a Dataphor Server instance can be configured on the In-Process alias, or
						  using the Service Configuration Utility when the instance is hosted within a
						  Microsoft Windows Service. The default port number for a Dataphor Server
						  instance is 8061.</para> 
				</sect2> 
				<sect2 id="DUGP1Dataphoria-Aliases-In-ProcessAliases"> 
					 <title><indexterm><primary>In-Process
									 Aliases</primary></indexterm><indexterm><primary>Aliases</primary><secondary>In-Process
									 Aliases</secondary></indexterm>In-Process Aliases</title> 
					 <para>An in-process server alias indicates that a new Dataphor
						  Server instance should be hosted within the client process. This mechanism is
						  typically used by Dataphoria to provide a convenient development environment,
						  but can also be used in some advanced deployment scenarios.</para> 
					 <para>In addition to session configuration information,
						  in-process aliases have several properties for server-level
						  configuration:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata width="331"
									 depth="448"
									 fileref="Images\DataphorServerAliasEditInProcess.bmp"/></imageobject> 
						  </mediaobject></para> 
					 <para>The port number setting specifies the TCP/IP port on
						  which the new Dataphor Server instance will listen for connections. The default
						  port number is 8061.</para> 
					 <para>The catalog directory setting specifies a directory that
						  the Dataphor Server instance will use to save and load catalog information. If
						  the catalog directory is unspecified, the Dataphor Server will create a Catalog
						  directory in the executable directory of the instance.</para> 
					 <para>The library directory setting specifies the directory, or
						  directories that the Dataphor Server instance will use to search for available
						  libraries. Use semi-colons to delimit additional library directories. Each
						  sub-directory of these directories with the appropriate files will be
						  considered an available library in the Dataphor Server. If the catalog
						  indicates that a given library was loaded when the server last started, the
						  library will be loaded at startup. Note that libraries may be attached from any
						  directory accessible by the Dataphor Server, these directories simply specify
						  the default paths that will be searched to display available libraries.</para> 
					 <para>For more information on the System Catalog, refer to the 
						  <ulink url="D4LGCatalogElements.html"><citetitle>Catalog
									 Elements</citetitle></ulink> chapter of the D4 Language Guide in the Dataphor
						  Developer's Guide. For more information on Libraries, refer to the 
						  <ulink url="DDGWorkingWithLibraries.html"
							type="olinkb"><citetitle>Working With Libraries</citetitle></ulink> chapter in
						  the Logical Application Design part of the Dataphor Developer's Guide.</para> 
					 <para>Tracing enabled indicates whether internal tracing of
						  server events is enabled. Log errors indicates whether the Dataphor Server will
						  log exceptions that are returned to clients across the CLI boundary.<!-- For more
						  information on trace events and error logging, refer to the 
						  <ulink url="DUGP3Troubleshooting.html">Troubleshooting</ulink> chapter of the
						  Administrator's part of this manual.--></para> 
					 <para>The Embedded option indicates whether or not this
						  instance of the Dataphor Server will be available to other processes. If the
						  Embedded option is set, the instance will only be available within the process
						  creating the instance. Otherwise, the instance will be available for external
						  connections, either from other processes running on the same machine, or remote
						  processes running on different machines.</para> 
					 <para>The Catalog Store Database Name and Password indicate the
						  name and authentication information for the file used to store the database
						  catalog.<!--Removed (see IBAS Proposal #28801) The Shared Catalog Store option indicates whether or not the catalog
						  store specified for use with this instance will be shared among multiple
						  instances of the Dataphor Server. This option is only used in certain advanced
						  deployment scenarios, and effectively renders the catalog read-only for the
						  server instance.--></para> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1Dataphoria-DataphorExplorer"> 
				<title><indexterm><primary>Dataphor
								Explorer</primary></indexterm><indexterm><primary>Dataphoria</primary><secondary>Dataphor
								Explorer</secondary></indexterm>Dataphor Explorer</title> 
				<para>The Dataphor Explorer provides a hierarchical representation
					 of the entire catalog of the Dataphor Server. Each level of the tree exposes
					 different types of functionality. This functionality is accessible by
					 right-clicking on a node to show the context menu for that node of the tree. It
					 is important to note that all the functionality exposed by Dataphoria is
					 available as operators and statements of the D4 language. Dataphoria simply
					 provides a visual interface to enhance the productivity of a developer working
					 with the platform. The following sections consider each type of node in the
					 tree.</para> 
				<sect2 id="DUGP1Dataphoria-DataphorExplorer-Server"> 
					 <title><indexterm><primary>Server
									 Node</primary></indexterm><indexterm><primary>Dataphor
									 Explorer</primary><secondary>Server Node</secondary></indexterm>Server</title> 
					 <para>The server node is the root node of the Dataphor
						  Explorer, and exposes the functionality available for the entire server.</para>
					 
					 <para>Choosing 
						  <guimenuitem>Upgrade Libraries</guimenuitem> traverses the
						  catalog in library-dependency order and ensures that any outstanding upgrades
						  have been applied. Selecting this menu option is equivalent to invoking the
						  operator 
						  <phrase role="code">UpgradeLibraries</phrase> with no
						  parameters.<!-- For more
						  information on maintenance and upgrades of Dataphor applications, refer to the
						  Deployment and Maintenance chapter of the Administrator's part of this
						  manual.--></para> 
				</sect2> 
				<sect2 id="DUGP1Dataphoria-DataphorExplorer-Libraries"> 
					 <title><indexterm><primary>Libraries
									 Node</primary></indexterm><indexterm><primary>Dataphor
									 Explorer</primary><secondary>Libraries
									 Node</secondary></indexterm>Libraries</title> 
					 <para>The entire catalog of the Dataphor Server is segmented
						  into logical units called <emphasis>libraries</emphasis>. Each library
						  functions as a self-contained module of application schema. Libraries contain
						  catalog objects, as well as the documents required by the presentation layer to
						  expose those catalog objects. They also function as dependency tracking units
						  and extensibility points for the Dataphor platform. Each of these roles is
						  discussed in detail in other areas of the documentation, suffice it to say that
						  conceptually, libraries are modules of applications.</para> 
					 <para>The libraries node is the root node for all libraries in
						  the Dataphor Server. Each library is represented visually as a child node. The
						  following screen capture displays the Dataphoria environment with the libraries
						  node expanded:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphorExplorerLibraries.bmp" width="648"
									 depth="455"/></imageobject> 
						  </mediaobject></para> 
					 <para>As the screen capture shows, libraries in the Dataphor
						  Server are either available, registered, or suspect. In addition, if a library
						  is registered, it may be the current library, indicated by the library name in
						  bold. Suspect libraries are indicated by an error icon for the library.</para> 
					 <sect3 id="DUGP1AvailableLibraries"> 
						  <title><indexterm><primary>Available
										  Libraries</primary></indexterm><indexterm><primary>Libraries</primary><secondary>Available
										  Libraries</secondary></indexterm>Available Libraries</title> 
						  <para>Available libraries are simply the definition of the
								library. They specify the library name, library requisites, and any files that
								may be required by the library. In addition, available libraries have documents
								which are available as a child node of the library node. The following screen
								capture displays the library edit form:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphorExplorerLibraryEdit.bmp" width="575"
										  depth="579"/></imageobject> 
								</mediaobject></para> 
						  <para>This form allows for the definition of the name and
								directory of the library, it's current version, any libraries that it depends
								on, and the files it requires. As the form indicates, the name of a library
								cannot be changed while it is registered. Also, the version number can only be
								changed as long as the new version number is compatible with all registered
								libraries that depend on this library.</para> 
						  <sect4 id="DUGP1DirectoryStructureofaLibrary"> 
								<title><indexterm><primary>Directory Structure of a
												Library</primary></indexterm><indexterm><primary>Available
												Libraries</primary><secondary>Directory Structure of a
												Library</secondary></indexterm><indexterm><primary>Libraries</primary><secondary>Directory
												Structure of a Library</secondary></indexterm>Directory Structure of a
									 Library</title> 
								<para>Physically, the definition of a library is
									 entirely contained within a file system directory of the same name as the
									 library. The location of this directory is determined when the library is
									 created or attached. When a new library is created, the library directory may
									 be specified as part of the definition of the library. If it is not specified,
									 the configured library directory of the Dataphor Server is used. If more than
									 one directory is specified, only the first one is used as the default directory
									 for new libraries.</para> 
								<para>In addition, existing libraries may be attached
									 using the 
									 <guimenuitem>Attach Library</guimenuitem> option in
									 the Dataphor Explorer, or by using the 
									 <phrase role="code">AttachLibrary</phrase> system
									 operator.</para> 
								<para>The definition of the library is contained within
									 a file named with the same name as the library, with a <emphasis>d4l</emphasis>
									 extension. The files required to register the library, if any, must be
									 available in this directory.</para> 
								<para>Additionally, the library contains a
									 sub-directory called <emphasis>Documents</emphasis> which contains all the
									 files to be exposed as documents in the library such as D4 scripts and Dataphor
									 forms. Documents will be discussed in more detail below.</para> 
								<para>As part of the maintenance system of the Dataphor
									 Server, the library may also contain a sub-directory called
									 <emphasis>Upgrades</emphasis>. This directory contains D4 scripts for each
									 version-specific upgrade of the library. Upgrades will also be discussed in
									 more detail below.</para> 
						  </sect4> 
						  <sect4 id="DUGP1LibraryRequisites"> 
								<title><indexterm><primary>Library
												Requisites</primary></indexterm><indexterm><primary>Available
												Libraries</primary><secondary>Library
												Requisites</secondary></indexterm><indexterm><primary>Libraries</primary><secondary>Library
												Requisites</secondary></indexterm>Library Requisites</title> 
								<para>Libraries that a given library depends on are
									 called <emphasis>requisites</emphasis>. Each requisite names a required
									 library, and a required version of that library. In order to register a given
									 library, all the requisites must be registered, and the current version of the
									 required library must be a compatible version with the version of the
									 requisite.</para> 
						  </sect4> 
						  <sect4 id="DUGP1LibraryFiles"> 
								<title><indexterm><primary>Library
												Files</primary></indexterm><indexterm><primary>Available
												Libraries</primary><secondary>Library
												Files</secondary></indexterm><indexterm><primary>Libraries</primary><secondary>Library
												Files</secondary></indexterm>Library Files</title> 
								<para>Each library can specify a set of files that are
									 required in order to register the library. These files may be Microsoft .NET
									 assemblies containing host implementation structures required by catalog
									 objects in the library, or they may simply be dependent files that the library
									 requires. The following screen capture shows the library file edit
									 screen:</para> 
								<para> 
									 <mediaobject><imageobject><imagedata
												fileref="Images\DataphorExplorerLibraryFileEdit.bmp" width="326"
												depth="172"/></imageobject> 
									 </mediaobject></para> 
								<para>The Register as Assembly check box indicates
									 whether the Dataphor Server should attempt to register this file as a
									 host-implementation assembly. When the library is registered, all the files
									 specified in the library are copied into the run-time directory of the Dataphor
									 Server. If necessary, the files are also loaded into the Dataphor Server and
									 the host-implementation structures they contain are registered with the
									 Dataphor Server. These structures are then available for any catalog object
									 within the library, or any dependent library that may require them. The system
									 table 
									 <phrase role="code">RegisteredClasses</phrase>
									 lists the host-implementation structures available for a given registered
									 library.</para> 
								<para>Note that library files will also be downloaded
									 as required by the Frontend Clients in order to enable client-side operations
									 required by the data access layer. This process is transparently handled by the
									 CLI.</para> 
						  </sect4> 
						  <sect4 id="DUGLibrarySettings"> 
								<title><indexterm><primary>Library
												Settings</primary></indexterm><indexterm><primary>Libraries</primary><secondary>Settings</secondary></indexterm>Library
									 Settings</title> 
								<para>Each library also has an optional set of
									 settings, which are basically name, value pairs that can be used as
									 configuration options for the library. The library settings are stored with the
									 definition of the library, and are available even if the library is not. This
									 means that the registration process will have access to the library settings
									 defined for a library.</para> 
								<para>Library settings can be configured using the
									 library edit page, or they can be updated and retrieved within D4 by accessing
									 the 
									 <phrase role="code">System.LibrarySettings</phrase>
									 table, or by invoking the 
									 <phrase role="code">LibrarySetting</phrase>
									 operator. Note that the library setting operator can retrieve library settings
									 based on the library dependency graph for the current library so that settings
									 can be "inherited" by dependent libraries.</para> 
						  </sect4> 
						  <sect4 id="DUGP1LibraryDocuments"> 
								<title><indexterm><primary>Library
												Documents</primary></indexterm><indexterm><primary>Documents</primary></indexterm><indexterm><primary>Documents
												Node</primary></indexterm><indexterm><primary>Available
												Libraries</primary><secondary>Library
												Documents</secondary></indexterm><indexterm><primary>Libraries</primary><secondary>Documents</secondary></indexterm>Library
									 Documents</title> 
								<para>The documents node of a given library has a child
									 node for each document in the library. Documents are a logical element of the
									 library accessible in the D4 language. In order to support the same name
									 resolution as other catalog objects, document names are required to be valid
									 identifiers. </para> 
								<para>The type of the document is indicated in brackets
									 next to the name of the document in the Dataphor Explorer. The document type
									 determines what designers are available to edit each document.</para> 
								<para>Each document type has a default designer that
									 will be used if the document is opened using the 
									 <guimenuitem>Open</guimenuitem> command. The 
									 <guimenuitem>Open With...</guimenuitem> command
									 allows the document to be opened using a designer selected from the list of
									 available designers for the type of the document. For example, the default
									 designer for a D4 script is the D4 editor, which provides syntax highlighting
									 and ad-hoc query execution. However, D4 scripts can also be opened with a
									 simple text editor because they are still text-based documents.</para> 
								<para>In addition to opening documents, the context
									 menu for documents allows them to be viewed, edited, or deleted. Additional
									 commands appropriate to the type of the document will also be available. For
									 example, D4 scripts have an 
									 <guimenuitem>Execute</guimenuitem> command which
									 executes the document on the current session. Dataphor Form Documents (dfds)
									 have a 
									 <guimenuitem>Show</guimenuitem> command which
									 displays the user-interface outside the context of a designer.</para> 
								<para>Note that documents can be saved as files, or
									 loaded from files, by dragging and dropping to and from a Windows Explorer.
									 Documents can also be copied within and between libraries using the familiar
									 drag-and-drop metaphor.</para> 
								<para>For a complete discussion of documents and
									 designers, refer to the Documents section later in this chapter.</para> 
						  </sect4> 
						  <sect4 id="DUGP1LibraryUpgrades"> 
								<title><indexterm><primary>Library
												Upgrades</primary></indexterm><indexterm><primary>Available
												Libraries</primary><secondary>Library Upgrades</secondary></indexterm>Library
									 Upgrades</title> 
								<para>Each library may contain a set of D4 scripts
									 corresponding to the operations needed to bring a deployed library from it's
									 current version up to a new version. The following screen capture shows the
									 upgrades browse that is displayed when the 
									 <guimenuitem>Upgrades...</guimenuitem> command is
									 selected from the context menu of a library:</para> 
								<para> 
									 <mediaobject><imageobject><imagedata
												fileref="Images\DataphorExplorerUpgradesBrowse.bmp" width="661"
												depth="478"/></imageobject> 
									 </mediaobject></para> 
								<para>This interface allows the upgrades of a given
									 library to be managed. While this is largely a development-level
									 user-interface, it can also be used by administrators to resolve problems with
									 deployed upgrades.</para> 
								<para>Upgrades can be added or injected. When an
									 upgrade is added, the version number of the upgrade must be supplied manually.
									 When an upgrade is injected, the system automatically determines the next
									 version number by incrementing the <emphasis>revision</emphasis> component of
									 the library version. The library definition is updated, as well as the loaded
									 version of the library.</para> 
								<para>In either case, the upgrade script is added to
									 the library and can be used to upgrade deployed libraries.</para> 
						  </sect4> 
					 </sect3> 
					 <sect3 id="DUGP1RegisteredLibraries"> 
						  <title><indexterm><primary>Registered
										  Libraries</primary></indexterm><indexterm><primary>Libraries</primary><secondary>Registered
										  Libraries</secondary></indexterm>Registered Libraries</title> 
						  <para>Available libraries can be registered by
								right-clicking on the library and selecting 
								<guimenuitem>Register</guimenuitem>. This process
								ensures that all required libraries are registered, and then registers the
								library itself. </para> 
						  <para>Registration loads all the files specified in the
								library definition, registers any required assemblies, and then runs the 
								<phrase role="code">Register</phrase> d4 script, if it
								exists. When the register script runs, the library being registered is the
								current library, so any catalog objects created in the register script are
								contained within the library.</para> 
						  <para>Once a library is registered, the icon for the
								library will change to indicate the registered status. Additionally, the
								library is now the current library for the session, and the Schema node is
								available as a child of the library node in the Dataphor Explorer.</para> 
						  <para>The 
								<guimenuitem>Set As Current</guimenuitem> command can
								be used to set the current library for the session to the selected library.
								This is equivalent to calling the 
								<phrase role="code">SetLibrary</phrase> operator in D4
								and passing the name of the library as an argument.</para> 
						  <para>The 
								<guimenuitem>Open Register Script</guimenuitem> command
								can be used to quickly open a D4 script editor on the registration script for
								the library.</para> 
						  <sect4 id="DUGP1Schema"> 
								<title><indexterm><primary>Schema
												Node</primary></indexterm><indexterm><primary>Registered
												Libraries</primary><secondary>Schema Node</secondary></indexterm>Schema</title>
								
								<para>The following screen capture displays the schema
									 node expanded for the Sample.Demo library:</para> 
								<para> 
									 <mediaobject><imageobject><imagedata
												fileref="Images\DataphorExplorerLibrarySchema.bmp" width="648"
												depth="455"/></imageobject> 
									 </mediaobject></para> 
								<para>The catalog objects contained within the library
									 are divided into categories: 
									 <itemizedlist> 
										  <listitem> 
												<para>Types</para> 
										  </listitem> 
										  <listitem> 
												<para>Tables</para> 
										  </listitem> 
										  <listitem> 
												<para>Operators</para> 
										  </listitem> 
										  <listitem> 
												<para>Constraints</para> 
										  </listitem> 
										  <listitem> 
												<para>References</para> 
										  </listitem> 
										  <listitem> 
												<para>Devices</para> 
										  </listitem> 
										  <listitem> 
												<para>Roles</para> 
										  </listitem> 
									 </itemizedlist></para> 
								<para>The set of objects displayed under each category
									 can be filtered by right-clicking and selecting one of the filter options: 
									 <guimenuitem>Show System Objects</guimenuitem> and 
									 <guimenuitem>Show Generated Objects</guimenuitem>.
									 System objects are objects that are owned by the system user. Usually, only the
									 system library will contain system objects. Generated objects are catalog
									 objects that are automatically built by the compiler such as scalar type
									 selectors and accessors. By default, generated objects are hidden, while system
									 objects are visible.</para> 
								<para>The list of objects in each category can also be
									 refreshed from this context menu. The list of objects is not maintained in
									 response to DDL statements occurring on the server, so a refresh may be
									 required to synchronize the list of available catalog objects.</para> 
								<para>Create or drop scripts for all the objects in the
									 library can be obtained by right-clicking on the Schema node for the library
									 and selecting 
									 <guimenuitem>Emit Create Script</guimenuitem> or 
									 <guimenuitem>Emit Drop Script</guimenuitem>,
									 respectively.</para> 
								<para>Regardless of the category of catalog object
									 being displayed, the right-click will always contain the following commands: 
									 <informaltable> 
										  <tgroup cols="2"><colspec colnum="1"
												colname="col1" colwidth=".5*"/><colspec colnum="2" colname="col2"
												colwidth="*"/><thead> 
													 <row><entry
														  colname="col1">Command</entry><entry colname="col2">Description</entry> 
													 </row></thead><tbody> 
													 <row><entry
														  colname="col1"><guimenuitem>View...</guimenuitem></entry><entry
														  colname="col2">Views the properties of the schema object</entry> 
													 </row> 
													 <row><entry
														  colname="col1"><guimenuitem>Drop...</guimenuitem></entry><entry
														  colname="col2">Drops the schema object and any dependents, recursively</entry> 
													 </row> 
													 <row><entry
														  colname="col1"><guimenuitem>View Dependencies</guimenuitem></entry><entry
														  colname="col2">Views the dependencies of the schema object, recursively</entry>
														  
													 </row> 
													 <row><entry
														  colname="col1"><guimenuitem>View Dependents</guimenuitem></entry><entry
														  colname="col2">Views the dependents of the schema object, recursively</entry> 
													 </row> 
													 <row><entry
														  colname="col1"><guimenuitem>Emit Create Script</guimenuitem></entry><entry
														  colname="col2">Emits a create script for the schema object</entry> 
													 </row> 
													 <row><entry
														  colname="col1"><guimenuitem>Emit Drop Script</guimenuitem></entry><entry
														  colname="col2">Emits a drop script for the schema object, including any
																dependents</entry> 
													 </row></tbody> 
										  </tgroup> 
									 </informaltable></para> 
								<para>In addition to these commands, tables and devices
									 expose additional behavior on the right-click. </para> 
								<sect5 id="DUGP1Tables"> 
									 <title><indexterm><primary>Tables</primary></indexterm><indexterm><primary>Tables
													 Node</primary></indexterm><indexterm><primary>Schema
													 Node</primary><secondary>Tables Node</secondary></indexterm>Tables</title> 
									 <para>Tables can be browsed using the 
										  <guimenuitem>Browse</guimenuitem> command, or a
										  user-interface can be derived using the 
										  <guimenuitem>Derive...</guimenuitem>
										  command.</para> 
									 <para>The 
										  <guimenuitem>Browse</guimenuitem> command uses
										  the user-interface derivation capabilities of the Dataphor Frontend to produce
										  a browse user-interface for the table. This provides a convenient entry point
										  to view the data in a given table.</para> 
									 <para>The 
										  <guimenuitem>Derive...</guimenuitem> command
										  displays a user-interface that allows an arbitrary derived user-interface to be
										  requested from the Dataphor Frontend. The following screen capture shows this
										  user-interface:</para> 
									 <para> 
										  <mediaobject><imageobject><imagedata
													 fileref="Images\DataphorExplorerDerivedFormLauncher.bmp" width="326"
													 depth="481"/></imageobject> 
										  </mediaobject></para> 
									 <para>The Query is defaulted to the table being
										  launched, but can be an arbitrary table-valued D4 expression. The Page Type
										  indicates what type of user-interface should be produced. Master Key Names and
										  Detail Key Names determine the derived user-interface's relationship with the
										  calling form. The Elaborate check box indicates whether or not derivation
										  should perform an elaboration step on the expression for which the
										  user-interface is derived.</para> 
									 <para>Once the desired settings have been entered,
										  click the 
										  <guibutton>Launch Derived Form</guibutton>
										  button to display the requested user-interface. This technique is useful for
										  requesting user-interfaces that can then be customized.</para> 
									 <para>This form can also be displayed at any time
										  by selecting the 
										  <guimenuitem>Launch Form...</guimenuitem>
										  command from the 
										  <guimenu>File</guimenu> menu, or by pressing 
										  <keycap>F6</keycap>.</para> 
									 <para>For more information on query elaboration and
										  user-interface derivation, refer to the 
										  <ulink url="DDGPresentationLayer.html"
											type="olinkb">Presentation Layer</ulink> part of the Dataphor Developer's
										  Guide.</para> 
								</sect5> 
								<sect5 id="DUGP1Devices"> 
									 <title><indexterm><primary>Devices
													 Node</primary></indexterm><indexterm><primary>Schema
													 Node</primary><secondary>Devices Node</secondary></indexterm>Devices</title> 
									 <para>The reconciliation settings for each device
										  can be configured by right-clicking the device and using the 
										  <guisubmenu>Reconciliation Mode</guisubmenu>
										  sub-menu. The following reconciliation modes are available: 
										  <informaltable> 
												<tgroup cols="2"><colspec colnum="1"
													 colname="col1" colwidth=".5*"/><colspec colnum="2" colname="col2"
													 colwidth="*"/><thead> 
														  <row><entry
																colname="col1">Reconciliation Mode</entry><entry
																colname="col2">Description</entry> 
														  </row></thead><tbody> 
														  <row><entry
																colname="col1">None</entry><entry colname="col2">No reconciliation will be
																	 performed</entry> 
														  </row> 
														  <row><entry
																colname="col1">Startup</entry><entry colname="col2">Reconciliation will be
																	 performed on device startup</entry> 
														  </row> 
														  <row><entry
																colname="col1">Command</entry><entry colname="col2">Reconciliation will be
																	 performed in response to each DDL command</entry> 
														  </row> 
														  <row><entry
																colname="col1">Automatic</entry><entry colname="col2">Reconciliation will be
																	 performed when a catalog miss occurs, and this device is the default
																	 device</entry> 
														  </row></tbody> 
												</tgroup> 
										  </informaltable></para> 
								</sect5> 
						  </sect4> 
						  <sect4 id="DUGP1Loadingvs.Registering"> 
								<title><indexterm><primary>Reconciliation and
												Registering</primary></indexterm><indexterm><primary>Libraries</primary><secondary>Reconciliation
												and Registering</secondary></indexterm>Reconciliation and Registering</title> 
								<para>Once a library is registered, the library can be
									 unregistered, which will unregister all dependent libraries, drop all the
									 catalog objects contained within the library, and return the library to the
									 available status.</para> 
								<para>Both registration and unregistration can be
									 performed with or without reconciliation. With reconciliation means that all
									 communication with devices in the library will be performed normally. Wihtout
									 reconciliation means that no communication will be performed with devices in
									 the library.</para> 
								<para>For example, if the library contains base table
									 variables that are mapped into devices with command reconciliation turned on,
									 unregistering the library with reconciliation <emphasis>will</emphasis> issue
									 the corresponding drop commands to the target system, resulting in potential
									 data loss. Unregistering without reconciliation, on the other hand, will never
									 cause a corresponding drop command to be issued to the target system,
									 regardless of the reconciliation settings of the device in which the base table
									 variable is mapped, even if the device is in a different library than the
									 library being unregistered.</para> 
								<para>Similarly, registering without reconciliation
									 will create all the catalog objects in the Dataphor Server without issuing the
									 corresponding create commands to the target system. This is useful if the
									 target system already has the necessary structures, and the catalog in the
									 Dataphor Server simply needs to be created to match the existing system. Be
									 aware that because no device-level communication is taking place, constraints
									 created within a registration without reconciliation are not validated.</para> 
								<para>Note that registered assemblies cannot be
									 unloaded from the Dataphor Server, so in order to update library files, the
									 Dataphor Server must be shut down.</para> 
						  </sect4> 
					 </sect3> 
					 <sect3 id="DUGP1SuspectLibraries"> 
						  <title><indexterm><primary>Suspect
										  Libraries</primary></indexterm><indexterm><primary>Libraries</primary><secondary>Suspect
										  Libraries</secondary></indexterm>Suspect Libraries</title> 
						  <para>Suspect libraries indicate that some problem occurred
								while attempting to load a given library. The library's icon will indicate that
								the library is suspect rather than available. The following screen capture
								shows the View Library form for a suspect library:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphorExplorerSuspectLibraryView.bmp" width="326"
										  depth="464"/></imageobject> 
								</mediaobject></para> 
						  <para>The Is Suspect check box indicates that the library
								is suspect, and the Suspect Reason gives the reason for the suspect status.
								Suspect libraries usually indicate some failure in the software or hardware
								environment such as the inability to connect to a target system.</para> 
						  <para>Once a library has been marked suspect, the Dataphor
								Server will not attempt to reload it, even after a restart of the server. The
								problem causing the suspect status must be resolved, and the library must be
								manually reloaded using the 
								<guimenuitem>Load</guimenuitem> command.</para> 
					 </sect3> 
					 <sect3 id="DUGP1UpgradingLibraries"> 
						  <title><indexterm><primary>Upgrading
										  Libraries</primary></indexterm><indexterm><primary>Libraries</primary><secondary>Upgrading
										  Libraries</secondary></indexterm>Upgrading Libraries</title> 
						  <para>Each library in the Dataphor Server has two distinct
								version numbers associated with it. First, the version number of the library as
								contained in the definition of that library, and second, the currently loaded
								version of the library. </para> 
						  <para>When a library is registered, the loaded version of
								the library is set to the version number defined by the library, and the
								library is considered up-to-date. The loaded versions for each loaded library
								are saved with the catalog state as part of shut down processing in the
								Dataphor Server. Saving or backing-up the catalog will also save the loaded
								versions of each loaded library. </para> 
						  <para>When a library is loaded, the loaded version is also
								reconstructed from the saved catalog state. If the resulting loaded version of
								a library is less than the version number contained in the definition of the
								library, the Dataphor Server indicates that the library is out-of-date, and the
								
								<guimenuitem>Upgrade</guimenuitem> command becomes
								available on the context menu for the library.</para> 
						  <para>Selecting the 
								<guimenuitem>Upgrade</guimenuitem> command upgrades the
								library by applying each upgrade script with a version number greater than the
								loaded version, and less than or equal to the library version. After running
								each script, the loaded version of the library is set to the version number of
								the upgrade script.</para> 
						  <para>Each script is run within a transaction so that if
								anything goes wrong, the library is returned to the state it was in prior to
								running the upgrade, and the loaded version of the library remains at the last
								successful upgrade script version. Once the problem has been resolved, the
								upgrade process begins again until there are no more upgrade scripts to be run.
								</para> 
						  <para>At this point, the library is considered up-to-date,
								and the loaded version is set to the version number contained in the definition
								of the library. Once a library or set of libraries has been upgraded
								successfully, the catalog should be saved and backed-up as a safeguard against
								system failure.</para> 
					 </sect3> 
				</sect2> 
				<sect2 id="DUGP1Dataphoria-DataphorExplorer-Applications"> 
					 <title><indexterm><primary>Applications
									 Node</primary></indexterm><indexterm><primary>Dataphor
									 Explorer</primary><secondary>Applications
									 Node</secondary></indexterm>Applications</title> 
					 <para>The applications node is the root node for all
						  applications. Each configured application in the Dataphor Server will have an
						  application node that is a child of this node. The root applications node
						  simply allows for the addition of a new application, as well as a refresh
						  command for refreshing the list of applications.</para> 
					 <para>Each application node exposes functionality for managing
						  the properties of the application, deleting the application, and starting the
						  application.</para> 
					 <para>A Dataphor application consists of a set of required
						  libraries, a starting document, and various configuration settings which
						  control general behavior characteristics of the application and the Frontend
						  Clients running it.</para> 
					 <sect3 id="DUGP1CreatingaNewApplication"> 
						  <title><indexterm><primary>Creating a New
										  Application</primary></indexterm><indexterm><primary>Applications</primary><secondary>Creating
										  a New Application</secondary></indexterm>Creating a New Application</title> 
						  <para>By right-clicking on the applications node and
								selecting the 
								<guimenuitem>Add...</guimenuitem> command, users can
								create a new application. The following screen capture displays the application
								edit form:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphorExplorerApplicationEdit.bmp" width="439"
										  depth="534"/></imageobject> 
								</mediaobject></para> 
						  <para>The Description is the user-visible description of
								the application. When a Frontend Client connects to a Dataphor Server, the
								descriptions of the available applications are displayed, and the user selects
								which application to run.</para> 
						  <para>The Start Document is the entry point for the
								application. It is the first user-interface that the user running the
								application will see. All the functionality required by the application should
								be available from this starting point. Once the user closes this main form, the
								application is closed and the Frontend Client shuts down.</para> 
						  <para>Another way to create an application is by simply
								dragging a Dataphor Form document from the documents node of a library, or a
								Table node from the Tables node, and dropping it on the applications node. The
								application edit interface will be displayed with the Start Document set to the
								document expression required to load the form, or browse the table, and the
								library it is in as a required library of the application.</para> 
						  <sect4 id="DUGP1WindowsClientSettings"> 
								<title><indexterm><primary>Windows Client
												Settings</primary></indexterm><indexterm><primary>Creating a New
												Application</primary><secondary>Windows Client
												Settings</secondary></indexterm>Windows Client Settings</title> 
								<para>Applications can also configure certain general
									 settings about the behavior of the Microsoft Windows Frontend Client. These
									 settings are available from the 
									 <guimenu>Extensions | Windows Client Application Settings</guimenu>
									 command. The following screen capture shows the result of selecting this
									 command:</para> 
								<para> 
									 <mediaobject><imageobject><imagedata
												fileref="Images\DataphorExplorerWindowsClientSettingsEdit.bmp" width="326"
												depth="292"/></imageobject> 
									 </mediaobject></para> 
								<para>The Theme Document is a D4 expression that
									 specifies a theme document. Windows themes allow the look and feel of the
									 Windows Client to be changed. For more information on Windows themes, see the 
									 <ulink url="DDGPresentationLayer.html"
									  type="olinkb">Presentation Layer</ulink> part of the Dataphor Developer's
									 Guide.</para> 
								<para>The Default Form Icon Image is a D4 expression
									 that specifies an icon image to be used as the icon for all the forms in the
									 application.</para> 
								<para><indexterm><primary>Document Cache
												Size</primary></indexterm>The Document Cache Size controls the size of the
									 document caching system built into the Windows Client. Whenever a document is
									 requested in the Frontend Client, the cache is checked to see if an appropriate
									 version of the document has already been downloaded to the client. If so, that
									 version of the document is used rather than requesting it from the server.
									 </para> 
								<para>The default size for the document cache is 800
									 documents. Setting the cache size to 0 disables the cache. Each application
									 creates and maintains a different document cache.</para> 
								<para><indexterm><primary>Image Cache
												Size</primary></indexterm>The Image Cache Size controls the size of the image
									 caching system built into the Windows Client. Whenever an image is requested in
									 the Frontend Client, the cache is checked to see if the image has already been
									 downloaded to the client. If so, that image is used rather than requesting it
									 from the server. The default size for this cache is 60 images. Setting the
									 cache size to 0 disables the cache.</para> 
								<para>The difference between the two caches is that the
									 document cache still requires a network round-trip. The document request is
									 still made, but the version of the document in the cache is sent with the
									 document request. If the version of the document on the server is the same, the
									 server does not send the document with the response, and the client retrieves
									 the document from the cache.</para> 
								<para>In the image cache, no network round trip is
									 required. If the image has already been downloaded, it will be used. Because
									 this cache is not transparent (i.e. changes made to images on the server that
									 have already been requested by the client will not be re-requested), this cache
									 does not survive the application session. When the application is re-started,
									 the image cache will be rebuilt as images are downloaded.</para> 
								<para>The document cache, on the other hand, is
									 completely transparent and does survive the application session. When the
									 application is re-started, the same document cache is used from the last
									 application session.</para> 
						  </sect4> 
					 </sect3> 
				</sect2> 
				<sect2 id="DUGP1Dataphoria-DataphorExplorer-Security"> 
					 <title><indexterm><primary>Security
									 Node</primary></indexterm><indexterm><primary>Dataphor
									 Explorer</primary><secondary>Security
									 Node</secondary></indexterm>Security</title> 
					 <para>Dataphoria provides various user-interfaces for managing
						  the security model of the Dataphor Server. The Security node displays the Users
						  as child nodes:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphorExplorerSecurity.bmp" width="590"
									 depth="428"/></imageobject> 
						  </mediaobject></para> 
					 <para>Right-clicking on the Security node and selecting the 
						  <guimenuitem>Manage Users</guimenuitem> command displays
						  the following user-interface:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphorExplorerManageUsers.bmp" width="334"
									 depth="376"/></imageobject> 
						  </mediaobject></para> 
					 <para>This user-interface allows for the administration of all
						  users. Note that the capabilities available from this form still require an
						  appropriate authorization check. If a user with access to this form does not
						  have the rights to perform a particular operation, an error message will be
						  displayed.</para> 
					 <sect3 id="DUGP1Users"> 
						  <title><indexterm><primary>Users</primary></indexterm><indexterm><primary>Security</primary><secondary>Users</secondary></indexterm>Users</title>
						  
						  <para>The Manage Users form provides for the management of
								all users in the system. The following screen capture displays the User Edit
								form:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphorExplorerUserEdit.bmp" width="326"
										  depth="290"/></imageobject> 
								</mediaobject></para> 
						  <para>The User ID is the case-insensitive identifier for
								the user within the Dataphor Server. This is the User ID used when logging in
								to the server from the Dataphor Server Login form, or when using a configured
								alias.</para> 
						  <para>The Name is the display name for the user, and is not
								used by the Dataphor Server.</para> 
						  <para>Password is case-sensitive and the entry is masked.
								The Confirm Password entry is used to guarantee correctness of the password.
								The Password and Confirm Password must match before the form can be
								accepted.</para> 
						  <sect4 id="DUGP1DeviceUsers"> 
								<title><indexterm><primary>Device
												Users</primary></indexterm><indexterm><primary>Users</primary><secondary>Device
												Users</secondary></indexterm>Device Users</title> 
								<para>The 
									 <guimenuitem>Device Users...</guimenuitem> button
									 displays the list of device user mappings for the currently selected user.
									 These mappings provide deivce-specific authentication information for the user.
									 The settings provided for a user override the authentication settings for the
									 device. For more information on device users, refer to the Dataphor Developer's
									 Guide.</para> 
						  </sect4> 
						  <sect4 id="DUGP1UserRoles"> 
								<title><indexterm><primary>User
												Roles</primary></indexterm><indexterm><primary>Users</primary><secondary>User
												Roles</secondary></indexterm>User Roles</title> 
								<para>The 
									 <guimenuitem>Roles...</guimenuitem> button displays
									 the list of roles to which the the currently selected user belongs. For more
									 information on roles and other security primitives, refer to the Security
									 chapter later in this guide.</para> 
						  </sect4> 
					 </sect3> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1Dataphoria-DocumentsandDesigners"> 
				<title><indexterm><primary>Documents and
								Designers</primary></indexterm><indexterm><primary>Designers</primary></indexterm><indexterm><primary>Dataphoria</primary><secondary>Documents
								and Designers</secondary></indexterm>Documents and Designers</title> 
				<para>The Dataphoria IDE uses <emphasis>designers</emphasis> to
					 allow developers and administrators to create and manipulate
					 <emphasis>documents</emphasis>. A document is the logical manifestation of a
					 file within a library in the Dataphor Server. Each document has an associated
					 type that is used to determine the types of designers available for
					 manipulating the document.</para> 
				<para>Designers can also be used to create, open, and manipulate
					 physical files accessible through the standard file open and save dialogs of
					 the Microsoft Windows platform. In addition, files opened from the physical
					 environment can be saved as documents in the logical environment, and vice
					 versa. </para> 
				<para>Note that when a physical file is opened or saved, the
					 directory structure of the machine running the Dataphoria IDE is used. By
					 contrast, documents within libraries are always saved centrally through the
					 Dataphor Server.</para> 
				<sect2 id="DUGP1Dataphoria-DocumentsandDesigners-DocumentTypes"> 
					 <title><indexterm><primary>Document
									 Types</primary></indexterm><indexterm><primary>Documents and
									 Designers</primary><secondary>Document Types</secondary></indexterm>Document
						  Types</title> 
					 <para>Each document in the Dataphor Server has an associated
						  document type. The types of documents that Dataphoria can deal with are listed
						  in the 
						  <phrase role="code">Frontend.DocumentTypes</phrase> table.
						  Document types can be added to this table as needed to extend the capabilities
						  of Dataphoria. The following table lists the default document types
						  available:</para> 
					 <para> 
						  <table> 
						  <title><indexterm><primary>Document Types
										  Table</primary></indexterm>Document Types</title> 
						  <tgroup cols="4"><colspec colnum="1" colname="col1"
								colwidth=".15*"/><colspec colnum="2" colname="col2" colwidth="*"/><colspec
								colnum="3" colname="col3" colwidth=".5*"/><colspec colnum="4" colname="col4"
								colwidth="*"/><thead> 
									 <row><entry
										  colname="col1">ID</entry><entry colname="col2">Description</entry><entry
										  colname="col3">Data Type</entry><entry colname="col4">Default Designer</entry> 
									 </row></thead><tbody> 
									 <row><entry colname="col1">bmp</entry><entry
										  colname="col2">Bitmap</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry
										  colname="col1">cs</entry><entry colname="col2">C# Script</entry><entry
										  colname="col3"><phrase role="code">String</phrase></entry><entry
										  colname="col4">C# Editor</entry> 
									 </row> 
									 <row><entry
										  colname="col1">d4</entry><entry colname="col2">D4 Script</entry><entry
										  colname="col3"><phrase role="code">String</phrase></entry><entry
										  colname="col4">D4 Editor</entry> 
									 </row> 
									 <row><entry colname="col1">d4c</entry><entry
										  colname="col2">D4 Catalog (Deprecated)</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">D4 Editor</entry> 
									 </row> 
									 <row><entry colname="col1">dfd</entry><entry
										  colname="col2">Dataphor Form Document</entry><entry
										  colname="col3"><phrase role="code">String</phrase></entry><entry
										  colname="col4">Dataphor Form Designer</entry> 
									 </row> 
									 <row><entry colname="col1">dfdx</entry><entry
										  colname="col2">Customized Dataphor Form Document</entry><entry
										  colname="col3"><phrase role="code">String</phrase></entry><entry
										  colname="col4">Dataphor Customized Form Designer</entry> 
									 </row> 
									 <row><entry colname="col1">dft</entry><entry
										  colname="col2">Dataphor Frontend Theme</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">XML Editor</entry> 
									 </row> 
									 <row><entry colname="col1">dnt</entry><entry
										  colname="col2">Dataphor Node Types</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">XML Editor</entry> 
									 </row> 
									 <row><entry colname="col1">emf</entry><entry
										  colname="col2">Enhanced Metafile</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">exif</entry><entry
										  colname="col2">EXIF</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">gif</entry><entry
										  colname="col2">GIF</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">ico</entry><entry
										  colname="col2">Icon</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">jpg</entry><entry
										  colname="col2">JPEG</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">png</entry><entry
										  colname="col2">Portable Network Graphic</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">sql</entry><entry
										  colname="col2">SQL Script</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">SQL Editor</entry> 
									 </row> 
									 <row><entry colname="col1">tiff</entry><entry
										  colname="col2">TIFF</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">txt</entry><entry
										  colname="col2">Text</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">Text Editor</entry> 
									 </row> 
									 <row><entry
										  colname="col1">vb</entry><entry colname="col2">Visual Basic
												Script</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">Visual Basic
												Editor</entry> 
									 </row> 
									 <row><entry colname="col1">wmf</entry><entry
										  colname="col2">Windows Metafile</entry><entry colname="col3"><phrase
												role="code">Binary</phrase></entry><entry colname="col4">-</entry> 
									 </row> 
									 <row><entry colname="col1">xml</entry><entry
										  colname="col2">XML Document</entry><entry colname="col3"><phrase
												role="code">String</phrase></entry><entry colname="col4">XML Editor</entry> 
									 </row></tbody> 
						  </tgroup> 
						  </table></para> 
					 <para>Each document type has a Data Type which determines the
						  underlying type of the data the document contains. Only a designer that
						  supports dealing with the underlying data type of the document type can be
						  associated with a given document type.</para> 
				</sect2> 
				<sect2 id="DUGP1Dataphoria-DocumentsandDesigners-Designers"> 
					 <title><indexterm><primary>Designers</primary></indexterm><indexterm><primary>Documents
									 and
									 Designers</primary><secondary>Designers</secondary></indexterm>Designers</title>
					 
					 <para>There are several different designers provided in the
						  Dataphoria IDE to allow for the creation and manipulation of various types of
						  documents. The available designers are listed in the 
						  <phrase role="code">Frontend.Designers</phrase> table.
						  Designers can be added to this table to extend the capabilities of the
						  Dataphoria IDE. The following table lists the available designers: 
						  <table> 
						  <title><indexterm><primary>Designers</primary></indexterm>Designers</title>
						  
						  <tgroup cols="2"><colspec colnum="1" colname="col1"
								colwidth=".15*"/><colspec colnum="2" colname="col2" colwidth="*"/><thead> 
									 <row><entry
										  colname="col1">ID</entry><entry colname="col2">Description</entry> 
									 </row></thead><tbody> 
									 <row><entry
										  colname="col1">CS</entry><entry colname="col2">C# Script Editor</entry> 
									 </row> 
									 <row><entry
										  colname="col1">D4</entry><entry colname="col2">D4 Script Editor</entry> 
									 </row> 
									 <row><entry colname="col1">DFD</entry><entry
										  colname="col2">Dataphor Form Designer</entry> 
									 </row> 
									 <row><entry colname="col1">DFDX</entry><entry
										  colname="col2">Dataphor Customized Form Designer</entry> 
									 </row> 
									 <row><entry colname="col1">SQL</entry><entry
										  colname="col2">SQL Script Editor</entry> 
									 </row> 
									 <row><entry colname="col1">Text</entry><entry
										  colname="col2">Text Editor</entry> 
									 </row> 
									 <row><entry
										  colname="col1">VB</entry><entry colname="col2">Visual Basic Script
												Editor</entry> 
									 </row> 
									 <row><entry colname="col1">XML</entry><entry
										  colname="col2">XML Editor</entry> 
									 </row></tbody> 
						  </tgroup> 
						  </table></para> 
					 <para>When a designer is opened, it appears as a new tab within
						  the designer surface:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphoriaNewTextDesigner.bmp" width="648"
									 depth="454"/></imageobject> 
						  </mediaobject></para> 
					 <para>The file or document name is displayed as the caption of
						  the tab. If the contents of the designer are modified, an asterisk (*) is
						  displayed after the title.</para> 
					 <para>Each designer adds the following commands to the 
						  <guimenu>File</guimenu> menu and toolbar: 
						  <informaltable> 
								<tgroup cols="3"><colspec colnum="1" colname="col1"
									 colwidth="1*"/><colspec colname="col02" colnum="2" colwidth="1*"/><colspec
									 colnum="3" colname="col2" colwidth="2*"/><thead> 
										  <row><entry
												colname="col1">Command</entry><entry colname="col02">Shortcut</entry><entry
												colname="col2">Description</entry> 
										  </row></thead><tbody> 
										  <row><entry
												colname="col1"><guimenuitem>Save...</guimenuitem></entry><entry
												colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></entry><entry
												colname="col2">Saves the contents of the current designer.</entry> 
										  </row> 
										  <row><entry
												colname="col1"><guimenuitem>Save As File...</guimenuitem></entry><entry
												colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>S</keycap></keycombo></entry><entry
												colname="col2">Saves the contents of the current designer as a physical
													 file.</entry> 
										  </row> 
										  <row><entry
												colname="col1"><guimenuitem>Save As Document...</guimenuitem></entry><entry
												colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>D</keycap></keycombo></entry><entry
												colname="col2">Saves the contents of the current designer as a
													 document.</entry> 
										  </row> 
										  <row><entry
												colname="col1"><guimenuitem>Close</guimenuitem></entry><entry
												colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>F4</keycap></keycombo></entry><entry
												colname="col2">Closes the current designer, prompting to save if the contents
													 of the designer have been modified.</entry> 
										  </row></tbody> 
								</tgroup> 
						  </informaltable></para> 
					 <para>The contents of a designer can be saved as either a file
						  or document. If the designer was opened from a file or document, the 
						  <guimenuitem>Save</guimenuitem> command will simply update
						  the source file or document appropriately. If the designer was opened using the
						  
						  <guimenuitem>New...</guimenuitem> command, Dataphoria will
						  prompt for whether the contents should be saved as a file or a document:</para>
					 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphoriaFileOrDocumentEdit.bmp" width="326"
									 depth="181"/></imageobject> 
						  </mediaobject></para> 
					 <para>If the contents are saved as a file, a standard Save File
						  dialog is displayed to select the location of the file. If the contents are
						  saved as a document, the following edit form is displayed:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphoriaSaveAsDocumentEdit.bmp" width="397"
									 depth="270"/></imageobject> 
						  </mediaobject></para> 
					 <para>The Library Name specifies in which library the document
						  should be saved, and is defaulted to the current library for the session. The
						  Name specifies the name of the object and must be a valid D4 identifier. Note
						  that document names are case-sensitive. The Document Type lookup allows the
						  document to be saved as a given type. This list is limited to the document
						  types associated with the designer.</para> 
					 <sect3 id="DUGP1Text-XML"> 
						  <title><indexterm><primary>Text/XML/C#/VB</primary></indexterm><indexterm><primary>Designers</primary><secondary>Text/XML/C#/VB</secondary></indexterm>Text/XML/C#/VB</title>
						  
						  <para>The Text designer is a simple text editor, and can be
								used to edit all the string-based document types. The designer also exposes
								standard clipboard functionality and search and replace capabilities. These
								functions are available on the 
								<guimenuitem>Edit</guimenuitem> menu and toolbar. 
								<informaltable> 
									 <tgroup cols="3"><colspec colnum="1" colname="col1"
										  colwidth="1.00*"/><colspec colname="col02" colnum="2" colwidth="1*"/><colspec
										  colnum="3" colname="col2" colwidth="2.05*"/><thead> 
												<row><entry
													 colname="col1">Command</entry><entry colname="col02">Shortcut</entry><entry
													 colname="col2">Description</entry> 
												</row></thead><tbody> 
												<row><entry
													 colname="col1"><guimenuitem>Cut</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>X</keycap></keycombo></entry><entry
													 colname="col2">Removes the currently selected text and places it on the
														  clipboard.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Copy</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></entry><entry
													 colname="col2">Copies the currently selected text to the clipboard.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Paste</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo></entry><entry
													 colname="col2">Pastes the current contents of the clipboard at the current
														  cursor location.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Find...</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></entry><entry
													 colname="col2">Searches for a given text string within the contents of the
														  designer.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Replace...</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>H</keycap></keycombo></entry><entry
													 colname="col2">Replaces a given text string with another.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Find Next</guimenuitem></entry><entry
													 colname="col02"><keycap>F3</keycap></entry><entry colname="col2">Repeats the
														  last find operation.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Undo</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo> or
														  
														  <keycombo><keycap>Alt</keycap><keycap>BkSp</keycap></keycombo></entry><entry
													 colname="col2"/> 
												</row></tbody> 
									 </tgroup> 
								</informaltable></para> 
						  <para>Selecting the 
								<guimenuitem>Find</guimenuitem> command displays the
								following form:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphoriaFind.bmp" width="374" depth="161"/></imageobject> 
								</mediaobject></para> 
						  <para>Selecting the 
								<guimenuitem>Replace</guimenuitem> command displays the
								following form:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphoriaReplace.bmp" width="374" depth="208"/></imageobject> 
								</mediaobject></para> 
						  <para>In addition to standard text exiting and search and
								replace capabilities, the text editor supports the use of bookmarks for quickly
								navigating text documents. These commands are available on the 
								<guimenu>Edit</guimenu> menu and toolbar. 
								<informaltable> 
									 <tgroup cols="3"><colspec colnum="1" colname="col1"
										  colwidth="1*"/><colspec colnum="2" colname="col2" colwidth="1*"/><colspec
										  colnum="3" colname="col3" colwidth="2*"/><thead> 
												<row><entry
													 colname="col1">Command</entry><entry colname="col2">Shortcut</entry><entry
													 colname="col3">Description</entry> 
												</row></thead><tbody> 
												<row><entry
													 colname="col1"><guimenuitem>Toggle Bookmark</guimenuitem></entry><entry
													 colname="col2"><keycombo><keycap>Alt</keycap><keysym>Left Arrow</keysym></keycombo></entry><entry
													 colname="col3">Set or clear a bookmark on the current line.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Previous Bookmark</guimenuitem></entry><entry
													 colname="col2"><keycombo><keycap>Alt</keycap><keysym>Up Arrow</keysym></keycombo></entry><entry
													 colname="col3">Navigate to the previous bookmark.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Next Bookmark</guimenuitem></entry><entry
													 colname="col2"><keycombo><keycap>Alt</keycap><keysym>Down Arrow</keysym></keycombo></entry><entry
													 colname="col3">Navigate to the next bookmark.</entry> 
												</row></tbody> 
									 </tgroup> 
								</informaltable></para> 
						  <para>The text designer also enables printing by selecting
								the 
								<guimenuitem>Print...</guimenuitem> command from the 
								<guimenu>File</guimenu> menu, or by pressing 
								<keycombo><keycap>Ctrl</keycap><keycap>P</keycap></keycombo>.</para>
						  
						  <para>The XML, C#, and VB designers are simply text editors
								with syntax highlighting for XML, C#, or Visual Basic documents, respectively.
								All the editor functionality of the text designer is also available in the
								these designers.</para> 
					 </sect3> 
					 <sect3 id="DUGP1D4-SQL"> 
						  <title><indexterm><primary>D4/SQL</primary></indexterm><indexterm><primary>Designers</primary><secondary>D4/SQL</secondary></indexterm>D4/SQL</title>
						  
						  <para>The D4 and SQL designers are syntax-highlighting text
								editors with support for ad-hoc query execution against the Dataphor Server.
								All the editor functionality of the text designer is also available in the D4
								and SQL designers. The additional functionality is exposed on the 
								<guimenu>Script</guimenu> menu. 
								<informaltable> 
									 <tgroup cols="3"><colspec colnum="1" colname="col1"
										  colwidth="1*"/><colspec colname="col02" colnum="2" colwidth="1*"/><colspec
										  colnum="3" colname="col2" colwidth="2*"/><thead> 
												<row><entry
													 colname="col1">Command</entry><entry colname="col02">Shortcut</entry><entry
													 colname="col2">Description</entry> 
												</row></thead><tbody> 
												<row><entry
													 colname="col1"><guimenuitem>Select Block</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo></entry><entry
													 colname="col2">Selects the current script block.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Execute</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>E</keycap></keycombo></entry><entry
													 colname="col2">Executes the currently selected text, or the entire script if no
														  text is selected.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Prepare</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>R</keycap></keycombo></entry><entry
													 colname="col2">Checks the currently selected text, or the entire script if no
														  text is selected, for syntactic and semantic correctness by compiling the
														  script without executing it.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guimenuitem>Inject As Upgrade</guimenuitem></entry><entry
													 colname="col02"><keycombo><keycap>Ctrl</keycap><keycap>I</keycap></keycombo></entry><entry
													 colname="col2">Injects the currently selected text, or the entire script if no
														  text is selected, as an upgrade in the current library.</entry> 
												</row></tbody> 
									 </tgroup> 
								</informaltable></para> 
						  <para>The 
								<guimenuitem>Select Block</guimenuitem> command
								provides a convenient mechanism for selecting a predetermined block of the
								script. The D4 designer searches for the <emphasis>script block
								delimiter</emphasis> (<phrase role="code">//*</phrase>) before and after the
								current cursor position. If no script block delimiter is found before the
								cursor, the beginning of the script is considered the beginning of the script
								block, and similarly for the ending script block delimiter. Selecting this
								command when there are no script block delimiters in the script is effectively
								a select all command. The following screen capture shows the 
								<phrase role="code">Sample.Demo: Tables</phrase>
								document with the first script block selected:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphoriaD4Designer.bmp" width="648"
										  depth="454"/></imageobject> 
								</mediaobject></para> 
						  <para>In addition to being able to select the current
								delimited block, block delimiters can be used as navigation points using 
								<keycombo><keycap>Ctrl</keycap><keycap>,</keycap></keycombo>
								and 
								<keycombo><keycap>Ctrl</keycap><keycap>.</keycap></keycombo>
								to navigate to the previous and next block delimiter, respectively. Note that
								these keys also work in combination with the 
								<keycap>Shift</keycap> key to extend the currently
								selected block.</para> 
						  <para><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>/</keycap></keycombo>
								will insert a block delimiter on the current line.</para> 
						  <para>The 
								<guimenuitem>Execute</guimenuitem> command executes the
								currently selected block. If no text is currently selected, the entire script
								is executed. Any output generated by the execution is displayed in the Results
								window, and any errors or warnings that are generated are displayed in the
								Dataphoria warnings view:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphoriaD4DesignerError.bmp" width="648"
										  depth="454"/></imageobject> 
								</mediaobject></para> 
						  <para><keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>E</keycap></keycombo>
								will execute the current line.</para> 
						  <para>Double-clicking the error in the Warnings view will
								position the cursor at the point in the script where the error occurred.</para>
						  
						  <para>The 
								<guimenuitem>Prepare</guimenuitem> command checks the
								script for any syntax or compiler errors and displays them in the Warnings
								view.</para> 
						  <para>The 
								<guimenuitem>Inject As Upgrade</guimenuitem> command
								injects the script as an upgrade in the current library.</para> 
						  <sect4 id="DUGP1ErrorsandWarnings"> 
								<title><indexterm><primary>Errors and
												Warnings</primary></indexterm><indexterm><primary>D4/SQL</primary><secondary>Errors
												and Warnings</secondary></indexterm>Errors and Warnings</title> 
								<para>When a script is executed or prepared, the first
									 step is to parse the entire script and break it down into
									 <emphasis>batches</emphasis>. Each top-level statement in the script is a
									 single batch. Errors encountered during this process are called
									 <emphasis>syntax errors</emphasis>. If any syntax errors are found, the script
									 is rejected, and no compilation or execution is attempted.</para> 
								<para>Once the script has been broken down into
									 batches, each batch is compiled and executed separately. This allows objects
									 that are created in the script to be referenced by subsequent batches. Note
									 that each batch is a single scope, meaning that variables declared in one batch
									 will not be visible in subsequent batches. For example, the following script
									 will fail with an unknown identifier error: 
									 <programlisting><emphasis role="bold">var</emphasis> LInteger : Integer;
LInteger := 5;</programlisting>In order to reference the variable 
									 <phrase role="code">LInteger</phrase>, both
									 statements must be within the same batch. This can be accomplished using
									 <emphasis>blocks</emphasis> in the D4 language: 
									 <programlisting><emphasis role="bold">begin</emphasis>
	<emphasis role="bold">var</emphasis> LInteger : Integer;
	LInteger := 5;
<emphasis role="bold">end</emphasis>;</programlisting></para> 
								<para>Errors encountered while compiling a given batch
									 are called <emphasis>compiler errors</emphasis>, and may be either errors or
									 warnings. Errors will prevent the batch, and all subsequent batches from being
									 executed. Note that subsequent batches will still be compiled in order to
									 provide as much feedback as possible. Warnings will not prevent the batch from
									 being executed, and are simply reported to the Warnings view.</para> 
								<para>Errors encountered while executing a given batch
									 are called <emphasis>run-time errors</emphasis> and will prevent all subsequent
									 batches from running.</para> 
								<para>All errors reported by the Dataphor Server have
									 an associated <emphasis>severity</emphasis> that can be used to help diagnose
									 problems. The following table lists these severities: 
									 <table> 
									 <title><indexterm><primary>Error
													 Severities</primary></indexterm>Error Severities</title> 
									 <tgroup cols="2"><colspec colnum="1" colname="col1"
										  colwidth=".25*"/><colspec colnum="2" colname="col2" colwidth="*"/><thead> 
												<row><entry
													 colname="col1">Severity</entry><entry colname="col2">Description</entry> 
												</row></thead><tbody> 
												<row><entry
													 colname="col1">System</entry><entry colname="col2">Indicates that an unexpected
														  failure occurred in the Dataphor Server.</entry> 
												</row> 
												<row><entry
													 colname="col1">Environment</entry><entry colname="col2">Indicates that a
														  failure in the software or hardware environment of the Dataphor Server has
														  occurred such as a disk crash, network failure, or concurrency control
														  error.</entry> 
												</row> 
												<row><entry
													 colname="col1">Application</entry><entry colname="col2">Indicates that an
														  application level error has occurred, such as a syntax or compiler error, that
														  should be resolvable by the developer or administrator.</entry> 
												</row> 
												<row><entry
													 colname="col1">User</entry><entry colname="col2">Indicates that a user level
														  error has occurred, such as an integrity constraint violation, that should be
														  resolvable by the end-user.</entry> 
												</row></tbody> 
									 </tgroup> 
									 </table></para> 
						  </sect4> 
						  <sect4 id="DUGP1Results"> 
								<title><indexterm><primary>Results</primary></indexterm><indexterm><primary>D4/SQL</primary><secondary>Results</secondary></indexterm>Results</title>
								
								<para>The Results window displays any output generated
									 by the execution of the script. The <emphasis>select</emphasis> keyword is used
									 to indicate that a given batch should return results. Note that unlike SQL, the
									 select keyword in D4 is only valid as a statement, not within an expression.
									 Note also that only batches consisting of a single select statement will
									 actually return results to the Dataphoria IDE. A select statement contained
									 within a block is effectively invisible across the CLI. 
									 <programlisting>// semi-colon is only required if the
// script contains multiple statements:
<emphasis role="bold">select</emphasis> DocumentTypes; 

// !!Invalid use of select keyword within the in expression:
<emphasis role="bold">select</emphasis> DocumentTypes 
	<emphasis role="bold">where</emphasis> DataType_Name <emphasis role="bold">in</emphasis> 
		(<emphasis role="bold">select</emphasis> ScalarTypes[].Name);

// The following batch is valid, 
// but will not return any results:
<emphasis role="bold">begin</emphasis>
	<emphasis role="bold">select</emphasis> DocumentTypes;
<emphasis role="bold">end</emphasis>;</programlisting></para> 
								<para>The select statement is capable of returning not
									 only table-valued results, but scalar-valued results as well. For example, the
									 following statement is valid: 
									 <programlisting><emphasis role="bold">select</emphasis> 5</programlisting></para> 
								<para>Execution output includes statistics about the
									 amount of time the Dataphor Server spent in each phase of processing. The
									 statistics are reported as prepare time and execution time. Prepare time
									 includes compile time, optimization time, and binding time. In addition, the
									 total prepare and execute time for the entire script is displayed on the status
									 bar after each execution.</para> 
						  </sect4> 
					 </sect3> 
					 <sect3 id="DUGP1DFD-DFDX"> 
						  <title><indexterm><primary>DFD/X</primary></indexterm><indexterm><primary>Designers</primary><secondary>DFD/X</secondary></indexterm>DFD/X</title>
						  
						  <para>The Dataphor Form Designer provides a hierarchical
								representation of the nodes in a Dataphor Form. The designer attaches to a live
								instance of the form being designed. The form is embedded in the designer
								surface and behaves exactly as it would at run-time in an application. The
								designer can also be launched directly from a live form that is hosted within
								the Dataphoria IDE.</para> 
						  <sect4 id="DUGP1DataphorForms"> 
								<title><indexterm><primary>Dataphor
												Forms</primary></indexterm><indexterm><primary>DFD/X</primary><secondary>Dataphor
												Forms</secondary></indexterm>Dataphor Forms</title> 
								<para>A Dataphor Form is a client independent
									 description of the visual and non-visual elements of a user-interface. These
									 elements are all called <emphasis>nodes</emphasis> and are completely described
									 within the form document. This document is known as a Dataphor user-Interface
									 Language (DIL) document.</para> 
								<para>Dataphor Forms are capable of <emphasis>visual
									 form inheritance</emphasis> in that forms can be based on existing forms, and
									 introduce new elements and behaviors without affecting the parent form. Note
									 that the parent form need not be an actual document within a library. The base
									 form may be, and indeed often is, a derived user-interface requested from the
									 Dataphor Server, or even another customized form.</para> 
								<para>This inheritance mechanism allows for
									 customizations to be made to the results of the user-interface derivation
									 process, while still taking advantage of the dynamic aspects of derivation.
									 When the underlying application schema changes, derived user-interfaces will
									 reflect the changes. Because customized forms save only the changes, the
									 underlying form can change without affecting the customizations 
									 <footnote> 
										  <para>This assumes, of course, that the
												customizations do not reference elements that no longer exist in the new
												user-interface. For example, if a customization is made to the title of a
												column, and that column is subsequently removed from the application schema,
												the customization will be lost.</para> 
									 </footnote>.</para> 
								<para>The Frontend library exposes a wide variety of
									 user-interface elements in both visual and non-visual classes. Nodes are
									 available for managing the data connections with the server and attaching
									 data-aware controls to this managed connection. Visual elements are available
									 to control the layout and flow of the elements in the form as well as
									 miscellaneous nodes for performing various actions.</para> 
								<para>The Dataphor Form Document (DFD) document type is
									 a complete description of the form. The Dataphor Customized Form Document
									 (DFDX) document type is a Dataphor customized user-Interface Language (DILX)
									 document. Documents of this type begin by naming the parent form 
									 <footnote> 
										  <para>The internal mechanism is actually
												capable of multiple visual form inheritance, but the designer does not expose
												this functionality. Multiple visual form inheritance can be achieved by editing
												the DFDX document with the XML Editor and specifying any additional parent
												forms.</para> 
									 </footnote> to be used. The rest of the document
									 describes the differences between the parent form and the customized
									 form.</para> 
						  </sect4> 
						  <sect4 id="DUGP1DataphorFormDesigner"> 
								<title><indexterm><primary>Dataphor Form
												Designer</primary></indexterm><indexterm><primary>DFD/X</primary><secondary>Dataphor
												Form Designer</secondary></indexterm>Dataphor Form Designer</title> 
								<para>The following screen capture shows the Dataphor
									 Form Designer embedded in the designer surface of the Dataphoria IDE:</para> 
								<para> 
									 <mediaobject><imageobject><imagedata
												fileref="Images\DataphoriaFormDesigner.bmp" width="648"
												depth="454"/></imageobject> 
									 </mediaobject></para> 
								<para>The main designer consists of three parts: the
									 Palette, the Tree View, and the Properties view. In addition, the form being
									 designed is embedded into the designer surface:</para> 
								<para> 
									 <mediaobject><imageobject><imagedata
												fileref="Images\DataphoriaFormDesign.bmp" width="481"
												depth="190"/></imageobject> 
									 </mediaobject></para> 
								<para>Note that the Form Design window is shown here
									 undocked due to space considerations in the printed documentation. By default,
									 the Form Design is embedded directly into the Form Designer below all three of
									 the above interfaces.</para> 
								<sect5 id="DUGP1TreeView"> 
									 <title><indexterm><primary>Tree
													 View</primary></indexterm><indexterm><primary>Dataphor Form
													 Designer</primary><secondary>Tree View</secondary></indexterm>Tree View</title>
									 
									 <para>The tree view displays the contents of the
										  Dataphor Form in terms of the hierarchical organization of nodes in the form.
										  Each node has a unique name, a type that determines it's properties and
										  behavior, and may also have child nodes, depending on the type of the
										  node.</para> 
									 <para>Within the tree view, nodes can be
										  repositioned using standard drag and drop techniques. Nodes can be deleted
										  using the 
										  <guimenuitem>Edit | Delete</guimenuitem> menu
										  command, or by pressing the 
										  <keycap>Del</keycap> key. Nodes can also be
										  renamed by using the 
										  <guimenuitem>Edit | Rename</guimenuitem> menu
										  command, or by pressing the 
										  <keycap>F2</keycap> key.</para> 
									 <para>Pressing 
										  <keycap>F1</keycap> while in the tree view will
										  bring up the on-line documentation for the node type of the selected
										  node.</para> 
								</sect5> 
								<sect5 id="DUGP1Palette"> 
									 <title><indexterm><primary>Palette</primary></indexterm><indexterm><primary>Dataphor
													 Form
													 Designer</primary><secondary>Palette</secondary></indexterm>Palette</title> 
									 <para>The Palette displays the types of nodes
										  available in the designer. These nodes are grouped into categories. The default
										  categories are: 
										  <informaltable> 
												<tgroup cols="2"><colspec colnum="1"
													 colname="col1" colwidth=".25*"/><colspec colnum="2" colname="col2"
													 colwidth="*"/><thead> 
														  <row><entry
																colname="col1">Category</entry><entry colname="col2">Description</entry> 
														  </row></thead><tbody> 
														  <row><entry colname="col1">Static
																	 Elements</entry><entry colname="col2">Visual elements that provide organization
																	 and structure to the form, but are not data-aware.</entry> 
														  </row> 
														  <row><entry colname="col1">Data
																	 Elements</entry><entry colname="col2">Visual elements that are data-aware and
																	 require a 
																	 <phrase
																	 role="code">Source</phrase> node for data binding.</entry> 
														  </row> 
														  <row><entry
																colname="col1">Actions</entry><entry colname="col2">Non-Visual elements that
																	 perform various actions in the user-interface such as displaying forms, or
																	 posting modified data values.</entry> 
														  </row> 
														  <row><entry colname="col1">Non
																	 Visual</entry><entry colname="col2">Non-Visual elements such as menus, timers,
																	 and data connections.</entry> 
														  </row></tbody> 
												</tgroup> 
										  </informaltable></para> 
									 <para>Selecting a node in the palette changes the
										  cursor to the drop cursor (cross-hairs). The selected node can then be dropped
										  into the Tree view. As the cursor is moved over the nodes in the Tree view, a
										  target positioning line is drawn in the tree view to show where the node will
										  be placed in the hierarchy.</para> 
									 <para>Nodes can be added to the palette using the 
										  <guimenuitem>Configure | Designer Libraries</guimenuitem>
										  command. Selecting this command allows the set of libraries used by the Form
										  Designer to be configured. The node types registered in each library are added
										  to the Palette.</para> 
									 <para>Pressing 
										  <keycap>F1</keycap> while focused on the
										  Palette will bring up the on-line documentation for the type of node
										  selected.</para> 
								</sect5> 
								<sect5 id="DUGP1PropertiesView"> 
									 <title><indexterm><primary>Properties
													 View</primary></indexterm><indexterm><primary>Dataphor Form
													 Designer</primary><secondary>Properties View</secondary></indexterm>Properties
										  View</title> 
									 <para>The Properties view displays the properties
										  for the currently selected node. Each property can be edited by selecting the
										  property value in the right column of the properties view. Different types of
										  properties have different styles of editors.</para> 
									 <para>Most properties allow the value of the
										  property to be entered directly within the properties editor. Reference type
										  properties, such as Node references, use a dropdown list to allow the property
										  value to be selected from a list of valid values for the property. Some
										  properties expose a pop-up editor that allows the value of the property to be
										  edited with a visual interface.</para> 
									 <para>The bottom section of the properties view
										  displays a short description of the property.</para> 
									 <para>Pressing 
										  <keycap>F1</keycap> while focused on the
										  properties view will bring up the on-line documentation for the selected
										  property.</para> 
								</sect5> 
						  </sect4> 
					 </sect3> 
				</sect2> 
		  </sect1> 
	 </chapter> 
	 <chapter id="DUGP1DataphorService"> 
		  <title><indexterm><primary>Dataphor
						  Service</primary></indexterm>Dataphor Service</title> 
		  <para>The Dataphor Service allows the Dataphor Server to be run as a
				Microsoft Windows Service. When hosted as a service, the Dataphor Server can be
				started and stopped using the Services Manager in the Microsoft Windows
				environment, or by using the Service Configuration Utility. This utility also
				allows the various settings of the Dataphor Server to be configured for the
				service.</para> 
		  <para>This chapter is intended mainly for Dataphor administrators, but
				the material would be helpful for developers as well. The discussion assumes
				that the material covered in the first chapter is understood.</para> 
		  <sect1 id="DUGP1DAEWindowsService"> 
				<title><indexterm><primary>Dataphor
								Service</primary></indexterm><indexterm><primary>Dataphor
								Service</primary><secondary>Dataphor Service</secondary></indexterm>Dataphor
					 Service</title> 
				<para>The Dataphor Service hosts a Dataphor Server instance as a
					 Windows Service. The service listens on a configurable TCP port for requests
					 made through the .NET remoting infrastructure.</para> 
				<sect2 id="DUGP1StartingtheDataphorDAEWindowsService"> 
					 <title><indexterm><primary>Starting the Dataphor
									 Service</primary></indexterm>Starting the Dataphor Service</title> 
					 <para>The Dataphor Service can be started from within the
						  Windows service configuration manager snap-in, or from the Dataphor Service
						  Configuration Utility. Information about errors that occur while starting the
						  Dataphor Server appear in the "System" or "Dataphor" event logs. These logs can
						  be viewed using the Event Viewer in the Microsoft Windows environment. This
						  application is available on the 
						  <guisubmenu>Administrative Tools</guisubmenu> sub-menu of
						  the 
						  <guimenuitem>Start</guimenuitem> menu in Microsoft
						  Windows.</para> 
				</sect2> 
				<sect2 id="DUGP1InstallingtheServiceManually"> 
					 <title><indexterm><primary>Installing the Service
									 Manually</primary></indexterm><indexterm><primary>Dataphor
									 Service</primary><secondary>Installing
									 Manually</secondary></indexterm>Installing the Service Manually</title> 
					 <para>The Dataphor Service is installed automatically by the
						  Dataphor installer. However, it can also be installed manually by executing 
						  <command>DAEService.exe</command> with a parameter of 
						  <parameter class="command">-i</parameter> as
						  follows:</para> 
					 <para> 
						  <programlisting>DAEService.exe -i</programlisting> </para> 
					 <para>Once the service is installed, it will appear in the list
						  of items visible from the Windows service configuration snap-in in Windows. The
						  service can then be managed like any other Microsoft Windows Service, or using
						  the Dataphor Service Configuration Utility.</para> 
					 <para>Installing the Dataphor service creates the files in the
						  following table.</para> 
					 <para> 
						  <informaltable> 
								<tgroup cols="2">
									 <colspec colwidth="*" colname="col1" colnum="1"/>
									 <colspec colwidth="*" colname="col2" colnum="2"/> 
									 <thead> 
										  <row> 
												<entry colname="col1"> 
													 <para>File</para> </entry> 
												<entry colname="col2"> 
													 <para>Description</para> </entry> 
										  </row> 
									 </thead> 
									 <tbody> 
										  <row> 
												<entry colname="col1"> 
													 <para>DAEService.InstallLog</para>
													 </entry> 
												<entry colname="col2"> 
													 <para>Contains the results of
														  attempting to install or uninstall the Dataphor Service. If there are errors,
														  this information may help in correcting problems with the Dataphor service
														  installation.</para> </entry> 
										  </row> 
										  <row> 
												<entry colname="col1"> 
													 <para>DAEService.InstallState</para>
													 </entry> 
												<entry colname="col2"> 
													 <para>Contains information used by the
														  Dataphor service. This file should not be modified.</para> </entry> 
										  </row> 
										  <row> 
												<entry colname="col1"> 
													 <para>InstallUtil.InstallLog</para>
													 </entry> 
												<entry colname="col2"> 
													 <para>Contains the log of actions
														  performed during the Dataphor Service install or uninstall process.</para>
													 </entry> 
										  </row> 
									 </tbody> 
								</tgroup> 
						  </informaltable> </para> 
				</sect2> 
				<sect2
				id="DUGDataphorService-DataphorService-InstallingMultipleInstancesoftheService">
					 
					 <title><indexterm><primary>Installing Multiple Instances of the
									 Service</primary></indexterm><indexterm><primary>Dataphor
									 Service</primary><secondary>Installing Multiple
									 Instances</secondary></indexterm>Installing Multiple Instances of the
						  Service</title> 
					 <para>The Dataphor Server Service can be configured to allow
						  multiple instances running side by side on the same computer. To configure
						  this: 
						  <itemizedlist> 
								<listitem> 
									 <para>Make a copy of the service directory; only
										  one service may run in a single directory. For the copied instance (not the
										  directory installed by Dataphor), do the following:</para> 
								</listitem> 
								<listitem> 
									 <para>From a command prompt, navigate to the
										  directory (copy of original) and run the following: 
										  <programlisting>daeservice -i name "Alphora Dataphor v2.0 Instance 2"</programlisting> This should install an additional instance of Dataphor as a
										  Windows Service.</para> 
								</listitem> 
								<listitem> 
									 <para>Copy the 
										  <phrase>DAEService.config</phrase> file from
										  the 
										  <phrase>\Documents and Settings\All
												Users\Application Data\Alphora\Dataphor\2.0</phrase> directory into the new
										  service directory.</para> 
								</listitem> 
								<listitem> 
									 <para>Edit the new 
										  <phrase>DAEService.config</phrase> file
										  appropriately. This configuration file <emphasis>must</emphasis> point to a
										  different library and catalog directory than any other Dataphor Server service.
										  If desired, the library and catalog directory from the source service can be
										  copied for this instance. The port number must also be unique.</para> 
								</listitem> 
								<listitem> 
									 <para>Edit the 
										  <phrase>daeservice.exe.config</phrase> file and
										  add the following within the 
										  <phrase>&lt;configuration&gt;...</phrase>
										  elements: 
										  <programlisting>&lt;configSections&gt;
		&lt;section name="dataphor" type="System.Configuration.SingleTagSectionHandler" /&gt;
	&lt;/configSections&gt;
	&lt;dataphor configurationFileName="C:\...\Service2\DAEService.config" /&gt;</programlisting> The 
										  <phrase>configurationFileName</phrase>
										  attribute should point to the target file just created.</para> 
								</listitem> 
								<listitem> 
									 <para>Start the service. You could also test the
										  service without starting it first, by running the following on the command line
										  (after changing to the directory in question): 
										  <programlisting>daeservice -run name "Alphora Dataphor v2.0 Instance 2"</programlisting></para> 
								</listitem> 
						  </itemizedlist></para> 
				</sect2> 
				<sect2 id="DUGP1UninstallingtheServiceManually"> 
					 <title><indexterm><primary>Uninstalling the Service
									 Manually</primary></indexterm><indexterm><primary>Dataphor
									 Service</primary><secondary>Uninstalling the Service
									 Manually</secondary></indexterm>Uninstalling the Service Manually</title> 
					 <para>The Dataphor Service can be manually uninstalled from the
						  Windows services list by running 
						  <command>DAEService.exe</command> with the 
						  <parameter class="command">-u</parameter> parameter as
						  follows:</para> 
					 <para> 
						  <programlisting>DAEService.exe -u </programlisting> </para> 
					 <para>If there is an error during the install or uninstall
						  process, the error message will be displayed to the standard output.</para> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1ServiceConfigurationUtility"> 
				<title><indexterm><primary>Service Configuration
								Utility</primary></indexterm><indexterm><primary>Dataphor
								Service</primary><secondary>Service Configuration
								Utility</secondary></indexterm>Service Configuration Utility</title> 
				<para>The Service Configuration Utility is a Microsoft .NET
					 application that can be used to start and stop the Dataphor Service, as well as
					 configure the various settings of the Dataphor Server. The application runs as
					 a background process in the system tray. Clicking on this icon will display the
					 main form of the Service Configuration Utility.</para> 
				<sect2 id="DUGConfiguringDataphorService"> 
					 <title><indexterm><primary>Configuring the Dataphor
									 Service</primary></indexterm><indexterm><primary>Service Configuration
									 Utility</primary><secondary>Configuring the Dataphor
									 Service</secondary></indexterm>Configuring the Dataphor Service</title> 
					 <para> 
						  <indexterm><primary>Dataphor
									 Service</primary><secondary>Configuration
									 utility</secondary></indexterm><indexterm><primary>Dataphor Service
									 Configuration Utility</primary></indexterm></para> 
					 <sect3 id="DUGP1ConfiguringtheDataphorService"> 
						  <title><indexterm><primary>Configuring the Dataphor
										  Service</primary></indexterm><indexterm><primary>Configuring the Dataphor
										  Service</primary><secondary>Configuring the Dataphor
										  Service</secondary></indexterm>Configuring the Dataphor Service</title> 
						  <para> The following screen capture displays the main form
								of the Dataphor Service Configuration Utility:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphorServiceConfigurationUtilityMainForm.bmp" width="250"
										  depth="183"/></imageobject> 
								</mediaobject></para> 
						  <para> To configure the service, click on the 
								<guibutton>Configure</guibutton> button to display the
								following form:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\DataphorServiceConfigurationUtilityConfigurationEdit.bmp"
										  width="312" depth="293"/></imageobject> 
								</mediaobject></para> 
						  <para> The following table describes each configuration
								option:</para> 
						  <para> 
								<informaltable> 
									 <tgroup cols="2">
										  <colspec colwidth=".25*" colname="col1" colnum="1"/>
										  <colspec colwidth="*" colname="col2" colnum="2"/> 
										  <thead> 
												<row> 
													 <entry colname="col1">Property</entry> 
													 <entry
													 colname="col2">Description</entry> 
												</row> 
										  </thead> 
										  <tbody> 
												<row> 
													 <entry colname="col1">Port #</entry> 
													 <entry colname="col2"> 
														  <para> Defines the TCP port number
																used by the Dataphor Server instance to listen for connections. The default
																port number is 8061.</para> 
														  <para> Because there may be
																multiple instances of the Dataphor Server on a given machine, each instance
																must listen on a unique port.</para> </entry> 
												</row> 
												<row> 
													 <entry colname="col1">Catalog
														  Directory</entry> 
													 <entry colname="col2"> 
														  <para>The catalog directory setting
																specifies a directory that the Dataphor Server instance will use to save and
																load catalog information. If the catalog directory is unspecified, the Dataphor
																Server instance will not persist catalog information, and will start with an
																empty catalog. Otherwise, the Dataphor Server will use the directory to persist
																the catalog.</para> </entry> 
												</row> 
												<row><entry colname="col1">Catalog Store
														  Database Name</entry><entry colname="col2"> 
														  <para>The Catalog Store Database
																Name indicates the name for the file used to store the database
																catalog.</para></entry> 
												</row> 
												<row><entry colname="col1">Catalog Store
														  Password</entry><entry colname="col2"> 
														  <para>The Catalog Store Password
																indicates the password to be used for authentication with the file used to
																store the database catalog.</para></entry> 
												</row> 
												<row> 
													 <entry colname="col1">Library
														  Directory</entry> 
													 <entry colname="col2"> 
														  <para>The library directory setting
																specifies the directory or directories that the Dataphor Server instance will
																use to search for available libraries. Each sub-directory of these directories
																with the appropriate files will be considered an available library in the
																Dataphor Server. If the specified catalog directory also indicates that a given
																library was loaded when the server was last shut down, the library will be
																loaded at startup.</para> </entry> 
												</row> 
												<row><entry colname="col1">Tracing
														  Enabled</entry><entry colname="col2"> 
														  <para>Indicates whether internal
																tracing of server events is enabled.</para></entry> 
												</row> 
												<row><entry colname="col1">Log
														  Errors</entry><entry colname="col2"> 
														  <para>Indicates whether the
																Dataphor Server will log exceptions that are returned to clients across the CLI
																boundary.<!-- For more information on trace events and error logging, refer to the
																Troubleshooting chapter of the Administrator's part of this
																manual.--></para></entry> 
												</row> 
										  </tbody> 
									 </tgroup> 
								</informaltable> </para> 
						  <para> Accepting the configuration by clicking 
								<guibutton>OK</guibutton> saves the configuration
								information. Note that configuration options cannot be changed while the
								Dataphor Server is running. The configuration information will be saved, and a
								message will be displayed indicating that the new configuration will not be
								used until the Dataphor Server is re-started.</para> 
					 </sect3> 
					 <sect3 id="DUGP1OtherOptions"> 
						  <title><indexterm><primary>Other
										  Options</primary></indexterm><indexterm><primary>Configuring the Dataphor
										  Service</primary><secondary>Other Options</secondary></indexterm>Other
								Options</title> 
						  <para> The following table lists the options available for
								the Dataphor Service: 
								<informaltable> 
									 <tgroup cols="2">
										  <colspec colwidth="*" colname="col1" colnum="1"/>
										  <colspec colwidth="*" colname="col2" colnum="2"/> 
										  <thead> 
												<row> 
													 <entry colname="col1">Option</entry> 
													 <entry
													  colname="col2">Description</entry> 
												</row> 
										  </thead> 
										  <tbody> 
												<row> 
													 <entry colname="col1">Auto
														  Start</entry> 
													 <entry colname="col2"> Determines
														  whether the Dataphor Service will start automatically when Microsoft Windows
														  starts. </entry> 
												</row> 
												<row> 
													 <entry colname="col1">Show Icon in the
														  System Tray (Options Menu)</entry> 
													 <entry colname="col2"> Determines
														  whether to display the Dataphor Service Configuration Utility icon in the
														  system tray. </entry> 
												</row> 
												<row> 
													 <entry colname="col1">Run Configuration
														  Utility at Startup (Options Menu)</entry> 
													 <entry colname="col2"> Determines
														  whether to start the Dataphor Service Configuration Utility when Windows
														  starts. </entry> 
												</row> 
										  </tbody> 
									 </tgroup> 
								</informaltable></para> 
					 </sect3> 
					 <sect3 id="DUGP1Troubleshooting"> 
						  <title><indexterm><primary>Troubleshooting</primary></indexterm><indexterm><primary>Configuring
										  the Dataphor
										  Service</primary><secondary>Troubleshooting</secondary></indexterm>Troubleshooting</title>
						  
						  <para> The following table lists some common problems and
								remedies. </para> 
						  <para> 
								<indexterm><primary>Dataphor
										  Service</primary><secondary>Troubleshooting</secondary></indexterm> 
								<informaltable> 
									 <tgroup cols="2">
										  <colspec colwidth="*" colname="col1" colnum="1"/>
										  <colspec colwidth="*" colname="col2" colnum="2"/> 
										  <thead> 
												<row> 
													 <entry colname="col1">Problem</entry> 
													 <entry
													  colname="col2">Reason/Suggestions</entry> 
												</row> 
										  </thead> 
										  <tbody> 
												<row> 
													 <entry colname="col1"> 
														  <para><inlinemediaobject><imageobject><imagedata
																		  fileref="images/Unavailable.gif" width="48"
																		  depth="48"/></imageobject></inlinemediaobject> Start, Stop, and Auto Start
																options are grayed and cannot be selected. </para> </entry> 
													 <entry colname="col2"> 
														  <para> The Dataphor Service has not
																been installed. </para> 
														  <para> Install the Dataphor
																Service, see 
																<ulink
																 url="DUGP1InstallingtheServiceManually.html">Installing the Dataphor
																	 Service</ulink>. </para> </entry> 
												</row> 
												<row> 
													 <entry colname="col1"> 
														  <para> 
																<inlinemediaobject><imageobject><imagedata
																		  fileref="images/Stopped.gif" width="48"
																		  depth="48"/></imageobject></inlinemediaobject> Dataphor clients cannot connect
																to the server. </para> </entry> 
													 <entry colname="col2"> 
														  <para> Server is stopped.</para> 
														  <para> Start the server.</para> 
														  <para> If the server is running and
																clients still cannot connect, see the next item. </para> 
														  <para> If the server cannot be
																started (request times out) try changing the port setting of the server.
																</para> </entry> 
												</row> 
												<row> 
													 <entry colname="col1"> 
														  <para><inlinemediaobject><imageobject><imagedata
																		  fileref="images/Running.gif" width="48"
																		  depth="48"/></imageobject></inlinemediaobject> Dataphor clients cannot connect
																to the server. </para> </entry> 
													 <entry colname="col2"> 
														  <para> Server configuration does
																not match connect request from client.</para> 
														  <para> Verify the configuration of
																the server and that the client requests match the port number and host name of
																the Dataphor Server.</para> </entry> 
												</row> 
										  </tbody> 
									 </tgroup> 
								</informaltable></para> 
						  <!--<para>For more information on troubleshooting Dataphor,
								refer to the 
								<ulink url="DUGP3Troubleshooting.html">Troubleshooting</ulink> chapter of the
								Administrator's part of this manual.</para>-->
					 </sect3> 
				</sect2> 
		  </sect1> 
	 </chapter> 
	 <chapter id="DUGP3Security"> 
		  <title><indexterm><primary>Security</primary></indexterm><indexterm><primary>Security</primary><secondary>Administration</secondary></indexterm><indexterm><primary>Administration</primary><secondary>Security</secondary></indexterm><indexterm><primary>Dataphor</primary><secondary>Security</secondary></indexterm>Security</title>
		  
		  <para>The Dataphor Server provides a complete role-based security model
				for controlling access to the applications and resources defined in the server.
				In addition to allowing access control to objects defined in the system
				catalog, the security system allows developers to define application-specific
				rights that are managed in the same way. This allows a flexible and powerful
				security model that applications can not only extend, but query to dynamically
				control user-interface appearance based on security context.</para> 
		  <section id="DUGP3Security-SecurityPrimitives"> 
				<title><indexterm><primary>Security
								Primitives</primary></indexterm><indexterm><primary>Security</primary><secondary>Security
								Primitives</secondary></indexterm>Security Primitives</title> 
				<para>There are three basic primitives in the Dataphor security
					 model: 
					 <itemizedlist> 
						  <listitem> 
								<para>Users</para> 
						  </listitem> 
						  <listitem> 
								<para>Rights</para> 
						  </listitem> 
						  <listitem> 
								<para>Roles</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>In general, rights and roles will be defined by the
					 application developer as part of the application. Ideally, roles will be made
					 up of non-overlapping groups of rights. Users can then be assigned to be
					 members of the appropriate set of roles by the system administrator. The
					 following sections discuss each type of object in detail.</para> 
				<section id="DUGP3SecurityPrimitives-Users"> 
					 <title><indexterm><primary>Users</primary></indexterm><indexterm><primary>Security
									 Primitives</primary><secondary>Users</secondary></indexterm>Users</title> 
					 <para>A user is the basic unit of authentication in the
						  Dataphor Server. There are two system-defined users:
						  <emphasis>System</emphasis> and <emphasis>Admin</emphasis>. The System user is
						  used by the Dataphor Server to perform system-level functions. Only the
						  Dataphor Server can login as the System user. The Admin user is the central
						  administrative user for the Dataphor Server. It is not possible to revoke any
						  right from the System or Admin users. For this reason, care should be taken to
						  guard access to the Admin user, as anyone logging in with that user will have
						  unrestricted access to the objects in the Dataphor Server.</para> 
				</section> 
				<section id="DUGP3SecurityPrimitives-Rights"> 
					 <title><indexterm><primary>Rights</primary></indexterm><indexterm><primary>Security
									 Primitives</primary><secondary>Rights</secondary></indexterm>Rights</title> 
					 <para>A right is the basic unit of permission in the Dataphor
						  Server. Any operation which must be protected has an associated right. Rights
						  are then assigned to users and roles to allow users access to the various
						  objects and functions of the Dataphor Server. A right can be granted or
						  revoked, and a right assignment can be reverted. The Dataphor Server defines
						  several system rights which protect basic operations such as DDL statements.
						  Whenever a catalog object is created, the rights necessary to protect
						  operations on that object are also created. For example, creating a table
						  creates select, insert, update, and delete rights for that table, as well as
						  alter and drop rights. Although rights are not catalog objects <emphasis>per
						  se</emphasis>, they are part of the library in which they were defined.</para> 
					 <para>The Dataphor Server defines the following system rights
						  that are not associated with any catalog object: 
						  <itemizedlist> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateType</phrase> - Protects invocation of the create type
										  statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateTable</phrase> - Protects invocation of the create
										  table statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateView</phrase> - Protects invocation of the create view
										  statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateOperator</phrase> - Protects invocation of the create
										  operator and create aggregate operator statements.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateDevice</phrase> - Protects invocation of the create
										  device statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateConstraint</phrase> - Protects invocation of the
										  create constraint statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateReference</phrase> - Protects invocation of the create
										  reference statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateRole</phrase> - Protects invocation of the create role
										  statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateRight</phrase> - Protects invocation of the create
										  right statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateReference</phrase> - Protects invocation of the create
										  reference statement.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CreateUser</phrase> - Protects the creation of users.</para>
									 
								</listitem> 
								<listitem> 
									 <para><phrase role="code">System.AlterUser</phrase>
										  - Protects the administration of users.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase role="code">System.DropUser</phrase>
										  - Protects the deletion of users.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.MaintainSystemDeviceUsers</phrase> - Protects maintenance of
										  the system device user mapping for devices. Without this right, a user cannot
										  specify the device-specific credentials for the system user for a given
										  device.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.MaintainUserSessions</phrase> - Protects configuration of
										  user sessions through the 
										  <phrase role="code">System.Sessions</phrase>
										  and 
										  <phrase role="code">System.Processes</phrase>
										  catalog tables.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.HostImplementation</phrase> - Protects the use of host
										  implementation structures. Without this right, a user cannot specify that a
										  given D4 structure is implemented by a specified host implementation
										  structure.</para> 
								</listitem> 
						  </itemizedlist></para> 
				</section> 
				<section id="DUGP3SecurityPrimitives-Roles"> 
					 <title><indexterm><primary>Roles</primary></indexterm><indexterm><primary>Security
									 Primitives</primary><secondary>Roles</secondary></indexterm>Roles</title> 
					 <para>A role is a group of right assignments in the Dataphor
						  Server. The Dataphor Server defines several system roles which it uses to
						  manage basic system rights. Users can be assigned to any number of roles. When
						  a user is a member of a role, the right assignments in that role are applied to
						  the user. A role is a catalog object with rights and ownership.</para> 
					 <para>The Dataphor Server defines the following roles: 
						  <itemizedlist> 
								<listitem> 
									 <para><phrase
										  role="code">System.Admin</phrase></para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.User</phrase></para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">System.CatalogUser</phrase></para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">Security.SecurityUser</phrase></para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">Frontend.User</phrase></para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">Frontend.Developer</phrase></para> 
								</listitem> 
						  </itemizedlist></para> 
				</section> 
		  </section> 
		  <section id="DUGP3Security-SecurityManagement"> 
				<title><indexterm><primary>Security
								Management</primary></indexterm><indexterm><primary>Security</primary><secondary>Security
								Management</secondary></indexterm>Security Management</title> 
				<para>Management of users in the Dataphor Server is controlled
					 through the security rights for creating, altering and dropping users, as well
					 as the execute rights for the various security management operators.</para> 
				<para>The following operations are available to any given user of
					 the Dataphor Server: 
					 <itemizedlist> 
						  <listitem> 
								<para>Create, Alter and Drop users, so long as the
									 appropriate rights have been granted.</para> 
						  </listitem> 
						  <listitem> 
								<para>Manage right assignments in all roles owned by
									 the user.</para> 
						  </listitem> 
						  <listitem> 
								<para>Manage all catalog objects owned by the
									 user.</para> 
						  </listitem> 
					 </itemizedlist></para> 
		  </section> 
		  <section id="DUGP3Security-CatalogObjectOwnership"> 
				<title><indexterm><primary>Catalog Object
								Ownership</primary></indexterm><indexterm><primary>Security</primary><secondary>Catalog
								Object Ownership</secondary></indexterm>Catalog Object Ownership</title> 
				<para>Catalog object ownership specifies which user is responsible
					 for managing a particular object. Whenever a catalog object is created it is
					 owned by the user that created it. All rights for the object are implicitly
					 granted to the owner of the object. The owner of an object can be changed using
					 the 
					 <phrase role="code">SetObjectOwner</phrase> operator.</para> 
		  </section> 
		  <section id="DUGP3Security-DeterminationofRights"> 
				<title><indexterm><primary>Determination of
								Rights</primary></indexterm><indexterm><primary>Security</primary><secondary>Determination
								of Rights</secondary></indexterm>Determination of Rights</title> 
				<para>All rights for a given object are implicitly granted to the
					 owner of the object. For example, the owner of a table can perform any
					 operation against that table. Whether or not a given user has been granted a
					 right is determined by the following rules: 
					 <itemizedlist> 
						  <listitem> 
								<para>If the user has an explicit assignment for the
									 right, the right is granted or revoked according to the right
									 assignment.</para> 
						  </listitem> 
						  <listitem> 
								<para>If the roles which the user is a member of have
									 an explicit assignment for the right, the right is granted or revoked according
									 to the most restrictive right assignment of any role.</para> 
						  </listitem> 
						  <listitem> 
								<para>If the user is the owner of the right, or the
									 catalog object the right is associated with, the right is considered
									 granted.</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>According to these rules, the following points can be made: 
					 <itemizedlist> 
						  <listitem> 
								<para>An explicit right assignment for the user will
									 override any right assignment made on any role that the user is a member
									 of.</para> 
						  </listitem> 
						  <listitem> 
								<para>If the roles that a user is a member of result in
									 multiple assignments for the same right, the most restrictive right assignment
									 is used.</para> 
						  </listitem> 
						  <listitem> 
								<para>It is possible to revoke the rights for an object
									 that a given user owns by using an explicit right assignment.</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>Rights determination is a compile-time function of the
					 Dataphor Server. This means that rights determination takes place when an
					 object is created, not when it is accessed. For example, if a view is created
					 which accesses a table that the user creating the view has access to, and
					 access permissions for the view are subsequently granted to a user that does
					 not have access to the table, the view will still function correctly. In other
					 words, operators and views provide an abstraction over the security mechanism
					 of the Dataphor Server.</para> 
				<para>Note also that this means that execute rights for event
					 handlers do not need to be granted, so long as the appropriate modification
					 right has been granted for the table in question, the event handler is
					 considered part of the table definition for the purposes of security
					 management.</para> 
				<para>Because rights determination is done at compile-time, changes
					 to the rights of objects referenced by views and operators forces a recompile
					 of these objects. This update is handled automatically by the Dataphor
					 Server.</para> 
		  </section> 
		  <section id="DUGP3Security-CatalogObjectRights"> 
				<title><indexterm><primary>Catalog Object
								Rights</primary></indexterm><indexterm><primary>Security</primary><secondary>Catalog
								Object Rights</secondary></indexterm>Catalog Object Rights</title> 
				<para>Whenever a catalog object is created in the DAE, an
					 appropriate set of rights is also created to protect access to the object. The
					 rights created for each object type are as follows: 
					 <itemizedlist> 
						  <listitem> 
								<para>Type - Alter, Drop</para> 
						  </listitem> 
						  <listitem> 
								<para>Operator - Alter, Drop, Execute</para> 
						  </listitem> 
						  <listitem> 
								<para>Table or View - Alter, Drop, Select, Insert,
									 Update, Delete</para> 
						  </listitem> 
						  <listitem> 
								<para>Device - Alter, Drop, Read, Write, CreateStore,
									 AlterStore, DropStore, Reconcile, MaintainUsers</para> 
						  </listitem> 
						  <listitem> 
								<para>Constraint - Alter, Drop</para> 
						  </listitem> 
						  <listitem> 
								<para>Reference - Alter, Drop</para> 
						  </listitem> 
						  <listitem> 
								<para>Role - Alter, Drop</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>The created right is named by concatenating the name of the
					 object with the name of the right. For example, a table named 
					 <phrase role="code">Employee</phrase> will have a right named 
					 <phrase role="code">EmployeeSelect</phrase>.</para> 
		  </section> 
		  <section id="DUGP3Security-ManagingSecurity"> 
				<title><indexterm><primary>Managing
								Security</primary></indexterm><indexterm><primary>Security</primary><secondary>Managing
								Security</secondary></indexterm>Managing Security</title> 
				<para>The Dataphor Server exposes all the functionality for
					 managing the security system through the Security API. The D4 language then
					 includes several shorthands for various calls in this API, and finally, the
					 Dataphoria environment exposes the functionality visually using the 
					 <phrase role="code">Security</phrase> library.</para> 
				<para>For information on the Security API, refer to 
					 <ulink url="O-System.SecurityOperartors.html"
					 type="olinkb">Security Operators</ulink> in the System Library
					 Reference.</para> 
				<para>For information on the Security statements of D4, refer to 
					 <ulink url="D4LGCatalogElements-Security.html"
					 type="olinkb">Security</ulink> in the Dataphor Developer's Guide.</para> 
				<!--<para>For information on the Visual Interfaces in Dataphoria, refer
					 to the 
					 <ulink url="DUGP1Dataphoria.html">Dataphoria User's
						  Guide</ulink> in Part I of this manual.</para>-->
		  </section> 
	 </chapter> 
	 <chapter id="DUGP1UsingDataphorApplications"> 
		  <title><indexterm><primary>Using Dataphor
						  Applications</primary></indexterm><indexterm><primary>Using
						  Dataphor</primary><secondary>Using Dataphor
						  Applications</secondary></indexterm><indexterm><primary>Dataphor
						  Applications</primary></indexterm><indexterm><primary>Frontend
						  Clients</primary></indexterm>Using Dataphor Applications</title> 
		  <para>This chapter discusses the Dataphor Frontend Clients that provide
				the user-interface for Dataphor Applications. Dataphor applications typically
				have at least a Microsoft Windows user-interface, and a Web user-interface.
				Regardless of the style of user-interface, the overall look-and-feel of the
				application is the same.</para> 
		  <para>This chapter is intended to be read by anyone using a Dataphor
				application. No prior knowledge of the Dataphor platform is assumed in the
				material covered.</para> 
		  <sect1
		  id="DUGP1UsingDataphorApplications-StartingaDataphorApplication"> 
				<title><indexterm><primary>Starting a Dataphor
								Application</primary></indexterm><indexterm><primary>Using Dataphor
								Applications</primary><secondary>Starting a Dataphor
								Application</secondary></indexterm>Starting a Dataphor Application</title> 
				<para>The first step in running a Dataphor Application is to start
					 the desired Frontend Client. This can be accomplished in a variety of ways,
					 depending on the client to be started, and the way it is installed. A typical
					 Windows Client installation will add the Windows Client icon to the 
					 <guimenuitem>Start | Programs</guimenuitem> menu in the
					 Microsoft Windows environment. For the Web Client, the most common scenario
					 will simply be entering the appropriate URL into the Address window of a Web
					 Browser.</para> 
				<para>For more information on what client should be used, and how
					 it should be started, consult your Dataphor Application Administrator.</para> 
				<sect2
				id="DUGP1UsingDataphorApplications-StartingaDataphorApplication-Connecting"> 
					 <title><indexterm><primary>Connecting</primary></indexterm><indexterm><primary>Starting
									 a Dataphor
									 Application</primary><secondary>Connecting</secondary></indexterm>Connecting</title>
					 
					 <para>Running a Dataphor Application begins with connecting to
						  a Dataphor Server. The first step is to select an <emphasis>alias</emphasis> to
						  use to connect. Each alias contains settings for connecting to a Dataphor
						  Server such as the name of the server. The following screen capture shows the
						  Dataphor Server Login form that displays when the Windows Client starts:</para>
					 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\DataphorServerLoginRemote.bmp" width="352"
									 depth="353"/></imageobject> 
						  </mediaobject></para> 
					 <para>Once the appropriate alias has been selected and login
						  information supplied, click the 
						  <guibutton>Login</guibutton> button to connect to the
						  Dataphor Server. Although this screen capture shows the Windows Client login
						  form, the process for connecting with the Web Client is the same.</para> 
					 <para>For more information on configuring aliases, see the 
						  <ulink url="DUGP1Dataphoria-Aliases.html">Aliases</ulink>
						  section of the 
						  <citetitle>Dataphoria</citetitle> chapter in the Using
						  Dataphor part of the Dataphor User's Guide.</para> 
				</sect2> 
				<sect2
				 id="DUGP1UsingDataphorApplications-StartingaDataphorApplication-SelectinganApplication">
					 
					 <title><indexterm><primary>Selecting an
									 Application</primary></indexterm><indexterm><primary>Starting a Dataphor
									 Application</primary><secondary>Selecting an
									 Application</secondary></indexterm>Selecting an Application</title> 
					 <para>The Dataphor Server is capable of hosting multiple
						  applications, so the next step is to select the desired application. The
						  following screen capture shows the Choose Application form:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\WindowsClientChooseApplication.bmp" width="450"
									 depth="201"/></imageobject> 
						  </mediaobject></para> 
					 <para>Select the desired application by clicking it, or using
						  the up and down arrow keys to highlight the application in the list. Clicking 
						  <guibutton>OK</guibutton> or pressing 
						  <keycap>Enter</keycap> will launch the application. Again,
						  this screen capture shows the Windows Client Choose Application form, but the
						  process is the same for the Web Client.</para> 
				</sect2> 
				<sect2
				 id="DUGP1UsingDataphorApplications-StartingaDataphorApplication-BypassingLoginandApplicationSelection">
					 
					 <title><indexterm><primary>Bypassing Login and Application
									 Selection</primary></indexterm><indexterm><primary>Starting a Dataphor
									 Application</primary><secondary>Bypassing Login and Application
									 Selection</secondary></indexterm>Bypassing Login and Application
						  Selection</title> 
					 <para>The Login form, the Choose Application form, or both can
						  be bypassed at startup by configuring a shortcut appropriately. To do this,
						  first create a shortcut to the Windows Client application. One way to do this
						  is by right-clicking on the 
						  <command>WindowsClient.exe</command> file and selecting 
						  <guimenuitem>Send To | Desktop (create shortcut)</guimenuitem>.</para>
					 
					 <para>Right-click on the newly created shortcut and select 
						  <guimenuitem>Properties</guimenuitem>. The following screen
						  capture shows the resulting form:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\WindowsClientShortcutProperties.bmp" width="367"
									 depth="462"/></imageobject> 
						  </mediaobject></para> 
					 <para>In the 
						  <phrase>Target:</phrase> text box, add the following to the
						  end of the file name: 
						  <itemizedlist> 
								<listitem> 
									 <para>To automatically select the alias to use: 
										  <phrase>-alias &lt;alias name&gt;</phrase>
										  where 
										  <phrase>&lt;alias name&gt;</phrase> is the name
										  of the alias to be used. For example: 
										  <phrase>-alias Remote</phrase></para> 
								</listitem> 
								<listitem> 
									 <para>To automatically select the application to
										  run: 
										  <phrase>-application "&lt;application
												id&gt;"</phrase> where 
										  <phrase>&lt;application id&gt;</phrase> is the
										  application identifier for the application. For example: 
										  <phrase>-application "Shipping"</phrase></para>
									 
								</listitem> 
						  </itemizedlist></para> 
					 <para>The application id is a unique identifier for the
						  application on the server. To obtain this identifier for a specific
						  application, consult your Dataphor Application Administrator.</para> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1UsingDataphorApplications-Forms"> 
				<title><indexterm><primary>Forms</primary></indexterm><indexterm><primary>Using
								Dataphor
								Applications</primary><secondary>Forms</secondary></indexterm>Forms</title> 
				<para>Dataphor Applications consist of a collection of
					 user-interfaces called <emphasis>forms</emphasis>. These forms generally fall
					 into three different categories: 
					 <itemizedlist> 
						  <listitem> 
								<para>Dashboards</para> 
								<para>Dashboard forms provide access to various
									 functions of the application. Most applications will begin with a dashboard, or
									 main form, that provides various starting points for the application.</para> 
						  </listitem> 
						  <listitem> 
								<para>Browses</para> 
								<para>Browse forms display a list of items such as
									 employees or accounts. Browse forms typically allow searching and the ability
									 to manage the list of items by adding, editing, viewing, and deleting
									 items.</para> 
						  </listitem> 
						  <listitem> 
								<para>Views</para> 
								<para>View forms display a single item and any related
									 data such as a single employee record. View forms can be used to add a new
									 item, as well as edit or view an existing item.</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<para>Of course, these are only general categories. Often, the
					 actual forms in an application will play multiple roles at once.</para> 
				<sect2 id="DUGP1UsingDataphorApplications-Forms-ComponentsofaForm">
					 
					 <title><indexterm><primary>Components of a
									 Form</primary></indexterm><indexterm><primary>Forms</primary><secondary>Components
									 of a Form</secondary></indexterm>Components of a Form</title> 
					 <para>Regardless of the roles being played, all the forms in a
						  Dataphor Application have certain characteristics in common. The following
						  screen capture displays the main form for a simple application:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\SampleApplicationMainForm.bmp" width="326"
									 depth="160"/></imageobject> 
						  </mediaobject></para> 
					 <para>The topmost section of the form is called the
						  <emphasis>title bar</emphasis>. On the left side of the title bar, the form's
						  icon is displayed. Single clicking the icon shows the <emphasis>system
						  menu</emphasis> for the form. This menu exposes capabilities such as minimizing
						  the form, maximizing it and closing it. Double-clicking the form's icon will
						  also close the form.</para> 
					 <para>Next along the title bar is the title, or
						  <emphasis>caption</emphasis> of the form. This caption will typically contain
						  text describing the action that is being performed by the form, for example 
						  <phrase>Add Contact</phrase> or 
						  <phrase>Browse Organizations</phrase>.</para> 
					 <para>On the right side of the title bar, the form has three
						  buttons for minimizing, maximizing or restoring, and closing the form,
						  respectively.</para> 
					 <para>Note that the title bar is a feature of forms in the
						  Windows Client because each form is a <emphasis>window</emphasis> in the
						  Microsoft Windows Environment.</para> 
					 <para>Immediately below the title bar is the <emphasis>menu
						  bar</emphasis> containing the available menu commands. All forms will have a 
						  <phrase>Form</phrase> menu that contains form management
						  commands. Most forms will have additional menu items such as navigation or view
						  menus.</para> 
					 <para>Below the menu bar, each form has a <emphasis>tool
						  bar</emphasis> that exposes commonly used commands as tool bar buttons.</para> 
					 <para>The bottommost section of the form is called the
						  <emphasis>status bar</emphasis>. The status bar will typically display hints or
						  other information about the current state of the form. On the left side of the
						  status bar is a panel which displays a description of the currently selected
						  control. The right side of the status bar displays a message about navigating
						  through the form.</para> 
					 <para>The rest of the area within the form is called the
						  <emphasis>client area</emphasis> and contains the main contents of the form.
						  This will typically be filled with <emphasis>controls</emphasis>, or
						  user-interface elements such as text boxes and buttons.</para> 
					 <para>Surrounding the entire form is a thin margin called the
						  <emphasis>border</emphasis>. When hovering the mouse over the border, the
						  cursor will change to indicate that the border can be dragged to resize the
						  window.</para> 
				</sect2> 
				<sect2 id="DUGP1UsingDataphorApplications-Forms-NavigatingForms"> 
					 <title><indexterm><primary>Navigating
									 Forms</primary></indexterm><indexterm><primary>Forms</primary><secondary>Navigating
									 Forms</secondary></indexterm>Navigating Forms</title> 
					 <para>When a form is initially displayed, the first control on
						  the form is currently selected, or <emphasis>focused</emphasis>. The focused
						  control is the one that will receive keyboard input. Focusing a control can be
						  accomplished simply by clicking on it with the mouse. Advancing focus to the
						  next control is done by pressing the 
						  <keycap>Tab</keycap> or 
						  <keycap>Enter</keycap> key.</para> 
					 <para>Within a Dataphor Application, each form can be in one of
						  two modes. If the form is waiting for user input, or the data on the form is
						  modified, the form is in <emphasis>accept-reject</emphasis> mode. While in this
						  mode, the buttons available on the tool bar will be 
						  <guibutton>Accept</guibutton> and 
						  <guibutton>Reject</guibutton> instead of 
						  <guibutton>Close</guibutton>. Accepting the form will
						  accept any outstanding changes and close the form. Rejecting the form will
						  cancel the changes and close the form. Note that the accelerator 
						  <keycombo
							action="simul"><keycap>Alt</keycap><keycap>C</keycap></keycombo> will close the
						  form in both modes, corresponding to the 
						  <phrase>Accept</phrase> in accept-reject mode. The 
						  <keycap>Esc</keycap> key will also close the form in both
						  modes, corresponding to the 
						  <phrase>Reject</phrase> in accept-reject mode.</para> 
					 <para>The right side of the status bar at the bottom of the
						  form will display a key combination to perform some common action on the form,
						  such as advancing to the next control, or accepting the form.</para> 
					 <para>In addition to the basic controls for editing values,
						  forms can include organizational controls such as a <emphasis>group</emphasis>,
						  or a <emphasis>page control</emphasis>. Groups provide a visual grouping of a
						  set of controls and do not have any special behavior.</para> 
					 <para>Page controls allow multiple user-interfaces to be
						  embedded into a single space using tabs to allow for the selection of the
						  embedded user-interfaces. The following screen capture provides an example of
						  this type of control:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\SampleApplicationAddPerson.bmp" width="597"
									 depth="627"/></imageobject> 
						  </mediaobject></para> 
					 <para>This form shows a group for the address, as well as a
						  page control displaying phone numbers, associated organizations, websites, and
						  email addresses. Each embedded user-interface can be selected by clicking on a
						  tab in the page control. While focused on a control within a tab, the page
						  control can be navigated using 
						  <keycombo><keycap>Ctrl</keycap><keycap>Tab</keycap></keycombo>
						  to select the next tab, and 
						  <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>Tab</keycap></keycombo>
						  to select the previous tab.</para> 
				</sect2> 
				<sect2
				 id="DUGP1UsingDataphorApplications-Forms-Singular-PluralForms"> 
					 <title><indexterm><primary>Using Browse
									 Forms</primary></indexterm><indexterm><primary>Forms</primary><secondary>Using
									 Browse Forms</secondary></indexterm>Using Browse Forms</title> 
					 <para>Browse forms enable navigation of items, incremental
						  searching for a specific item, and management including adding, editing, and
						  deleting items. The following screen capture displays a simple browse
						  form:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\SampleApplicationBrowsePersonPhoneType.bmp" width="387"
									 depth="410"/></imageobject> 
						  </mediaobject></para> 
					 <sect3 id="DUGNavigation"> 
						  <title><indexterm><primary>Navigation</primary></indexterm><indexterm><primary>Using
										  Browse
										  Forms</primary><secondary>Navigation</secondary></indexterm>Navigation</title> 
						  <para>The grid control provides basic navigation of a list
								of items. The currently selected row in the grid is indicated by the
								highlighted row. In addition to navigating the grid with the mouse using the
								scroll bar on the right side of the grid, the following keystrokes can be used
								to perform navigation: 
								<informaltable> 
									 <tgroup cols="2"><colspec colnum="1" colname="col1"
										  colwidth="*"/><colspec colnum="2" colname="col2" colwidth="*"/><thead> 
												<row><entry
													 colname="col1">Key</entry><entry colname="col2">Action</entry> 
												</row></thead><tbody> 
												<row><entry
													 colname="col1"><keycap>Home</keycap></entry><entry colname="col2">Navigates to
														  the beginning of the list.</entry> 
												</row> 
												<row><entry
													 colname="col1"><keycap>PgUp</keycap></entry><entry colname="col2">Scrolls the
														  grid one page up.</entry> 
												</row> 
												<row><entry
													 colname="col1"><keysym>Up Arrow</keysym></entry><entry colname="col2">Moves the
														  selected row one row up.</entry> 
												</row> 
												<row><entry
													 colname="col1"><keysym>Down Arrow</keysym></entry><entry colname="col2">Moves
														  the selected row one row down.</entry> 
												</row> 
												<row><entry
													 colname="col1"><keycap>PgDn</keycap></entry><entry colname="col2">Scrolls the
														  grid one page down.</entry> 
												</row> 
												<row><entry
													 colname="col1"><keycap>End</keycap></entry><entry colname="col2">Navigates to
														  the end of the list.</entry> 
												</row></tbody> 
									 </tgroup> 
								</informaltable></para> 
						  <para>All these keystrokes are available when the grid is
								the focused control. In addition, the 
								<keycap>PgUp</keycap>, 
								<keycap>PgDn</keycap>, 
								<keysym>Up Arrow</keysym> and 
								<keysym>Down Arrow</keysym> keystrokes can be used when
								the search control above the grid is focused.</para> 
						  <para>The browse form also introduces a 
								<guimenu>Navigation</guimenu> menu that contains 
								<guimenuitem>First</guimenuitem>, 
								<guimenuitem>Prior</guimenuitem>, 
								<guimenuitem>Next</guimenuitem>, and 
								<guimenuitem>Last</guimenuitem> commands, as well as a 
								<guimenuitem>Refresh</guimenuitem> command that can be
								used to refresh the contents of the grid.</para> 
						  <para>As the screen capture above shows, the grid column
								titles display a direction indicator that shows the direction of the order of
								the rows in the grid. Clicking on the grid column title will sort the rows of
								the grid by that column. Note that this functionality is only available if the
								application allows sorting the contents of the grid by that specific column.
								Clicking on a grid column title that is already sorted will reverse the sort
								order, and the direction indicator will change accordingly.</para> 
					 </sect3> 
					 <sect3 id="DUGSearch"> 
						  <title><indexterm><primary>Search</primary></indexterm><indexterm><primary>Using
										  Browse Forms</primary><secondary>Search</secondary></indexterm>Search</title> 
						  <para>Directly above the grid is a
								<emphasis>search</emphasis> control, that can be used to incrementally search
								for a specific item in the list by the search criteria. The search criteria is
								the same as the sort order used to display the list. The lookup button on the
								far right side of the search control displays the list of available sort
								orders. The following screen capture shows a typical order browse:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\SampleApplicationPersonPhoneTypeOrderBrowse.bmp" width="326"
										  depth="346"/></imageobject> 
								</mediaobject></para> 
						  <para>When the search control is focused, the list can be
								searched by typing in the desired criteria:</para> 
						  <para> 
								<mediaobject><imageobject><imagedata
										  fileref="Images\SampleApplicationBrowsePersonPhoneTypeSearch.bmp" width="387"
										  depth="410"/></imageobject> 
								</mediaobject></para> 
						  <para>The search control waits until the criteria has been
								entered, and then searches the list for the first row that matches the given
								search criteria. If a match is found, the unspecified portion of the matching
								value is added to the end of the entered search criteria and highlighted.
								Continuing to type will replace the highlighted portion of the criteria and
								continue the search.</para> 
						  <para>Note that although this example illustrates searching
								based on a single value, the search control allows for multiple-value searches
								as well.</para> 
						  <para>Pressing 
								<keycap>Enter</keycap> anywhere on the browse form will
								execute the <emphasis>default action</emphasis> for the form. If the browse
								form is in accept-reject state, this will accept the form. Otherwise, the
								default action will edit the currently selected row.</para> 
						  <para>Pressing 
								<keycap>Esc</keycap> anywhere on the browse form will
								close the form. If the form is in accept-reject state, this is equivalent to
								pressing the 
								<guibutton>Reject</guibutton> button.</para> 
					 </sect3> 
					 <sect3 id="DUGManagement"> 
						  <title><indexterm><primary>Management</primary></indexterm><indexterm><primary>Using
										  Browse
										  Forms</primary><secondary>Management</secondary></indexterm>Management</title> 
						  <para>In addition to searching and navigation, browse forms
								will typically allow the list of items to be edited. The following buttons are
								usually available on the panel to the right of the grid control: 
								<informaltable> 
									 <tgroup cols="2"><colspec colnum="1" colname="col1"
										  colwidth=".25*"/><colspec colnum="2" colname="col2" colwidth="*"/><thead> 
												<row><entry
													 colname="col1">Command</entry><entry colname="col2">Action</entry> 
												</row></thead><tbody> 
												<row><entry
													 colname="col1"><guibutton>Add</guibutton></entry><entry colname="col2">Displays
														  a form for adding a new item.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guibutton>Edit</guibutton></entry><entry
													 colname="col2">Displays a form for editing the current item.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guibutton>Delete</guibutton></entry><entry
													 colname="col2">Displays a confirm delete form, and deletes the item if
														  accepted.</entry> 
												</row> 
												<row><entry
													 colname="col1"><guibutton>View</guibutton></entry><entry
													 colname="col2">Displays a read-only view of the current item.</entry> 
												</row></tbody> 
									 </tgroup> 
								</informaltable></para> 
					 </sect3> 
				</sect2> 
				<sect2
				 id="DUGP1UsingDataphorApplications-Forms-Browse-to-EditPattern"> 
					 <title><indexterm><primary>Browse-to-Edit
									 Pattern</primary></indexterm><indexterm><primary>Forms</primary><secondary>Browse-to-Edit
									 Pattern</secondary></indexterm>Browse-to-Edit Pattern</title> 
					 <para>By clearly defining the role of each type of form in an
						  application, the overall flow through the user-interfaces follows an intuitive
						  and flexible pattern called <emphasis>browse-to-edit</emphasis>. As the name
						  indicates, the pattern begins with a browse form, and all editing of the items
						  displayed is done using a form built expressly for adding, editing, or
						  viewing.</para> 
					 <para>In addition, the add, edit, view, and delete forms that
						  manage the data manipulation from the browse are shown
						  <emphasis>modally</emphasis>. This means that the original browse form that
						  launched the edit form cannot be reached until the edit form is closed, either
						  accepted or rejected. This does not mean that other browse forms in the
						  application that are already open cannot be reached, only that the browse form
						  that launched the edit form is hidden. This allows multiple "threads" to be run
						  within a single application.</para> 
				</sect2> 
				<sect2 id="DUGP1UsingDataphorApplications-Forms-WhatFormsMean"> 
					 <title><indexterm><primary>Common
									 Patterns</primary></indexterm><indexterm><primary>Forms</primary><secondary>Common
									 Patterns</secondary></indexterm>Common Patterns</title> 
					 <para>Typically, each form will correspond with some type of
						  data in the application such as an employee record. The various forms in the
						  application will present different perspectives of the data. Regardless of the
						  perspective, each type of data in the application may be related to other types
						  of data, for example employees have email addresses, work in departments, and
						  perform tasks.</para> 
					 <para>These relationships can be loosely categorized as: 
						  <itemizedlist> 
								<listitem> 
									 <para>Details</para> 
								</listitem> 
								<listitem> 
									 <para>Extensions</para> 
								</listitem> 
								<listitem> 
									 <para>Parents/Lookups</para> 
								</listitem> 
						  </itemizedlist></para> 
					 <sect3 id="DUGP1Details"> 
						  <title><indexterm><primary>Details</primary></indexterm><indexterm><primary>What
										  Forms Mean</primary><secondary>Details</secondary></indexterm>Details</title> 
						  <para>A <emphasis>detail</emphasis> is a "has many"
								relationship. For example an employee may have multiple email addresses or
								phone numbers. The 
								<phrase>Details</phrase> menu will be available
								whenever there are detail relationships that can be followed. For example, when
								viewing the employee form, the details menu will contain a menu item to allow
								the list of email addresses for the employee to be displayed.</para> 
						  <para>Note that if an email address is added from the
								detail browse, the employee does not need to be specified as it can be obtained
								from the employee form that was used to launch the detail.</para> 
					 </sect3> 
					 <sect3 id="DUGP1Extensions"> 
						  <title><indexterm><primary>Extensions</primary></indexterm><indexterm><primary>What
										  Forms
										  Mean</primary><secondary>Extensions</secondary></indexterm>Extensions</title> 
						  <para>An <emphasis>extension</emphasis> is a "has one"
								relationship. The 
								<phrase>Extensions</phrase> menu will be available
								whenever there are extension relationships that can be followed. For example,
								when viewing the employee form, the extensions menu will contain a menu item to
								allow the address of the employee to be displayed, and possibly edited.</para> 
						  <para>As with the detail relationships, the information
								about how the extension is related to the launching form is automatically
								maintained by the application.</para> 
					 </sect3> 
					 <sect3 id="DUGP1Parents-Lookups"> 
						  <title><indexterm><primary>Parents/Lookups</primary></indexterm><indexterm><primary>What
										  Forms
										  Mean</primary><secondary>Parents/Lookups</secondary></indexterm>Parents/Lookups</title>
						  
						  <para><emphasis>Lookup</emphasis> relationships indicate a
								category or type. For example, a phone number has a phone number type. The
								phone number type is a list of values for the type of each phone number. For
								example, "home" or "mobile" phone number. The 
								<phrase>View</phrase> menu will be available whenever
								there are parent or lookup relationships that can be followed. For example,
								when viewing a phone number, the view menu will contain a menu item to allow
								the phone number type of the phone number to be displayed.</para> 
						  <para>Note that the category of a relationship is a matter
								of perspective within the application. For example, from the perspective of a
								phone number type, the phone numbers of that type are a detail. Typically, a
								Dataphor Application will allow relationships to be viewed from any
								perspective.</para> 
					 </sect3> 
				</sect2> 
		  </sect1> 
		  <sect1 id="DUGP1UsingDataphorApplications-Controls"> 
				<title><indexterm><primary>Controls</primary></indexterm><indexterm><primary>Using
								Dataphor
								Applications</primary><secondary>Controls</secondary></indexterm>Controls</title>
				
				<para>The basic components of a form are called
					 <emphasis>controls</emphasis>. Each control is responsible for managing a
					 specific piece of the interface such as the contact name or phone number. There
					 are a variety of different types of controls in a typical Dataphor
					 Application.</para> 
				<para>Each control on a form may have a short description
					 associated with it called a <emphasis>hint</emphasis>. This hint can be
					 displayed by hovering the mouse cursor over the control, or by focusing the
					 control, which causes the hint to be displayed in the left side of the status
					 bar.</para> 
				<para>All controls that are capable of editing values have two
					 important states that are indicated visually: read only, and cleared, or no
					 value. The following screen capture illustrates this behavior:</para> 
				<para> 
					 <mediaobject><imageobject><imagedata
								fileref="Images\WindowsClientControlStates.bmp" width="326"
								depth="290"/></imageobject> 
					 </mediaobject></para> 
				<para>Editable controls with a current value have a white
					 background. Readonly controls with a current value have the same color
					 background as the rest of the form. Note that although readonly controls do not
					 participate in the tab order (i.e. they cannot be reached using the 
					 <keycap>Tab</keycap> key), they can still be focused, and the
					 standard text selection capabilities apply.</para> 
				<para>Editable controls without a current value have a pale green
					 background. Readonly controls without a current value have a darker green
					 background. Note that these color settings are based on the default Windows
					 Client theme. Current Windows appearance settings and the theme of the
					 application may affect the actual colors, but the different states will still
					 be indicated visually.</para> 
				<para>There are relatively few different types of controls in a
					 Dataphor Application. This keeps the user-interface simple and intuitive,
					 without sacrificing any power or flexibility. However, specific applications
					 may introduce new types of controls as necessary to support the functionality
					 of the application. In these cases, refer to the documentation for the
					 application for information about extended controls.</para> 
				<para>The following list shows the different types of controls used
					 in a typical Dataphor Application: 
					 <itemizedlist> 
						  <listitem> 
								<para>Text Boxes</para> 
								<para>Text boxes correspond to a single value and
									 include basic text boxes, numeric editors, date and time editors, and text
									 memos.</para> 
						  </listitem> 
						  <listitem> 
								<para>Lookup Controls</para> 
								<para>Lookup controls allow values to be selected from
									 a list of valid values using a browse.</para> 
						  </listitem> 
						  <listitem> 
								<para>Choices</para> 
								<para>Choice controls allow values to be selected from
									 a static list of values.</para> 
						  </listitem> 
						  <listitem> 
								<para>Image Control</para> 
								<para>The image control allows image values to be
									 edited.</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<sect2 id="DUGP1UsingDataphorApplications-Controls-TextBoxes"> 
					 <title><indexterm><primary>Text
									 Boxes</primary></indexterm><indexterm><primary>Controls</primary><secondary>Text
									 Boxes</secondary></indexterm>Text Boxes</title> 
					 <para>The text box is the most common type of control, allowing
						  values of various types to be edited. Any value that can be displayed as text
						  can be edited with a text box. This includes text values, numeric values, date
						  and time values, as well as text blocks such as memos.</para> 
					 <para>The following screen capture displays the various types
						  of text boxes:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\WindowsClientTextBoxes.bmp" width="326"
									 depth="477"/></imageobject> 
						  </mediaobject></para> 
					 <para>All text boxes support standard cut-copy-paste
						  functionality using the Microsoft Windows standard keys: 
						  <keycombo
							action="simul"><keycap>Ctrl</keycap><keycap>X</keycap></keycombo>, 
						  <keycombo
							action="simul"><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>, and 
						  <keycombo
							action="simul"><keycap>Ctrl</keycap><keycap>V</keycap></keycombo>,
						  respectively. In addition, standard text selection capabilities using 
						  <keycap>Ctrl</keycap> and 
						  <keycap>Shift</keycap> in combination with the navigation
						  keys are available.</para> 
					 <para>Within a numeric text box, the up and down arrows can be
						  used to add or subtract one from the current value, and the 
						  <keycap>PgUp</keycap> and 
						  <keycap>PgDn</keycap> keys can be used to add or subtract
						  ten (10) from the current value. Note that this is the default behavior for a
						  numeric text box, and applications may change this behavior as
						  necessary.</para> 
					 <para>Within a date text box, the right and left arrows can be
						  used to select the portions of the value to be edited, and the up and down
						  arrows can be used to increment and decrement the currently highlighted
						  portion. Clicking the button on the right side of the control will display a
						  calendar for selecting the date value. Pressing 
						  <keycombo><keycap>Alt</keycap><keysym>Down
									 Arrow</keysym></keycombo> or 
						  <keycap>Ins</keycap> will also display the calendar.</para>
					 
					 <para>Note that some types of values, such as currency, have
						  different formats for displaying values than for editing. This allows values to
						  be entered without formatting, while still allowing them to be displayed with
						  formatting after they have been entered.</para> 
				</sect2> 
				<sect2 id="DUGP1UsingDataphorApplications-Controls-LookupControls">
					 
					 <title><indexterm><primary>Lookup
									 Controls</primary></indexterm><indexterm><primary>Controls</primary><secondary>Lookup
									 Controls</secondary></indexterm>Lookup Controls</title> 
					 <para>Lookup controls allow values to be set based on a list of
						  values displayed using a browse form:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\WindowsClientLookupControls.bmp" width="326"
									 depth="258"/></imageobject> 
						  </mediaobject></para> 
					 <para>The list of available values for the lookup control can
						  be displayed by clicking on the lookup button on the right side of the control.
						  In addition, when the lookup control is focused, pressing the 
						  <keycap>Ins</keycap> key will display the browse form. For
						  full lookup controls, simply typing the desired value will display the browse
						  form.</para> 
					 <para>Because lookup controls are typically used when lookup
						  relationships are involved, lookup controls will usually be accompanied by a 
						  <guimenu>View</guimenu> menu that can be used to display
						  the view form for the currently selected lookup values.</para> 
					 <para>When the lookup form is displayed, it will appear as
						  close as possible to the lookup control without covering the control. This is
						  usually directly beneath the control, but depending on the position of the form
						  within the screen, it may be above, or even to the side of the control.</para> 
					 <para>Because a browse form is usually used to display the
						  available values for the lookup, a new value may be added to the list if a
						  suitable one is not present. For example, when adding a phone number and
						  selecting a phone number type from the list of available types, a new type may
						  be added without having to leave the edit form for the phone number. In this
						  case, the browse of available values is automatically accepted with the newly
						  added value selected. Focus is returned directly to the next control on the
						  edit form.</para> 
				</sect2> 
				<sect2 id="DUGP1UsingDataphorApplications-Controls-Choices"> 
					 <title><indexterm><primary>Choices</primary></indexterm><indexterm><primary>Controls</primary><secondary>Choices</secondary></indexterm>Choice
						  Controls</title> 
					 <para>Choice controls allow values to be selected based on a
						  static list of values. One type of choice control is the <emphasis>check
						  box</emphasis>, which is used to edit "true or false" values. The following
						  screen capture displays the various choice controls:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\WindowsClientChoiceControls.bmp" width="326"
									 depth="222"/></imageobject> 
						  </mediaobject></para> 
					 <para>While focused on a check box, the 
						  <keysym>Space</keysym> bar can be used to toggle the
						  selection. If the check box does not have a value, a slightly grayed check will
						  appear in the control.</para> 
					 <para>The choice control displays a <emphasis>radio
						  button</emphasis> for each possible value. The current value is indicated by a
						  small dot in the radio button. When a choice control is focused, the up and
						  down arrows can be used to change the currently selected value. If the choice
						  control does not have a value, no radio button will be selected.</para> 
				</sect2> 
				<sect2 id="DUGP1UsingDataphorApplications-Controls-ImageControl"> 
					 <title><indexterm><primary>Image
									 Control</primary></indexterm><indexterm><primary>Controls</primary><secondary>Image
									 Control</secondary></indexterm>Image Control</title> 
					 <para>The image control allows image values to be
						  edited:</para> 
					 <para> 
						  <mediaobject><imageobject><imagedata
									 fileref="Images\WindowsClientImageControl.bmp" width="350"
									 depth="359"/></imageobject> 
						  </mediaobject></para> 
					 <para>While focused within the image control, the standard
						  cut-copy-paste capabilities are available using the 
						  <keycombo><keycap>Ctrl</keycap><keycap>X</keycap></keycombo>,
						  
						  <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo>,
						  and 
						  <keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo>
						  key combinations, respectively.</para> 
				</sect2> 
		  <!--Need a summary section with a review, further information, and support information-->
		  </sect1> 
	 </chapter>
</part>
