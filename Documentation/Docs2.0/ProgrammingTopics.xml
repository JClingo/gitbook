<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "docbookx.dtd">
<chapter id="D4LGProgrammingTopics"> 
		  <!--This chapter was removed from the D4LG, and is no longer needed, having been replaced by Part II of the Developer's Guide, and by the System Library Reference.-->
	 <title><indexterm><primary>Programming
					 Topics</primary></indexterm><indexterm><primary>D4 Language
					 Guide</primary><secondary>Programming Topics</secondary></indexterm>Programming
		  Topics</title> 
	 <para>This section discusses common programming tasks in D4. Topics covered
		  include items such as cursors, generators, and event handlers.</para> 
	 <sect1 id="D4LGProgrammingTopics-UsingStrings"> 
		  <title><indexterm><primary>Using
						  Strings</primary></indexterm><indexterm><primary>Programming
						  Topics</primary><secondary>Using
						  Strings</secondary></indexterm><indexterm><primary>+ String
						  Concatenation</primary></indexterm><indexterm><primary>Strings - Using
						  Strings</primary></indexterm>Using Strings</title> 
		  <para>This section describes how to use the 
				<phrase role="code"><ulink url="T-System.String.html"
					 type="olinkb">System.String</ulink></phrase> data type to construct and
				manipulate string values in D4. To begin with, we provide the definition of the
				
				<phrase role="code">System.String</phrase> scalar type: 
				<programlisting><emphasis role="bold">create type</emphasis> System.String
{
	<emphasis role="bold">representation</emphasis> String 
	{ 
		Value : String 
			<emphasis role="bold">read class</emphasis> "System.ScalarReadAccessor"
			<emphasis role="bold">write class</emphasis> "System.ScalarWriteAccessor"
	} <emphasis role="bold">class</emphasis> "System.ScalarSelectorNode",
	<emphasis role="bold">representation</emphasis> Unicode
	{
		Unicode : <emphasis role="bold">list</emphasis>(System.Integer)
			<emphasis role="bold">read class</emphasis> "System.SystemStringReadUnicodeNode"
			<emphasis role="bold">write class</emphasis> "System.SystemStringWriteUnicodeNode"
	} <emphasis role="bold">class</emphasis> "System.SystemStringUnicodeNode",
	<emphasis role="bold">representation</emphasis> UTF8
	{
		UTF8 : <emphasis role="bold">list</emphasis>(System.Byte)
			<emphasis role="bold">read class</emphasis> "System.SystemStringReadUTF8Node"
			<emphasis role="bold">write class</emphasis> "System.SystemStringWriteUTF8Node"
	} <emphasis role="bold">class</emphasis> "System.SystemStringUTF8Node,
	<emphasis role="bold">representation</emphasis> ASCII
	{
		ASCII : <emphasis role="bold">list</emphasis>(System.Byte)
			<emphasis role="bold">read class</emphasis> "System.SystemStringReadASCIINode"
			<emphasis role="bold">write class</emphasis> "System.SystemStringWriteASCIINode"
	} <emphasis role="bold">class</emphasis> "System.SystemStringASCIINode"
} <emphasis role="bold">class</emphasis> "System.StringConveyor";</programlisting></para> 
		  <para><phrase role="code">System.String</phrase> has four possible
				representations: 
				<itemizedlist> 
					 <listitem> 
						  <para><phrase role="code">String</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Unicode</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">UTF8</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">ASCII</phrase></para> 
					 </listitem> 
				</itemizedlist></para> 
		  <para>Each possible representation has an associated selector and read
				and write accessors for the properties of the representation. The default
				representation 
				<phrase role="code">String</phrase> has a single property called 
				<phrase role="code">Value</phrase> of type 
				<phrase role="code">String</phrase>. This is the native
				representation and is required because values of type 
				<phrase role="code">String</phrase> have a parser literal.</para> 
		  <para>The 
				<phrase role="code">Unicode</phrase> representation of a string is
				a list of values of type 
				<phrase role="code">System.Integer</phrase>, where each integer in
				the list represents the Unicode character constant for the character in that
				position in the string. For example, the following Unicode selector invocation:
				
				<programlisting>Unicode({ 0x41, 0x42, 0x43 })</programlisting>produces the string 
				<phrase role="code">"ABC"</phrase>.</para> 
		  <para>The 
				<phrase role="code">UTF8</phrase> representation of a string is a
				list of values of type 
				<phrase role="code">System.Byte</phrase>, where each byte in the
				list represents the UTF-8 character constant for the character in that position
				in the string. For example, the following UTF8 selector invocation: 
				<programlisting>UTF8({ 65 <emphasis role="bold">as</emphasis> Byte, 66 <emphasis role="bold">as</emphasis> Byte, 67 <emphasis role="bold">as</emphasis> Byte })</programlisting>produces the string 
				<phrase role="code">"ABC"</phrase>.</para> 
		  <para>The 
				<phrase role="code">ASCII</phrase> representation of a string is a
				list of values of type 
				<phrase role="code">System.Byte</phrase>, where each byte in the
				list represents the ASCII character constant for the character in that position
				in the string. For example, the following ASCII selector invocation: 
				<programlisting>ASCII({ 65 <emphasis role="bold">as</emphasis> Byte, 66 <emphasis role="bold">as</emphasis> Byte, 67 <emphasis role="bold">as</emphasis> Byte })</programlisting>produces the string 
				<phrase role="code">"ABC"</phrase>.</para> 
		  <para>The Dataphor Server provides the following string operators: 
				<itemizedlist> 
					 <listitem> 
						  <para>String 
								<ulink
								url="D4LGLanguageElements-Expressions-IndexerExpression.html"
								type="link">Indexer</ulink></para> 
						  <para>Allows a specific character in the string to be
								addressed by its ordinal position within the string. Indexes are
								zero-based.</para> 
					 </listitem> 
					 <listitem> 
						  <para>String Concatenation</para> 
						  <para>The 
								<phrase role="code"><ulink
									 url="O-System.iAddition.html" type="olinka">+</ulink></phrase> operator is used
								for string concatenation, resulting in the string with the characters of the
								first string prefixing the characters of the second string.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink url="O-System.Length.html"
									 type="olinka">Length</ulink></phrase></para> 
						  <para>Determines the length of the given string.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink
									 url="O-System.SubString.html" type="olinka">SubString</ulink></phrase></para> 
						  <para>Copies the characters from the given string beginning
								at a specified index, and for a specified length.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink url="O-System.Pos.html"
									 type="olinka">Pos</ulink></phrase></para> 
						  <para>Returns the index of the first position of a given
								substring within a given string. Returns -1 if the given substring is not in
								the given string.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink
									 url="O-System.IndexOf.html" type="olinka">IndexOf</ulink></phrase></para> 
						  <para>Returns the index of the first position of a given
								substring within a given string. Returns -1 if the given substring is not in
								the given string. This operator is the same as 
								<phrase role="code">Pos</phrase>, with the arguments
								reversed. This enables 
								<phrase role="code">IndexOf</phrase> to be invoked with
								OOP-style method invocation.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink url="O-System.Upper.html"
									 type="olinka">Upper</ulink></phrase></para> 
						  <para>Returns the string containing the characters in the
								given string, upper-cased.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink url="O-System.Lower.html"
									 type="olinka">Lower</ulink></phrase></para> 
						  <para>Returns the string containing the characters in the
								given string, lower-cased.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink url="O-System.iLike.html"
									 type="olinka">Like</ulink></phrase></para> 
						  <para>Returns true if the given pattern is found in the
								given string.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink
									 url="O-System.iMatches.html" type="olinka">Matches</ulink></phrase></para> 
						  <para>Returns true if the given regular expression matches
								the given string.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code"><ulink
									 url="O-System.CompareText.html"
									 type="olinka">CompareText</ulink></phrase></para> 
						  <para>Performs a case-insensitive compare of two
								strings.</para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink
								url="D4LGTableExpressions-Aggregate.html" type="link">Aggregate
									 Operators</ulink></para> 
						  <para>The following aggregate operators are defined for
								strings: 
								<itemizedlist> 
									 <listitem> 
										  <para><phrase role="code"><ulink
													 url="D4LGTableExpressions-Aggregate-Count.html"
													 type="link">Count</ulink></phrase></para> 
										  <para>Determines the cardinality of the
												argument.</para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase role="code"><ulink
													 url="D4LGTableExpressions-Aggregate-Min.html"
													 type="link">Min</ulink></phrase></para> 
										  <para>Defined as iterated less than
												comparison.</para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase role="code"><ulink
													 url="D4LGTableExpressions-Aggregate-Max.html"
													 type="link">Max</ulink></phrase></para> 
										  <para>Defined as iterated greater than
												comparison.</para> 
									 </listitem> 
								</itemizedlist></para> 
					 </listitem> 
				</itemizedlist></para> 
	 </sect1> 
	 <sect1 id="D4LGProgrammingTopics-UsingDateandTimeValues"> 
		  <title><indexterm><primary>Using Date and Time
						  Values</primary></indexterm><indexterm><primary>Programming
						  Topics</primary><secondary>Using Date and Time
						  Values</secondary></indexterm><indexterm><primary>Date - Using Date and Time
						  Values</primary></indexterm><indexterm><primary>Time - Using Date and Time
						  Values</primary></indexterm>Using Date and Time Values</title> 
		  <para>This section describes how to use the 
				<phrase role="code"><ulink url="T-System.TimeSpan.html"
					 type="olinkb">System.TimeSpan</ulink></phrase>, 
				<phrase role="code"><ulink url="T-System.DateTime.html"
					 type="olinkb">System.DateTime</ulink></phrase>, 
				<phrase role="code"><ulink url="T-System.Date.html"
					 type="olinkb">System.Date</ulink></phrase>, and 
				<phrase role="code"><ulink url="T-System.Time.html"
					 type="olinkb">System.Time</ulink></phrase> data types and their associated
				operators to construct and manipulate date and time values in D4. To begin
				with, we provide the definition of these types: 
				<programlisting><emphasis role="bold">create type</emphasis> TimeSpan
{
	<emphasis role="bold">representation</emphasis> Ticks
	{
		Ticks : Long
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanTicksReadTicksNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanTicksWriteTicksNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanTicksSelectorNode", 
	<emphasis role="bold">representation</emphasis> Milliseconds
	{
		Milliseconds : Decimal
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanMillisecondsReadMillisecondsNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanMillisecondsWriteMillisecondsNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanMillisecondsSelectorNode", 
	<emphasis role="bold">representation</emphasis> Seconds
	{
		Seconds : Decimal
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanSecondsReadSecondsNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanSecondsWriteSecondsNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanSecondsSelectorNode", 
	<emphasis role="bold">representation</emphasis> Minutes
	{
		Minutes : Decimal
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanMinutesReadMinutesNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanMinutesWriteMinutesNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanMinutesSelectorNode", 
	<emphasis role="bold">representation</emphasis> Hours
	{
		Hours : Decimal
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanHoursReadHoursNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanHoursWriteHoursNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanHoursSelectorNode", 
	<emphasis role="bold">representation</emphasis> Days
	{
		Days : Decimal
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanDaysReadDaysNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanDaysWriteDaysNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanDaysSelectorNode", 
	<emphasis role="bold">representation</emphasis> TimeSpan
	{
		Day : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanTimeSpanReadDayNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanTimeSpanWriteDayNode", 
		Hour : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanTimeSpanReadHourNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanTimeSpanWriteHourNode", 
		Minute : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanTimeSpanReadMinuteNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanTimeSpanWriteMinuteNode", 
		Second : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanTimeSpanReadSecondNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanTimeSpanWriteSecondNode", 
		Millisecond : Decimal
			<emphasis role="bold">read class</emphasis> "System.SystemTimeSpanTimeSpanReadMillisecondNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeSpanTimeSpanWriteMillisecondNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeSpanTimeSpanMillisecondsSelectorNode",
	<emphasis role="bold">representation</emphasis> AsString
	{
		AsString : String
			<emphasis role="bold">read class</emphasis> "System.TimeSpanAsStringReadAccessorNode"
			<emphasis role="bold">write class</emphasis> "System.TimeSpanAsStringWriteAccessorNode"
	} <emphasis role="bold">class</emphasis> "System.TimeSpanAsStringSelectorNode"
} 
	<emphasis role="bold">class</emphasis> "System.TimeSpanConveyor"
	<emphasis role="bold">static tags</emphasis> 
	{ 
		Catalog.Comment = "System Time Span", 
		DAE.AsString = "AsString"
	};

<emphasis role="bold">create type</emphasis> DateTime
{
	<emphasis role="bold">representation</emphasis> Ticks
	{
		Ticks : Long
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeTicksReadTicksNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeTicksWriteTicksNode"
	} <emphasis role="bold">class</emphasis> "System.SystemDateTimeTicksSelectorNode", 
	<emphasis role="bold">representation</emphasis> DateTime
	{
		Year : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadYearNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteYearNode", 
		Month : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadMonthNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteMonthNode", 
		Day : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadDayNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteDayNode", 
		Hour : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadHourNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteHourNode", 
		Minute : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadMinuteNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteMinuteNode", 
		Second : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadSecondNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteSecondNode"
	} <emphasis role="bold">class</emphasis> "System.SystemDateTimeDateTimeSecondsSelectorNode",
	<emphasis role="bold">representation</emphasis> AsString
	{
		AsString : String
			<emphasis role="bold">read class</emphasis> "System.DateTimeAsStringReadAccessorNode"
			<emphasis role="bold">write class</emphasis> "System.DateTimeAsStringWriteAccessorNode"
	} <emphasis role="bold">class</emphasis> "System.DateTimeAsStringSelectorNode"
} 
	<emphasis role="bold">class</emphasis> "System.DateTimeConveyor"
	<emphasis role="bold">static tags</emphasis> 
	{ 
		Catalog.Comment = "System Date Time", 
		DAE.AsString = "AsString" 
	};
	
<emphasis role="bold">create type</emphasis> Date
{
	<emphasis role="bold">representation</emphasis> Ticks
	{
		Ticks : Long
			<emphasis role="bold">read class</emphasis> "System.SystemDateTicksReadTicksNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTicksWriteTicksNode"
	} <emphasis role="bold">class</emphasis> "System.SystemDateTicksSelectorNode", 
	<emphasis role="bold">representation</emphasis> Date
	{
		Year : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadYearNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteYearNode", 
		Month : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadMonthNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteMonthNode", 
		Day : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemDateTimeDateTimeReadDayNode"
			<emphasis role="bold">write class</emphasis> "System.SystemDateTimeDateTimeWriteDayNode"
	} <emphasis role="bold">class</emphasis> "System.SystemDateTimeDateTimeDaysSelectorNode",
	<emphasis role="bold">representation</emphasis> AsString
	{
		AsString : String
			<emphasis role="bold">read class</emphasis> "System.DateAsStringReadAccessorNode"
			<emphasis role="bold">write class</emphasis> "System.DateAsStringWriteAccessorNode"
	} <emphasis role="bold">class</emphasis> "System.DateAsStringSelectorNode"
}
	<emphasis role="bold">class</emphasis> "System.DateTimeConveyor"
	<emphasis role="bold">static tags</emphasis> 
	{ 
		Catalog.Comment = "System Date", 
		DAE.AsString = "AsString",
		Frontend.Width = "10",
		Frontend.DateTimeBox.MaxWidth = "10"
	};
	
<emphasis role="bold">create type</emphasis> Time
{
	<emphasis role="bold">representation</emphasis> Ticks
	{
		Ticks : Long
			<emphasis role="bold">read class</emphasis> "System.SystemTimeTicksReadTicksNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeTicksWriteTicksNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeTicksSelectorNode", 
	<emphasis role="bold">representation</emphasis> Time
	{
		Hour : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeTimeReadHourNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeTimeWriteHourNode", 
		Minute : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeTimeReadMinuteNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeTimeWriteMinuteNode", 
		Second : Integer
			<emphasis role="bold">read class</emphasis> "System.SystemTimeTimeReadSecondNode"
			<emphasis role="bold">write class</emphasis> "System.SystemTimeTimeWriteSecondNode"
	} <emphasis role="bold">class</emphasis> "System.SystemTimeTimeSecondsSelectorNode",
	<emphasis role="bold">representation</emphasis> AsString
	{
		AsString : String
			<emphasis role="bold">read class</emphasis> "System.TimeAsStringReadAccessorNode"
			<emphasis role="bold">write class</emphasis> "System.TimeAsStringWriteAccessorNode"
	} <emphasis role="bold">class</emphasis> "System.TimeAsStringSelectorNode"
}
	<emphasis role="bold">class</emphasis> "System.DateTimeConveyor"
	<emphasis role="bold">static tags</emphasis> 
	{ 
		Catalog.Comment = "System Time", 
		DAE.AsString = "AsString",
		Frontend.ElementType = "TextBox",
		Frontend.Width = "10",
		Frontend.TextBox.MaxWidth = "10"
	};</programlisting></para> 
		  <para><phrase role="code">System.TimeSpan</phrase> has seven possible
				representations: 
				<itemizedlist> 
					 <listitem> 
						  <para><phrase role="code">TimeSpan</phrase></para> 
						  <para>The TimeSpan representation is the default
								representation for the TimeSpan type, and has five properties: 
								<itemizedlist> 
									 <listitem> 
										  <para><phrase
												role="code">DaysPart</phrase></para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase
												role="code">HoursPart</phrase></para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase
												role="code">MinutesPart</phrase></para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase
												role="code">SecondsPart</phrase></para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase
												role="code">MillisecondsPart</phrase></para> 
									 </listitem> 
								</itemizedlist> corresponding to the days, hours,
								minutes, seconds, and milliseconds components of the 
								<phrase role="code">TimeSpan</phrase>,
								respectively.</para> 
						  <para>The 
								<phrase role="code">TimeSpan</phrase> selector takes a
								value for each of these properties in order to construct a 
								<phrase role="code">TimeSpan</phrase> value. For
								example: 
								<programlisting>TimeSpan(10, 2, 55, 30, 12)</programlisting>builds the 
								<phrase role="code">TimeSpan</phrase> value of 10 days,
								2 hours, 55 minutes, 30 seconds, and 12 milliseconds. In addition to the basic
								selector, the Dataphor Server defines overloads for the 
								<phrase role="code">TimeSpan</phrase> operator, which
								allow the secondary arguments to be ommitted: 
								<programlisting>TimeSpan
(
	ADaysPart : Integer,
	AHoursPart : Integer,
	AMinutesPart : Integer,
	ASecondsPart : Integer
);

TimeSpan
(
	ADaysPart : Integer,
	AHoursPart : Integer,
	AMinutesPart : Integer
);

TimeSpan(ADaysPart : Integer, AHoursPart : Integer);

TimeSpan(ADaysPart : Integer);</programlisting></para> 
						  <para>As with all possible representations, each of these
								components can be updated independently of the others. Note that this is only a
								shorthand for an equivalent selector invocation: 
								<programlisting><emphasis role="bold">begin</emphasis>
	<emphasis role="bold">var</emphasis> LTimeSpan : TimeSpan := TimeSpan(10, 5);
	LTimeSpan.Hours := 6;
	// Equivalent selector invocation
	LTimeSpan := TimeSpan(LTimeSpan.Days, 6);
<emphasis role="bold">end</emphasis>;</programlisting></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Days</phrase></para> 
						  <para>The 
								<phrase role="code">Days</phrase> representation has a
								single property called 
								<phrase role="code">Days</phrase> which is the total
								number of days in the given TimeSpan expressed as a decimal value. For example,
								the following selector invocations are equivalent: 
								<programlisting>Days(10.5);
TimeSpan(10, 12);</programlisting></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Hours</phrase></para> 
						  <para>The 
								<phrase role="code">Hours</phrase> representation has a
								single property called 
								<phrase role="code">Hours</phrase> which is the total
								number of hours in the given 
								<phrase role="code">TimeSpan</phrase> expressed as a
								decimal value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Minutes</phrase></para> 
						  <para>The 
								<phrase role="code">Minutes</phrase> representation has
								a single property called 
								<phrase role="code">Minutes</phrase> which is the total
								number of minutes in the given 
								<phrase role="code">TimeSpan</phrase> expressed as a
								decimal value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Seconds</phrase></para> 
						  <para>The 
								<phrase role="code">Seconds</phrase> representation has
								a single property called 
								<phrase role="code">Seconds</phrase> which is the total
								number of seconds in the given 
								<phrase role="code">TimeSpan</phrase> expressed as a
								decimal value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Milliseconds</phrase></para> 
						  <para>The 
								<phrase role="code">Milliseconds</phrase>
								representation has a single property called 
								<phrase role="code">Milliseconds</phrase> which is the
								total number of milliseconds in the given 
								<phrase role="code">TimeSpan</phrase> expressed as a
								decimal value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Ticks</phrase></para> 
						  <para>The 
								<phrase role="code">Ticks</phrase> representation has a
								single property called 
								<phrase role="code">Ticks</phrase> which is the total
								number of ticks in the given 
								<phrase role="code">TimeSpan</phrase> expressed as a
								long value.</para> 
					 </listitem> 
				</itemizedlist></para> 
		  <para><phrase role="code">System.DateTime</phrase> introduces the
				default representation 
				<phrase role="code">DateTime</phrase>. This representation has
				seven properties: 
				<itemizedlist> 
					 <listitem> 
						  <para><phrase role="code">YearsPart</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">MonthsPart</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">DaysPart</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">HoursPart</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">MinutesPart</phrase></para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">SecondsPart</phrase></para> 
					 </listitem> 
				</itemizedlist> corresponding to the years, months, days, hours,
				minutes, and seconds of the 
				<phrase role="code">DateTime</phrase>, respectively.</para> 
		  <para>The 
				<phrase role="code">DateTime</phrase> selector takes a value for
				each of these properties in order to construct a 
				<phrase role="code">DateTime</phrase> value. For example: 
				<programlisting>DateTime(2002, 9, 23, 7, 35, 15, 0);</programlisting>builds the 
				<phrase role="code">DateTime</phrase> value September 23, 2002 at
				7:35:15 AM. In addition to the basic selector, the Dataphor Server defines
				overloads for the 
				<phrase role="code">DateTime</phrase> operator which allow the
				secondary arguments to be ommitted: 
				<programlisting>DateTime
(
	AYearsPart : Integer,
	AMonthsPart : Integer,
	ADaysPart : Integer,
	AHoursPart : Integer,
	AMinutesPart : Integer
);

DateTime
(
	AYearsPart : Integer,
	AMonthsPart : Integer,
	ADaysPart : Integer
);</programlisting></para> 
		  <para>As with all scalar types, the properties of all possible
				representations are available for each value of the type. For example: 
				<programlisting><emphasis role="bold">begin</emphasis>
	<emphasis role="bold">var</emphasis> LTimeSpan : TimeSpan := Days(10.5);
	/* 
	   HoursPart is available even though the 
	   Days selector was used to build the value
	*/
	<emphasis role="bold">raise</emphasis> Error(LTimeSpan.HoursPart.ToString()); 
<emphasis role="bold">end</emphasis>;</programlisting></para> 
		  <para>The Dataphor Server provides the following date and time
				operators: 
				<itemizedlist> 
					 <listitem> 
						  <para><phrase role="code">DatePart</phrase></para> 
						  <para>Retrieves only the date portion of a 
								<phrase role="code">DateTime</phrase> value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">TimePart</phrase></para> 
						  <para>Retrieves only the time portion of a 
								<phrase role="code">DateTime</phrase> value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">DateTime</phrase></para> 
						  <para>Returns the current date and time. Note that this
								operator returns the same value on successive invocations within the same
								transaction.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Date</phrase></para> 
						  <para>Returns the current date. Note that this operator
								returns the same value on successive invocations within the same
								transaction.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Time</phrase></para> 
						  <para>Returns the current time. Note that this operator
								returns the same value on successive invocations within the same
								transaction.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">DayOfWeek</phrase></para> 
						  <para>Returns the day of the week of a 
								<phrase role="code">DateTime</phrase> value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">DayOfYear</phrase></para> 
						  <para>Returns the day of the year of a 
								<phrase role="code">DateTime</phrase> value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">DaysInMonth</phrase></para> 
						  <para>Returns the number of days in the given month and
								year.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">IsLeapYear</phrase></para> 
						  <para>Returns 
								<phrase role="code">true</phrase> if the given year is
								a leap year, and 
								<phrase role="code">false</phrase> otherwise.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">Duration</phrase></para> 
						  <para>Returns the duration of a given 
								<phrase role="code">TimeSpan</phrase>.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">AddMonths</phrase></para> 
						  <para>Adds the given number of months to a 
								<phrase role="code">DateTime</phrase> value.</para> 
					 </listitem> 
					 <listitem> 
						  <para><phrase role="code">AddYears</phrase></para> 
						  <para>Adds the given number of years to a 
								<phrase role="code">DateTime</phrase> value.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Arithmetic Operators</para> 
						  <itemizedlist> 
								<listitem> 
									 <para><phrase
										  role="code">iAddition</phrase>(<phrase role="code">+</phrase>)</para> 
									 <para>Adds two 
										  <phrase role="code">TimeSpan</phrase> values
										  together, resulting in a 
										  <phrase role="code">TimeSpan</phrase> that is
										  the total of both.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">iSubtraction</phrase>(<phrase role="code">-</phrase>)</para> 
									 <para>Subtracts two 
										  <phrase role="code">TimeSpan</phrase> values,
										  resulting in a 
										  <phrase role="code">TimeSpan</phrase> that is
										  the difference between the first and second values.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">iMultiplication</phrase>(<phrase role="code">*</phrase>)</para> 
									 <para>Multiplies a given 
										  <phrase role="code">TimeSpan</phrase> by a 
										  <phrase role="code">Decimal</phrase> value,
										  resulting in a 
										  <phrase role="code">TimeSpan</phrase> that is
										  the specified number of times longer than the original value.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase
										  role="code">iDivision</phrase>(<phrase role="code">/</phrase>)</para> 
									 <para>Divides a given 
										  <phrase role="code">TimeSpan</phrase> by a 
										  <phrase role="code">Decimal</phrase> value,
										  resulting in a 
										  <phrase role="code">TimeSpan</phrase> that is
										  the specified number of times shorter than the original value.</para> 
								</listitem> 
								<listitem> 
									 <para><phrase role="code">iNegate</phrase>(unary 
										  <phrase role="code">-</phrase>)</para> 
									 <para>Returns the 
										  <phrase role="code">TimeSpan</phrase> that is
										  the negative length of the original value. Just as in integer arithmetic,
										  negating a negative 
										  <phrase role="code">TimeSpan</phrase> value
										  results in a positive value.</para> 
								</listitem> 
						  </itemizedlist> 
					 </listitem> 
					 <listitem> 
						  <para>Comparison Operators</para> 
						  <para>All the comparison operators (<phrase
								role="code">=</phrase>, 
								<phrase role="code">&lt;&gt;</phrase>, 
								<phrase role="code">&lt;</phrase>, 
								<phrase role="code">&gt;</phrase>, 
								<phrase role="code">&lt;=</phrase>, 
								<phrase role="code">&gt;=</phrase>, and 
								<phrase role="code">?=</phrase>) are defined for 
								<phrase role="code">TimeSpan</phrase> and 
								<phrase role="code">DateTime</phrase> values, with the
								expected semantics.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Aggregate Operators</para> 
						  <para>The following aggregate operators are defined for 
								<phrase role="code">TimeSpan</phrase> and 
								<phrase role="code">DateTime</phrase> values: 
								<itemizedlist> 
									 <listitem> 
										  <para><phrase role="code">Count</phrase></para>
										  
										  <para>Determines the cardinality of the
												argument.</para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase role="code">Sum</phrase></para> 
										  <para>Defined as iterated addition.</para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase role="code">Min</phrase></para> 
										  <para>Defined as iterated less than
												comparison.</para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase role="code">Max</phrase></para> 
										  <para>Defined as iterated greater than
												comparison.</para> 
									 </listitem> 
									 <listitem> 
										  <para><phrase role="code">Avg</phrase></para> 
										  <para>Defined as iterated addition divided by
												the count.</para> 
									 </listitem> 
								</itemizedlist></para> 
					 </listitem> 
				</itemizedlist></para> 
	 </sect1> 
</chapter>
