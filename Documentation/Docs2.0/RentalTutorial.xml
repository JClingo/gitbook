<?xml version="1.0"?>
<chapter> 
	 <chapterinfo><date role="LastMod">Friday, August 19, 2005 08:00:02</date> 
	 </chapterinfo> 
	 <title>Dataphor Rental Movie Store Tutorial</title> 
	 <para>This tutorial is designed to walk through building an application in
		  Dataphor, from choosing a database design to application completion. Although
		  it does not cover every detail, it should provide a basic understanding of the
		  Dataphor Toolset and enable you to begin developing your own
		  applications.</para> 
	 <formalpara> 
		  <title>Concepts</title> 
		  <para> 
				<itemizedlist> 
					 <listitem> 
						  <para>Connecting to a 
								<ulink url="DUGP1ProductTour-DataphorServer.html"
								 type="link">Dataphor Server</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink url="D4LGCatalogElements-Devices.html"
								type="olinka">Devices</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink
								url="D4LGProgrammingTopics-UsingGenerators.html"
								type="olinka">Auto-incrementing and Generators</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink url="D4LGCatalogElements-TableVariables.html"
								type="olinka">Tables</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink
								url="D4LGDataManipulation-SelectStatement.html" type="olinka">Queries
									 (select)</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink url="DRTags.html"
								type="olinka">Tags</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink
								url="D4LGCatalogElements-References.html" type="olinka">References</ulink> and 
								<ulink url="D4LGCatalogElements-Constraints.html"
								 type="olinka">Constraints</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink url="D4LGCatalogElements-Operators.html"
								type="olinka">Operators</ulink></para> 
					 </listitem> 
					 <listitem> 
						  <para><ulink url="D4LGScriptsandExecution.html"
								type="olinka">D4 Scripts</ulink> and C#/VB Scripts</para> 
					 </listitem> 
				</itemizedlist> </para> 
	 </formalpara> 
	 <formalpara> 
		  <title>Technical Terms</title> 
		  <para> 
				<variablelist> 
					 <varlistentry> 
						  <term><ulink
								url="DUGP1UsingDataphorApplications-Forms.html" type="link">Form</ulink></term>
						  
						  <listitem> 
								<para>A user-interface to the application and
									 data.</para> 
						  </listitem> 
					 </varlistentry> 
					 <varlistentry> 
						  <term><ulink
								url="dilrefAlphora.Dataphor.Frontend.Client.IFrame.html"
								type="olinka">Frame</ulink></term> 
						  <listitem> 
								<para>An embedded user-interface (form) as an element
									 of a form.</para> 
						  </listitem> 
					 </varlistentry> 
					 <varlistentry> 
						  <term><!--Link DDG, Presentation Layer, Forms, Structure/Nodes-->Component</term>
						  
						  <listitem> 
								<para>A Dataphor form component. e.g. Source</para> 
						  </listitem> 
					 </varlistentry> 
					 <varlistentry> 
						  <term><!--Link DDG, Presentation Layer, Forms, Structure/Nodes-->Control</term>
						  
						  <listitem> 
								<para>A visible Dataphor form component. e.g.
									 TextBox</para> 
						  </listitem> 
					 </varlistentry> 
				</variablelist> </para> 
	 </formalpara> 
	 <sect1> 
		  <title>Overview</title> 
		  <para>This tutorial will show how to create a Database application
				designed to run a video rental store.</para> 
		  <para>The tutorial is divided up into three major sections: Developing
				the Database, Developing the Frontend Application, and running the application
				from a Windows client and a Web client.</para> 
		  <para>All of the tables, forms, and scripts are included in the
				Sample.Rental library. You may type them yourself or use the ones that are
				included.</para> 
		  <para>A few of the procedures, tables, methods, etc. were chosen in
				order to teach a concept and not necessarily because it was the optimum way to
				accomplish the task.</para> 
	 </sect1> 
	 <sect1> 
		  <title>Connect to a Dataphor Server</title> 
		  <para>You need to be connected to a running Dataphor Server. This can
				be done through the Dataphor Server Login, which can connect to a running
				server or can create its own "in-process" server. Either method is fine. The
				in-process server is stopped when Dataphoria closes. You should set a catalog
				filename if you want an in-process server, so that it keeps its catalog and all
				the table definitions when you restart the Dataphor Server.</para> 
		  <para>If you are not using the "in-process" server, you will need to
				know the port number of the Dataphor Server when you try to connect to it from
				the Frontend Client and the Application Server.</para> 
		  <para>See 
				<ulink url="DUGP1Dataphoria-Aliases.html"
				 type="xref">Aliases</ulink> for more information on how to connect to the
				Dataphor Server with Dataphoria.</para> 
		  <para>Once you are connected the Dataphoria Integrated Design
				Environment (IDE) is displayed. See 
				<ulink url="DUGP1Dataphoria-Introduction-Environment.html"
				 type="xref">Environment</ulink> for an explanation of this screen.</para> 
	 </sect1> 
	 <sect1> 
		  <title>Tutorial</title> 
		  <sect2> 
				<title>Developing the Movie Database</title> 
				<para>The first part of this tutorial covers designing and setting
					 up the database. You will add each of the tables and other schema
					 objects.</para> 
				<para>For your convenience, the 
					 <phrase role="code">Sample.Rental</phrase> library already
					 exists. Two other libraries will be required. Right click on 
					 <phrase role="code">Sample.Rental</phrase> and select 
					 <phrase role="code">edit</phrase>. In the 
					 <phrase role="code">Edit Libraries</phrase> form click on the 
					 <phrase role="code">Requisites</phrase> tab. If the libraries 
					 <phrase role="code">Frontend</phrase> and 
					 <phrase role="code">System</phrase> are not listed, use the 
					 <phrase role="code">Add</phrase> button to add the missing
					 libraries to the list. Then click 
					 <phrase role="code">Accept</phrase> to save and close the 
					 <phrase role="code">Edit Libraries</phrase> form.</para> 
				<para> As mentioned earlier, all the forms and scripts to create
					 the tables are included. To view these files, expand the 
					 <phrase role="code">Sample.Rental</phrase> library, then expand
					 the 
					 <phrase role="code">Documents</phrase> folder, then double
					 click on the document you would like to view. The forms are named with 
					 <phrase role="code">Completed</phrase> added to the
					 name.</para> 
				<para>If you do not wish to create the scripts, tables, and forms
					 yourself you can execute the 
					 <phrase role="code">CopyCompleted</phrase> d4 document. To
					 execute the script, expand the 
					 <phrase role="code">Sample.Rental</phrase> library by clicking
					 the plus (+) symbol, then expand the 
					 <phrase role="code">Documents</phrase> folder. Right click on
					 the 
					 <phrase role="code">CopyCompleted</phrase> script and select 
					 <phrase role="code">Execute</phrase>. Then right click on the 
					 <phrase role="code">Documents</phrase> folder and click 
					 <phrase role="code">Refresh</phrase>. Now all the forms and
					 frames exists.</para> 
				<para>Whether you have chosen to create the tables, forms, and
					 scripts yourself or have it done automatically, you now must register by
					 following the instruction in the Getting Started section of this tutorial. The
					 remainder of the tutorial assumes you are creating all the forms, scripts, and
					 tables yourself. If you have chosen to not do this, simply review what was
					 provided.</para> 
				<sect3> 
					 <title>Getting Started</title> 
					 <para>First you need to register the 
						  <phrase role="code">Sample.Rental</phrase> library.
						  Registering a library causes the Register d4 script to be executed and makes
						  the library the Current library. The current library is used for any action
						  that does not otherwise specify a library. You can register the library by
						  expanding the 
						  <phrase role="code">Libraries</phrase> entry in the 
						  <phrase role="code">Dataphor Explorer</phrase> pane, then
						  right click on 
						  <phrase role="code">Sample.Rental</phrase> library, and
						  select 
						  <phrase role="code">Register</phrase>. The color and shape
						  of the icon changes to show that the 
						  <phrase role="code">Sample.Rental</phrase> library is now
						  registered. The Green arrow shows that the library is the current library. For
						  more about libraries see 
						  <ulink url="D4LGCatalogElements-Libraries.html"
							type="olinkb">Libraries</ulink>.</para> 
					 <para><inlinegraphic fileref="Images/RentalTut001.png"
						  width="230" depth="289"/></para> 
					 <para>If during this tutorial you close 
						  <phrase role="code">Dataphoria</phrase>, when you come back
						  to the tutorial you must ensure that 
						  <phrase role="code">Sample.Rental</phrase> is set as the
						  current library. This will ensure that any actions take place in the 
						  <phrase role="code">Sample.Rental</phrase> library. To set
						  a library as current, right click the library then select 
						  <phrase role="code">Set As Current</phrase>.</para> 
				</sect3> 
				<sect3> 
					 <title>Device Setup</title> 
					 <para>The Dataphor Server stores and queries data through a
						  storage device system. A device can be a SQL device which talks to a particular
						  SQL server, it can be the 
						  <phrase role="code">Memory Device</phrase> which stores
						  data in RAM, or it can be the 
						  <phrase role="code">Simple Device</phrase>. Note that the 
						  <phrase role="code">Simple Device</phrase>, while it will
						  persists the data, is intended for small amounts of infrequently accessed data.
						  Custom devices can also be created for any type of data source you may have.
						  For more information on creating custom devices and to download the Dataphor
						  Storage Device Developer's Kit, go to 
						  <ulink
						  url="http://www.alphora.com/tiern.asp?ID=DATDEVFAQ">http://www.alphora.com/tiern.asp?ID=DATDEVFAQ</ulink>.</para>
					 
					 <para>Data inside of a memory device will be lost when the
						  Dataphor Server shuts down, but the table definitions will be kept and restored
						  as part of the catalog. This makes it useful for tasks such as development. For
						  production use, a persistent device such as MSSQL, Oracle, SAS, DB2, or AS400
						  is used. The Dataphor Server will hand off entire queries to the device, when
						  it can, to optimize performance.</para> 
					 <para>The default device and required libraries for a library
						  can be specified by editing the library settings. This can be done by selecting
						  the library then pressing F2.</para> 
					 <para><inlinegraphic fileref="Images/RentalTut001.1.png"
						  width="414" depth="443"/></para> 
					 <sect4> 
						  <title>Using a Memory Device</title> 
						  <para>As was said earlier, all the code shown is this
								tutorial is included in the Document folder in the 
								<phrase role="code">Sample.Rental</phrase> library. You
								can open any of the documents by double clicking the document and then execute
								the code by pressing 
								<phrase role="code">CTRL-E</phrase>. Or you can open a
								blank d4 script by pressing 
								<phrase role="code">CTRL-N</phrase> (or clicking File,
								New), then select D4 and click 
								<phrase role="code">Accept</phrase>. Again when you've
								entered the code, press 
								<phrase role="code">CTRL-E</phrase> to execute all of
								it. If you only want to execute a portion of the code, highlight the portion
								you want to execute, then press 
								<phrase role="code">CTRL-E</phrase>.</para> 
						  <para>Use the following code to create a memory
								device:</para> 
						  <programlisting><emphasis role="bold">create device</emphasis> RentalDevice
 <emphasis role="bold">class</emphasis> "System.MemoryDevice";</programlisting> 
						  <para>Using a memory device is a quick and easy way to test
								out database designs and will work fine for the purpose of this tutorial.
								However, when the Dataphor Server is shut down, all data in the memory device
								is lost. For this reason this part of the code is commented out in the 
								<phrase role="code">CreateDevice</phrase> d4
								script.</para> 
					 </sect4> 
					 <sect4> 
						  <title>Using an MS SQL Device</title> 
						  <para>If you wanted to use a MS SQL device you could use
								the following code to create the MS SQL device:</para> 
						  <programlisting><emphasis role="bold">insert table</emphasis>
{
 <emphasis role="bold">row</emphasis>
 {
  "Sample.Rental" Library_Name,
  "MSSQLDevice" Required_Library_Name,
  VersionNumberUndefined() Required_Library_Version
 }
} <emphasis role="bold">into</emphasis> LibraryRequisites;

<emphasis role="bold">create device</emphasis> RentalDevice
 <emphasis role="bold">reconciliation</emphasis> { <emphasis role="bold">mode</emphasis> = { command }, <emphasis role="bold">master</emphasis> = device }
 <emphasis role="bold">class</emphasis> "MSSQLDevice"
  <emphasis role="bold">attributes</emphasis>
  {
   "ServerName" = ".",
   "DatabaseName" = "Rental"
  };</programlisting> 
						  <para>The first statement sets the 
								<phrase role="code">MSSQLDevice</phrase> library as a
								required library. Without this statement the create device will fail with an
								error message saying the library is not required by Sample.Rental. This could
								be done by selecting the Sample.Rental library then pressing F2. Then adding
								the MSSQLDevice library to the Requisites.</para> 
						  <para><inlinegraphic fileref="Images/RentalTut001.2.png"
								width="394" depth="420"/></para> 
						  <para>The 
								<ulink url="DDGReconciliation.html"
								 type="olinka">reconciliation</ulink> settings control how the Dataphor Server
								will reconcile its catalog with the tables in the Device. In this case it is
								saying that the target system should be considered the master copy of the
								schema and that the reconciliation will occur when a command uses a particular
								table.</para> 
						  <para>The attributes specify the name of the server running
								the MS SQL server and the database name to connect to. Other attributes can
								also be specified.</para> 
						  <para>For more information on the options available when
								creating a device, see the various devices listed in 
								<ulink url="DRLibraries.html"
								 type="olinkb">Libraries</ulink>.</para> 
						  <para>After the MS SQL device is created 
								<phrase role="code">CreateDeviceUser</phrase> is called
								to tell the Dataphor Server what MS SQL account to use for each Dataphor Server
								user, as shown here.</para> 
						  <programlisting>CreateDeviceUser("Admin", "RentalDevice", "sa", "");
CreateDeviceUser("System", "RentalDevice", "sa", "");</programlisting> 
					 </sect4> 
					 <sect4> 
						  <title>Using a Simple Device</title> 
						  <para>Use the following code to create a simple
								device:</para> 
						  <programlisting><emphasis role="bold">create device</emphasis> RentalDevice
 <emphasis role="bold">reconciliation</emphasis> { <emphasis role="bold">mode</emphasis> = { command }, <emphasis role="bold">master</emphasis> = device }
 <emphasis role="bold">class</emphasis> "SimpleDevice";</programlisting> 
						  <para>Using a 
								<phrase role="code">SimpleDevice</phrase> is good for
								the small amount of data you will be dealing with in this tutorial. In Addition
								it provides persistence so that the data will be maintained if you must
								shutdown Dataphoria and return later to the tutorial.</para> 
					 </sect4> 
					 <sect4> 
						  <title>Using Devices</title> 
						  <para>To use a device, we add "<phrase role="code">in
									 DeviceName</phrase>" to the create table statement, as shown here.</para> 
						  <programlisting><emphasis role="bold">create table</emphasis> Test <emphasis role="bold">in</emphasis> RentalDevice
{
 ID: Integer,
 <emphasis role="bold">key</emphasis> { ID }
};</programlisting> 
						  <para>If the 
								<phrase role="code"><emphasis role="bold">in</emphasis>
									 DeviceName</phrase> part of the 
								<phrase role="code"><emphasis role="bold">create
									 table</emphasis></phrase> statement is left out, as is the case in this
								tutorial, then the default device is specified by the 
								<phrase role="code">DefaultDeviceName</phrase> setting
								of the current library. If the default device setting is not set in the current
								library, the required libraries of the current library are searched breadth
								first until a default device is found. Ultimately, the 
								<phrase role="code">System.Temp</phrase> memory device
								will be used. The 
								<phrase role="code">System.Temp</phrase> device is
								created and maintained by the Dataphor Server. For more information about
								default devices, see 
								<ulink
								 url="D4LGCatalogElements-Libraries-DefaultDeviceResolution.html"
								 type="olinkb">Default Device Resolution</ulink>.</para> 
						  <para>Also, the 
								<phrase role="code">SetDefaultDeviceName</phrase>
								operator can be used to specify the default device. Do this now, so that for
								the rest of the tutorial you don't have to specify the device.</para> 
						  <programlisting>SetDefaultDeviceName("RentalDevice");</programlisting> 
					 </sect4> 
				</sect3> 
				<sect3> 
					 <title>Ensure Generators</title> 
					 <para>Dataphor allows auto-incrementing columns using
						  maintained counters. Each counter contains the next value to be used for a
						  particular identity generator.</para> 
					 <para>A special generation table must be created that contains
						  an 
						  <phrase role="code">ID</phrase> string column and a 
						  <phrase role="code">NextValue</phrase> integer
						  column.</para> 
					 <para>Setting up the generators table can be done automatically
						  by a call to the system 
						  <phrase role="code">EnsureGenerators</phrase> operator. It
						  will check if a generators table has already been created. If not, it will
						  create a table called 
						  <phrase role="code">Generators</phrase> in the current
						  library and configure it as the generation table. The 
						  <phrase role="code">Generators</phrase> table is created on
						  the default device, or can optionally be passed a device name. Go ahead and
						  create the generators table by executing the 
						  <phrase role="code">EnsureGenerators</phrase> operator as
						  shown below.</para> 
					 <programlisting>EnsureGenerators();</programlisting> 
					 <para>Then when you want to make a column auto-increment you
						  set the default for the column to invoke 
						  <phrase role="code">GetNextGenerator</phrase> and pass it
						  the name of the generator to increment. An example of this is shown in the 
						  <phrase role="code">Movie</phrase> table. For more
						  information about generators see 
						  <ulink url="D4LGProgrammingTopics-UsingGenerators.html"
						  type="olinkb">Using Generators</ulink><!--Not sure about this link-->.</para> 
				</sect3> 
				<sect3> 
					 <title>Chart of Tables</title> 
					 <para>During this tutorial you will be creating several tables
						  and views. The following chart will help in understanding the finished
						  system.</para> 
					 <para><inlinegraphic fileref="Images/RentalTut001a.png"
						  width="683" depth="425" format="BMP"/></para> 
				</sect3> 
				<sect3> 
					 <title>MovieType Table</title> 
					 <para>The first table we need to create is a simple lookup. Run
						  the following code:</para> 
					 <programlisting><emphasis role="bold">create type</emphasis> Description <emphasis role="bold">like</emphasis> String 
{
 <emphasis role="bold">constraint</emphasis> LengthValid Length(<emphasis role="bold">value</emphasis>) &lt;= 50
  <emphasis role="bold">tags</emphasis> { DAE.SimpleMessage = "The Length of the string must be less than 50 characters." }
} <emphasis role="bold">static tags</emphasis> { Storage.Length = "50" };

<emphasis role="bold">create table</emphasis> MovieType
{
 ID : String <emphasis role="bold">tags</emphasis> { Frontend.Width = "6" },
 Genre : Description <emphasis role="bold">tags</emphasis> { Frontend.Preview.Include = "true" },
 <emphasis role="bold">key</emphasis> { ID }
};</programlisting> 
					 <para> The first statement above creates the 
						  <phrase role="code">Description</phrase> type. The 
						  <phrase role="code">System.String</phrase> type in Dataphor
						  specifies strings of any length (up to 2GB, of course). The 
						  <phrase role="code">Description</phrase> type defines a new
						  type that can contain strings of length 50 or less. This limitation is
						  introduced to ensure that the application will run regardless of where the data
						  will ultimately be stored. By defining a type with a known length, we can
						  instruct the Dataphor Server to use the appropriate size column for storage in
						  an SQL-based system. This is done using <emphasis>scalar type
						  maps</emphasis>.</para> 
					 <para> By default, the SQL-based scalar type map for 
						  <phrase role="code">System.String</phrase> will use 
						  <phrase role="code">VARCHAR(20)</phrase> as the type on the
						  target system. This would limit the data to 20 characters. If any value over 20
						  characters in length were inserted, the SQL-based system may throw an error, or
						  worse, the data would be lost without any error or warning. Even if the storage
						  system did throw an error, it is unlikely to be a user-friendly error.</para> 
					 <para> To ensure you have control of the string length and the
						  error messages returned to the user you can create a type that is
						  <emphasis>like</emphasis> a 
						  <phrase role="code">String</phrase>. You can specify the
						  storage length for the type using the 
						  <phrase role="code">Storage.Length</phrase> tag. A
						  <emphasis>constraint</emphasis> lets you check the data before it is sent to
						  the storage device and specify the error message that will be used if the
						  contraint is violated.</para> 
					 <para>The second statement will create a table that contains
						  two columns, an 
						  <phrase role="code">ID</phrase> column and a 
						  <phrase role="code">Genre</phrase> column. It will be used
						  to contain the different genres of movies for our movie database and will be
						  referenced as a lookup from the 
						  <phrase role="code">Movie</phrase> table.</para> 
					 <para>The tags part of the 
						  <phrase role="code">ID</phrase> column is metadata which is
						  attached to the column definition inside of the Dataphor Server. Programs using
						  the Dataphor Server, such as the Frontend Clients and Servers, can use this
						  metadata. In the case of the Frontend, metadata is used to control the way a
						  form will look when it is derived from the tables and queries. For more
						  information about metadata see 
						  <ulink
						  url="D4LGCatalogElements-Objects-Metadata.html"
						  type="olinkb">Metadata</ulink>.</para>
					 <para>Frontend tags can be specific or general. For example: 
						  <programlisting>ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" }</programlisting> would indicate that the ID is not to appear on any
						  user-interface (form) regardless of what mode the user-interface is in. 
						  <programlisting>ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Browse.Visible = "false" }</programlisting> would indicate ID will not be visible when the user-inteface
						  (form) is in the browse mode. When the user-interface is in any other mode, ID
						  will be visible. </para>
					 <para>For more information about tags see 
						  <ulink url="FTRTagsDescriptions.html"
						  type="olinkb">Tags</ulink>.</para>
					 <para>The 
						  <phrase role="code">Frontend.Width</phrase> tag on the 
						  <phrase role="code">ID</phrase> field indicates the display
						  width of the field on forms. The 
						  <phrase role="code">Frontend.Preview.Include</phrase> tag
						  on the 
						  <phrase role="code">Genre</phrase> column indicates that
						  the field should be shown from a lookup (i.e. a form that looks up a movie
						  type).</para> 
					 <para>The table above also has the 
						  <phrase role="code">ID</phrase> column set as a key. A key
						  is a column or set of columns in a table that can be used to uniquely identify
						  every row in the table. Every table must have at least one key. If a table
						  definition does not include a key, all the columns of the table will be used as
						  the key.</para> 
					 <para>Now, let's insert the movie types using the following
						  code:</para> 
					 <programlisting>// Movie Types courtesy of IMDB (imdb.com)
MovieType := <emphasis role="bold">table</emphasis> {
 <emphasis role="bold">row</emphasis> { "ACT" ID, "Action" Genre },
 <emphasis role="bold">row</emphasis> { "ADV", "Adventure" },
 <emphasis role="bold">row</emphasis> { "ANM", "Animation" },
 <emphasis role="bold">row</emphasis> { "FAM", "Family" },
 <emphasis role="bold">row</emphasis> { "COM", "Comedy" },
 <emphasis role="bold">row</emphasis> { "CRI", "Crime" },
 <emphasis role="bold">row</emphasis> { "DOC", "Documentary" },
 <emphasis role="bold">row</emphasis> { "DRA", "Drama" },
 <emphasis role="bold">row</emphasis> { "FAN", "Fantasy" },
 <emphasis role="bold">row</emphasis> { "FNO", "Film-Noir" },
 <emphasis role="bold">row</emphasis> { "HOR", "Horror" },
 <emphasis role="bold">row</emphasis> { "IND", "Independent" },
 <emphasis role="bold">row</emphasis> { "MUS", "Musical" },
 <emphasis role="bold">row</emphasis> { "MYS", "Mystery" },
 <emphasis role="bold">row</emphasis> { "ROM", "Romance" },
 <emphasis role="bold">row</emphasis> { "SF",  "Science Fiction" },
 <emphasis role="bold">row</emphasis> { "THR", "Thriller" },
 <emphasis role="bold">row</emphasis> { "WAR", "War" },
 <emphasis role="bold">row</emphasis> { "WST", "Western" }
};</programlisting> 
					 <para>A couple of things are of note in the above code.</para> 
					 <para>The first is the assignment operator 
						  <phrase role="code">:=</phrase> which is the equivalent of
						  emptying the table followed by an 
						  <phrase role="code"><emphasis role="bold">insert
								table</emphasis> { <emphasis role="bold">row</emphasis> { .... } }
								<emphasis role="bold">into</emphasis> MovieType</phrase>.</para> 
					 <para>The 
						  <phrase role="code"><emphasis
								role="bold">table</emphasis></phrase> and 
						  <phrase role="code"><emphasis
								role="bold">row</emphasis></phrase> keywords are table and row selectors,
						  respectively. They are used to <emphasis>select</emphasis> values of type 
						  <phrase role="code"><emphasis
								role="bold">table</emphasis></phrase> or 
						  <phrase role="code"><emphasis
								role="bold">row</emphasis></phrase>, just as 
						  <phrase role="code">5</phrase> is a literal selector of
						  type 
						  <phrase role="code">System.Integer</phrase>. The selected
						  table value is then inserted into the table.</para> 
					 <para>The column names are only specified on the first row in
						  the table selector. The name specifiers can be omitted after the first row, in
						  which case the compiler will assume the names as specified on the first row.
						  Note that if names are supplied, the order of the columns in the row selector
						  does not matter. For example, the following table selectors are equivalent: 
						  <programlisting><emphasis role="bold">table</emphasis> { <emphasis role="bold">row</emphasis> { 1 X, 1 Y }, <emphasis role="bold">row</emphasis> { 2 Y, 2 X } };
<emphasis role="bold">table</emphasis> { <emphasis role="bold">row</emphasis> { 1 Y, 1 X }, <emphasis role="bold">row</emphasis> { 2 X, 2 Y } };</programlisting></para> 
				</sect3> 
				<sect3> 
					 <title>Basic Queries</title> 
					 <para>Once the data has been inserted, you can query it.
						  Querying data in D4 is similar to SQL, but D4 queries do not have a from
						  clause. Therefore, in SQL where you would query 
						  <phrase role="code"><emphasis role="bold">select</emphasis>
								* <emphasis role="bold">from</emphasis> MovieType</phrase>, in D4 we would use 
						  <phrase role="code"><emphasis role="bold">select</emphasis>
								MovieType</phrase>.</para> 
					 <programlisting><emphasis role="bold">select</emphasis> MovieType</programlisting> 
					 <screen>ID  Genre
--- ---------------
ACT Action
ADV Adventure 
ANM Animation 
COM Comedy 
CRI Crime 
DOC Documentary 
DRA Drama 
FAM Family 
FAN Fantasy
FNO Film-Noir 
HOR Horror 
IND Independent 
MUS Musical 
MYS Mystery 
ROM Romance 
SF  Science Fiction 
THR Thriller 
WAR War 
WST Western</screen> 
					 <para>To specify which columns should be included in the
						  result, use the <emphasis>specify</emphasis> operator (<phrase role="code">{
								}</phrase>) as shown below:</para> 
					 <programlisting><emphasis role="bold">select</emphasis> MovieType { Genre };</programlisting> 
					 <screen>Genre 
--------------- 
Action 
Adventure 
Animation 
Comedy
Crime 
Documentary 
Drama 
Family 
Fantasy 
Film-Noir 
Horror 
Independent 
Musical
Mystery 
Romance 
Science Fiction 
Thriller 
War 
Western </screen> 
					 <para>The 
						  <phrase role="code"><emphasis
								role="bold">where</emphasis></phrase> operator is used to restrict the rows
						  that will appear in the result. However, unlike SQL, D4 is an algebraic query
						  language, and operators can be chained together as often as desired. For
						  example:</para> 
					 <programlisting><emphasis role="bold">select</emphasis> MovieType <emphasis role="bold">where</emphasis> ID &lt; "F" <emphasis role="bold">and</emphasis> ID &gt; "B";</programlisting> 
					 <screen>ID Genre 
--- ----------- 
COM Comedy 
CRI Crime 
DOC Documentary 
DRA Drama </screen> 
					 <programlisting><emphasis role="bold">select</emphasis> (MovieType <emphasis role="bold">where</emphasis> ID &lt; "F") <emphasis role="bold">where</emphasis> ID &gt; "B";</programlisting> 
					 <screen>ID Genre 
--- ----------- 
COM Comedy 
CRI Crime 
DOC Documentary 
DRA Drama </screen> 
					 <para>The preceding examples are equivalent. The latter example
						  uses multiple 
						  <phrase role="code"><emphasis
								role="bold">where</emphasis></phrase> operators, the former uses the logical 
						  <phrase role="code"><emphasis
								role="bold">and</emphasis></phrase> operator.</para> 
				</sect3> 
				<sect3> 
					 <title>MovieRating Table</title> 
					 <para>Run the following D4 statement to create and populate a 
						  <phrase role="code">MovieRating</phrase> table:</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> MovieRating
{
 ID : String <emphasis role="bold">tags</emphasis> { Frontend.Width = "10" },
 Description : Description <emphasis role="bold">tags</emphasis> { Frontend.Width = "30" },
 Position : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "False" },
 <emphasis role="bold">key</emphasis> { ID },
 <emphasis role="bold">key</emphasis> { Position } <emphasis role="bold">tags</emphasis> { Frontend.IsDefault = "True" }
};

MovieRating := <emphasis role="bold">table</emphasis>
{
	<emphasis role="bold">row</emphasis> { "G" ID, "General Audiences" Description, 1 Position },
	<emphasis role="bold">row</emphasis> { "PG", "Parental Guidance Suggested", 2 },
	<emphasis role="bold">row</emphasis> { "PG-13", "Parents Strongly Cautioned", 3 },
	<emphasis role="bold">row</emphasis> { "R", "Restricted", 4 },
	<emphasis role="bold">row</emphasis> { "NC-17", "No One 17 and Under Admitted", 5 },
	<emphasis role="bold">row</emphasis> { "NR", "No Rating", 6 }
};</programlisting> 
					 <para>The 
						  <phrase role="code">MovieRating</phrase> table has two
						  keys, which means that both the 
						  <phrase role="code">ID</phrase> and the 
						  <phrase role="code">Position</phrase> must be
						  unique.</para> 
					 <para>The 
						  <phrase role="code">Frontend.IsDefault</phrase> tag on the
						  Position key tells the Frontend to sort the rows using this key when the data
						  is displayed.</para> 
					 <para>Alternatively the table could be created as: 
						  <programlisting><emphasis role="bold">create table</emphasis> MovieRating
{
 ID : String <emphasis role="bold">tags</emphasis> { Frontend.Width = "10" },
 Description : Description <emphasis role="bold">tags</emphasis> { Frontend.Width = "30" },
 Position : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "False" },
 <emphasis role="bold">key</emphasis> { ID },
 <emphasis role="bold">order</emphasis> { Position }
};</programlisting></para> 
					 <para>Using an <emphasis>order</emphasis> would still provide
						  the sorted output by the Frontend. However, an order does not require that each
						  row have a unique value for 
						  <phrase role="code">Position</phrase>.</para> 
					 <para>An <emphasis>order</emphasis> is logically just
						  metadata.  Orders are a hint to the Dataphor Server, which can use them to
						  optimize the tables with indexes. They are also used by the Frontend to suggest
						  search criteria along with keys. Orders can contain multiple columns and an
						  optional ascending or descending (<phrase role="code"><emphasis
								role="bold">asc</emphasis></phrase> or 
						  <phrase role="code"><emphasis
								role="bold">desc</emphasis></phrase>) indicator for each column.</para> 
					 <para>The Frontend will determine the default sort order for a
						  given result set using the first order found in the following manner:</para> 
					 <orderedlist> 
						  <listitem> 
								<para>An order with a 
									 <phrase role="code">Frontend.IsDefault</phrase>
									 tag.</para> 
						  </listitem> 
						  <listitem> 
								<para>A key with a 
									 <phrase role="code">Frontend.IsDefault</phrase>
									 tag.</para> 
						  </listitem> 
						  <listitem> 
								<para>The first order.</para> 
						  </listitem> 
						  <listitem> 
								<para>The first key.</para> 
						  </listitem> 
					 </orderedlist> 
					 <para> The 
						  <phrase role="code">Frontend.Visible</phrase> metadata tag
						  attached to the 
						  <phrase role="code">Position</phrase> column is set to 
						  <phrase role="code">False</phrase>. This tells the Frontend
						  that 
						  <phrase role="code">Position</phrase> is not to be shown in
						  a derived user-interface.</para> 
					 <para>The 
						  <phrase role="code">Position</phrase> column exists to
						  ensure that the ratings are presented in their commonly regarded order. The
						  order of selected tables is undefined. This order will be maintained by the 
						  <phrase role="code">Position</phrase> key when the Frontend
						  displays the data. To obtain the same results using a select statement use the 
						  <phrase role="code"><emphasis role="bold">order
								by</emphasis></phrase> clause of the 
						  <phrase role="code"><emphasis
								role="bold">select</emphasis></phrase> statement. Because tables are
						  conceptually unordered, if the position were not retained as a column, then the
						  insertion order would be lost. For a full explanation on why tables are
						  conceptually unordered, see 
						  <ulink url="DDGP1StructuralAspect.html"
							type="olinkb">Structural Aspect</ulink>.</para> 
					 <programlisting><emphasis role="bold">select</emphasis> MovieRating</programlisting> 
					 <screen>ID    Description                  Position 
----- ---------------------------- -------- 
G     General Audiences            1 
NC-17 No One 17 and Under Admitted 5 
NR    No Rating                    6
PG    Parental Guidance Suggested  2
PG-13 Parents Strongly Cautioned   3
R     Restricted                   4 </screen> 
					 <programlisting><emphasis role="bold">select</emphasis> MovieRating <emphasis role="bold">order by</emphasis> { Position }</programlisting> 
					 <screen>ID    Description                  Position 
----- ---------------------------- --------
G     General Audiences            1 
PG    Parental Guidance Suggested  2 
PG-13 Parents Strongly Cautioned   3
R     Restricted                   4
NC-17 No One 17 and Under Admitted 5
NR    No Rating                    6 </screen> 
					 <para>In the first example, the order of the results is
						  arbitrary (you may even see a different order than is shown here) because the
						  order by clause is not given. In the latter example, the results will always be
						  retrieved as shown.</para> 
				</sect3> 
				<sect3> 
					 <title>Movie Table</title> 
					 <para>The following code creates a 
						  <phrase role="code">Movie</phrase> table and inserts some
						  sample data:</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> Movie
{
 ID : Integer { <emphasis role="bold">default</emphasis> GetNextGenerator("Movie.ID") }
  <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 Name : Description
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Width = "30",
   StaticByteSize = "40",
   Frontend.Preview.Include = "true"
  },
 Type : String <emphasis role="bold">tags</emphasis> { Frontend.Width = "6", Frontend.Browse.Visible = "false" },
 Rating : String <emphasis role="bold">tags</emphasis> { Frontend.Width = "7" },
 Year : Integer
  {
   <emphasis role="bold">constraint</emphasis> YearValid <emphasis role="bold">value</emphasis> &gt;= 1891
    <emphasis role="bold">tags</emphasis> { DAE.SimpleMessage = "Year must be 1891 or later." }
  }
  <emphasis role="bold">tags</emphasis> { Frontend.Width = "4" },
 <emphasis role="bold">key</emphasis> { ID },
 <emphasis role="bold">order</emphasis> { Name } <emphasis role="bold">tags</emphasis> { Frontend.IsDefault = "True" },
 <emphasis role="bold">reference</emphasis> Movies_MovieType { Type } <emphasis role="bold">references</emphasis> MovieType { ID },
 <emphasis role="bold">reference</emphasis> Movies_MovieRating { Rating } <emphasis role="bold">references</emphasis> MovieRating { ID }
};

Movie := <emphasis role="bold">table</emphasis> 
{
 <emphasis role="bold">row</emphasis>
 {
  GetNextGenerator("Movie.ID") ID,
  "Episode II - Attack of the Clones" Name,
  "SF" Type,
  "PG-13" Rating,
  2002 Year
 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "Space Balls", "COM", "PG-13", 1985 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "The Matrix", "SF", "R", 1999 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "Ferris Beuler's Day Off", "COM", "PG", 1982 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "The Princess Bride", "COM", "PG", 1984 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "Crimson Tide", "ACT", "R", 1993 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "Toy Story", "ANM", "G", 1995 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "My Fair Lady", "MUS", "G", 1976 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "Forget Paris", "ROM", "PG-13", 1987 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Movie.ID"), "State Fair", "MUS", "G", 1962 }
};</programlisting> 
					 <para>Notice that the 
						  <phrase role="code">Movie</phrase> table has an
						  auto-incremented 
						  <phrase role="code">ID</phrase> column. The 
						  <phrase role="code">GetNextGenerator</phrase> operator
						  returns a new number each time it is called using the generation table
						  discussed earlier. The default is used whenever a row is inserted that does not
						  already contain a value for the column.</para> 
					 <para> Since the 
						  <phrase role="code">Genre</phrase> column of the MovieType
						  table will be displayed when a 
						  <phrase role="code">Browse</phrase> of the Movie table is
						  derived, there is no need to have the 
						  <phrase role="code">Type</phrase> column also. The 
						  <phrase role="code">Frontend.Browse.Visible</phrase> tag on
						  the 
						  <phrase role="code">Type</phrase> column is set to 
						  <phrase role="code">false</phrase> so the 
						  <phrase role="code">Type</phrase> column will not be
						  displayed when a 
						  <phrase role="code">Browse</phrase> is derived.</para> 
					 <para>The constraint on the Year column requires that the year
						  be 1891 or later. In 1891 at the Edison laboratory the first tests were just
						  being done with the new Kinetograph (a motion picture camera).</para> 
					 <para>In the section of the script where the data is being
						  inserted, the 
						  <phrase role="code">ID</phrase> column is specified as a 
						  <phrase role="code">GetNextGenerator</phrase> call for each
						  row. Usually this would not be necessary. The column value could be left out
						  and each row would default to a 
						  <phrase role="code">GetNextGenerator</phrase> invocation.
						  We, however, need each ID to be matched to a specific movie so that they can be
						  referenced by the sample data in the 
						  <phrase role="code">MovieActor</phrase> table correctly. If
						  the 
						  <phrase role="code">ID</phrase> column was left out, then
						  the undefined order of the rows would decide what ID each movie would
						  get.</para> 
					 <para>Lastly, we have the <emphasis>references</emphasis>.
						  References are special cases of database-wide integrity constraints. A
						  reference sets up a relationship between two tables that is enforced by the
						  Dataphor Server.</para> 
					 <para>Two references exist in the 
						  <phrase role="code">Movie</phrase> table.  One links the 
						  <phrase role="code">Rating</phrase> column of the 
						  <phrase role="code">Movie</phrase> table to the 
						  <phrase role="code">ID</phrase> column of the 
						  <phrase role="code">MovieRating</phrase> table.  The other
						  links the 
						  <phrase role="code">Type</phrase> column is linked of the 
						  <phrase role="code">Movie</phrase> table similarly. The
						  reference constraint ensures that values of the 
						  <phrase role="code">Type</phrase> column of the 
						  <phrase role="code">Movie</phrase> table must be either a
						  value within the 
						  <phrase role="code">ID</phrase> column of the 
						  <phrase role="code">MovieType</phrase> table, or be a value
						  which has been marked 
						  <phrase role="code"><emphasis
								role="bold">special</emphasis></phrase>. For more information on special values
						  see 
						  <ulink
							url="D4LGCatalogElements-ScalarTypes-SpecialValues.html" type="olinkb">Special
								Values</ulink>.</para> 
					 <para>Every row in the source table of the reference must
						  either be set to a 
						  <phrase role="code"><emphasis
								role="bold">special</emphasis></phrase> or have a corresponding row in the
						  target table for which the values in each column are equal.</para> 
					 <para>Following the 
						  <phrase role="code"><emphasis
								role="bold">reference</emphasis></phrase> keyword the name of the reference is
						  given. The name is important in that it exists in the same namespace as the
						  tables themselves. You could run the script 
						  <phrase role="code"><emphasis role="bold">drop
								reference</emphasis> Movie_MovieType;</phrase> on the Dataphor Server and it
						  would remove the reference. In fact, you would need to drop the above reference
						  before you could drop the 
						  <phrase role="code">MovieType</phrase> table.</para> 
					 <para>After the reference name, a list of columns in the source
						  table is given. When a reference is defined with a table definition, as is the
						  case here, the source table is the containing table, i.e. the 
						  <phrase role="code">Movie</phrase> table.</para> 
					 <para>Next, the keyword 
						  <phrase role="code"><emphasis
								role="bold">references</emphasis></phrase> is used, followed by the target
						  table and then a list of columns which will be required to match the source
						  columns. The source and target column lists must contain the same number of
						  columns, and will be matched in the order they appear in the column lists. The
						  target columns of a reference must always include a key of the target
						  table.</para> 
					 <para>It is also important whether or not a source column is a
						  key. If the source column is a key, then the reference describes a one to one
						  or parent/extension relationship. If the source column is not a key, the
						  reference describes a one to many or lookup/detail relationship. This
						  information is used by the Dataphor Frontend to derive appropriate
						  user-interfaces for any given table, view, or even expression. For more
						  information about references, see 
						  <ulink url="D4LGCatalogElements-References.html"
							type="olinkb">References</ulink>.</para> 
				</sect3> 
				<sect3> 
					 <title>Actor Table</title> 
					 <para>Use the following D4 statements to create an 
						  <phrase role="code">Actor</phrase> table and insert some
						  test data:</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> Actor
{
 ID : Integer { <emphasis role="bold">default</emphasis> GetNextGenerator("Actor.ID") }
  <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 Name : Description
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Width = "25",
   Frontend.Preview.Include = "true"
  },
 Gender : String
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.ElementType = "Choice",
   Frontend.Choice.Items = "Female=F,Male=M",
   Frontend.Preview.Include = "true",
   Frontend.Width = "4"
  },
 <emphasis role="bold">key</emphasis> { ID },
 <emphasis role="bold">order</emphasis> { Name } <emphasis role="bold">tags</emphasis> { Frontend.IsDefault = "True" }
};

Actor := <emphasis role="bold">table</emphasis>
{
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID") ID, "Liem Neeson" Name, "M" Gender },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Natalie Portman", "F" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Ewan MacGrgor", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Frank Oz", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Christopher Lee", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Haden Christiansen", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Carie Elwes", "F" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Mandy Patiken", "F" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Andrae the Giant", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Billy Crystal", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Pat Boone", "M" },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Actor.ID"), "Audrey Hepburn", "F" }
};</programlisting> 
					 <para>Of note in the above code is the metadata tags on the 
						  <phrase role="code">Gender</phrase> column. When creating a
						  form for this table, the Frontend Server will notice these tags and will use a
						  radio box style control, with the options of <emphasis>Male</emphasis> or
						  <emphasis>Female</emphasis>.</para> 
					 <para>The test data also includes the 
						  <phrase role="code">ID</phrase> explicitly, even though the
						  
						  <phrase role="code">ID</phrase> column is set to have
						  auto-increment behavior. This is done for a similar reason it was done in the
						  Movie table's sample data: to ensure a predictable ID for each of the rows.
						  Alternatively, we could assign each row an explicit ID, then update the
						  generator table to ensure that future IDs do not conflict.</para> 
				</sect3> 
				<sect3> 
					 <title>MovieActor Table</title> 
					 <para>Run the following code in Dataphoria to create a 
						  <phrase role="code">MovieActor</phrase> table and place
						  some test data into it:</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> MovieActor
{
 Movie_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 Actor_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 <emphasis role="bold">key</emphasis> { Movie_ID, Actor_ID },
 <emphasis role="bold">reference</emphasis> MovieActor_Movie { Movie_ID }
  <emphasis role="bold">references</emphasis> Movie { ID },
 <emphasis role="bold">reference</emphasis> MovieActor_Actor { Actor_ID }
  <emphasis role="bold">references</emphasis> Actor { ID }
   <emphasis role="bold">tags</emphasis> { Frontend.Detail.Embedded = "true" }
} <emphasis role="bold">tags</emphasis> { Frontend.Title = "Movie Actor" };

MovieActor := <emphasis role="bold">table</emphasis>
{
 <emphasis role="bold">row</emphasis> { 1 Actor_ID, 1 Movie_ID },
 <emphasis role="bold">row</emphasis> { 2, 1 },
 <emphasis role="bold">row</emphasis> { 3, 1 },
 <emphasis role="bold">row</emphasis> { 4, 1 },
 <emphasis role="bold">row</emphasis> { 5, 1 },
 <emphasis role="bold">row</emphasis> { 6, 1 },
 <emphasis role="bold">row</emphasis> { 7, 5 },
 <emphasis role="bold">row</emphasis> { 8, 5 },
 <emphasis role="bold">row</emphasis> { 9, 5 },
 <emphasis role="bold">row</emphasis> { 10,5 },
 <emphasis role="bold">row</emphasis> { 10,9 },
 <emphasis role="bold">row</emphasis> { 11,10 },
 <emphasis role="bold">row</emphasis> { 12,8 }
};</programlisting> 
					 <para>The Dataphor Frontend Server will recognize the data
						  manipulation pattern of the references above and will automatically create
						  forms to handle the data input properly.</para> 
					 <para>By default, the references will be shown as items on the
						  form menus, but with the 
						  <phrase role="code">Frontend.Detail.Embedded</phrase> tag
						  set to true, a browse form for the 
						  <phrase role="code">MovieActor</phrase> table will be
						  embedded within forms for the 
						  <phrase role="code">Actor</phrase> table. So, whenever we
						  access an actor list or row, we will also see and manipulate his or her
						  movies.</para> 
					 <para>Note also that the key for the 
						  <phrase role="code">MovieActor</phrase> has multiple
						  columns. In this case, the individual values within each column do not
						  necessarily have to be unique, but the combination of both column values must
						  be unique. As previously mentioned, the key concept applies to any number of
						  columns, including zero.</para> 
				</sect3> 
				<sect3> 
					 <title>Viewing the Tables</title> 
					 <para>In the Dataphor Explorer pane under Sample.Rental right
						  click the Tables entry and select refresh. This ensures that all the tables are
						  displayed. If the + symbol is displayed to the left of Tables, click it to
						  expand the listing. Now you can see all the tables that have been
						  created.</para> 
					 <para>
						  <inlinegraphic fileref="Images/RentalTut001b.png" width="315"
						  depth="513"/></para> 
					 <para>Right click the 
						  <phrase role="code">Movie</phrase> table, then select 
						  <command>Browse</command> (or you can double click the 
						  <phrase role="code">Movie</phrase> table). The following
						  form will appear.</para> 
					 <para><inlinegraphic fileref="images/RentalTut002.png"
						  width="508" depth="356"/></para> 
					 <para>From here you can completely manipulate the movies in the
						  
						  <phrase role="code">Movie</phrase> table. If you select a
						  movie and try to change the year value to a year before 1891 you will get the
						  error:</para> 
					 <para><inlinegraphic fileref="Images\RentalTut002b.png"
						  width="309" depth="111"/></para> 
					 <para>This is generated because of the 
						  <phrase role="code">constraint</phrase> on the 
						  <phrase role="code">Year</phrase> column in the 
						  <phrase role="code">Movie</phrase> table.</para> 
					 <para>The reference from the 
						  <phrase role="code">MovieActor</phrase> table causes a link
						  under the details menu. Select the movie 
						  <phrase role="code">Episode II - Attack of the
								Clones</phrase>. Then click on 
						  <phrase role="code">Details</phrase>, 
						  <phrase role="code">MovieActor...</phrase> and it brings up
						  the following form.</para> 
					 <para><inlinegraphic fileref="images/RentalTut003.png"
						  width="351" depth="295"/>	</para> 
					 <para> This is a browse on the 
						  <phrase role="code">MovieActor</phrase> table, but it shows
						  only rows associated with the current movie in the prior form. The browse also
						  automatically includes the proper information from the 
						  <phrase role="code">Actor</phrase> table.</para> 
					 <para>If you were to click add on the above form you may expect
						  it to give you a form to create a new actor, but it doesn't. You are still
						  working with the 
						  <phrase role="code">MovieActor</phrase> table so it creates
						  a lookup to the 
						  <phrase role="code">Actor</phrase> table and defaults the
						  movie to the current one being worked with, as shown below. If this seems
						  confusing, browse on the 
						  <phrase role="code">MovieActor</phrase> table by double
						  clicking on it in the Dataphor Explorer pane to get a better view of the 
						  <phrase role="code">MovieActor</phrase> table and how the
						  Application Server derives forms for it by default.</para> 
					 <para><inlinegraphic fileref="images/RentalTut004.png"
						  width="326" depth="234"/></para> 
					 <para>The window icon to the right of the information blocks
						  allows you to select the values from a lookup. You click on the window icon to
						  select an actor. Selecting the lookup will display the following form.</para> 
					 <para><inlinegraphic fileref="images/RentalTut005.png"
						  width="326" depth="415"/></para> 
					 <para>This form is a browse on the 
						  <phrase role="code">Actor</phrase> table. Note, however,
						  that the form has accept/reject toolbar buttons rather than just close.</para> 
					 <para>The 
						  <phrase role="code">Actor</phrase> table has the same kind
						  of relationship with the 
						  <phrase role="code">MovieActor</phrase> table, except that
						  it has the 
						  <phrase role="code">Embedded</phrase> metadata tag on the 
						  <phrase role="code">reference</phrase>, therefore the
						  browse window for 
						  <phrase role="code">MovieActor</phrase> is embedded inside
						  of the actor browse.</para> 
					 <para>When you select Billy Crystal and click 
						  <command>Accept</command>, the lookup field from the
						  previous form is set to the currently selected 
						  <phrase role="code">Actor</phrase> row, as shown
						  below.</para> 
					 <para><inlinegraphic fileref="images/RentalTut006.png"
						  width="326" depth="234"/></para> 
					 <para>Then when we click accept again a row is inserted into
						  the 
						  <phrase role="code">MovieActor</phrase> table and according
						  to the database, Billy Crystal was in Star Wars. Maybe he did a
						  cameo....</para> 
					 <para><inlinegraphic fileref="images/RentalTut007.png"
						  width="351" depth="295"/></para> 
					 <para>If you browse 
						  <phrase role="code">Actors</phrase> by double clicking the 
						  <phrase role="code">Actor</phrase> table in the Dataphor
						  Explorer pane, then select Billy Crystal, Star Wars will be listed as one of
						  his movies.</para> 
					 <para>Close the Browse Movie Actor and Browse Movie
						  forms.</para> 
				</sect3> 
		  </sect2> 
		  <sect2> 
				<title>Developing a Video Rental Database</title> 
				<para>Now that we have a small movie database functioning, we can
					 start working on the tables for the rental application.</para> 
				<sect3> 
					 <title>Video Table</title> 
					 <para>One table is needed for all the available videos. Each
						  row in this table will represent a single video owned by the store which can be
						  rented. There can be more than one video for each movie.</para> 
					 <para>Create and populate the 
						  <phrase role="code">Video</phrase> table by executing the
						  following code:</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> Video
{
 ID : Integer { <emphasis role="bold">default</emphasis> GetNextGenerator("Video.ID") }
  <emphasis role="bold">tags</emphasis> { Frontend.Width = "8" },
 Movie_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 AquiredOn : Date { <emphasis role="bold">default</emphasis> Date() }
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Preview.Visible = "false",
   Frontend.Width = "12"
  },
 TimesRented : Integer { <emphasis role="bold">default</emphasis> 0 }
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Preview.Visible = "false",
   Frontend.Width = "12"
  },
 <emphasis role="bold">reference</emphasis> Video_Movie { Movie_ID } <emphasis role="bold">references</emphasis> Movie { ID },
 <emphasis role="bold">key</emphasis> { ID }
};

Video := <emphasis role="bold">table</emphasis>
{	
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID") ID, 1 Movie_ID },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 1 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 1 },	
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 1 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 1 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 1 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 2 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 2 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 2 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 3 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 3 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 4 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 4 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 5 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 6 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 6 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 7 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 8 },
 <emphasis role="bold">row</emphasis> { GetNextGenerator("Video.ID"), 9 }
};</programlisting> 
					 <para>The 
						  <phrase role="code">Date</phrase> operator returns the
						  current date as a value of type 
						  <phrase role="code">Date</phrase>. This is used as a
						  default value for the 
						  <phrase role="code">AquiredOn</phrase> column.</para> 
				</sect3> 
				<sect3> 
					 <title>Account Table</title> 
					 <para>Next is a table that keeps track of the customer accounts
						  that the videos will be rented to.</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> Account
{
 ID : Integer { <emphasis role="bold">default</emphasis> GetNextGenerator("Account.ID") }
  <emphasis role="bold">tags</emphasis> { Frontend.Width = "8", Frontend.Add.Visible = "false" },
 Name : Description
  <emphasis role="bold">tags</emphasis> { Frontend.Width = "20", Frontend.Preview.Include = "true" },
 Phone : String,
 Address : Description
  <emphasis role="bold">tags</emphasis> { Frontend.Group = "Address", Frontend.Title = "Line 1" },
 Address2 : Description { <emphasis role="bold">nil</emphasis> }
  <emphasis role="bold">tags</emphasis> { Frontend.Group = "Address", Frontend.Title = "Line 2" },
 City : Description
  <emphasis role="bold">tags</emphasis> { Frontend.Group = "Address", Frontend.FlowBreak = "true" },
 State : String
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Group = "Address",
   Frontend.FlowBreak = "true",
   Frontend.Width = "5"
  },
 Zip : String
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Group = "Address",
   Frontend.Width = "10"
  },
 JoinedOn : Date { <emphasis role="bold">default</emphasis> Date() },
 Balance : Money { <emphasis role="bold">default</emphasis> $0 } <emphasis role="bold">tags</emphasis> { Frontend.Width = "12" },
 key { ID }
};

Account := <emphasis role="bold">table</emphasis> 
{
 <emphasis role="bold">row</emphasis>
 {
  "Bryan" Name,
  "Harvest Cove" Address,
  "Provo" City,
  "UT" State,
  "84601" Zip,
  "555-4444" Phone,
  $132 Balance
 }
};</programlisting> 
					 <para>The 
						  <phrase role="code">Frontend.Group</phrase> tags on the
						  address columns tell the derivation engine to group them together in a group
						  box, as shown. For more information about Frontend tags see 
						  <ulink url="FTRTagsDescriptions-FrontendTags.html"
							type="olinkb">Frontend Tags</ulink>.</para> 
					 <para><inlinegraphic fileref="images/rentaltut008.png"
						  width="326" depth="425"/></para> 
					 <para>Notice that the 
						  <phrase role="code">JoinedOn</phrase> and 
						  <phrase role="code">Balance</phrase> columns are both
						  defaulted on a new row. The client is able to ask the Dataphor Server what a
						  default row "looks like" without actually posting any data to the
						  database.</para> 
					 <para>The 
						  <phrase role="code">Address2</phrase> column type is
						  followed by 
						  <phrase role="code">{ <emphasis role="bold">nil</emphasis>
								}</phrase>. This tells the Dataphor Server that the column is not required and
						  can contain no data at all. For more information about the use of 
						  <phrase role="code"><emphasis
								role="bold">nil</emphasis></phrase> see 
						  <ulink url="D4LGNilSemantics.html" type="olinkb">Nil
								Semantics</ulink>.</para> 
					 <para>The 
						  <phrase role="code">ID</phrase> column is not visible on
						  the add form (though it is still being generated with its default value), yet
						  it is visible on the other forms. This is due to the 
						  <phrase role="code">Frontend.Add.Visible = "false"</phrase>
						  tag on the 
						  <phrase role="code">ID</phrase> column. The 
						  <phrase role="code">Add</phrase> qualification specifies
						  that the tag applies more specifically to a particular type of "page".</para> 
					 <para>The use of 
						  <phrase role="code">Frontend.Flowbreak = "true"</phrase> on
						  
						  <phrase role="code">City</phrase> and 
						  <phrase role="code">State</phrase> tells the Dataphor
						  Server that when a form is derived, the column following the ones containing
						  this tag should be placed on the same line. Doing this made 
						  <phrase role="code">State</phrase> follow 
						  <phrase role="code">City</phrase>, and 
						  <phrase role="code">Zip</phrase> follow 
						  <phrase role="code">State</phrase> all on one line.</para> 
					 <para>When forms are derived by the Dataphor Server, the names
						  associated with the columns are generated from the table/column name. This can
						  be overridden using the 
						  <phrase role="code">Frontend.Title</phrase> tag as seen in
						  the 
						  <phrase role="code">Address</phrase> and 
						  <phrase role="code">Address2</phrase> columns.</para> 
				</sect3> 
				<sect3> 
					 <title>Sale Table</title> 
					 <para>Now create a table to track sales.</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> Sale
{
 ID : Integer { <emphasis role="bold">default</emphasis> GetNextGenerator("Sale.ID") }
  <emphasis role="bold">tags</emphasis>
  {
   Frontend.Add.Visible = "false",
   Frontend.Width = "8"
  },
 Account_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Width = "8" },
 PurchasedOn : Date { <emphasis role="bold">default</emphasis> Date() },
 <emphasis role="bold">reference</emphasis> Sale_Account { Account_ID } <emphasis role="bold">references</emphasis> Account { ID },
 <emphasis role="bold">key</emphasis> { ID }
};</programlisting> 
				</sect3> 
				<sect3> 
					 <title>SaleItem Table</title> 
					 <para>Now create a 
						  <phrase role="code">SaleItem</phrase> table which will keep
						  track of each item sold for each sale.</para> 
					 <programlisting><emphasis role="bold">create table</emphasis> SaleItem
{
 ID : Integer { <emphasis role="bold">default</emphasis> GetNextGenerator("SaleItem.ID") }
  <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 Sale_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Width = "8" },
 Description : Description,
 Cost : Money,
 <emphasis role="bold">reference</emphasis> SaleItem_Sale { Sale_ID } <emphasis role="bold">references</emphasis> Sale {ID}
  <emphasis role="bold">tags</emphasis> { Frontend.Detail.Embedded = "True" },
 <emphasis role="bold">key</emphasis> { ID }
};</programlisting> 
					 <para>Note that the reference has a 
						  <phrase role="code">Frontend.Detail.Embedded</phrase>
						  metadata tag. This tells the derivation engine to put a detail browse on the
						  referenced table's forms (which can further be restricted to specific forms).
						  If the 
						  <phrase role="code">Detail</phrase> was not specified, then
						  from the referencing table's perspective (<phrase
						  role="code">SaleItem</phrase>), the referenced table (<phrase
						  role="code">Sale</phrase>) would be embedded. For more information about
						  Frontend tags see 
						  <ulink url="FTRTagsDescriptions-FrontendTags.html"
							type="olinkb">Frontend Tags</ulink>.</para> 
				</sect3> 
				<sect3> 
					 <title>Rental Tables</title> 
					 <para>You need to store more information when a video is
						  rented. You need a "special kind" of sale item specifically for renting videos.
						  Now create two tables to extend the 
						  <phrase role="code">SaleItem</phrase> to track video
						  rentals. Two tables are used in order to indicate the status of the rented
						  video.</para> 
					 <para> The first table will be 
						  <phrase role="code">RentedVideo</phrase> and will contain
						  the information about the videos that have been rented but not yet returned.
						  One of the keys of this table will be the 
						  <phrase role="code">Video_ID</phrase>. Using 
						  <phrase role="code">Video_ID</phrase> as a key will ensure
						  that a video can only be rented once at any given time. It must be returned
						  before it can be rented again.</para> 
					 <para>The second table will be 
						  <phrase role="code">ReturnedVideo</phrase> and will contain
						  the information about returned videos. When a video is returned the appropriate
						  row in the 
						  <phrase role="code">RentedVideo</phrase> table will be
						  deleted and a row will be inserted into 
						  <phrase role="code">ReturnedVideo</phrase>.</para> 
					 <para>It would be preferable to have the name of the movie
						  available on the derived forms for the rental tables. The Dataphor server looks
						  at all first level references for 
						  <phrase role="code">Frontend.Preview.Include</phrase> tags.
						  There is one on 
						  <phrase role="code">Name</phrase> in the 
						  <phrase role="code">Movie</phrase> table. But this table
						  will not be referenced directly by rental tables since you rent videos, not
						  movies.</para> 
					 <para>To overcome this you can create a 
						  <phrase role="code">view</phrase> that includes the video
						  ID and movie name, then reference that from the rental tables.</para> 
					 <programlisting><emphasis role="bold">create view</emphasis> VideoDetail
 Video <emphasis role="bold">join</emphasis> (Movie <emphasis role="bold">rename</emphasis> { ID Movie_ID });</programlisting> 
					 <programlisting><emphasis role="bold">create table</emphasis> RentedVideo
{
 Video_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Width = "8" },
 ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Visible = "false" },
 RentedOn : Date { <emphasis role="bold">default</emphasis> Date() },
 DueOn : Date { <emphasis role="bold">default</emphasis> (Date() + Days(3)).DatePart() },
 <emphasis role="bold">reference</emphasis> RentedVideo_SaleItem { ID } <emphasis role="bold">references</emphasis> SaleItem { ID },
 <emphasis role="bold">reference</emphasis> RentedVideo_VideoDetail { Video_ID } <emphasis role="bold">references</emphasis> VideoDetail { ID },
 <emphasis role="bold">key</emphasis> { Video_ID },
 <emphasis role="bold">key</emphasis> { ID }
};

<emphasis role="bold">create table</emphasis> ReturnedVideo
{
 ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Width = "8" },
 Video_ID : Integer <emphasis role="bold">tags</emphasis> { Frontend.Width = "8" },
 RentedOn : Date,
 DueOn : Date,
 ReturnedOn : Date,
 LateFee : Money,
 <emphasis role="bold">reference</emphasis> ReturnedVideo_SaleItem { ID } <emphasis role="bold">references</emphasis> SaleItem { ID },
 <emphasis role="bold">reference</emphasis> ReturnedVideo_VideoDetail { Video_ID } <emphasis role="bold">references</emphasis> VideoDetail { ID },
 <emphasis role="bold">key</emphasis> { ID }
};</programlisting> 
					 <para>Look at the default for the 
						  <phrase role="code">DueOn</phrase> column. 
						  <phrase role="code">Date()</phrase> returns the current
						  date as a 
						  <phrase role="code">Date</phrase> value. 
						  <phrase role="code">Days(3)</phrase> returns a 
						  <phrase role="code">Timespan</phrase> value equal to 3
						  days. 
						  <phrase role="code">(Date()+ Days(3))</phrase> returns a 
						  <phrase role="code">DateTime</phrase> value. Since you want
						  just the date 
						  <phrase role="code">.DataPart()</phrase> truncates the 
						  <phrase role="code">DateTime</phrase> value to return a 
						  <phrase role="code">Date</phrase> value.</para> 
					 <para>Now create an operator (sometimes called a procedure,
						  function, routine) named 
						  <phrase role="code">AddRental</phrase> that, given a row
						  from the 
						  <phrase role="code">RentedVideo</phrase> table, updates the
						  appropriate row of the 
						  <phrase role="code">Video</phrase> table.</para> 
					 <programlisting><emphasis role="bold">create operator</emphasis> AddRental(ARow : <emphasis role="bold">typeof</emphasis>(RentedVideo[]))
<emphasis role="bold">begin</emphasis>
 <emphasis role="bold">update</emphasis> Video 
  <emphasis role="bold">set</emphasis> { TimesRented := TimesRented + 1 }
  <emphasis role="bold">where</emphasis> ID = ARow.Video_ID;
<emphasis role="bold">end</emphasis>;</programlisting> 
					 <para>Once this operator is created, it can be called anywhere
						  in the code, given a row of the 
						  <phrase role="code">RentedVideo</phrase> table type as an
						  argument.</para> 
					 <para>The 
						  <phrase role="code">AddRental</phrase> operator can further
						  be attached to the modification behavior of the 
						  <phrase role="code">RentedVideo</phrase> table, so that it
						  is called after each insert.</para> 
					 <programlisting><emphasis role="bold">attach operator</emphasis> AddRental	<emphasis role="bold">to</emphasis> RentedVideo <emphasis role="bold">on after insert</emphasis>;</programlisting> 
					 <para>For more information on operators see 
						  <ulink url="D4LGCatalogElements-Operators.html"
							type="olinkb">Operators</ulink>.</para> 
					 <para>A way to view the videos that are currently available
						  would be useful. 
						  <programlisting><emphasis role="bold">create view</emphasis> AvailableVideo
 VideoDetail
 <emphasis role="bold">left join</emphasis> (RentedVideo { Video_ID }) <emphasis role="bold">by</emphasis> ID = Video_ID
 <emphasis role="bold">include rowexists</emphasis>
 <emphasis role="bold">where not rowexists</emphasis>
 { ID, Name, Type, Rating, Year };</programlisting></para> 
				</sect3> 
		  </sect2> 
		  <sect2> 
				<title>Designing the User-Interface</title> 
				<para>Now that the database design is essentially done, the rest of
					 the application logic can be built around it.</para> 
				<sect3> 
					 <title><indexterm><primary>Creating a
									 Form</primary></indexterm><indexterm><primary>How
									 to</primary><secondary>Creating a
									 Form</secondary></indexterm><indexterm><primary>Form,
									 Creating</primary></indexterm><indexterm><primary>How
									 to</primary><secondary>Dataphoria
									 Designer</secondary></indexterm><indexterm><primary>Dataphoria
									 Designer</primary></indexterm>Creating an Entry Form</title> 
					 <para>Forms are created using Dataphoria. To start a new form
						  you can press 
						  <phrase role="code">Ctrl-N</phrase>, or click on the blank
						  form icon under the File title, or click 
						  <phrase role="code">File</phrase> then 
						  <phrase role="code">New</phrase>. Any of these will display
						  the 
						  <phrase role="code">Select a designer...</phrase>
						  window.</para> 
					 <para>
						  <inlinegraphic fileref="Images/RentalTut010.png" width="399"
							depth="382"/></para> 
					 <para> In this window select 
						  <phrase role="code">DFD - Form Designer</phrase> and click 
						  <phrase role="code">Accept</phrase>. The Dataphoria windows
						  will look approximately like this.</para> 
					 <para>
						  <inlinegraphic fileref="Images\RentalTut011.png" width="772"
							depth="515"/></para> 
					 <para>The various panes in the window can be moved, sized, or
						  separated from the main window completely to be displayed as you like. The
						  thumbtack at the top right of each pane is used to pin or release the pane.
						  When the tack is pointing down the pane is stationary. Clicking the tack will
						  turn it sideways and the pane will slide out of view when not in use. This
						  increases the area available for other work. To retrieve a pane that is out of
						  view simply move the mouse over the tab with the name of the pane and it will
						  slide back into view.</para> 
					 <para>The panes can be moved to another location or removed
						  from the Dataphoria window by clicking on the strip where the name of the pane
						  is, 
						  <phrase role="code">Form Design</phrase> for example, and
						  dragging the pane where you would like it.</para> 
					 <para>As shown above, just to the right of the Dataphor
						  Explorer is the 
						  <phrase role="code">Designer</phrase>. Within the 
						  <phrase role="code">Designer</phrase> are four sections.
						  The left pane is the 
						  <phrase role="code">Palette</phrase>. This is where you
						  select the elements or 
						  <phrase role="code">components</phrase> you want to place
						  on the form.</para> 
					 <para>The 
						  <phrase role="code">Form Design</phrase> pane is the
						  preview of the form you are working on. This is a fully functional form so you
						  can use it as you design it.</para> 
					 <para>The 
						  <phrase role="code">Properties</phrase> pane is were
						  properties of the currently selected component are displayed and edited.</para>
					 
					 <para>The area of the window with the text 
						  <phrase role="code">[FormInterface]</phrase> is called the 
						  <phrase role="code">Component Tree</phrase>. This area will
						  display a tree representing all the components on the form. 
						  <phrase role="code">[FormInterface]</phrase> is the root of
						  the tree, it is the "Root Form Component". The 
						  <phrase role="code">Component Tree</phrase> is where you
						  will place components, move them, name them, and select them so that you can
						  view or modify the component's properties.</para> 
					 <para>All 
						  <phrase role="code">Non Visual</phrase> and 
						  <phrase role="code">Action</phrase> components are children
						  of the 
						  <phrase role="code">Root Form Component</phrase>. The only
						  exception is the 
						  <phrase role="code">DataArgument</phrase> which is always a
						  child of a 
						  <phrase role="code">Source</phrase> or a 
						  <phrase role="code">DataScriptAction</phrase> component.
						  One and only one visible element will be a child of the 
						  <phrase role="code">Root Form Component</phrase>. This one
						  element is normally a 
						  <phrase role="code">Row</phrase> or a 
						  <phrase role="code">Column</phrase>. All other visible
						  elements (<phrase role="code">Data</phrase> controls and 
						  <phrase role="code">Static</phrase> controls) on the form
						  will be descendents of the that first visible element. </para> 
					 <para>When the designer opens, it creates a new empty form and
						  shows it. The form which is currently being designed is always loaded and
						  running, so that we can see exactly how it looks and works.</para> 
					 <para>The first form you'll create is the main form used to run
						  the application. Normally the first form of an application has a method for
						  accessing the appropriate tables or functions. In this case buttons (triggers)
						  are used..</para> 
					 <para>First give the Form a title. Click the text 
						  <phrase role="code">[FormInterface]</phrase> in the
						  Component Tree. The Properties for the 
						  <phrase role="code">Root Form Component</phrase> are now
						  displayed. In the 
						  <phrase role="code">Text</phrase> property enter 
						  <phrase role="code">Video Rental System</phrase>. As soon
						  as you move the cursor out of the 
						  <phrase role="code">Text</phrase> property the words will
						  appear at the top of the form.</para> 
					 <para><phrase role="code">Rows</phrase>, 
						  <phrase role="code">columns</phrase>, and 
						  <phrase role="code">groups</phrase>, just to name a few,
						  are used to control the layout of the elements on the form. To get an idea of
						  what this form will look like see the following sketch.</para> 
					 <para>
						  <inlinegraphic fileref="Images\RentalTut012.png" width="535"
							depth="302"/></para> 
					 <para> First place a 
						  <phrase role="code">Column</phrase> on the form. In the 
						  <phrase role="code">Palette</phrase> pane click 
						  <phrase role="code">Static Controls</phrase> to display the
						  static element components. Then click 
						  <phrase role="code">Column</phrase>, move the mouse to the
						  Component Tree and click the text 
						  <phrase role="code">[FormInterface]</phrase>. This makes
						  the 
						  <phrase role="code">Column</phrase> a child of the 
						  <phrase role="code">Root Form Component</phrase>. Now
						  Dataphoria is waiting for you to name the 
						  <phrase role="code">Column</phrase>. Type 
						  <phrase role="code">MainColumn</phrase> and press Enter. If
						  you want to change the name of a component, select the component then press
						  F2.</para> 
					 <para>Next place a 
						  <phrase role="code">Row</phrase> as a child of 
						  <phrase role="code">MainColumn</phrase> by going to the 
						  <phrase role="code">Palette</phrase> pane and clicking 
						  <phrase role="code">Row</phrase>, then click 
						  <phrase role="code">MainColumn</phrase> in the Component
						  Tree, and name it 
						  <phrase role="code">ButtonRow</phrase>. Now place a 
						  <phrase role="code">Column</phrase> as a child of 
						  <phrase role="code">ButtonRow</phrase> and name it 
						  <phrase role="code">ButtonColumn1</phrase>. Place another 
						  <phrase role="code">Column</phrase> as a child of 
						  <phrase role="code">ButtonRow</phrase> and name it 
						  <phrase role="code">ButtonColumn2</phrase>.</para> 
					 <para>As of yet nothing has changed on the form because,
						  although Columns and Rows are considered visible components, they don't have
						  any visible components themselves.</para> 
					 <para>Next place a button on the form. In the 
						  <phrase role="code">Palette</phrase> pane click 
						  <phrase role="code">Trigger</phrase>, move the mouse to the
						  Component Tree and click 
						  <phrase role="code">ButtonColumn1</phrase> so that the 
						  <phrase role="code">Trigger</phrase> will be a child of 
						  <phrase role="code">ButtonColumn1</phrase>. Name the
						  trigger 
						  <phrase role="code">MoviesActorsTrigger</phrase> and press 
						  <phrase role="code">Enter</phrase>. Now in the 
						  <phrase role="code">Properties</phrase> pane, change the 
						  <phrase role="code">Text</phrase> property to 
						  <phrase role="code">Movies-&amp;Actors</phrase>. Note that
						  the button appears on the form.</para> 
					 <para> Click once on the 
						  <phrase role="code">MoviesActorsTrigger</phrase> component
						  and tap the 
						  <phrase role="code">ALT</phrase> key once. You will see the
						  
						  <phrase role="code">A</phrase> in 
						  <phrase role="code">Movies-Actors</phrase> is underlined.
						  This indicates the hotkey to activate this actions is 
						  <phrase role="code">Alt-A</phrase>. The 
						  <phrase role="code">Ampersand</phrase> (&amp;) before the 
						  <phrase role="code">A</phrase> indicates the preferred
						  hotkey. If the preferred key has not yet been assigned previously in the
						  Component Tree structure it will be assigned to that element. It may be
						  necessary to save the form, close then reopen it to have a hotkey reassignment
						  work after you change it. Where a preference is not specified, the first
						  available unassigned letter in the text will be assigned.</para> 
					 <para> Continue to create buttons in 
						  <phrase role="code">ButtonColumn1</phrase> named 
						  <phrase role="code">AvailableVideosTrigger</phrase> (text 
						  <phrase role="code">Available &amp;Videos</phrase>), 
						  <phrase role="code">RentalsSalesTrigger</phrase> (text 
						  <phrase role="code">Rentals/&amp;Sales</phrase>), and 
						  <phrase role="code">ReturnVideosTrigger</phrase> (text 
						  <phrase role="code">Return Videos</phrase>). Now do the
						  same thing in 
						  <phrase role="code">ButtonColumn2</phrase> for the 
						  <phrase role="code">MoviesTrigger</phrase> (text 
						  <phrase role="code">View/Update &amp;Movies</phrase>), 
						  <phrase role="code">AccountsTrigger</phrase> (text 
						  <phrase role="code">View/Update Accounts</phrase>), and 
						  <phrase role="code">VideosTrigger</phrase> (text 
						  <phrase role="code">View/Update Videos</phrase>).</para> 
					 <para>Note that the buttons all touch each other. Some space
						  between them may help the look of the form. In the Component Tree click on 
						  <phrase role="code">ButtonColumn1</phrase>. In the 
						  <phrase role="code">Properties</phrase> pane change the 
						  <phrase role="code">MarginRight</phrase> property to 
						  <phrase role="code">10</phrase>. This will place a margin
						  to the right of 
						  <phrase role="code">ButtonColumn1</phrase>. In the
						  Component Tree click on 
						  <phrase role="code">MoviesActorsTrigger</phrase> and change
						  it's 
						  <phrase role="code">MarginBottom</phrase> property to 
						  <phrase role="code">10</phrase>. Repeat this for each
						  trigger.</para> 
					 <para>You've got some time and thought into this form. If the
						  power goes out right now it would be disappointing. To save the form click the 
						  <phrase role="code">File</phrase> menu then 
						  <phrase role="code">Save As Document</phrase>. The 
						  <phrase role="code">Library</phrase> Name should read 
						  <phrase role="code">Sample.Rental</phrase> and the 
						  <phrase role="code">Document Type</phrase> should be 
						  <phrase role="code">dfd</phrase>. In the 
						  <phrase role="code">Name</phrase> box type 
						  <phrase role="code">MainForm</phrase> and click 
						  <phrase role="code">Accept</phrase>.</para> 
					 <para>A title above the buttons would be a nice touch. To add
						  the title, click 
						  <phrase role="code">Static Text</phrase> in the 
						  <phrase role="code">Palette</phrase> pane, then click the 
						  <phrase role="code">MainColumn</phrase> component in the
						  Component Tree. Name it 
						  <phrase role="code">TitleStaticText</phrase>. In the 
						  <phrase role="code">Text</phrase> property type 
						  <phrase role="code">Welcome to Alphora Video</phrase>. The 
						  <phrase role="code">TitleStaticText</phrase> component will
						  be placed below the two rows of buttons. To move it above the buttons, click on
						  the 
						  <phrase role="code">TitleStaticText</phrase> component and
						  while holding the mouse button down, drag the component up until the horizontal
						  bar symbol is between the 
						  <phrase role="code">MainColumn</phrase> component and the 
						  <phrase role="code">ButtonRow</phrase> component. Then
						  release the mouse button.</para> 
					 <para>The form and Note Tree now looks like this:</para> 
					 <para>
						  <inlinegraphic fileref="Images\RentalTut013.png" width="600"
						  depth="519"/></para> 
				</sect3> 
				<sect3> 
					 <title>Linking to Tables</title> 
					 <para> The text on the button faces is grey instead of black.
						  This is to show that the buttons are not yet functional. You have to create
						  actions and tie the triggers to the actions.</para> 
					 <para>Make the 
						  <phrase role="code">Movies-Actors</phrase> button active in
						  the following way. In the 
						  <phrase role="code">Palette</phrase> pane click on 
						  <phrase role="code">Actions</phrase> to show the list of
						  action components.</para> 
					 <para>The various action components each perform a specific
						  task when executed. For example, the 
						  <phrase role="code">ShowFormAction</phrase> displays a
						  derived or customized form when executed. Actions are executed from a 
						  <phrase role="code">Menu</phrase>, 
						  <phrase role="code">Trigger</phrase>, 
						  <phrase role="code">Exposed</phrase>, or several other
						  component types.</para> 
					 <para> Click on 
						  <phrase role="code">ShowFormAction</phrase> then click on 
						  <phrase role="code">[FormInterface]</phrase>. Name the
						  action 
						  <phrase role="code">ShowMoviesActorsAction</phrase>. Now
						  click on the 
						  <phrase role="code">Document</phrase> property box then
						  click the three dots (...) at the right side of the box. A 
						  <phrase role="code">Document Expression Editor</phrase>
						  window will open. Click the 
						  <phrase role="code">Derive</phrase> tab, in the 
						  <phrase role="code">Query</phrase> box type 
						  <phrase role="code">MovieActor</phrase>. The 
						  <phrase role="code">Page Type</phrase> should already be 
						  <phrase role="code">Browse</phrase> and 
						  <phrase role="code">Elaborate</phrase> is checked. The 
						  <phrase role="code">Master Key Names</phrase> and 
						  <phrase role="code">Detail Key Names</phrase> are
						  blank.</para> 
					 <para>
						  <inlinegraphic fileref="Images\RentalTut014.png" width="326"
						  depth="369"/></para> 
					 <para>Click 
						  <phrase role="code">Accept</phrase>. The Document property
						  is now 
						  <phrase role="code">Derive('MovieActor',
								'Browse')</phrase></para> 
					 <para>This tells the Dataphor Server to derive a browse form
						  based on the 
						  <phrase role="code">MovieActor</phrase>
						  table.<emphasis></emphasis></para> 
					 <para> Click on the 
						  <phrase role="code">MoviesActorsTrigger</phrase> component,
						  click the 
						  <phrase role="code">Action</phrase> property then click on
						  the down arrow in the property, use the list to set it to the 
						  <phrase role="code">ShowMoviesActorsAction</phrase> you
						  just created. Now the 
						  <phrase role="code">Movies-Actors</phrase> button has black
						  text. Click on that button, or press 
						  <phrase role="code">Alt-A</phrase>, and the 
						  <phrase role="code">Browse Movie Actor</phrase> form will
						  be displayed. Close the 
						  <phrase role="code">Browse Movie Actor</phrase>
						  form.</para> 
					 <para>Do the same for the 
						  <phrase role="code">Movie</phrase> table using a 
						  <phrase role="code">ShowFormAction</phrase> named 
						  <phrase role="code">ShowMoviesAction</phrase>. Connect the 
						  <phrase role="code">MoviesTrigger</phrase> to it.</para> 
					 <para>Dataphor can derive forms from tables or views. Do the
						  same thing for the 
						  <phrase role="code">AvailableVideo</phrase> view using a 
						  <phrase role="code">ShowFormAction</phrase> named 
						  <phrase role="code">ShowAvailableVideoAction</phrase>.
						  Connect the 
						  <phrase role="code">AvailableVideosTrigger</phrase> to the
						  action.</para> 
					 <para>Do the same thing for the 
						  <phrase role="code">Account</phrase> table using a 
						  <phrase role="code">ShowFormAction</phrase> named 
						  <phrase role="code">ShowAccountAction</phrase>. Connect the
						  
						  <phrase role="code">AccountsTrigger</phrase> to the
						  action.</para> 
					 <para>Do the same thing for the 
						  <phrase role="code">Video</phrase> table using a 
						  <phrase role="code">ShowFormAction</phrase> named 
						  <phrase role="code">ShowVideoAction</phrase>. Connect the 
						  <phrase role="code">VideosTrigger</phrase> to the
						  action.</para> 
				</sect3> 
				<sect3> 
					 <title>Adding Scripts</title> 
					 <para>Now get a bit fancy and put the date and time below the
						  button columns. Add the following elements to the Component Tree: 
						  <itemizedlist> 
								<listitem> 
									 <para>(Static Controls) 
										  <phrase role="code">StaticText</phrase> as
										  child of 
										  <phrase role="code">MainColumn</phrase> after 
										  <phrase role="code">ButtonRow</phrase>, name it
										  
										  <phrase
										  role="code">ClockStaticText</phrase>.</para> 
								</listitem> 
								<listitem> 
									 <para>(Actions) 
										  <phrase role="code">ScriptAction</phrase> as
										  child of 
										  <phrase role="code">[FormInterface]</phrase>,
										  name it 
										  <phrase role="code">SetClockAction</phrase>.
										  Set the 
										  <phrase role="code">Language</phrase> property
										  to 
										  <phrase role="code">CSharp</phrase>. Set the 
										  <phrase role="code">Script</phrase> property to
										  the following C# code: 
										  <programlisting>ClockStaticText.Text =
 DateTime.Now.ToLongDateString()
 + "  "
 + DateTime.Now.ToLongTimeString();</programlisting></para> 
									 <para>Note: You can type the text (script) directly
										  into the box beside the property name 
										  <phrase role="code">Script</phrase>. Another
										  option is to click the ... button, an editor pane will open, enter the text in
										  the editor, then save the text and close the editor pane.</para> 
									 <para>IMPORTANT: You save the script by clicking
										  the diskette icon or clicking File, Save. Do not use Save As File or Save As
										  Document. These scripts are saved as part of the form, not as a separate
										  file.</para> 
									 <para>With a 
										  <phrase role="code">ScriptAction</phrase> you
										  can use C# or Visual Basic code to automate an action on the client side. With
										  a 
										  <phrase role="code">DataSciptAction</phrase>
										  you can use D4 code to automate an action on the server side.</para> 
								</listitem> 
								<listitem> 
									 <para>(Non Visual) 
										  <phrase role="code">Timer</phrase> as child of 
										  <phrase role="code">[FormInterface]</phrase>.
										  Name it 
										  <phrase role="code">ClockTimer</phrase>. Set
										  the 
										  <phrase role="code">Interval</phrase> property
										  to 
										  <phrase role="code">1000</phrase>, that is the
										  number of milliseconds in one second. Set the 
										  <phrase role="code">OnElapsed</phrase> property
										  to 
										  <phrase role="code">SetClockAction</phrase>.
										  Set the 
										  <phrase role="code">AutoReset</phrase> and the 
										  <phrase role="code">Enabled</phrase> properties
										  to 
										  <phrase role="code">True</phrase>.</para> 
									 <para>This will cause the 
										  <phrase role="code">SetClockAction</phrase> to
										  be executed once each second.</para> 
								</listitem> 
						  </itemizedlist> You now have the current date and time
						  displayed below the buttons on the form. Better save your form again by
						  pressing the diskette icon on the Dataphoria toolbar.</para> 
				</sect3> 
				<sect3> 
					 <title><indexterm><primary>Customizing a
									 Form</primary></indexterm><indexterm><primary>How
									 to</primary><secondary>Customize a
									 Form</secondary></indexterm><indexterm><primary>Form,
									 Customizing</primary></indexterm><indexterm><primary>Creating a Filter on a
									 form</primary></indexterm><indexterm><primary>How
									 to</primary><secondary>Creating a Filter on a
									 form</secondary></indexterm>Customizing a Form, add a Filter</title> 
					 <para>Customers are going to say something like "I want a movie
						  but I can't remember the name. I know it has the word 'Fair' in the name. Can
						  you help me?".</para> 
					 <para>So try to find it now. Click the 
						  <phrase role="code">View/Update Movies</phrase> button. The
						  
						  <phrase role="code">Browse Movie</phrase> form is
						  displayed. The automatically derived forms include a Search group that allows
						  you to search in any of the 
						  <phrase role="code">Key</phrase> columns. Type the word 
						  <phrase role="code">Fair</phrase> in the Name box of the
						  search group. The 
						  <phrase role="code">Ferris Beuler's Day Off</phrase> movie
						  is now selected. If the customer wanted a movie with 
						  <phrase role="code">Fair</phrase> as the first word this
						  would have helped but we need another tool. We need to be able to find all the
						  movies with the word 
						  <phrase role="code">Fair</phrase> anywhere in the
						  title.</para> 
					 <para>Close the Browse Movie form. You will now build a filter
						  for the 
						  <phrase role="code">MovieActor</phrase> form.</para> 
					 <para>Sometimes you may want to change something on a derived
						  form, but still desire the form to be derived from the data. That is the case
						  this time. Click the 
						  <phrase role="code">Movies-Actors</phrase> button to bring
						  of the Movie Actor form. Click the 
						  <phrase role="code">Form</phrase> menu and select 
						  <phrase role="code">Customize</phrase>.</para> 
					 <para>
						  <inlinegraphic fileref="images/RentalTut015.png" width="476"
						  depth="379"/></para> 
					 <para>The Browse Movie Actor form is derived by the Dataphor
						  Server based on the metadata of the tables and tags. What you will do is add
						  some components (elements) to this form but leave most of it for the server to
						  derive. The derivation of the form will work best if you place all additional
						  elements at or near the bottom of the 
						  <phrase role="code">Component Tree</phrase>.</para> 
					 <para>To create the filter you will need to add several
						  elements to the form:</para> 
					 <itemizedlist> 
						  <listitem> 
								<para>(Non Visual) 
									 <phrase role="code">Source</phrase> as child of 
									 <phrase role="code">[FormInterface]</phrase>, name
									 it 
									 <phrase role="code">FilterSource</phrase>. Set the 
									 <phrase role="code">Expression</phrase> property to
									 the D4 expression: 
									 <programlisting>select TableDee add
{
 nil as String MovieName tags { DAE.IsComputed = "false" },
 nil as String ActorName tags { DAE.IsComputed = "false" }
};</programlisting>Then set the 
									 <phrase role="code">Enabled</phrase> property to 
									 <phrase role="code">True</phrase>. Note: If the 
									 <phrase role="code">Enabled</phrase> property will
									 not set to 
									 <phrase role="code">True</phrase>, there is an
									 error in the 
									 <phrase role="code">Expression</phrase>
									 property.</para> 
								<para>This element and expression gives you a place to
									 store local variables that you need for the form. The 
									 <phrase role="code">DAE.IsComputed</phrase> tag is
									 used to tell Dataphor that this value is not to be automatically computed as
									 would normally be the case when using the 
									 <phrase role="code">add</phrase> table
									 expression.</para> 
						  </listitem> 
						  <listitem> 
								<para>(Static Controls) 
									 <phrase role="code">Group</phrase> as a child of 
									 <phrase role="code">RootBrowseColumn</phrase>,
									 named 
									 <phrase role="code">FilterGroup</phrase>. Set the 
									 <phrase role="code">Title</phrase> property to 
									 <phrase role="code">Filter</phrase>. All the other
									 visible controls for the filter will be descendents of the 
									 <phrase role="code">FilterGroup</phrase>.</para> 
								<para>The 
									 <phrase role="code">Group</phrase> component give
									 you a way to collect related controls together on a form. Some components can
									 have no components as children, some can have many. A 
									 <phrase role="code">Group</phrase> can only have
									 one child component so a 
									 <phrase role="code">Row</phrase> or 
									 <phrase role="code">Column</phrase>, for instance,
									 will need to be used to place several other components within the 
									 <phrase role="code">Group</phrase>
									 component.</para> 
						  </listitem> 
						  <listitem> 
								<para>(Static Controls) 
									 <phrase role="code">Row</phrase> as child of 
									 <phrase role="code">FilterGroup</phrase>, named 
									 <phrase role="code">FilterRow</phrase>.</para> 
						  </listitem> 
						  <listitem> 
								<para>(Static Controls) 
									 <phrase role="code">Trigger</phrase> as a child of 
									 <phrase role="code">FilterRow</phrase>, named 
									 <phrase role="code">FilterTrigger</phrase>. Don't
									 set the Text property. It will be set in another way later.</para> 
						  </listitem> 
						  <listitem> 
								<para>(Data Controls) 
									 <phrase role="code">TextBox</phrase> as child of 
									 <phrase role="code">FilterRow</phrase>, named 
									 <phrase role="code">MovieFilterTextBox</phrase>.
									 Set 
									 <phrase role="code">Width</phrase> property to 
									 <phrase role="code">20</phrase>. Set 
									 <phrase role="code">Title</phrase> property to 
									 <phrase role="code">Part of Movie Name</phrase>.
									 Set 
									 <phrase role="code">Source</phrase> property to 
									 <phrase role="code">FilterSource</phrase>. Set 
									 <phrase role="code">ColumnName</phrase> property to
									 
									 <phrase role="code">MovieName</phrase>. Set 
									 <phrase role="code">NilIfBlank</phrase> property to
									 
									 <phrase role="code">True</phrase>.</para> 
						  </listitem> 
						  <listitem> 
								<para>(Data Controls) 
									 <phrase role="code">TextBox</phrase> as child of 
									 <phrase role="code">FilterRow</phrase>, named 
									 <phrase role="code">ActorFilterTextBox</phrase>.
									 Set 
									 <phrase role="code">Width</phrase> property to 
									 <phrase role="code">20</phrase>. Set 
									 <phrase role="code">Title</phrase> property to 
									 <phrase role="code">Part of Actor Name</phrase>.
									 Set 
									 <phrase role="code">Source</phrase> property to 
									 <phrase role="code">FilterSource</phrase>. Set 
									 <phrase role="code">ColumnName</phrase> property to
									 
									 <phrase role="code">ActorName</phrase>. Set 
									 <phrase role="code">NilIfBlank</phrase> property to
									 
									 <phrase role="code">True</phrase>.</para> 
								<para>Note how much space is between the movie name and
									 actor name text boxes you just added. Click on the 
									 <phrase role="code">MovieFilterTextBox</phrase>
									 component in the 
									 <phrase role="code">Component Tree</phrase>. You
									 already set the 
									 <phrase role="code">Width</phrase> property to 
									 <phrase role="code">20</phrase>. This sets the
									 minimum width of the 
									 <phrase role="code">TextBox</phrase> to
									 approximately 20 characters. There is a property called 
									 <phrase role="code">MaxWidth</phrase>. The setting
									 of 
									 <phrase role="code">-1</phrase> tells Dataphoria
									 that this box can expand as the users enters text. Change this setting to 
									 <phrase role="code">20</phrase>. Now the box is a
									 fixed width of approximately 20 characters. The user can enter longer text but
									 it will scroll in the fixed width box. For consistency in the look and feel of
									 the application, change the 
									 <phrase role="code">MaxWidth</phrase> property of
									 the 
									 <phrase role="code">ActorFilterTextBox</phrase> to 
									 <phrase role="code">20</phrase> also.</para> 
						  </listitem> 
					 </itemizedlist> 
					 <para>You have all the visible components necessary for the
						  filter. Now you need the operational pieces. Take a look at the top of the 
						  <phrase role="code">Component Tree</phrase>. There is a
						  source component named 
						  <phrase role="code">Main</phrase>. That is the source for
						  the data that fills the 
						  <phrase role="code">Movie-Actor</phrase> form. What the
						  filter you are building will do is set the 
						  <phrase role="code">Filter</phrase> property of this
						  source. This will be done using a 
						  <phrase role="code">ScriptAction</phrase>. A look at the 
						  <phrase role="code">Expression</phrase> property for the 
						  <phrase role="code">Main</phrase> source will show that the
						  name of the two columns we are interested in is 
						  <phrase role="code">Movie.Name</phrase> and 
						  <phrase role="code">Actor.Name</phrase>.</para> 
					 <para>Continue making the following additions/changes to the
						  form:</para> 
					 <itemizedlist> 
						  <listitem> 
								<para>(Actions) 
									 <phrase role="code">ScriptAction</phrase> as child 
									 <phrase role="code">[FormInterface]</phrase>, named
									 
									 <phrase role="code">SetMainFilter</phrase>. Set the
									 
									 <phrase role="code">Language</phrase> to 
									 <phrase role="code">CSharp</phrase>. Set the 
									 <phrase role="code">Script</phrase> to 
									 <programlisting>string LFilter = "";

if(FilterSource["MovieName"].HasValue())
  LFilter = "(Lower(Movie.Name) matches Lower(\'"
    + FilterSource["MovieName"].AsString
    + "\'))";

if(FilterSource["ActorName"].HasValue())
{
  if(LFilter != "")
  {
    LFilter += " and ";
  }
  LFilter += "(Lower(Actor.Name) matches Lower(\'"
    + FilterSource["ActorName"].AsString
    + "\'))";
};

Main.Filter = LFilter;

if(LFilter == "")
  FilterTrigger.Action = SetMainFilter;
else
  FilterTrigger.Action = ClearMainFilter;</programlisting>Set the 
									 <phrase role="code">Text</phrase> Property to 
									 <phrase role="code">Set Filter</phrase>. This text
									 will be displayed on the 
									 <phrase role="code">FilterTrigger</phrase> button
									 face when its action is pointed to the 
									 <phrase role="code">SetMainFilter</phrase>
									 action.</para> 
						  </listitem> 
						  <listitem> 
								<para>Set the 
									 <phrase role="code">Action</phrase> property of the
									 
									 <phrase role="code">FilterTrigger</phrase>
									 component to 
									 <phrase role="code">SetMainFilter</phrase>. Note
									 the text now appears on the button face.</para> 
						  </listitem> 
						  <listitem> 
								<para>(Actions) 
									 <phrase role="code">ScriptAction</phrase> as child 
									 <phrase role="code">[FormInterface]</phrase>, named
									 
									 <phrase role="code">ClearMainFilter</phrase>. Set
									 the 
									 <phrase role="code">Language</phrase> to 
									 <phrase role="code">CSharp</phrase>. Set the 
									 <phrase role="code">Script</phrase> to 
									 <programlisting>FilterTrigger.Action = SetMainFilter;

Main.Filter = "";</programlisting>Set the 
									 <phrase role="code">Text</phrase> Property to 
									 <phrase role="code">Clear Filter</phrase>. This
									 text will be displayed on the 
									 <phrase role="code">FilterTrigger</phrase> button
									 face when it's action is pointed to the 
									 <phrase role="code">ClearMainFilter</phrase>
									 action.</para> 
						  </listitem> 
						  <listitem> 
								<para>Click on the 
									 <phrase role="code">FilterSource</phrase>
									 component. Change the 
									 <phrase role="code">OnRowChange</phrase> property
									 to 
									 <phrase role="code">SetMainFilter</phrase>.</para> 
						  </listitem> 
					 </itemizedlist> 
					 <para>The filter is now created. Before trying it save the
						  customized form as a 
						  <phrase role="code">dfdx</phrase> document. It is necessary
						  to save it now because the form will be saved as it appears and with the
						  properties of the components as they are now. When the filter is used some
						  properties of the 
						  <phrase role="code">Main</phrase> source and 
						  <phrase role="code">FilterTrigger</phrase> are changed. If
						  the form were saved with the properties set to filter the incoming data, that
						  would be how it would come up for the user every time.</para> 
					 <para>Click on 
						  <phrase role="code">File</phrase>, 
						  <phrase role="code">Save As Document</phrase>. The Library
						  Name should already be 
						  <phrase role="code">Sample.Rental</phrase>. Type 
						  <phrase role="code">BrowseMovieActor</phrase> in the 
						  <phrase role="code">Name</phrase> box and click 
						  <phrase role="code">Accept</phrase>.</para> 
					 <para>Now help that customer. Type 
						  <phrase role="code">FAIR</phrase> under 
						  <phrase role="code">Part of Movie Name</phrase>. Press the 
						  <phrase role="code">Set Filter</phrase> button. Just two
						  movies will now be displayed and the text on the button face changed to 
						  <phrase role="code">Clear Filter</phrase>.</para> 
					 <para><inlinegraphic fileref="Images\RentalTut016.png"
						  width="477" depth="421"/></para> 
					 <para>So how does it all work ...</para> 
					 <orderedlist> 
						  <listitem> 
								<para>Text is entered into one, or both, of the Filter
									 text boxes.</para> 
						  </listitem> 
						  <listitem> 
								<para>When the 
									 <phrase role="code">Set Filter</phrase> button is
									 press the 
									 <phrase role="code">SetMainFilter</phrase> action
									 is executed.</para> 
						  </listitem> 
						  <listitem> 
								<para> If the curser is moved out of the textbox (by
									 clicking elsewhere on the form or pressing tab) and the contents of the textbox
									 was changed, the 
									 <phrase role="code">FilterSource</phrase> 
									 <phrase role="code">OnRowChange</phrase> property
									 fires, executing the 
									 <phrase role="code">SetMainFilter</phrase>
									 action.</para> 
						  </listitem> 
						  <listitem> 
								<para><phrase role="code">SetMainFilter</phrase>
									 creates a local variable 
									 <phrase role="code">LFilter</phrase>. 
									 <phrase role="code">LFilter</phrase> is used to
									 build the D4 filter expression that is placed in the 
									 <phrase role="code">Main</phrase> source 
									 <phrase role="code">Filter</phrase> property. The
									 text that was entered by the user is accessed by the
									 FilterSource["<emphasis>fieldname</emphasis>"].AsString expression. The strings
									 are all forced to lower case so that capitalization will not be a problem. If
									 the user clears both filter textboxes the 
									 <phrase role="code">FilterTrigger</phrase> 
									 <phrase role="code">Action</phrase> property is
									 changed back to set as this would be the same as clearing the filter.</para> 
						  </listitem> 
						  <listitem> 
								<para>The 
									 <phrase role="code">ClearMainFilter</phrase> action
									 sets the 
									 <phrase role="code">FilterTrigger</phrase> action
									 property to 
									 <phrase role="code">SetMainFilter</phrase> and
									 clears the 
									 <phrase role="code">Main</phrase> source Filter
									 property by setting it to an empty string.</para> 
						  </listitem> 
					 </orderedlist> 
					 <para>For another example on implementing a filter look at
						  Sample07 in the Sample.Components library.</para> 
					 <para>One last thing to do before you can use the customized
						  form. When the 
						  <phrase role="code">Movie-Actor</phrase> button on the 
						  <phrase role="code">MainMenu</phrase> form is pressed it
						  will still automatically derive a form from the database. You must link that
						  trigger to the new customized 
						  <phrase role="code">BrowseMovieActor</phrase> form.</para> 
					 <para>Click 
						  <phrase role="code">File</phrase>, 
						  <phrase role="code">Close</phrase> to close the Designer
						  for the 
						  <phrase role="code">BrowseMovieActor</phrase>. DON'T SAVE
						  IT. A filter is currently set and if you save the form it will always come up
						  set. Closing the form is necessary so that the 
						  <phrase role="code">MainMenu</phrase> form can open it. You
						  can only have any given form opened once in a single session.</para> 
					 <para>If the 
						  <phrase role="code">MainForm</phrase> is not still open in
						  the Desinger, double click the 
						  <phrase role="code">MainForm</phrase> in the Dataphor
						  Explorer pane to open it. Click the 
						  <phrase role="code">ShowMoviesActorsAction</phrase>
						  component in the Component Tree. Change the 
						  <phrase role="code">Document</phrase> property to 
						  <phrase role="code">Form('Sample.Rental',
								'BrowseMovieActor')</phrase>. Click 
						  <phrase role="code">File</phrase>, 
						  <phrase role="code">Save</phrase>.</para> 
					 <para>Now when you click the 
						  <phrase role="code">Movies-Actors</phrase> button the
						  customized form will be displayed. If you tried it, close the 
						  <phrase role="code">Movies-Actors</phrase> form now.</para>
					 
				</sect3> 
				<sect3> 
					 <title>Creating a Sales Form</title> 
					 <para>Now that the customer has the My Fair Lady video in hand
						  it's time to give the clerk a way to enter sales and rentals. On the 
						  <phrase role="code">MainForm</phrase>, add another 
						  <phrase role="code">ShowFormAction</phrase> named 
						  <phrase role="code">NewRentalSaleAction</phrase>. In the 
						  <phrase role="code">Document</phrase> property enter 
						  <phrase role="code">Derive('Sale', 'Add')</phrase>. Set the
						  
						  <phrase role="code">Mode</phrase> property to 
						  <phrase role="code">Insert</phrase> which indicates that
						  the shown form should insert a new row buffer into the dataset when shown. Link
						  the 
						  <phrase role="code">RentalSaleTrigger</phrase> to this
						  action.</para> 
					 <para>
						  <inlinegraphic fileref="images/RentalTut017.png" width="382"
						  depth="412"/></para> 
					 <para>On forms, the dark green means that a field is Read Only
						  as well as empty. A value must be selected from a list.</para> 
					 <para> A light green background on a textbox controls means
						  that no value has been entered into that field yet. A value must be entered
						  into the field before it can be posted if nulls are prohibited in the target
						  column of the database.</para> 
					 <para>If we click on the Add button next to the SaleItem grid,
						  we should see the following.</para> 
					 <para>
						  <inlinegraphic fileref="images/RentalTut018.png" width="183" depth="198"/>
						  </para> 
					 <para>You now have the ability to put in new sales and items
						  within the sale.</para> 
				</sect3> 
				<sect3> 
					 <title>Renting Videos</title> 
					 <para> Now give the clerks the ability to easily add movie
						  rentals. To do this you will create another 
						  <phrase role="code">view</phrase> called 
						  <phrase role="code">NewRental</phrase> using the following
						  D4 code. This will create a new view which joins the 
						  <phrase role="code">Rental</phrase> table to the 
						  <phrase role="code">SaleItem</phrase> table. Note that we
						  can use the 
						  <phrase role="code">adorn</phrase> operator to add metadata
						  to results of the view.</para> 
					 <programlisting>create view NewRental
 SaleItem join RentedVideo
 adorn
 {
  Description { default "Rental" }
  tags { Frontend.Add.ReadOnly = "true" }
 };</programlisting> 
					 <para>You need to customize the 
						  <phrase role="code">saleitem detail</phrase> frame, that is
						  included at the bottom of the 
						  <phrase role="code">Add Sale</phrase> form, so that the
						  clerks can use the 
						  <phrase role="code">NewRental</phrase> view to enter
						  rentals. To do this you need to know some information about how the 
						  <phrase role="code">saleitem detail</phrase> frame is being
						  derived by the Dataphor Server.</para> 
					 <para>First click the 
						  <phrase role="code">Rentals/Sales</phrase> button to bring
						  up the 
						  <phrase role="code">Add Sale</phrase> form. Click 
						  <phrase role="code">Form</phrase>, 
						  <phrase role="code">Customize</phrase>. This will open the 
						  <phrase role="code">Add Sale</phrase> form in the Live
						  Designer. Click on the 
						  <phrase
						  role="code">Sample.Rental.SaleItem_SaleFrame</phrase> at the bottom of the 
						  <phrase role="code">Component Tree</phrase>.</para> 
					 <para><inlinegraphic fileref="images/RentalTut019.png"
						  width="668" depth="285"/></para> 
					 <para> Take note of the 
						  <phrase role="code">Document</phrase> Property. It reads: 
						  <programlisting>.Frontend.Derive
(
 'Sample.Rental.SaleItem',
 'Browse',
 'Main.ID',
 'Main.Sale_ID',
 true)</programlisting>This is the how Dataphor imbeds a detail frame into a form.
						  The arguments that are passed to 
						  <phrase role="code">Frontend.Derive</phrase> are: 1. the 
						  <phrase role="code">Query</phrase>, 2. the 
						  <phrase role="code">Page Type</phrase>, 3. the 
						  <phrase role="code">Master Key Names</phrase>, 4. the 
						  <phrase role="code">Detail Key Names</phrase>, 5. whether
						  or not to 
						  <phrase role="code">Elaborate</phrase>. The 
						  <phrase role="code">Master Key Names/Detail Key
								Names</phrase> identifies the keys that tie the two queries. In this case the 
						  <phrase role="code">Main.ID</phrase> column of 
						  <phrase role="code">Sale</phrase> and the 
						  <phrase role="code">Main.Sale_ID</phrase> of 
						  <phrase role="code">SaleItem</phrase>.</para> 
					 <para>Copy the 
						  <phrase role="code">Document</phrase> property by
						  highlighting the entire text and pressing 
						  <phrase role="code">Ctrl-C</phrase>. Now open the saleitem
						  detail frame in a Live Designer. Do this by clicking 
						  <phrase role="code">File</phrase>, 
						  <phrase role="code">New</phrase>, select 
						  <phrase role="code">DFDX Custom From Designer</phrase>,
						  click 
						  <phrase role="code">Accept</phrase>, click on the 
						  <phrase role="code">Other</phrase> tab, click in the 
						  <phrase role="code">Expression</phrase> text box then paste
						  the text from the 
						  <phrase role="code">Document</phrase> property by pressing 
						  <phrase role="code">Ctrl-V</phrase>. Then click 
						  <phrase role="code">Accept</phrase>. Now you can customize
						  the saleitem detail frame in the Dataphoria Designer.</para> 
					 <para> In the 
						  <phrase role="code">Component Tree</phrase>, copy the 
						  <phrase role="code">ShowFormAction</phrase> component
						  called 
						  <phrase role="code">Add</phrase> by selecting it and
						  pressing 
						  <phrase role="code">Ctrl-C</phrase>. Then select the 
						  <phrase role="code">[FormInterface]</phrase> and press 
						  <phrase role="code">Ctrl-V</phrase> to paste a copy of the
						  component. Press 
						  <phrase role="code">F2</phrase> and change the name of the
						  new component to 
						  <phrase role="code">AddRental</phrase>. In the 
						  <phrase role="code">Document</phrase> property change the
						  part that reads 
						  <phrase role="code">'Sample.Rental.SaleItem'</phrase> to 
						  <phrase
						  role="code">'Sample.Rental.NewRental'</phrase></para> 
					 <para>Change the Text property to 
						  <phrase role="code">Add Rental...</phrase>. Note that this
						  text is in the Action instead of the Trigger. You'll leave the Text property of
						  the Trigger blank so it will use this text instead.</para> 
					 <para>Click 
						  <phrase role="code">Trigger</phrase> in the 
						  <phrase role="code">Palette</phrase> pane. Then move the
						  mouse into the 
						  <phrase role="code">Component Tree</phrase> so a black line
						  appears between 
						  <phrase role="code">AddTrigger</phrase> and 
						  <phrase role="code">EditTrigger</phrase>, then click the
						  mouse. This adds a 
						  <phrase role="code">Trigger</phrase> at that point in the 
						  <phrase role="code">Component Tree</phrase>. Name it 
						  <phrase role="code">AddRentalTrigger</phrase>. Set the 
						  <phrase role="code">Action</phrase> property to 
						  <phrase role="code">AddRental</phrase>. Pressing the new
						  button should result in a form that looks like this.</para> 
					 <para>
						  <inlinegraphic fileref="images/RentalTut020.png" width="326"
						  depth="349"/></para> 
					 <para>The 
						  <phrase role="code">Frontend.Add.ReadOnly</phrase> tag in
						  the 
						  <phrase role="code">NewRental</phrase> view causes the 
						  <phrase role="code">Description</phrase> TextBox to be 
						  <phrase role="code">ReadOnly</phrase>. When the user enters
						  data in this form, they are actually inserting into the 
						  <phrase role="code">NewRental</phrase> view. The ability to
						  insert into views based on any expression is unique to Dataphor. Close the 
						  <phrase role="code">Add NewRental</phrase> form. </para> 
					 <para>You may have noticed that the total of all the sale items
						  is not calculated or displayed. Add that now.</para> 
					 <para>Add a 
						  <phrase role="code">Source</phrase> named 
						  <phrase role="code">TotalSource</phrase>. Set the 
						  <phrase role="code">Expression</phrase> property to 
						  <programlisting>SaleItem
 group by { Sale_ID }
  add { Sum(Cost) Total };</programlisting>Set the 
						  <phrase role="code">Master</phrase> property to 
						  <phrase role="code">Main</phrase>. Set the 
						  <phrase role="code">MasterKeyNames</phrase> to 
						  <phrase role="code">Main.Sale_ID</phrase>. Set the 
						  <phrase role="code">DetailKeyNames</phrase> to 
						  <phrase role="code">Sale_ID</phrase>. Set the 
						  <phrase role="code">Enabled</phrase> property to 
						  <phrase role="code">True</phrase>. This setup makes the 
						  <phrase role="code">TotalSource</phrase> participate in the
						  Application Transaction that will be underway when the 
						  <phrase role="code">AddSale</phrase> form is in use. The
						  expression will give the Total of the the sale items and will be updated each
						  time anything changes. For more information about Application Transactions see 
						  <ulink url="DDGP1TransactionManagement.html"
						  type="olinkb">Transaction Management</ulink> and <!--Link to DDG, Intro, Dataphor Product Anatomy, Dataphor Server, Automated Application Dev Services, --><ulink
						  url="bk02pt01ch04s02s06s04.html" type="olinkb">Application
								Transaction</ulink>.</para> 
					 <para>Add a 
						  <phrase role="code">TextBox</phrase> as a child of 
						  <phrase role="code">RootBrowseColumn</phrase> and name it 
						  <phrase role="code">TotalTextBox</phrase>. Set the 
						  <phrase role="code">Source</phrase> property to 
						  <phrase role="code">TotalSource</phrase>. Set the 
						  <phrase role="code">ColumnName</phrase> property to 
						  <phrase role="code">Total</phrase>. Set the 
						  <phrase role="code">ReadOnly</phrase> property to 
						  <phrase role="code">True</phrase>. Set the 
						  <phrase role="code">TabStop</phrase> property to 
						  <phrase role="code">False</phrase>.</para> 
					 <para>Since the 
						  <phrase role="code">Title</phrase> property was left empty,
						  the 
						  <phrase role="code">ColumnName</phrase> is used as the
						  title of the text box on the form.</para> 
					 <para>Set the 
						  <phrase role="code">TitleAlign</phrase> property to 
						  <phrase role="code">Left</phrase> so the title will be
						  displayed to the left side of the text box on the form.</para> 
					 <para><inlinegraphic fileref="Images\RentalTut020b.png"
						  width="578" depth="236"/></para> 
					 <para>Save the customized 
						  <phrase role="code">SaleItem</phrase> frame in the 
						  <phrase role="code">System.Rental</phrase> library as 
						  <phrase role="code">dfdx</phrase> document and name it 
						  <phrase role="code">SaleItemFrame</phrase>. Close the 
						  <phrase role="code">SaleItemFrame</phrase> Designer by
						  clicking 
						  <phrase role="code">File</phrase>, 
						  <phrase role="code">Close</phrase>.</para> 
					 <para>The LiveDesigner for the 
						  <phrase role="code">Add Sale</phrase> form should be active
						  now because you left it in the background when you copied the Document property
						  from it. Return to the 
						  <phrase
						  role="code">Sample.Rental.SaleItem_SaleFrame</phrase> 
						  <phrase role="code">Document</phrase> property and change
						  it to 
						  <phrase role="code">Form('Sample.Rental',
								'SaleItemFrame')</phrase></para> 
					 <para>Save the customized 
						  <phrase role="code">Add Sale</phrase> form in the 
						  <phrase role="code">System.Rental</phrase> library as 
						  <phrase role="code">dfdx</phrase> document and name it 
						  <phrase role="code">AddSale</phrase>. Close the 
						  <phrase role="code">Add Sale</phrase> Live Designer by
						  clicking 
						  <phrase role="code">File</phrase>, 
						  <phrase role="code">Close</phrase>.</para> 
					 <para>Lastly, in the Designer for 
						  <phrase role="code">MainForm</phrase> click on the 
						  <phrase role="code">NewRentalSaleAction</phrase> component
						  in the 
						  <phrase role="code">Component Tree</phrase>. Change the 
						  <phrase role="code">Document</phrase> property to 
						  <phrase role="code">Form('Sample.Rental',
								'AddSale')</phrase> and save the 
						  <phrase role="code">MainForm</phrase> form.</para> 
					 <para>The now modified 
						  <phrase role="code">AddSale</phrase> form is still open. It
						  may be in the background. Navigate to that form and close it.</para> 
				</sect3> 
				<sect3> 
					 <title>Video Returns</title> 
					 <para>Now to handle returned videos. Add a 
						  <phrase role="code">ShowFormAction</phrase> to the 
						  <phrase role="code">MainForm</phrase> Component Tree, name
						  it 
						  <phrase role="code">ShowRentedVideoAction</phrase>. Set the
						  
						  <phrase role="code">Document</phrase> property to 
						  <phrase role="code">Derive('Sample.Rental.RentedVideo',
								'Browse')</phrase>.</para> 
					 <para> Click on 
						  <phrase role="code">ReturnVideoTrigger</phrase> and set the
						  
						  <phrase role="code">Action</phrase> property to 
						  <phrase role="code">ShowRentedVideoAction</phrase>. Click
						  on the 
						  <phrase role="code">Return Video</phrase> button.</para> 
					 <para>
						  <inlinegraphic fileref="images/RentalTut021.png" width="489"
						  depth="249"/></para> 
					 <para>To handle the returning of the videos an operator will be
						  created. The following d4 code handles this.</para> 
					 <programlisting>create operator ReturnVideo(AVideoID : Integer)
begin
 // retrieve rental row
 var LRentedVideoRow: typeof(RentedVideo[]);
 LRentedVideoRow := RentedVideo[AVideoID by { Video_ID }];

 // calculate late fee
 var LLateFee : Money;
 if Date() &gt; LRentedVideoRow.DueOn then
  LLateFee := (Date() - LRentedVideoRow.DueOn).Days * $2
 else
  LLateFee := $0;

 // update tables
 delete RentedVideo where Video_ID = AVideoID;

 insert table
 {
  row
  {
   LRentedVideoRow.ID ID,
   AVideoID Video_ID,
   LRentedVideoRow.RentedOn RentedOn,
   LRentedVideoRow.DueOn DueOn,
   Date() ReturnedOn,
   LLateFee LateFee
  }
 } into ReturnedVideo;

 if LLateFee &gt; $0 then
  update Account set
  {
   Balance := Balance + LLateFee
  } 
   where ID = 
   (
    (Sale rename { ID SaleID })
    join SaleItem by SaleID = Sale_ID
   )[LRentedVideoRow.ID by { ID }].Account_ID;

end;</programlisting> 
					 <para>Look at the operator and what it is doing. The first few
						  lines retrieve a row from RentedVideo. A row variable of the appropriate type
						  is declared and then the 
						  <phrase role="code">RentedVideo</phrase> record for the 
						  <phrase role="code">ID</phrase> parameter is queried from
						  the database and stored in the row variable 
						  <phrase role="code">LRentedVideoRow</phrase>.</para> 
					 <para>The late fee, if any, is calculated and stored in the 
						  <phrase role="code">LLateFee</phrase> variable. Note that 
						  <phrase role="code">Date() - DueOn from LRentalRow</phrase>
						  returns a 
						  <phrase role="code">timespan</phrase> which can be
						  represented as an integer number of days using 
						  <phrase role="code">.Days</phrase>.</para> 
					 <para>Finally the tables are updated. The 
						  <phrase role="code">RentedVideo</phrase> record is deleted
						  and the 
						  <phrase role="code">ReturnedVideo</phrase> record is
						  created. If there is a late fee, the appropriate 
						  <phrase role="code">Account</phrase> record is updated.
						  Since the 
						  <phrase role="code">ID</phrase> of the 
						  <phrase role="code">Account</phrase> is stored in the 
						  <phrase role="code">Sale</phrase> table, it must be
						  retrieved by using the 
						  <phrase role="code">SaleItem</phrase> row get the 
						  <phrase role="code">Sale ID</phrase>. Then use the 
						  <phrase role="code">Sale</phrase> row to get the 
						  <phrase role="code">Account ID</phrase>.</para> 
					 <para>The following will explain how the 
						  <phrase role="code">RentedVideo</phrase> form will be
						  customized by making the 
						  <phrase role="code">Add</phrase>, 
						  <phrase role="code">Edit</phrase>, 
						  <phrase role="code">Delete</phrase>, and 
						  <phrase role="code">View</phrase> buttons invisible so that
						  they are not accidentally clicked. Also how to add a 
						  <phrase role="code">Trigger</phrase> and 
						  <phrase role="code">Action</phrase> to execute the 
						  <phrase role="code">ReturnVideo</phrase> operator.</para> 
					 <para>On the 
						  <phrase role="code">Browse RentedVideo</phrase> form, click
						  
						  <phrase role="code">Form</phrase>, 
						  <phrase role="code">Customize</phrase>. For each of 
						  <phrase role="code">AddTrigger</phrase>, 
						  <phrase role="code">EditTrigger</phrase>, 
						  <phrase role="code">DeleteTrigger</phrase>, and 
						  <phrase role="code">ViewTrigger</phrase> change the 
						  <phrase role="code">Visible</phrase> property to 
						  <phrase role="code">False</phrase>.</para> 
					 <para>Place a 
						  <phrase role="code">DataScriptAction</phrase> component on
						  the form and name it 
						  <phrase role="code">ReturnVideoAction</phrase>. Set the 
						  <phrase role="code">Script</phrase> property to be 
						  <phrase role="code">ReturnVideo(Main.Video_ID);</phrase>
						  and set the 
						  <phrase role="code">Text</phrase> property to 
						  <phrase role="code">Return Video</phrase>.</para> 
					 <para> Then add a new 
						  <phrase role="code">Non Visual DataArgument</phrase>
						  component named 
						  <phrase role="code">ReturnVideoDataArgument</phrase> as a
						  child to the 
						  <phrase role="code">ReturnVideoAction</phrase> component.
						  Set the 
						  <phrase role="code">Source</phrase> property to 
						  <phrase role="code">Main</phrase> and enter 
						  <phrase role="code">Main.Video_ID</phrase> in the 
						  <phrase role="code">Columns</phrase> property. This tells
						  the 
						  <phrase role="code">DataScriptAction</phrase> to make the
						  column values from the current row of the source available for use as arguments
						  to the script, which is where the value for 
						  <phrase role="code">Main.Video_ID</phrase> comes from. So
						  now the currently selected video in the grid will get returned when the 
						  <phrase role="code">ReturnVideo</phrase> action component
						  is executed.</para> 
					 <para>Add a new 
						  <phrase role="code">Trigger</phrase> above 
						  <phrase role="code">AddTrigger</phrase> as a child of
						  GridBar and name it 
						  <phrase role="code">ReturnVideoTrigger</phrase>. Change the
						  
						  <phrase role="code">Action</phrase> property to 
						  <phrase role="code">ReturnVideoAction</phrase>.</para> 
					 <para>Since a DataScriptAction does not automatically refresh
						  the data shown on the form, you need to set things so that after the 
						  <phrase role="code">ReturnVideoOperator</phrase> executes,
						  the data on the form is refreshed. As it stands now the returned video will
						  still be shown in the grid after it has been returned. To correct this, click
						  on the 
						  <phrase role="code">ReturnVideoAction</phrase> component
						  and change the 
						  <phrase role="code">AfterExecute</phrase> property to 
						  <phrase role="code">Refresh</phrase>.</para> 
					 <para>Now save the customized form in the 
						  <phrase role="code">Sample.Rental</phrase> library as a 
						  <phrase role="code">dfdx</phrase> document type and name it
						  
						  <phrase role="code">ReturnVideo</phrase>. Close the
						  Designer for the form. Navigate to the 
						  <phrase role="code">Rented Video</phrase> form, probably in
						  the background, and close it.</para> 
					 <para>The 
						  <phrase role="code">MainForm</phrase> needs to be modified
						  so the customized 
						  <phrase role="code">ReturnVideo</phrase> form will be
						  displayed. Change the 
						  <phrase role="code">ShowRentedVideoAction</phrase>
						  component 
						  <phrase role="code">Action</phrase> property to 
						  <phrase role="code">Form('Sample.Rental',
								'ReturnVideo')</phrase> and save the 
						  <phrase role="code">MainForm</phrase> form.</para> 
				</sect3> 
				<sect3> 
					 <title>Processing Late Fees</title> 
					 <para>To complete the sales process a method of paying the late
						  fees is needed. The late fee total is stored in the 
						  <phrase role="code">Balance</phrase> column of the 
						  <phrase role="code">Account</phrase> table. It should be
						  applied as a line item when making a sale to the customer.</para> 
					 <para>The process of applying the late fees to a sale can be
						  accomplished with an operator.</para> 
					 <programlisting>create operator PayFees
(
 ASaleID: Integer,
 AAccountID : Integer,
 ABalance : Money
)
begin
 // create saleitem
 insert 
  table
  {
   row
   {
    ASaleID Sale_ID,
    "Late Fee Payment" Description,
    ABalance Cost
   }
  } into SaleItem;

 // clear account balance
 update Account set { Balance := $0 } where ID = AAccountID;
end;</programlisting> 
					 <para>To facilitate the execution of this operator it will be
						  attached to a trigger on the 
						  <phrase role="code">AddSale</phrase> form. But first the
						  clerk must be told if there is a balance due. Let's have the balance show on
						  the 
						  <phrase role="code">AddSale</phrase> form just like the
						  name does now. To do this you'll alter the 
						  <phrase role="code">Account</phrase> table, adding a tag to
						  the 
						  <phrase role="code">Balance</phrase> column.</para> 
					 <programlisting>alter table Account
{
 alter column Balance
  alter tags { create Frontend.Preview.Include = "true" }
};</programlisting> 
					 <para>Open the customized 
						  <phrase role="code">AddSale</phrase> form (dfdx) in a
						  designer by double clicking the 
						  <phrase role="code">AddSale</phrase> [dfdx] document. You
						  will see the balance for the account is now displayed. Make the following
						  additions and changes:</para> 
					 <para> 
						  <itemizedlist> 
								<listitem> 
									 <para>Add a 
										  <phrase role="code">DataScriptAction</phrase>
										  named 
										  <phrase
										  role="code">PayFeesOperatorScript</phrase>. Set the 
										  <phrase role="code">Script</phrase> property to
										  
										  <phrase role="code">PayFees(Main.ID,
												Account.ID, Account.Balance);</phrase> and set the 
										  <phrase role="code">Text</phrase> property to 
										  <phrase role="code">Add Balance as Sale
												Item</phrase>. Set the 
										  <phrase role="code">Image</phrase> property to 
										  <phrase
										  role="code">Image("Frontend","Warning")</phrase>. This text and image will be
										  displayed on the button face that will be added shortly.</para> 
									 <para> Remember that the 
										  <phrase role="code">PayFees</phrase> operator
										  inserts a row into the 
										  <phrase role="code">SaleItem</phrase> table and
										  updates the 
										  <phrase role="code">Account</phrase> table to
										  set the 
										  <phrase role="code">Balance</phrase> to zero
										  for the selected account. Since the sale has not been finalized yet you don't
										  want the changes to the tables to be committed until the clerk presses the 
										  <phrase role="code">Accept</phrase> button. To
										  make these changes become part of the Application Transaction that the 
										  <phrase role="code">Add Sale</phrase> form is
										  running in, set the <emphasis><phrase
										  role="code">EnlistWith</phrase></emphasis> property to <emphasis><phrase
										  role="code">Main</phrase></emphasis>. By doing this, the changes to the
										  <emphasis><phrase role="code">SaleItem</phrase></emphasis> and
										  <emphasis><phrase role="code">Account</phrase></emphasis> tables will not be
										  committed until the entire sale is completed. For more information about
										  Application Transactions see 
										  <ulink url="DDGP1TransactionManagement.html"
										  type="olinkb">Transaction Management</ulink> and <!--Link to DDG, Intro, Dataphor Product Anatomy, Dataphor Server, Automated Application Dev Services, --><ulink
										  url="bk02pt01ch04s02s06s04.html" type="olinkb">Application
												Transaction</ulink>.</para> 
								</listitem> 
								<listitem> 
									 <para>Add a Non Visual <emphasis><phrase
										  role="code">DataArgument</phrase></emphasis> as a child of <emphasis><phrase
										  role="code">PayFeesOperatorScript</phrase></emphasis> and name it
										  <emphasis><phrase role="code">PayFeesData</phrase></emphasis>. Set the
										  <emphasis><phrase role="code">Columns</phrase></emphasis> property to 
										  <phrase role="code">Main.ID, Account.ID,
												Account.Balance</phrase> and the <emphasis><phrase
										  role="code">Source</phrase></emphasis> property to <emphasis><phrase
										  role="code">Main</phrase></emphasis>.</para> 
								</listitem> 
								<listitem> 
									 <para>Add a 
										  <phrase role="code">Column</phrase> called 
										  <phrase role="code">AccountColumn</phrase> as a
										  child of 
										  <phrase role="code">Element2</phrase> (which is
										  a child of 
										  <phrase
										  role="code">Main.Account_ID.Sample.Rental.Salt_AccountGroup</phrase>).</para> 
									 <para>Add a 
										  <phrase role="code">Row</phrase> called 
										  <phrase role="code">AccountRow</phrase> as a
										  child of 
										  <phrase
										  role="code">AccountColumn</phrase>.</para> 
									 <para>Add a 
										  <phrase role="code">Row</phrase> called 
										  <phrase role="code">BalanceRow</phrase> as a
										  child of 
										  <phrase
										  role="code">AccountColumn</phrase>.</para> 
								</listitem> 
								<listitem> 
									 <para> Move 
										  <phrase
										  role="code">MainColumnSample.Rental.Sale_Account_Main.Account_ID_Lookup</phrase>
										  into 
										  <phrase role="code">AccountRow</phrase> so it
										  becomes a child of 
										  <phrase role="code">AccountRow</phrase>. Move 
										  <phrase
										  role="code">MainColumnAccount.Name</phrase> into 
										  <phrase role="code">AccountRow</phrase> so it
										  becomes a child of 
										  <phrase role="code">AccountRow</phrase> and is
										  below 
										  <phrase
										  role="code">MainColumnSample.Rental.Sale_Account_Main.Account_ID_Lookup</phrase>.</para>
									 
								</listitem> 
								<listitem> 
									 <para>Move 
										  <phrase
										  role="code">MainColumnAccount.Balance</phrase> into 
										  <phrase role="code">BalanceRow</phrase> so it
										  becomes a child of 
										  <phrase role="code">BalanceRow</phrase>. Change
										  the 
										  <phrase role="code">Title</phrase> property of 
										  <phrase
										  role="code">MainColumnAccount.Balance</phrase> to 
										  <phrase role="code">Balance
												Due</phrase>.</para> 
								</listitem> 
								<listitem> 
									 <para>Add a 
										  <phrase role="code">Trigger</phrase> as a child
										  of 
										  <phrase role="code">BalanceRow</phrase> so that
										  it is below 
										  <phrase
										  role="code">MainColumnAccount.Balance</phrase>. Name the Trigger 
										  <phrase role="code">AddBalanceTrigger</phrase>.
										  Set the Action property to 
										  <phrase
										  role="code">PayFeesOperatorScript</phrase>.</para> 
									 <para>Because the 
										  <phrase role="code">Text</phrase> property of
										  the 
										  <phrase role="code">Trigger</phrase> is empty,
										  the 
										  <phrase role="code">Text</phrase> property of
										  the 
										  <phrase role="code">Action</phrase> is used as
										  the text on the button face of the 
										  <phrase role="code">Trigger</phrase>. Because
										  the 
										  <phrase role="code">Action</phrase> has an
										  image specified it appears on the button.</para> 
									 <para>Note the button looks too far right. Let's
										  make this look a bit nicer.</para> 
									 <para>Select the 
										  <phrase
										  role="code">MainColumnAccount.Balance</phrase> component and change the 
										  <phrase role="code">MaxWidth</phrase> property
										  to 
										  <phrase role="code">20</phrase>.</para> 
								</listitem> 
								<listitem> 
									 <para><indexterm><primary>Component Reference,
													 ScriptAction</primary></indexterm><indexterm><primary>ScriptAction</primary><secondary>Component
													 Reference</secondary></indexterm>Add a 
										  <phrase role="code">ScriptAction</phrase> named
										  
										  <phrase
										  role="code">SetBalanceVisibilityScript</phrase>. Enter the following CSharp
										  script in the 
										  <phrase role="code">Script</phrase> property: 
										  <programlisting>if (Main.Enabled
    &amp;&amp; !Main.DataView.IsEmpty()
    &amp;&amp; Main.DataView["Account.Balance"].HasValue()
    &amp;&amp; (Main.DataView["Account.Balance"].AsDecimal != 0))
 {
  BalanceRow.Visible = true;
 }
 else
 {
  BalanceRow.Visible = false;
 }</programlisting></para> 
									 <para>Select the 
										  <phrase role="code">Main</phrase> source
										  component. Set the 
										  <phrase role="code">OnRowChange</phrase>
										  property to 
										  <phrase
										  role="code">SetBalanceVisibilityScript</phrase>. This will cause the script to
										  be executed each time there is a change in the row. If the conditions are
										  correct, as checked by the script, the balance and button will be
										  displayed.</para> 
								</listitem> 
								<listitem> 
									 <para>Once the 
										  <phrase role="code">PayFees</phrase> operator
										  has been executed, you can't allow the account to be changed. This is because
										  changes to the tables are queued in the application transaction based on the
										  selected account. To eliminate this possibility you can change the 
										  <phrase role="code">ReadOnly</phrase> property
										  to 
										  <phrase role="code">true</phrase> on the 
										  <phrase
										  role="code">MainColumnSample.Rental.Sale_Account_Main.Account_ID_Lookup</phrase>
										  and 
										  <phrase
										  role="code">MainColumnSample.Rental.Sale_Account_Main.Account_ID</phrase>
										  controls.</para> 
									 <para>Add a 
										  <phrase role="code">ScriptAction</phrase> named
										  
										  <phrase
										  role="code">BalanceChargedScript</phrase>. Set the 
										  <phrase role="code">Script</phrase> property to
										  the following CSharp script: 
										  <programlisting>MainColumnSample_Rental_Sale_Account_Main_Account_ID_Lookup.ReadOnly = true;
MainColumnSample_Rental_Sale_Account_Main_Account_ID.ReadOnly = true;
BalanceRow.Visible = false;
Sample_Rental_SaleItem_SaleFrame.FrameInterfaceNode.MainSource.Refresh();</programlisting></para> 
									 <para>The second line hides the row that was
										  displayed due the the balance being due.</para> 
									 <para>Making changes to the dataset behind the
										  scenes as is the case with the 
										  <phrase role="code">PayFees</phrase> operator
										  will not automatically be displayed on the 
										  <phrase role="code">SaleItem</phrase> Notebook
										  Frame. The third line refreshes the 
										  <phrase role="code">SaleItem</phrase>
										  form.</para> 
									 <para>Note the change in the name of the 
										  <phrase
										  role="code">MainColumnMain.Account_ID</phrase> component name. The period has
										  to be replaced with an underscore. This is because CSharp uses a period to
										  separate an object name from the property of an object.</para> 
									 <para>Select the 
										  <phrase
										  role="code">PayFeesOperatorScript</phrase> component. Set the 
										  <phrase role="code">AfterExecute</phrase>
										  property to 
										  <phrase
										  role="code">BalanceChargedScript</phrase>. When the button is pressed, the 
										  <phrase role="code">PayFees</phrase> operator
										  will be executed, then the 
										  <phrase
										  role="code">BalanceChargedScript</phrase> will be executed.</para> 
								</listitem> 
								<listitem> 
									 <para>Your form now looks like this:</para> 
									 <para><inlinegraphic
										  fileref="Images\RentalTut022.png" width="558" depth="309"/></para> 
									 <para>
										  <inlinegraphic fileref="Images\RentalTut023.png" width="353"
										  depth="256"/></para> 
								</listitem> 
								<listitem> 
									 <para>The last thing to do is hide the components
										  that should not be seen when the form is first displayed.</para> 
									 <para>Select the 
										  <phrase role="code">BalanceRow</phrase>
										  component and set the 
										  <phrase role="code">Visible</phrase> property
										  to 
										  <phrase role="code">False</phrase>.</para> 
								</listitem> 
						  </itemizedlist> </para> 
					 <para>Now save the customized AddSale form before anything is
						  changed. Close the Designer pane for all the forms.</para> 
					 <para>You have designed a database and developed an
						  application.</para> 
				</sect3> 
				<sect3> 
					 <title>Running the Rental Application with the Windows or Web
						  Client</title> 
					 <para>Everything to this point has been done in Dataphoria. To
						  make the application available to the Windows or Web clients it must be
						  published. You do this by dragging the 
						  <phrase role="code">MainForm</phrase> to 
						  <phrase role="code">Applications</phrase> in the 
						  <phrase role="code">Dataphor Explorer</phrase> as
						  follows:</para> 
					 <para> 
						  <itemizedlist> 
								<listitem> 
									 <para>Click and hold the left mouse button on 
										  <phrase role="code">MainForm</phrase> [dfd].
										  While holding the left mouse button doen, slowly move the mouse to the top of
										  the 
										  <phrase role="code">DataphorExplorer</phrase>
										  pane so that the libraries scroll down until you see the 
										  <phrase role="code">Applications</phrase> entry
										  at the top.</para> 
								</listitem> 
								<listitem> 
									 <para>Drop the 
										  <phrase role="code">MainForm</phrase> on 
										  <phrase role="code">Applications</phrase> by
										  releasing the left mouse button while the mouse pointer is on 
										  <phrase
										  role="code">Applications</phrase>.</para> 
								</listitem> 
								<listitem> 
									 <para>The 
										  <phrase role="code">Edit Applications</phrase>
										  form will be displayed. Change the 
										  <phrase role="code">Description</phrase> to
										  read 
										  <phrase role="code">Alphora Video Rental
												System</phrase></para> 
									 <para><inlinegraphic
										  fileref="images/RentalTut024.png" width="327" depth="412"/> </para> 
								</listitem> 
								<listitem> 
									 <para>Select the Client Types tab.</para> 
									 <para>Add the </para> 
									 <itemizedlist> 
										  <listitem> 
												<para>
													 <inlinegraphic fileref="images/RentalTut024b.png" width="326"
													 depth="412"/></para> 
												<para>Add the Web Client Type and the
													 Windows Client Type.</para> 
										  </listitem> 
									 </itemizedlist> 
								</listitem> 
								<listitem> 
									 <para>Click 
										  <phrase role="code">Accept</phrase></para> 
									 <para><inlinegraphic
										  fileref="Images/RentalTut025.png" width="241" depth="88"/></para> 
								</listitem> 
						  </itemizedlist></para> 
					 <para>This gives the Windows Client and the Web Client an entry
						  point. Now when someone connects to the Dataphor Server using the correct port,
						  8061 in the example above, the Video application will be available to
						  them.</para> 
					 <para>With the Windows Client:</para> 
					 <para><inlinegraphic fileref="Images\RentalTut026.png"
						  width="450" depth="208"/></para> 
					 <para>The user selects the desired application and clicks
						  OK.</para> 
					 <para>With the Web Client:</para> 
					 <para><inlinegraphic fileref="Images\RentalTut027.png"
						  width="307" depth="179"/></para> 
					 <para>The user just clicks on the desired application.</para> 
				</sect3> 
		  </sect2> 
	 </sect1> 
</chapter> 
