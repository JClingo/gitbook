<?xml version="1.0" encoding="utf-8" ?>
<!--
  This file was generated from code doc sources, using ExtractBNF.exe.
  Do not edit the text of this file, go to the code comments to change any text.
-->
<!-- D4 Parser BNF -->
<programlisting >
The following non terminals in the Lexer BNF are referenced by the D4 BNF with equivalent meaning:
	&lt;identifier&gt;
	&lt;literal&gt;
	&lt;string&gt;

The same conventions found in the The Third Manifesto are used here, namely:
	&lt;XYZ list&gt; ::= {&lt;XYZ&gt;}
	&lt;XYZ commalist&gt; ::= [&lt;XYZ&gt;{,&lt;XYZ&gt;}]
	&lt;XYZ semicolonlist&gt; ::= [&lt;XYZ&gt;{;&lt;XYZ&gt;}]
	&lt;ne XYZ list&gt; ::= &lt;XYZ&gt;{&lt;XYZ&gt;}
	&lt;ne XYZ commalist&gt; ::= &lt;XYZ&gt;{,&lt;XYZ&gt;}
	&lt;ne XYZ semicolonlist&gt; ::= &lt;XYZ&gt;{;&lt;XYZ&gt;}


	&lt;script&gt;<anchor id="D4ParserBNFscript"/> ::=
		<link linkend="D4ParserBNFstatement">&lt;statement semicolonlist&gt;</link>

	&lt;terminated statement&gt;<anchor id="D4ParserBNFterminatedstatement"/> ::=
		[<link linkend="D4ParserBNFstatement">&lt;statement&gt;</link>];

	&lt;block&gt;<anchor id="D4ParserBNFblock"/> ::=
		begin
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link>
		end

	&lt;statement&gt;<anchor id="D4ParserBNFstatement"/> ::=
		<link linkend="D4ParserBNFdmlstatement">&lt;dml statement&gt;</link> |
		<link linkend="D4ParserBNFddlstatement">&lt;ddl statement&gt;</link> |
		<link linkend="D4ParserBNFimperativestatement">&lt;imperative statement&gt;</link>

	&lt;dml statement&gt;<anchor id="D4ParserBNFdmlstatement"/> ::=
		<link linkend="D4ParserBNFselectstatement">&lt;select statement&gt;</link> |
		<link linkend="D4ParserBNFinsertstatement">&lt;insert statement&gt;</link> |
		<link linkend="D4ParserBNFupdatestatement">&lt;update statement&gt;</link> |
		<link linkend="D4ParserBNFdeletestatement">&lt;delete statement&gt;</link>

	&lt;ddl statement&gt;<anchor id="D4ParserBNFddlstatement"/> ::=
		<link linkend="D4ParserBNFcreatestatement">&lt;create statement&gt;</link> |
		<link linkend="D4ParserBNFalterstatement">&lt;alter statement&gt;</link> |
		<link linkend="D4ParserBNFdropstatement">&lt;drop statement&gt;</link> |
		<link linkend="D4ParserBNFattachstatement">&lt;attach statement&gt;</link> |
		<link linkend="D4ParserBNFinvokestatement">&lt;invoke statement&gt;</link> |
		<link linkend="D4ParserBNFdetachstatement">&lt;detach statement&gt;</link> |
		<link linkend="D4ParserBNFgrantstatement">&lt;grant statement&gt;</link> |
		<link linkend="D4ParserBNFrevokestatement">&lt;revoke statement&gt;</link> |
		<link linkend="D4ParserBNFrevertstatement">&lt;revert statement&gt;</link>

	&lt;imperative statement&gt;<anchor id="D4ParserBNFimperativestatement"/> ::=
		<link linkend="D4ParserBNFblock">&lt;block&gt;</link> |
		<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> |
		<link linkend="D4ParserBNFvariabledeclarationstatement">&lt;variable declaration statement&gt;</link> |
		<link linkend="D4ParserBNFassignmentstatement">&lt;assignment statement&gt;</link> |
		<link linkend="D4ParserBNFexitstatement">&lt;exit statement&gt;</link> |
		<link linkend="D4ParserBNFifstatement">&lt;if statement&gt;</link> |
		<link linkend="D4ParserBNFwhilestatement">&lt;while statement&gt;</link> |
		<link linkend="D4ParserBNFdowhilestatement">&lt;do while statement&gt;</link> |
		<link linkend="D4ParserBNFforstatement">&lt;for statement&gt;</link> |
		<link linkend="D4ParserBNFrepeatstatement">&lt;repeat statement&gt;</link> |
		<link linkend="D4ParserBNFbreakstatement">&lt;break statement&gt;</link> |
		<link linkend="D4ParserBNFcontinuestatement">&lt;continue statement&gt;</link> |
		<link linkend="D4ParserBNFcasestatement">&lt;case statement&gt;</link> |
		<link linkend="D4ParserBNFtryfinallystatement">&lt;try finally statement&gt;</link> |
		<link linkend="D4ParserBNFtryexceptstatement">&lt;try except statement&gt;</link> |
		<link linkend="D4ParserBNFtrycommitstatement">&lt;try commit statement&gt;</link> |
		<link linkend="D4ParserBNFraisestatement">&lt;raise statement&gt;</link>

          &lt;select statement&gt;<anchor id="D4ParserBNFselectstatement"/> ::=
              select <link linkend="D4ParserBNFcursordefinition">&lt;cursor definition&gt;</link>

          &lt;expression&gt;<anchor id="D4ParserBNFexpression"/> ::= 
		<link linkend="D4ParserBNFmodifiedexpressionterm">&lt;modified expression term&gt;</link> <link linkend="D4ParserBNFtableoperatorclause">&lt;table operator clause list&gt;</link>

	&lt;table operator clause&gt;<anchor id="D4ParserBNFtableoperatorclause"/> ::=
		<link linkend="D4ParserBNFrestrictclause">&lt;restrict clause&gt;</link> |
		<link linkend="D4ParserBNFprojectclause">&lt;project clause&gt;</link> |
		<link linkend="D4ParserBNFaddclause">&lt;add clause&gt;</link> |
		<link linkend="D4ParserBNFrenameclause">&lt;rename clause&gt;</link> |
		<link linkend="D4ParserBNFremoveclause">&lt;remove clause&gt;</link> |
		<link linkend="D4ParserBNFaggregateclause">&lt;aggregate clause&gt;</link> |
		<link linkend="D4ParserBNFquotaclause">&lt;quota clause&gt;</link> |
		<link linkend="D4ParserBNFexplodeclause">&lt;explode clause&gt;</link> |
		<link linkend="D4ParserBNFadornclause">&lt;adorn clause&gt;</link> |
		<link linkend="D4ParserBNFredefineclause">&lt;redefine clause&gt;</link> |
		<link linkend="D4ParserBNFbinarytableoperatorclause">&lt;binary table operator clause&gt;</link> |
		<link linkend="D4ParserBNFjoinclause">&lt;join clause&gt;</link> |
		<link linkend="D4ParserBNFouterjoinclause">&lt;outer join clause&gt;</link>

	&lt;modified expression term&gt;<anchor id="D4ParserBNFmodifiedexpressionterm"/> ::=
		<link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;expression term&gt;<anchor id="D4ParserBNFexpressionterm"/> ::= 
              <link linkend="D4ParserBNFlogicalandexpression">&lt;logical and expression&gt;</link> <link linkend="D4ParserBNFlogicalortypeoperatorclause">&lt;logical or type operator clause list&gt;</link>

          &lt;logical or type operator clause&gt;<anchor id="D4ParserBNFlogicalortypeoperatorclause"/> ::=
		<link linkend="D4ParserBNFlogicalternaryclause">&lt;logical ternary clause&gt;</link> |
		<link linkend="D4ParserBNFlogicalbinaryclause">&lt;logical binary clause&gt;</link> |
		<link linkend="D4ParserBNFtypeoperatorclause">&lt;type operator clause&gt;</link>

	&lt;logical ternary clause&gt;<anchor id="D4ParserBNFlogicalternaryclause"/> ::=
		<link linkend="D4ParserBNFlogicalternaryoperator">&lt;logical ternary operator&gt;</link> <link linkend="D4ParserBNFadditiveexpression">&lt;additive expression&gt;</link> and <link linkend="D4ParserBNFadditiveexpression">&lt;additive expression&gt;</link>

	&lt;logical ternary operator&gt;<anchor id="D4ParserBNFlogicalternaryoperator"/> ::=
		between

          &lt;logical binary clause&gt;<anchor id="D4ParserBNFlogicalbinaryclause"/> ::=
		<link linkend="D4ParserBNFlogicalbinaryoperator">&lt;logical binary operator&gt;</link> <link linkend="D4ParserBNFlogicalandexpression">&lt;logical and expression&gt;</link>

          &lt;logical binary operator&gt;<anchor id="D4ParserBNFlogicalbinaryoperator"/> ::=
              in | or | xor | like | matches

          &lt;type operator clause&gt;<anchor id="D4ParserBNFtypeoperatorclause"/> ::=
		<link linkend="D4ParserBNFtypeoperator">&lt;type operator&gt;</link> <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>

	&lt;type operator&gt;<anchor id="D4ParserBNFtypeoperator"/> ::=
		is | as

          &lt;logical and expression&gt;<anchor id="D4ParserBNFlogicalandexpression"/> ::= 
		<link linkend="D4ParserBNFbitwisebinaryexpression">&lt;bitwise binary expression&gt;</link> {<link linkend="D4ParserBNFlogicalandoperator">&lt;logical and operator&gt;</link> <link linkend="D4ParserBNFbitwisebinaryexpression">&lt;bitwise binary expression&gt;</link>}

          &lt;logical and operator&gt;<anchor id="D4ParserBNFlogicalandoperator"/> ::=
              and

          &lt;bitwise binary expression&gt;<anchor id="D4ParserBNFbitwisebinaryexpression"/> ::= 
              <link linkend="D4ParserBNFcomparisonexpression">&lt;comparison expression&gt;</link> {<link linkend="D4ParserBNFbitwisebinaryoperator">&lt;bitwise binary operator&gt;</link> <link linkend="D4ParserBNFcomparisonexpression">&lt;comparison expression&gt;</link>}

          &lt;bitwise binary operator&gt;<anchor id="D4ParserBNFbitwisebinaryoperator"/> ::=
              ^ | &amp; | "|" | "&lt;&lt;" | "&gt;&gt;"

          &lt;comparison expression&gt;<anchor id="D4ParserBNFcomparisonexpression"/> ::= 
              <link linkend="D4ParserBNFadditiveexpression">&lt;additive expression&gt;</link> {<link linkend="D4ParserBNFcomparisonoperator">&lt;comparison operator&gt;</link> <link linkend="D4ParserBNFadditiveexpression">&lt;additive expression&gt;</link>}

          &lt;comparison operator&gt;<anchor id="D4ParserBNFcomparisonoperator"/> ::=
              = | "&lt;&gt;" | "&lt;" | "&gt;" | "&lt;=" | "&gt;=" | ?=

          &lt;additive expression&gt;<anchor id="D4ParserBNFadditiveexpression"/> ::= 
              <link linkend="D4ParserBNFmultiplicativeexpression">&lt;multiplicative expression&gt;</link> {<link linkend="D4ParserBNFadditiveoperator">&lt;additive operator&gt;</link> <link linkend="D4ParserBNFmultiplicativeexpression">&lt;multiplicative expression&gt;</link>}

          &lt;additive operator&gt;<anchor id="D4ParserBNFadditiveoperator"/> ::=
              + | -

          &lt;multiplicative expression&gt;<anchor id="D4ParserBNFmultiplicativeexpression"/> ::= 
              <link linkend="D4ParserBNFexponentexpression">&lt;exponent expression&gt;</link> {<link linkend="D4ParserBNFmultiplicativeoperator">&lt;multiplicative operator&gt;</link> <link linkend="D4ParserBNFexponentexpression">&lt;exponent expression&gt;</link>}

          &lt;multiplicative operator&gt;<anchor id="D4ParserBNFmultiplicativeoperator"/> ::=
              * | / | div | mod

          &lt;exponent expression&gt;<anchor id="D4ParserBNFexponentexpression"/> ::= 
              <link linkend="D4ParserBNFunaryexpression">&lt;unary expression&gt;</link> {<link linkend="D4ParserBNFexponentoperator">&lt;exponent operator&gt;</link> <link linkend="D4ParserBNFexponentexpression">&lt;exponent expression&gt;</link>}

          &lt;exponent operator&gt;<anchor id="D4ParserBNFexponentoperator"/> ::=
              **

	&lt;unary expression&gt;<anchor id="D4ParserBNFunaryexpression"/> ::=
		{<link linkend="D4ParserBNFunaryoperator">&lt;unary operator&gt;</link>} <link linkend="D4ParserBNFqualifiedfactor">&lt;qualified factor&gt;</link>

	&lt;unary operator&gt;<anchor id="D4ParserBNFunaryoperator"/> ::=
		+ | - | ~ | not | exists


	&lt;qualified factor&gt;<anchor id="D4ParserBNFqualifiedfactor"/> ::=			<!-- big oops -->
		<link linkend="D4ParserBNFfactor">&lt;factor&gt;</link>[.<link linkend="D4ParserBNFqualifierexpression">&lt;qualifier expression&gt;</link>]{"["<link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>"]"[.<link linkend="D4ParserBNFqualifierexpression">&lt;qualifier expression&gt;</link>]}

	&lt;qualifier expression&gt;<anchor id="D4ParserBNFqualifierexpression"/> ::=
		&lt;identifier&gt;[("("<link linkend="D4ParserBNFactualparameter">&lt;actual parameter commalist&gt;</link>")") | (from <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>)][.<link linkend="D4ParserBNFqualifierexpression">&lt;qualifier expression&gt;</link>]


	&lt;indexer expression&gt;<anchor id="D4ParserBNFindexerexpression"/> ::=
		"["<link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>"]"

	&lt;factor&gt;<anchor id="D4ParserBNFfactor"/> ::=
		&lt;literal&gt; |
		<link linkend="D4ParserBNFselectorexpression">&lt;selector expression&gt;</link> |
		<link linkend="D4ParserBNFextractorexpression">&lt;extractor expression&gt;</link> |
		([.]&lt;identifier&gt;[("("<link linkend="D4ParserBNFactualparameter">&lt;actual parameter commalist&gt;</link>")") | (from <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>)]) |
		("("<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>")") |
		(parent <link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>) |
		<link linkend="D4ParserBNFifexpression">&lt;if expression&gt;</link> |
		<link linkend="D4ParserBNFcaseexpression">&lt;case expression&gt;</link>

          &lt;selector expression&gt;<anchor id="D4ParserBNFselectorexpression"/> ::=
		<link linkend="D4ParserBNFtableselector">&lt;table selector&gt;</link> |
		<link linkend="D4ParserBNFrowselector">&lt;row selector&gt;</link> |
		<link linkend="D4ParserBNFcursorselector">&lt;cursor selector&gt;</link> |
		<link linkend="D4ParserBNFlistselector">&lt;list selector&gt;</link>

	&lt;extractor expression&gt;<anchor id="D4ParserBNFextractorexpression"/> ::=
		<link linkend="D4ParserBNFrowextractor">&lt;row extractor&gt;</link> |
		<link linkend="D4ParserBNFcolumnextractor">&lt;column extractor&gt;</link> |
		<link linkend="D4ParserBNFmultiplecolumnextractor">&lt;multiple column extractor&gt;</link>

	&lt;metadata&gt;<anchor id="D4ParserBNFmetadata"/> ::=
		[<link linkend="D4ParserBNFtags">&lt;tags&gt;</link>] [<link linkend="D4ParserBNFtags">&lt;tags&gt;</link>]

	&lt;tags&gt;<anchor id="D4ParserBNFtags"/> ::=
		[static] tags "{"<link linkend="D4ParserBNFtagdefinition">&lt;ne tag definition commalist&gt;</link>"}"

	&lt;tag definition&gt;<anchor id="D4ParserBNFtagdefinition"/> ::=
		[static | dynamic] <link linkend="D4ParserBNFtagname">&lt;tag name&gt;</link> = &lt;string&gt;

	&lt;tag name&gt;<anchor id="D4ParserBNFtagname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;alter metadata&gt;<anchor id="D4ParserBNFaltermetadata"/> ::=
		[alter tags "{"<link linkend="D4ParserBNFaltertagdefinition">&lt;alter tag definition commalist&gt;</link>"}"]

	&lt;alter tag definition&gt;<anchor id="D4ParserBNFaltertagdefinition"/> ::=
		(create <link linkend="D4ParserBNFtagdefinition">&lt;tag definition&gt;</link>) | 
		(alter <link linkend="D4ParserBNFtagdefinition">&lt;tag definition&gt;</link>) | 
		(drop <link linkend="D4ParserBNFtagname">&lt;tag name&gt;</link>)

          &lt;list selector&gt;<anchor id="D4ParserBNFlistselector"/> ::=
              [<link linkend="D4ParserBNFlisttypespecifier">&lt;list type specifier&gt;</link>]"{"<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>"}"

	&lt;multiple column extractor&gt;<anchor id="D4ParserBNFmultiplecolumnextractor"/> ::=
		"{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" from <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;if expression&gt;<anchor id="D4ParserBNFifexpression"/> ::=
              if <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> then <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> else <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>

          &lt;case expression&gt;<anchor id="D4ParserBNFcaseexpression"/> ::=
              case [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]
                  <link linkend="D4ParserBNFcaseexpressionitem">&lt;ne case expression item list&gt;</link>
                  else <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>
              end

          &lt;case expression item&gt;<anchor id="D4ParserBNFcaseexpressionitem"/> ::=
              when <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> then <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;qualified identifier&gt;<anchor id="D4ParserBNFqualifiedidentifier"/> ::=
              [.]{&lt;identifier&gt;.}&lt;identifier&gt;

	&lt;table selector&gt;<anchor id="D4ParserBNFtableselector"/> ::=
		table [of (("{"<link linkend="D4ParserBNFnamedtypespecifier">&lt;named type specifier commalist&gt;</link>"}") | <link linkend="D4ParserBNFtypeoftypespecifier">&lt;typeof type specifier&gt;</link>)] "{"<link linkend="D4ParserBNFtableselectoritem">&lt;table selector item commalist&gt;</link>"}"

	&lt;table selector item&gt;<anchor id="D4ParserBNFtableselectoritem"/> ::=
		<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> |
		<link linkend="D4ParserBNFkeydefinition">&lt;key definition&gt;</link>

	&lt;row selector&gt;<anchor id="D4ParserBNFrowselector"/> ::=
		row"{"<link linkend="D4ParserBNFnamedexpressionterm">&lt;named expression term commalist&gt;</link>"}"

	&lt;named expression term&gt;<anchor id="D4ParserBNFnamedexpressionterm"/> ::=
		<link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> <link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;cursor selector&gt;<anchor id="D4ParserBNFcursorselector"/> ::=
		cursor"("<link linkend="D4ParserBNFcursordefinition">&lt;cursor definition&gt;</link>")"

	&lt;cursor definition&gt;<anchor id="D4ParserBNFcursordefinition"/> ::=
		<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> [<link linkend="D4ParserBNForderclause">&lt;order clause&gt;</link> | <link linkend="D4ParserBNFbrowseclause">&lt;browse clause&gt;</link>] [<link linkend="D4ParserBNFcursorcapabilities">&lt;cursor capabilities&gt;</link>] [<link linkend="D4ParserBNFcursorisolation">&lt;cursor isolation&gt;</link>] [<link linkend="D4ParserBNFcursortype">&lt;cursor type&gt;</link>]

	&lt;cursor capabilities&gt;<anchor id="D4ParserBNFcursorcapabilities"/> ::=
		capabilities "{"<link linkend="D4ParserBNFcursorcapability">&lt;cursor capability commalist&gt;</link>"}"

	&lt;cursor capability&gt;<anchor id="D4ParserBNFcursorcapability"/> ::=
		navigable | 
		backwardsnavigable | 
		bookmarkable | 
		searchable | 
		updateable | 
		truncateable | 
		countable

	&lt;cursor isolation&gt;<anchor id="D4ParserBNFcursorisolation"/> ::=
		isolation (none | chaos | browse | stability | isolated)

	&lt;cursor type&gt;<anchor id="D4ParserBNFcursortype"/> ::=
		type (static | dynamic)

	&lt;row extractor&gt;<anchor id="D4ParserBNFrowextractor"/> ::=
		row from <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

	&lt;column extractor&gt;<anchor id="D4ParserBNFcolumnextractor"/> ::=
		<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> from <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;restrict clause&gt;<anchor id="D4ParserBNFrestrictclause"/> ::=
              where <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;project clause&gt;<anchor id="D4ParserBNFprojectclause"/> ::=
              over "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;remove clause&gt;<anchor id="D4ParserBNFremoveclause"/> ::=
              remove "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

	&lt;add clause&gt;<anchor id="D4ParserBNFaddclause"/> ::=
		add "{"<link linkend="D4ParserBNFnamedexpressionterm">&lt;ne named expression term commalist&gt;</link>"}" [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

	&lt;rename clause&gt;<anchor id="D4ParserBNFrenameclause"/> ::=
		rename (("{"<link linkend="D4ParserBNFnamedcolumnname">&lt;ne named column name commalist&gt;</link>"}") | (<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link> <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>)) [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

	&lt;named column name&gt;<anchor id="D4ParserBNFnamedcolumnname"/> ::=
		<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> <link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>

          &lt;aggregate clause&gt;<anchor id="D4ParserBNFaggregateclause"/> ::=
              group [by "{"<link linkend="D4ParserBNFcolumnname">&lt;ne column name commalist&gt;</link>"}"] add "{"<link linkend="D4ParserBNFnamedaggregateexpression">&lt;ne named aggregate expression commalist&gt;</link>"}" [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

	&lt;named aggregate expression&gt;<anchor id="D4ParserBNFnamedaggregateexpression"/> ::=
		<link linkend="D4ParserBNFaggregateexpression">&lt;aggregate expression&gt;</link> <link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>

          &lt;aggregate expression&gt;<anchor id="D4ParserBNFaggregateexpression"/> ::=
              <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>"("[distinct] [<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>]")"

          &lt;order clause&gt;<anchor id="D4ParserBNForderclause"/> ::=
              order by 
			"{"<link linkend="D4ParserBNFordercolumndefinition">&lt;order column definition commalist&gt;</link>"}" 
			[include sequence [<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>] 
			[<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;browse clause&gt;<anchor id="D4ParserBNFbrowseclause"/> ::=
              browse by 
			"{"<link linkend="D4ParserBNFordercolumndefinition">&lt;order column definition commalist&gt;</link>"}"
			[<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;quota clause&gt;<anchor id="D4ParserBNFquotaclause"/> ::=
              return <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> [by "{"<link linkend="D4ParserBNFordercolumndefinition">&lt;order column definition commalist&gt;</link>"}"] [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;explode clause&gt;<anchor id="D4ParserBNFexplodeclause"/> ::=
              explode by <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> where <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> 
              [include level [<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>]
              [include sequence [<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>]
              [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;on clause&gt;<anchor id="D4ParserBNFonclause"/> ::=
              on <link linkend="D4ParserBNFserverlinkname">&lt;server link name&gt;</link>

	&lt;adorn clause&gt;<anchor id="D4ParserBNFadornclause"/> ::=
		adorn ["{"<link linkend="D4ParserBNFadornitemdefinition">&lt;ne adorn item definition commalist&gt;</link>"}"] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link> <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link> [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

	&lt;adorn item definition&gt;<anchor id="D4ParserBNFadornitemdefinition"/> ::=
		<link linkend="D4ParserBNFadorncolumn">&lt;adorn column&gt;</link> |
		<link linkend="D4ParserBNFkeydefinition">&lt;key definition&gt;</link> |
		<link linkend="D4ParserBNForderdefinition">&lt;order definition&gt;</link> |
		<link linkend="D4ParserBNFrowconstraintdefinition">&lt;row constraint definition&gt;</link> |
		<link linkend="D4ParserBNFreferencedefinition">&lt;reference definition&gt;</link> |
		(alter reference <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link> <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>)

	&lt;adorn column&gt;<anchor id="D4ParserBNFadorncolumn"/> ::=
		<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> ["{"<link linkend="D4ParserBNFcolumndefinitionitem">&lt;ne column definition item commalist&gt;</link>"}"] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link> <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;redefine clause&gt;<anchor id="D4ParserBNFredefineclause"/> ::=
		redefine "{"<link linkend="D4ParserBNFredefinecolumn">&lt;redefine column commalist&gt;</link>"}" [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

	&lt;redefine column&gt;<anchor id="D4ParserBNFredefinecolumn"/> ::=
		<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> := <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>

	&lt;language modifiers&gt;<anchor id="D4ParserBNFlanguagemodifiers"/> ::=
		with "{"<link linkend="D4ParserBNFlanguagemodifier">&lt;ne language modifier commalist&gt;</link>"}"

	&lt;language modifier&gt;<anchor id="D4ParserBNFlanguagemodifier"/> ::=
		<link linkend="D4ParserBNFlanguagemodifiername">&lt;language modifier name&gt;</link> = <link linkend="D4ParserBNFlanguagemodifiervalue">&lt;language modifier value&gt;</link>

	&lt;language modifier name&gt;<anchor id="D4ParserBNFlanguagemodifiername"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;language modifier value&gt;<anchor id="D4ParserBNFlanguagemodifiervalue"/> ::=
		&lt;string&gt;

          &lt;binary table operator clause&gt;<anchor id="D4ParserBNFbinarytableoperatorclause"/> ::=
              <link linkend="D4ParserBNFbinarytableoperator">&lt;binary table operator&gt;</link> <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;binary table operator&gt;<anchor id="D4ParserBNFbinarytableoperator"/> ::=
              union | intersect | minus | times | divide

	&lt;join clause&gt;<anchor id="D4ParserBNFjoinclause"/> ::=
		(join | lookup) <link linkend="D4ParserBNFjoinspecifier">&lt;join specifier&gt;</link> [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;outer join clause&gt;<anchor id="D4ParserBNFouterjoinclause"/> ::=
		(left | right) (join | lookup) <link linkend="D4ParserBNFjoinspecifier">&lt;join specifier&gt;</link>
			[include rowexists [<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>]
			[<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>]

          &lt;join specifier&gt;<anchor id="D4ParserBNFjoinspecifier"/> ::=
              <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link> [by <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>]

          &lt;insert statement&gt;<anchor id="D4ParserBNFinsertstatement"/> ::=
              insert [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>] <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> into <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;update statement&gt;<anchor id="D4ParserBNFupdatestatement"/> ::=
              update [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>] <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> 
			set "{"<link linkend="D4ParserBNFupdatecolumn">&lt;ne update column commalist&gt;</link>"}" 
			[where <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>]

          &lt;update column&gt;<anchor id="D4ParserBNFupdatecolumn"/> ::=
		<link linkend="D4ParserBNFtarget">&lt;target&gt;</link> := <link linkend="D4ParserBNFexpressionterm">&lt;expression term&gt;</link>

	&lt;target&gt;<anchor id="D4ParserBNFtarget"/> ::=
		<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;delete statement&gt;<anchor id="D4ParserBNFdeletestatement"/> ::=
              delete [<link linkend="D4ParserBNFlanguagemodifiers">&lt;language modifiers&gt;</link>] <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

	&lt;variable declaration statement&gt;<anchor id="D4ParserBNFvariabledeclarationstatement"/> ::=
		var <link linkend="D4ParserBNFvariabledefinition">&lt;ne variable definition commalist&gt;</link>

	&lt;variable definition&gt;<anchor id="D4ParserBNFvariabledefinition"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link> [: <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>] [:= <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]

	&lt;assignment statement&gt;<anchor id="D4ParserBNFassignmentstatement"/> ::=
		<link linkend="D4ParserBNFtarget">&lt;target&gt;</link> := <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

	&lt;exit statement&gt;<anchor id="D4ParserBNFexitstatement"/> ::=
		exit

	&lt;if statement&gt;<anchor id="D4ParserBNFifstatement"/> ::=
		if <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> then
			<link linkend="D4ParserBNFstatement">&lt;statement&gt;</link>
		[else <link linkend="D4ParserBNFstatement">&lt;statement&gt;</link>]

	&lt;while statement&gt;<anchor id="D4ParserBNFwhilestatement"/> ::=
		while <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> do <link linkend="D4ParserBNFstatement">&lt;statement&gt;</link>

	&lt;do while statement&gt;<anchor id="D4ParserBNFdowhilestatement"/> ::=
		do <link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link> while <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

	&lt;for statement&gt;<anchor id="D4ParserBNFforstatement"/> ::=
		for 
			<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link> [: <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>] 
			:= <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> (to | downto)
			<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> 
			[step <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] 
			do <link linkend="D4ParserBNFstatement">&lt;statement&gt;</link>

	&lt;repeat statement&gt;<anchor id="D4ParserBNFrepeatstatement"/> ::=
		repeat <link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link> until <link linkend="D4ParserBNFcondition">&lt;condition&gt;</link>

	&lt;condition&gt;<anchor id="D4ParserBNFcondition"/> ::=
		<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

	&lt;break statement&gt;<anchor id="D4ParserBNFbreakstatement"/> ::=
		break

	&lt;continue statement&gt;<anchor id="D4ParserBNFcontinuestatement"/> ::=
		continue

	&lt;case statement&gt;<anchor id="D4ParserBNFcasestatement"/> ::=
		case [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]
			<link linkend="D4ParserBNFcasestatementitem">&lt;ne case statement item list&gt;</link>
			[else <link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement&gt;</link>]
		end

	&lt;case statement item&gt;<anchor id="D4ParserBNFcasestatementitem"/> ::=
		when <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> then <link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement&gt;</link>

	&lt;try finally statement&gt;<anchor id="D4ParserBNFtryfinallystatement"/> ::=
		try
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link>
		finally
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link>
		end

	&lt;try except statement&gt;<anchor id="D4ParserBNFtryexceptstatement"/> ::=
		try
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link>
		except
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link> | <link linkend="D4ParserBNFexceptionhandler">&lt;exception handler list&gt;</link>
		end

	&lt;exception handler&gt;<anchor id="D4ParserBNFexceptionhandler"/> ::=
		on [<link linkend="D4ParserBNFexceptionvariable">&lt;exception variable&gt;</link> :] <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link> do 
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement&gt;</link>

	&lt;exception variable&gt;<anchor id="D4ParserBNFexceptionvariable"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;try commit statement&gt;<anchor id="D4ParserBNFtrycommitstatement"/> ::=
		try
			<link linkend="D4ParserBNFterminatedstatement">&lt;terminated statement list&gt;</link>
		commit

	&lt;raise statement&gt;<anchor id="D4ParserBNFraisestatement"/> ::=
		raise [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]

	&lt;actual parameter&gt;<anchor id="D4ParserBNFactualparameter"/> ::=
		[var] <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;create statement&gt;<anchor id="D4ParserBNFcreatestatement"/> ::=
              <link linkend="D4ParserBNFcreatetablestatement">&lt;create table statement&gt;</link> |
              <link linkend="D4ParserBNFcreateviewstatement">&lt;create view statement&gt;</link> |
              <link linkend="D4ParserBNFcreateconstraintstatement">&lt;create constraint statement&gt;</link> |
              <link linkend="D4ParserBNFcreatereferencestatement">&lt;create reference statement&gt;</link> |
              <link linkend="D4ParserBNFcreatescalartypestatement">&lt;create scalar type statement&gt;</link> |
              <link linkend="D4ParserBNFcreateoperatorstatement">&lt;create operator statement&gt;</link> |
              <link linkend="D4ParserBNFcreateaggregateoperatorstatement">&lt;create aggregate operator statement&gt;</link> |
              <link linkend="D4ParserBNFcreatedevicestatement">&lt;create device statement&gt;</link> |
              <link linkend="D4ParserBNFcreatesortstatement">&lt;create sort statement&gt;</link> |
              <link linkend="D4ParserBNFcreateconversionstatement">&lt;create conversion statement&gt;</link>

          &lt;create table statement&gt;<anchor id="D4ParserBNFcreatetablestatement"/> ::=
              create [session] table <link linkend="D4ParserBNFtablename">&lt;table name&gt;</link> 
			[in <link linkend="D4ParserBNFdevicename">&lt;device name&gt;</link>]
			(
				(from <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>) |
				("{"<link linkend="D4ParserBNFtabledefinitionitem">&lt;table definition item commalist&gt;</link>"}")
			)
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

          &lt;table name&gt;<anchor id="D4ParserBNFtablename"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;device name&gt;<anchor id="D4ParserBNFdevicename"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

          &lt;table definition item&gt;<anchor id="D4ParserBNFtabledefinitionitem"/> ::=
              <link linkend="D4ParserBNFcolumndefinition">&lt;column definition&gt;</link> |
              <link linkend="D4ParserBNFrowconstraintdefinition">&lt;row constraint definition&gt;</link> |
              <link linkend="D4ParserBNFkeydefinition">&lt;key definition&gt;</link> |
              <link linkend="D4ParserBNFreferencedefinition">&lt;reference definition&gt;</link> |
              <link linkend="D4ParserBNForderdefinition">&lt;order definition&gt;</link>

          &lt;column definition&gt;<anchor id="D4ParserBNFcolumndefinition"/> ::=
              <link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> : <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>
			["{"<link linkend="D4ParserBNFcolumndefinitionitem">&lt;ne column definition item commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;column definition item&gt;<anchor id="D4ParserBNFcolumndefinitionitem"/> ::=
		<link linkend="D4ParserBNFdefaultdefinition">&lt;default definition&gt;</link> |
		<link linkend="D4ParserBNFconstraintdefinition">&lt;constraint definition&gt;</link> |
		<link linkend="D4ParserBNFnildefinition">&lt;nil definition&gt;</link>

          &lt;column name&gt;<anchor id="D4ParserBNFcolumnname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;scalar type name&gt;<anchor id="D4ParserBNFscalartypename"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;nil definition&gt;<anchor id="D4ParserBNFnildefinition"/> ::=
		[[not] nil]                

          &lt;key definition&gt;<anchor id="D4ParserBNFkeydefinition"/> ::=
              key "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;reference definition&gt;<anchor id="D4ParserBNFreferencedefinition"/> ::=
	    reference <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link> 
	    "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" 
	    <link linkend="D4ParserBNFreferencesdefinition">&lt;references definition&gt;</link>
	    <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;reference name&gt;<anchor id="D4ParserBNFreferencename"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;references definition&gt;<anchor id="D4ParserBNFreferencesdefinition"/> ::=
	    references <link linkend="D4ParserBNFtablevarname">&lt;tablevar name&gt;</link> "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" 
	    [update (require | cascade | clear | set "{"<link linkend="D4ParserBNFexpression">&lt;expression commalist&gt;</link>"}")] 
	    [delete (require | cascade | clear | set "{"<link linkend="D4ParserBNFexpression">&lt;expression commalist&gt;</link>"}")]

	&lt;tablevar name&gt;<anchor id="D4ParserBNFtablevarname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;create constraint statement&gt;<anchor id="D4ParserBNFcreateconstraintstatement"/> ::=
		create [session] <link linkend="D4ParserBNFconstraintdefinition">&lt;constraint definition&gt;</link>

          &lt;constraint definition&gt;<anchor id="D4ParserBNFconstraintdefinition"/> ::=
              constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link> <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;constraint name&gt;<anchor id="D4ParserBNFconstraintname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

          &lt;create view statement&gt;<anchor id="D4ParserBNFcreateviewstatement"/> ::=
              create [session] view <link linkend="D4ParserBNFviewname">&lt;view name&gt;</link> 
			<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> 
			["{"<link linkend="D4ParserBNFviewdefinitionitem">&lt;ne view definition item commalist&gt;</link>"}"] 
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

          &lt;view name&gt;<anchor id="D4ParserBNFviewname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;view definition item&gt;<anchor id="D4ParserBNFviewdefinitionitem"/> ::=
		<link linkend="D4ParserBNFrowconstraintdefinition">&lt;row constraint definition&gt;</link> |
		<link linkend="D4ParserBNFkeydefinition">&lt;key definition&gt;</link> |
		<link linkend="D4ParserBNFreferencedefinition">&lt;reference definition&gt;</link> |
		<link linkend="D4ParserBNForderdefinition">&lt;order definition&gt;</link>

          &lt;order definition&gt;<anchor id="D4ParserBNForderdefinition"/> ::=
              order "{"<link linkend="D4ParserBNFordercolumndefinition">&lt;order column definition commalist&gt;</link>"}" <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

          &lt;order column definition&gt;<anchor id="D4ParserBNFordercolumndefinition"/> ::=
		<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> [sort <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] [asc | desc] [(include | exclude) nil]

          &lt;class definition&gt;<anchor id="D4ParserBNFclassdefinition"/> ::=
		class <link linkend="D4ParserBNFclassname">&lt;class name&gt;</link> [<link linkend="D4ParserBNFattributes">&lt;attributes&gt;</link>]

	&lt;class name&gt;<anchor id="D4ParserBNFclassname"/> ::=
		&lt;string&gt;

	&lt;attributes&gt;<anchor id="D4ParserBNFattributes"/> ::=
		attributes "{"<link linkend="D4ParserBNFattributedefinition">&lt;ne attribute definition commalist&gt;</link>"}"

	&lt;attribute definition&gt;<anchor id="D4ParserBNFattributedefinition"/> ::=
		<link linkend="D4ParserBNFattributename">&lt;attribute name&gt;</link> = <link linkend="D4ParserBNFattributevalue">&lt;attribute value&gt;</link>

	&lt;attribute name&gt;<anchor id="D4ParserBNFattributename"/> ::=
		&lt;string&gt;

	&lt;attribute value&gt;<anchor id="D4ParserBNFattributevalue"/> ::=
		&lt;string&gt;

	&lt;alter class definition&gt;<anchor id="D4ParserBNFalterclassdefinition"/> ::=
		alter class [<link linkend="D4ParserBNFclassname">&lt;class name&gt;</link>] ["{"<link linkend="D4ParserBNFalterattributedefinition">&lt;alter attribute definition commalist&gt;</link>"}"]

	&lt;alter attribute definition&gt;<anchor id="D4ParserBNFalterattributedefinition"/> ::=
		(create <link linkend="D4ParserBNFattributedefinition">&lt;attribute definition&gt;</link>) | 
		(alter <link linkend="D4ParserBNFattributedefinition">&lt;attribute definition&gt;</link>) | 
		(drop <link linkend="D4ParserBNFattributename">&lt;attribute name&gt;</link>)

	&lt;create scalar type statement&gt;<anchor id="D4ParserBNFcreatescalartypestatement"/> ::=
		create type <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> 
			[like <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link>]
			["{"<link linkend="D4ParserBNFscalartypedefinitionitem">&lt;scalar type definition item commalist&gt;</link>"}"]
			[<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link>]
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;scalar type definition item&gt;<anchor id="D4ParserBNFscalartypedefinitionitem"/> ::=
		<link linkend="D4ParserBNFrepresentationdefinition">&lt;representation definition&gt;</link> |
		<link linkend="D4ParserBNFconstraintdefinition">&lt;constraint definition&gt;</link> |
		<link linkend="D4ParserBNFdefaultdefinition">&lt;default definition&gt;</link> |
		<link linkend="D4ParserBNFspecialdefinition">&lt;special definition&gt;</link>

	&lt;representation definition&gt;<anchor id="D4ParserBNFrepresentationdefinition"/> ::=
		representation <link linkend="D4ParserBNFrepresentationname">&lt;representation name&gt;</link>
			"{"<link linkend="D4ParserBNFpropertydefinition">&lt;ne property definition commalist&gt;</link>"}"
			[<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link> | (selector <link linkend="D4ParserBNFaccessorblock">&lt;accessor block&gt;</link>)]
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;representation name&gt;<anchor id="D4ParserBNFrepresentationname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;accessor block&gt;<anchor id="D4ParserBNFaccessorblock"/> ::=
		<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link> | <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>

	&lt;property definition&gt;<anchor id="D4ParserBNFpropertydefinition"/> ::=
		<link linkend="D4ParserBNFpropertyname">&lt;property name&gt;</link> : <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link> 
			[read <link linkend="D4ParserBNFaccessorblock">&lt;accessor block&gt;</link>] 
			[write <link linkend="D4ParserBNFaccessorblock">&lt;accessor block&gt;</link>] 
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;property name&gt;<anchor id="D4ParserBNFpropertyname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;default definition&gt;<anchor id="D4ParserBNFdefaultdefinition"/> ::=
		default <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

          &lt;row constraint definition&gt;<anchor id="D4ParserBNFrowconstraintdefinition"/> ::=
		<link linkend="D4ParserBNFconstraintdefinition">&lt;constraint definition&gt;</link> |
		<link linkend="D4ParserBNFtransitionconstraintdefinition">&lt;transition constraint definition&gt;</link>

	&lt;transition constraint definition&gt;<anchor id="D4ParserBNFtransitionconstraintdefinition"/> ::=
		transition constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link>
			[on insert <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]
			[on update <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]
			[on delete <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>]
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;special definition&gt;<anchor id="D4ParserBNFspecialdefinition"/> ::=
		special <link linkend="D4ParserBNFspecialname">&lt;special name&gt;</link> <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;special name&gt;<anchor id="D4ParserBNFspecialname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;create reference statement&gt;<anchor id="D4ParserBNFcreatereferencestatement"/> ::=
		create [session] reference <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link>
			<link linkend="D4ParserBNFtablevarname">&lt;tablevar name&gt;</link> "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" 
			<link linkend="D4ParserBNFreferencesdefinition">&lt;references definition&gt;</link>
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;create operator statement&gt;<anchor id="D4ParserBNFcreateoperatorstatement"/> ::=
		create [session] operator
			<link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>
			"("<link linkend="D4ParserBNFformalparameter">&lt;formal parameter commalist&gt;</link>")"
			[: <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>]
			(<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;operator name&gt;<anchor id="D4ParserBNFoperatorname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;formal parameter&gt;<anchor id="D4ParserBNFformalparameter"/> ::=
		[<link linkend="D4ParserBNFmodifier">&lt;modifier&gt;</link>] <link linkend="D4ParserBNFnamedtypespecifier">&lt;named type specifier&gt;</link>

	&lt;modifier&gt;<anchor id="D4ParserBNFmodifier"/> ::=
		[var | const]

	&lt;named type specifier&gt;<anchor id="D4ParserBNFnamedtypespecifier"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link> : <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>

	&lt;type specifier&gt;<anchor id="D4ParserBNFtypespecifier"/> ::=
		<link linkend="D4ParserBNFgenerictypespecifier">&lt;generic type specifier&gt;</link> |
		<link linkend="D4ParserBNFscalartypespecifier">&lt;scalar type specifier&gt;</link> |
		<link linkend="D4ParserBNFrowtypespecifier">&lt;row type specifier&gt;</link> |
		<link linkend="D4ParserBNFtabletypespecifier">&lt;table type specifier&gt;</link> |
		<link linkend="D4ParserBNFlisttypespecifier">&lt;list type specifier&gt;</link> |
		<link linkend="D4ParserBNFcursortypespecifier">&lt;cursor type specifier&gt;</link> |
		<link linkend="D4ParserBNFtypeoftypespecifier">&lt;typeof type specifier&gt;</link>

	&lt;generic type specifier&gt;<anchor id="D4ParserBNFgenerictypespecifier"/> ::=
		generic

	&lt;scalar type specifier&gt;<anchor id="D4ParserBNFscalartypespecifier"/> ::=
		[generic] scalar | <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link>

	&lt;list type specifier&gt;<anchor id="D4ParserBNFlisttypespecifier"/> ::=
		[generic] list["("<link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>")"]

	&lt;row type specifier&gt;<anchor id="D4ParserBNFrowtypespecifier"/> ::=
		[generic] row["{"<link linkend="D4ParserBNFnamedtypespecifier">&lt;named type specifier commalist&gt;</link>"}"]

	&lt;table type specifier&gt;<anchor id="D4ParserBNFtabletypespecifier"/> ::=
		[generic] table["{"<link linkend="D4ParserBNFnamedtypespecifier">&lt;named type specifier commalist&gt;</link>"}"]

	&lt;cursor type specifier&gt;<anchor id="D4ParserBNFcursortypespecifier"/> ::=
		[generic] cursor["("<link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>")"]

	&lt;typeof type specifier&gt;<anchor id="D4ParserBNFtypeoftypespecifier"/> ::=
		typeof"("<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>")"

	&lt;formal parameter specifier&gt;<anchor id="D4ParserBNFformalparameterspecifier"/> ::=
		[<link linkend="D4ParserBNFmodifier">&lt;modifier&gt;</link>] <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>

	&lt;create aggregate operator statement&gt;<anchor id="D4ParserBNFcreateaggregateoperatorstatement"/> ::=
		create [session] aggregate operator
			<link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>
			"("<link linkend="D4ParserBNFformalparameter">&lt;formal parameter commalist&gt;</link>")"
			: <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>
			initialization (<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)
			aggregation (<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)
			finalization (<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

          &lt;create server link statement&gt;<anchor id="D4ParserBNFcreateserverlinkstatement"/> ::=
              create server link <link linkend="D4ParserBNFserverlinkname">&lt;server link name&gt;</link> URI = <link linkend="D4ParserBNFserverURI">&lt;server URI&gt;</link> <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;server link name&gt;<anchor id="D4ParserBNFserverlinkname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;server URI&gt;<anchor id="D4ParserBNFserverURI"/> ::=
		&lt;string&gt;

	&lt;create device statement&gt;<anchor id="D4ParserBNFcreatedevicestatement"/> ::=
		create device <link linkend="D4ParserBNFdevicename">&lt;device name&gt;</link>
			["{"<link linkend="D4ParserBNFdevicemapitem">&lt;device map item commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFreconciliationsettings">&lt;reconciliation settings&gt;</link>
			<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link>
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;device map item&gt;<anchor id="D4ParserBNFdevicemapitem"/> ::=
		<link linkend="D4ParserBNFdevicescalartypemap">&lt;device scalar type map&gt;</link> |
		<link linkend="D4ParserBNFdeviceoperatormap">&lt;device operator map&gt;</link> |
		<link linkend="D4ParserBNFdevicestoredefinition">&lt;device store definition&gt;</link>

	&lt;device scalar type map&gt;<anchor id="D4ParserBNFdevicescalartypemap"/> ::=
		type <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> [<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link>] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;device operator map&gt;<anchor id="D4ParserBNFdeviceoperatormap"/> ::=
		operator <link linkend="D4ParserBNFoperatorspecifier">&lt;operator specifier&gt;</link> [<link linkend="D4ParserBNFclassdefinition">&lt;class definition&gt;</link>] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;operator specifier&gt;<anchor id="D4ParserBNFoperatorspecifier"/> ::=
		<link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>"("<link linkend="D4ParserBNFformalparameterspecifier">&lt;formal parameter specifier commalist&gt;</link>")"

	&lt;device store definition&gt;<anchor id="D4ParserBNFdevicestoredefinition"/> ::=
		store <link linkend="D4ParserBNFstorename">&lt;store name&gt;</link> 
			[<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] 
			by (default | ("{"<link linkend="D4ParserBNFindexcolumndefinition">&lt;index column definition commalist&gt;</link>"}" <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>))
			[indexes (default | "{"<link linkend="D4ParserBNFindexdefinition">&lt;ne index definition commalist&gt;</link>"}")]
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;store name&gt;<anchor id="D4ParserBNFstorename"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;index definition&gt;<anchor id="D4ParserBNFindexdefinition"/> ::=
		index "{"<link linkend="D4ParserBNFindexcolumndefinition">&lt;index column definition commalist&gt;</link>"}" <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;index column definition&gt;<anchor id="D4ParserBNFindexcolumndefinition"/> ::=
		<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> [sort <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] [asc | desc]

	&lt;reconciliation settings&gt;<anchor id="D4ParserBNFreconciliationsettings"/> ::=
		[reconciliation "{"<link linkend="D4ParserBNFreconciliationsettingsitem">&lt;reconciliation settings item commalist&gt;</link>"}"]

	&lt;reconciliation settings item&gt;<anchor id="D4ParserBNFreconciliationsettingsitem"/> ::=
		<link linkend="D4ParserBNFreconciliationmodedefinition">&lt;reconciliation mode definition&gt;</link> |
		<link linkend="D4ParserBNFreconciliationmaster">&lt;reconciliation master&gt;</link>

	&lt;reconciliation mode definition&gt;<anchor id="D4ParserBNFreconciliationmodedefinition"/> ::=
		mode = "{"<link linkend="D4ParserBNFreconciliationmode">&lt;reconciliation mode commalist&gt;</link>"}"

	&lt;reconciliation mode&gt;<anchor id="D4ParserBNFreconciliationmode"/> ::=
		none |
		startup |
		command |
		automatic

	&lt;reconciliation master&gt;<anchor id="D4ParserBNFreconciliationmaster"/> ::=
		master = (server | device | both)

	&lt;create sort statement&gt;<anchor id="D4ParserBNFcreatesortstatement"/> ::=
		create sort <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> using <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

	&lt;create conversion statement&gt;<anchor id="D4ParserBNFcreateconversionstatement"/> ::=
		create conversion <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> to <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> using <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link> [widening | narrowing] <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;alter statement&gt;<anchor id="D4ParserBNFalterstatement"/> ::=
		<link linkend="D4ParserBNFaltertablestatement">&lt;alter table statement&gt;</link> |
		<link linkend="D4ParserBNFalterviewstatement">&lt;alter view statement&gt;</link> |
		<link linkend="D4ParserBNFalterconstraintstatement">&lt;alter constraint statement&gt;</link> |
		<link linkend="D4ParserBNFalterreferencestatement">&lt;alter reference statement&gt;</link> |
		<link linkend="D4ParserBNFalterscalartypestatement">&lt;alter scalar type statement&gt;</link> |
		<link linkend="D4ParserBNFalteroperatorstatement">&lt;alter operator statement&gt;</link> |
		<link linkend="D4ParserBNFalteraggregateoperatorstatement">&lt;alter aggregate operator statement&gt;</link> |
		<link linkend="D4ParserBNFalterdevicestatement">&lt;alter device statement&gt;</link> |
		<link linkend="D4ParserBNFaltersortstatement">&lt;alter sort statement&gt;</link>

	&lt;alter table statement&gt;<anchor id="D4ParserBNFaltertablestatement"/> ::=
		alter table <link linkend="D4ParserBNFtablename">&lt;table name&gt;</link> 
			["{"<link linkend="D4ParserBNFaltertabledefinitionitem">&lt;alter table definition item commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter table definition item&gt;<anchor id="D4ParserBNFaltertabledefinitionitem"/> ::=
		<link linkend="D4ParserBNFaltercolumndefinition">&lt;alter column definition&gt;</link> |
		<link linkend="D4ParserBNFalterrowconstraintdefinition">&lt;alter row constraint definition&gt;</link> |
		<link linkend="D4ParserBNFalterkeydefinition">&lt;alter key definition&gt;</link> |
		<link linkend="D4ParserBNFalterreferencedefinition">&lt;alter reference definition&gt;</link> |
		<link linkend="D4ParserBNFalterorderdefinition">&lt;alter order definition&gt;</link>

	&lt;alter row constraint definition&gt;<anchor id="D4ParserBNFalterrowconstraintdefinition"/> ::=
		(create <link linkend="D4ParserBNFrowconstraintdefinition">&lt;row constraint definition&gt;</link>) |
		(alter constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link> [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		<link linkend="D4ParserBNFaltertransitionconstraintdefinition">&lt;alter transition constraint definition&gt;</link> |
		(drop [transition] constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link>)

	&lt;alter view statement&gt;<anchor id="D4ParserBNFalterviewstatement"/> ::=
		alter view <link linkend="D4ParserBNFviewname">&lt;view name&gt;</link> 
			["{"<link linkend="D4ParserBNFalterviewdefinitionitem">&lt;alter view definition item commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter view definition item&gt;<anchor id="D4ParserBNFalterviewdefinitionitem"/> ::=
		<link linkend="D4ParserBNFalterrowconstraintdefinition">&lt;alter row constraint definition&gt;</link> |
		<link linkend="D4ParserBNFalterkeydefinition">&lt;alter key definition&gt;</link> |
		<link linkend="D4ParserBNFalterreferencedefinition">&lt;alter reference definition&gt;</link> |
		<link linkend="D4ParserBNFalterorderdefinition">&lt;alter order definition&gt;</link>

	&lt;alter column definition&gt;<anchor id="D4ParserBNFaltercolumndefinition"/> ::=
		create column <link linkend="D4ParserBNFcolumndefinition">&lt;column definition&gt;</link> |
		alter column <link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> 
			[: <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>] 
			["{"<link linkend="D4ParserBNFaltercolumndefinitionitem">&lt;ne alter column definition item&gt;</link>"}"] 
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link> |
		drop column <link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link>

	&lt;alter column definition item&gt;<anchor id="D4ParserBNFaltercolumndefinitionitem"/> ::=
		<link linkend="D4ParserBNFalterdefaultdefinition">&lt;alter default definition&gt;</link> |
		<link linkend="D4ParserBNFalterconstraintdefinition">&lt;alter constraint definition&gt;</link> |
		<link linkend="D4ParserBNFalternilabledefinition">&lt;alter nilable definition&gt;</link>

	&lt;alter nilable definition&gt;<anchor id="D4ParserBNFalternilabledefinition"/> ::=
		[[not] nil]

	&lt;alter constraint statement&gt;<anchor id="D4ParserBNFalterconstraintstatement"/> ::=
		alter constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link> [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter constraint definition&gt;<anchor id="D4ParserBNFalterconstraintdefinition"/> ::=
		(create <link linkend="D4ParserBNFconstraintdefinition">&lt;constraint definition&gt;</link>) |
		(alter constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link> [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link>)

	&lt;alter transition constraint definition&gt;<anchor id="D4ParserBNFaltertransitionconstraintdefinition"/> ::=
		alter transition constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link>
			[<link linkend="D4ParserBNFaltertransitionconstraintdefinitionitem">&lt;alter transition constraint definition item&gt;</link>]
			[<link linkend="D4ParserBNFaltertransitionconstraintdefinitionitem">&lt;alter transition constraint definition item&gt;</link>]
			[<link linkend="D4ParserBNFaltertransitionconstraintdefinitionitem">&lt;alter transition constraint definition item&gt;</link>]
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter transition constraint definition item&gt;<anchor id="D4ParserBNFaltertransitionconstraintdefinitionitem"/> ::=
		(create on <link linkend="D4ParserBNFtransition">&lt;transition&gt;</link> <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>) |
		(alter on <link linkend="D4ParserBNFtransition">&lt;transition&gt;</link> <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>) |
		(drop on <link linkend="D4ParserBNFtransition">&lt;transition&gt;</link>)

	&lt;transition&gt;<anchor id="D4ParserBNFtransition"/> ::=
		insert | update | delete

	&lt;alter key definition&gt;<anchor id="D4ParserBNFalterkeydefinition"/> ::=
		(create <link linkend="D4ParserBNFkeydefinition">&lt;key definition&gt;</link>) |
		(alter key "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}" <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop key "{"<link linkend="D4ParserBNFcolumnname">&lt;column name commalist&gt;</link>"}")

	&lt;alter reference statement&gt;<anchor id="D4ParserBNFalterreferencestatement"/> ::=
		alter reference <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link> <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter reference definition&gt;<anchor id="D4ParserBNFalterreferencedefinition"/> ::=
		(create <link linkend="D4ParserBNFreferencedefinition">&lt;reference definition&gt;</link>) |
		(alter reference <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link> <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link>)

	&lt;alter order definition&gt;<anchor id="D4ParserBNFalterorderdefinition"/> ::=
		(create <link linkend="D4ParserBNForderdefinition">&lt;order definition&gt;</link>) |
		(alter order "{"<link linkend="D4ParserBNFordercolumndefinition">&lt;order column definition commalist&gt;</link>"}" <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop order "{"<link linkend="D4ParserBNFordercolumndefinition">&lt;order column definition commalist&gt;</link>"}")

	&lt;alter scalar type statement&gt;<anchor id="D4ParserBNFalterscalartypestatement"/> ::=
		alter type <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> 
			["{"<link linkend="D4ParserBNFalterscalartypedefinitionitem">&lt;alter scalar type definition item commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link>
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter scalar type definition item&gt;<anchor id="D4ParserBNFalterscalartypedefinitionitem"/> ::=
		<link linkend="D4ParserBNFalterrepresentationdefinition">&lt;alter representation definition&gt;</link> |
		<link linkend="D4ParserBNFalterconstraintdefinition">&lt;alter constraint definition&gt;</link> |
		<link linkend="D4ParserBNFalterdefaultdefinition">&lt;alter default definition&gt;</link> |
		<link linkend="D4ParserBNFalterspecialdefinition">&lt;alter special definition&gt;</link>

	&lt;alter representation definition&gt;<anchor id="D4ParserBNFalterrepresentationdefinition"/> ::=
		(create <link linkend="D4ParserBNFrepresentationdefinition">&lt;representation definition&gt;</link>) |
		(
			alter representation 
				<link linkend="D4ParserBNFrepresentationname">&lt;representation name&gt;</link> 
				["{"<link linkend="D4ParserBNFalterpropertydefinition">&lt;ne alter property definition commalist&gt;</link>"}"] 
				[alter selector <link linkend="D4ParserBNFalteraccessorblock">&lt;alter accessor block&gt;</link>]
				<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>
		) |
		(drop representation <link linkend="D4ParserBNFrepresentationname">&lt;representation name&gt;</link>)

	&lt;alter accessor block&gt;<anchor id="D4ParserBNFalteraccessorblock"/> ::=
		<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link> | <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>

	&lt;alter property definition&gt;<anchor id="D4ParserBNFalterpropertydefinition"/> ::=
		(create <link linkend="D4ParserBNFpropertydefinition">&lt;property definition&gt;</link>) |
		(
			alter <link linkend="D4ParserBNFpropertyname">&lt;property name&gt;</link>
				[: <link linkend="D4ParserBNFtypespecifier">&lt;type specifier&gt;</link>]
				[alter read <link linkend="D4ParserBNFalteraccessorblock">&lt;alter accessor block&gt;</link>]
				[alter write <link linkend="D4ParserBNFalteraccessorblock">&lt;alter accessor block&gt;</link>]
				<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>
		) |
		(drop <link linkend="D4ParserBNFpropertyname">&lt;property name&gt;</link>)

	&lt;alter special definition&gt;<anchor id="D4ParserBNFalterspecialdefinition"/> ::=
		(create <link linkend="D4ParserBNFspecialdefinition">&lt;special definition&gt;</link>) |
		(alter special <link linkend="D4ParserBNFspecialname">&lt;special name&gt;</link> [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop special <link linkend="D4ParserBNFspecialname">&lt;special name&gt;</link>)

	&lt;alter default definition&gt;<anchor id="D4ParserBNFalterdefaultdefinition"/> ::=
		(create <link linkend="D4ParserBNFdefaultdefinition">&lt;default definition&gt;</link>) |
		(alter default [<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop default)

	&lt;alter operator statement&gt;<anchor id="D4ParserBNFalteroperatorstatement"/> ::=
		alter operator <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>"("<link linkend="D4ParserBNFformalparameterspecifier">&lt;formal parameter specifier commalist&gt;</link>")"
			[(<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)]
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter aggregate operator statement&gt;<anchor id="D4ParserBNFalteraggregateoperatorstatement"/> ::=
		alter aggregate operator <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>"("<link linkend="D4ParserBNFformalparameterspecifier">&lt;formal parameter specifier commalist&gt;</link>")"
			[initialization (<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)]
			[aggregation (<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)]
			[finalization (<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link> | <link linkend="D4ParserBNFblock">&lt;block&gt;</link>)]
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter server link statement&gt;<anchor id="D4ParserBNFalterserverlinkstatement"/> ::=
		alter server link <link linkend="D4ParserBNFserverlinkname">&lt;server link name&gt;</link> [URI = <link linkend="D4ParserBNFserverURI">&lt;server URI&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter device statement&gt;<anchor id="D4ParserBNFalterdevicestatement"/> ::=
		alter device <link linkend="D4ParserBNFdevicename">&lt;device name&gt;</link> 
			["{"<link linkend="D4ParserBNFalterdevicemapitem">&lt;alter device map item commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFalterreconciliationsettings">&lt;alter reconciliation settings&gt;</link>
			<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link> 
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>

	&lt;alter reconciliation settings&gt;<anchor id="D4ParserBNFalterreconciliationsettings"/> ::=
		[alter reconciliation "{"<link linkend="D4ParserBNFreconciliationsettingsitem">&lt;reconciliation settings item commalist&gt;</link>"}"]

	&lt;alter device map item&gt;<anchor id="D4ParserBNFalterdevicemapitem"/> ::=
		<link linkend="D4ParserBNFalterdevicescalartypemap">&lt;alter device scalar type map&gt;</link> |
		<link linkend="D4ParserBNFalterdeviceoperatormap">&lt;alter device operator map&gt;</link> |
		<link linkend="D4ParserBNFalterdevicestoredefinition">&lt;alter device store definition&gt;</link>

	&lt;alter device scalar type map&gt;<anchor id="D4ParserBNFalterdevicescalartypemap"/> ::=
		(create <link linkend="D4ParserBNFdevicescalartypemap">&lt;device scalar type map&gt;</link>) | 
		(alter type <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> [<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) | 
		(drop type <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link>)

	&lt;alter device operator map&gt;<anchor id="D4ParserBNFalterdeviceoperatormap"/> ::=
		(create <link linkend="D4ParserBNFdeviceoperatormap">&lt;device operator map&gt;</link>) |
		(alter operator <link linkend="D4ParserBNFoperatorspecifier">&lt;operator specifier&gt;</link> [<link linkend="D4ParserBNFalterclassdefinition">&lt;alter class definition&gt;</link>] <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop operator <link linkend="D4ParserBNFoperatorspecifier">&lt;operator specifier&gt;</link>)

	&lt;alter device store definition&gt;<anchor id="D4ParserBNFalterdevicestoredefinition"/> ::=
		(create <link linkend="D4ParserBNFdevicestoredefinition">&lt;device store definition&gt;</link>) |
		(alter store <link linkend="D4ParserBNFstorename">&lt;store name&gt;</link> 
			[<link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>] 
			[alter by (default | ("{"<link linkend="D4ParserBNFindexcolumndefinition">&lt;index column definition commalist&gt;</link>"}" <link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>))] 
			[alter indexes (default | "{"<link linkend="D4ParserBNFalterindexdefinition">&lt;alter index definition commalist&gt;</link>"}")] 
			<link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop store <link linkend="D4ParserBNFstorename">&lt;store name&gt;</link>)

	&lt;alter index definition&gt;<anchor id="D4ParserBNFalterindexdefinition"/> ::=
		(create <link linkend="D4ParserBNFindexdefinition">&lt;index definition&gt;</link>) |
		(alter index "{"<link linkend="D4ParserBNFindexdefinition">&lt;index definition commalist&gt;</link>"}" <link linkend="D4ParserBNFaltermetadata">&lt;alter metadata&gt;</link>) |
		(drop index "{"<link linkend="D4ParserBNFindexdefinition">&lt;index definition commalist&gt;</link>"}")

	&lt;alter sort statement&gt;<anchor id="D4ParserBNFaltersortstatement"/> ::=
		alter sort <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> using <link linkend="D4ParserBNFexpression">&lt;expression&gt;</link>

          &lt;drop statement&gt;<anchor id="D4ParserBNFdropstatement"/> ::=
              (drop table <link linkend="D4ParserBNFtablename">&lt;table name&gt;</link>) |
              (drop view <link linkend="D4ParserBNFviewname">&lt;view name&gt;</link>) |
              (drop constraint <link linkend="D4ParserBNFconstraintname">&lt;constraint name&gt;</link>) |
              (drop reference <link linkend="D4ParserBNFreferencename">&lt;reference name&gt;</link>) |
              (drop type <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link>) |
              (drop operator <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>"("<link linkend="D4ParserBNFformalparameterspecifier">&lt;formal parameter specifier commalist&gt;</link>")") |
		(drop aggregate operator <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>"("<link linkend="D4ParserBNFformalparameterspecifier">&lt;formal parameter specifier commalist&gt;</link>")") |
              (drop device <link linkend="D4ParserBNFdevicename">&lt;device name&gt;</link>) |
              (drop sort <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link>) |
              (drop conversion <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> to <link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link> using <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>)

	&lt;attach statement&gt;<anchor id="D4ParserBNFattachstatement"/> ::=
		attach [operator] <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link> 
			to <link linkend="D4ParserBNFeventsourcespecifier">&lt;event source specifier&gt;</link> 
			<link linkend="D4ParserBNFeventspecifierclause">&lt;event specifier clause&gt;</link>
			[before "{"<link linkend="D4ParserBNFoperatorname">&lt;ne operator name commalist&gt;</link>"}"]
			<link linkend="D4ParserBNFmetadata">&lt;metadata&gt;</link>

	&lt;event source specifier&gt;<anchor id="D4ParserBNFeventsourcespecifier"/> ::=
		<link linkend="D4ParserBNFtablevarname">&lt;tablevar name&gt;</link> |
		(<link linkend="D4ParserBNFcolumnname">&lt;column name&gt;</link> in <link linkend="D4ParserBNFtablevarname">&lt;tablevar name&gt;</link>) |
		<link linkend="D4ParserBNFscalartypename">&lt;scalar type name&gt;</link>

	&lt;event specifier clause&gt;<anchor id="D4ParserBNFeventspecifierclause"/> ::=
		on "{"<link linkend="D4ParserBNFeventspecifier">&lt;ne event specifier commalist&gt;</link>"}"

	&lt;event specifier&gt;<anchor id="D4ParserBNFeventspecifier"/> ::=
		((before | after) (insert | update | delete)) | 
		(default | validate | change)

	&lt;detach statement&gt;<anchor id="D4ParserBNFdetachstatement"/> ::=
		detach [operator] <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>
			from <link linkend="D4ParserBNFeventsourcespecifier">&lt;event source specifier&gt;</link>
			<link linkend="D4ParserBNFeventspecifierclause">&lt;event specifier clause&gt;</link>

	&lt;invoke statement&gt;<anchor id="D4ParserBNFinvokestatement"/> ::=
		invoke <link linkend="D4ParserBNFoperatorname">&lt;operator name&gt;</link>
			on <link linkend="D4ParserBNFeventsourcespecifier">&lt;event source specifier&gt;</link>
			<link linkend="D4ParserBNFeventspecifierclause">&lt;event specifier clause&gt;</link>
			before "{"<link linkend="D4ParserBNFoperatorname">&lt;ne operator name commalist&gt;</link>"}"

	&lt;grant statement&gt;<anchor id="D4ParserBNFgrantstatement"/> ::=
		grant <link linkend="D4ParserBNFrightspecifier">&lt;right specifier&gt;</link>
			[on <link linkend="D4ParserBNFcatalogobjectspecifier">&lt;catalog object specifier&gt;</link>] 
			to <link linkend="D4ParserBNFsecurityspecifier">&lt;security specifier&gt;</link>

	&lt;right specifier&gt;<anchor id="D4ParserBNFrightspecifier"/> ::=
		all | usage | ("{"<link linkend="D4ParserBNFrightname">&lt;right name commalist&gt;</link>"}")

	&lt;right name&gt;<anchor id="D4ParserBNFrightname"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;catalog object specifier&gt;<anchor id="D4ParserBNFcatalogobjectspecifier"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link> | <link linkend="D4ParserBNFoperatorspecifier">&lt;operator specifier&gt;</link>

	&lt;user id&gt;<anchor id="D4ParserBNFuserid"/> ::=
		&lt;string&gt;

	&lt;group name&gt;<anchor id="D4ParserBNFgroupname"/> ::=
		&lt;string&gt;

	&lt;role name&gt;<anchor id="D4ParserBNFrolename"/> ::=
		<link linkend="D4ParserBNFqualifiedidentifier">&lt;qualified identifier&gt;</link>

	&lt;security specifier&gt;<anchor id="D4ParserBNFsecurityspecifier"/> ::=
		(user <link linkend="D4ParserBNFuserid">&lt;user id&gt;</link>) | 
		(role <link linkend="D4ParserBNFrolename">&lt;role name&gt;</link>) |
		(group <link linkend="D4ParserBNFgroupname">&lt;group name&gt;</link> [inherited] [apply recursively] [include users])

	&lt;revoke statement&gt;<anchor id="D4ParserBNFrevokestatement"/> ::=
		revoke <link linkend="D4ParserBNFrightspecifier">&lt;right specifier&gt;</link> [on <link linkend="D4ParserBNFcatalogobjectspecifier">&lt;catalog object specifier&gt;</link>] from <link linkend="D4ParserBNFsecurityspecifier">&lt;security specifier&gt;</link>

	&lt;revert statement&gt;<anchor id="D4ParserBNFrevertstatement"/> ::=
		revert <link linkend="D4ParserBNFrightspecifier">&lt;right specifier&gt;</link> [on <link linkend="D4ParserBNFcatalogobjectspecifier">&lt;catalog object specifier&gt;</link>] for <link linkend="D4ParserBNFsecurityspecifier">&lt;security specifier&gt;</link>

</programlisting>
