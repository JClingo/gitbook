<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section SYSTEM "/src/Docs/DocBookManuals/docbookx.dtd">
<section id="DRSystemIntegrationLibrary-Schema-Operators"> 
	 <sectioninfo> 
		  <date>Tuesday, May 29, 2007 4:35:28 PM</date> 
	 </sectioninfo> 
	 <title><indexterm> 
				<primary>System.Integration Library</primary> 
				<secondary>Operators</secondary> 
		  </indexterm> 
		  <indexterm> 
				<primary>Operators</primary> 
				<secondary>System.Integration</secondary> 
		  </indexterm><indexterm> 
				<primary>System.Integration Operators</primary> 
		  </indexterm>Operators</title> 
	 <para>The following sections describe the operators available in the
		  System.Integration Library.</para> 
	 <section id="O-System.Integration.Copy"> 
		  <title><indexterm> 
					 <primary>Copy - Table Operator</primary> 
				</indexterm><indexterm> 
					 <primary>Operators</primary> 
					 <secondary>Copy</secondary> 
				</indexterm>System.Integration.Copy</title> 
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Integration.Copy" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para>
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>System.Integration.Copy</symbol> Performs a row-atomic
				optimistic insert or update operation from the source expression to the target
				expression.</para> 
		  <para>The <symbol>System.Integration.Copy</symbol> operator does the
				following: 
				<itemizedlist> 
					 <listitem> 
						  <para>Inserts into target if the specified key does not
								exist in the target expression.</para> 
					 </listitem> 
					 <listitem> 
						  <para>If a key is not specified (blank), then a key is
								choosen from the target expression.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Updates the target if not AInsertOnly and the
								specified key does exist but the comparable columns differ.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Does nothing if the target row exists and the
								comparable columns match.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Starts a browse isolated process for the source
								query, and starts a process for the target and performs a transaction for each
								target execution.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Returns a string with a line for every row that
								raises an error during the copy.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Raises an error if a compiler error occurs (runtime
								errors will be logged and returned).</para> 
					 </listitem> 
				</itemizedlist></para> 
		  <example> 
				<title>Using System.Integration.Copy</title> 
				<programlisting>See example for <ulink type="xref" url="O-System.Integration.CopyTables.html">System.Integration.CopyTables</ulink>.</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink type="xref"
				url="O-System.Integration.CopyTables.html">System.Integration.CopyTables</ulink><ulink
				url="O-System.Integration.Insert.html"
				type="xref">System.Integration.Insert</ulink></para> 
	 </section> 
	 <section id="O-System.Integration.CopyTables"> 
		  <title><indexterm> 
					 <primary>CopyTable - List Operator</primary> 
				</indexterm><indexterm> 
					 <primary>Operators</primary> 
					 <secondary>CopyTable</secondary> 
				</indexterm>System.Integration.CopyTables</title> 
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Integration.CopyTables" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para>
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>System.Integration.CopyTables</symbol> duplicates the
				tables and data from on device to another. This operator can be used to import
				data and its structure, for example from Oracle to MS-SQL.</para> 
		  <para><symbol>System.Integration.CopyTables</symbol> creates (if they
				do not exists) all tables of the <symbol>ASourceLibrary</symbol> in the
				<symbol>ATargetLibrary</symbol> and copies the data into them by executing
				<symbol>System.Integration.Copy</symbol>.</para> 
		  <example> 
				<title>Using System.Integration.CopyTables</title> 
				<programlisting>RegisterLibrary("System.Integration"); CreateLibrary (
      LibraryDescriptor ("SourceLib", VersionNumberUndefined(),
      "SourceDevice", list(FileReference) {}, list(LibraryReference) {
      LibraryReference("System",VersionNumberUndefined()) } ) );
      RegisterLibrary("SourceLib"); create device SourceDevice class
      "System.MemoryDevice"; create table SampleTable { ID: Integer, Name :
      String, key{ID} }; SampleTable := table { row { 1 ID, "Jim" Name }, row
      { 2, "Jeff" } }; select TableVars over { Name } where Name matches
      "SampleTable"; select SampleTable; CreateLibrary (LibraryDescriptor
      ("TargetLib", VersionNumberUndefined(), "TargetDevice",
      list(FileReference) {}, list(LibraryReference) {
      LibraryReference("SimpleDevice",VersionNumberUndefined()) } ) );
      RegisterLibrary("TargetLib"); create device TargetDevice reconciliation
      { mode = { Command }, master = device } class "SimpleDevice" attributes
      { "DirectoryName" = "c:\Data", "AutoSave" = "true" };
      CopyTables("SourceLib","TargetLib"); select TableVars over { Name }
      where Name matches "SampleTable"; drop table SourceLib.SampleTable;
      UnregisterLibrary("SourceLib"); DropLibrary("SourceLib"); select
      TableVars over { Name } where Name matches "SampleTable"; select
      TargetLib.SampleTable; TruncateTable("TargetDevice",
      "TargetLib.SampleTable"); drop table TargetLib.SampleTable;
      UnregisterLibrary("TargetLib");
      DropLibrary("TargetLib");</programlisting> 
				<programlisting>Name --------------------- SourceLib.SampleTable ID Name
      -- ---- 1 Jim 2 Jeff Name -------------------------------
      SourceLib.SampleTable TargetLib.TargetLib.SampleTable Name
      ------------------------------- TargetLib.TargetLib.SampleTable ID Name
      -- ---- 1 Jim 2 Jeff</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink type="xref"
				url="O-System.Integration.Copy.html">System.Integration.Copy</ulink></para> 
	 </section>
	 <section id="O-System.Integration.Insert"> 
		  <title><indexterm> 
					 <primary>Insert - Table Operator</primary> 
				</indexterm><indexterm> 
					 <primary>Operators</primary> 
					 <secondary>Insert</secondary> 
				</indexterm><indexterm><primary>Integration</primary><secondary>Insert
						  - Table Operator</secondary></indexterm>System.Integration.Insert</title> 
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Integration.Insert" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para>
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>System.Integration.Insert</symbol> Performs a row-atomic
				optimistic insert operation from the source expression to the target
				expression.</para> 
		  <para>The <symbol>System.Integration.Insert</symbol> operator does the
				following: 
				<itemizedlist> 
					 <listitem> 
						  <para>Inserts into target if the specified key does not
								exist in the target expression.</para> 
					 </listitem> 
					 <listitem> 
						  <para>If a key is not specified (blank), then a key is
								choosen from the target expression.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Logs an error and continues if the target row
								exists.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Starts a browse isolated process for the source
								query, and starts a process for the target and performs a transaction for each
								target execution.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Returns a string with an entry for every row that
								raises an error during the insert.</para> 
					 </listitem> 
					 <listitem> 
						  <para>Raises an error if a compiler error occurs (runtime
								errors will be logged and returned).</para> 
					 </listitem> 
				</itemizedlist></para> 
		  <example> 
				<title>Using System.Integration.Insert</title> 
				<programlisting>select
	Insert
	(
		table { row { 'General' Library_Name, 'Test' Name, 'txt' Type_ID } },
		Documents
	);</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink type="xref"
				url="O-System.Integration.Copy.html">System.Integration.Copy</ulink></para> 
	 </section>
</section>
