<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "/src/Docs/DocBookManuals/docbookx.dtd">
<section id="O-Frontend.Operators"> 
	 <sectioninfo><date>Thursday, December 30, 2004 3:20:57 AM</date> 
	 </sectioninfo> 
	 <title><indexterm><primary>Frontend
					 Library</primary><secondary>Operators</secondary></indexterm> 
		  <indexterm><primary>Operators</primary><secondary>Frontend</secondary></indexterm>Operators</title>
	 
	 <para></para> 
	 <para>The following sections describe the operators in the Frontend
		  Library.</para> 
	 <bridgehead renderas="sect3">See Also</bridgehead> 
	 <para><ulink url="O-System.Operators.html" type="xref">System
				Operators</ulink></para> 
	 <section id="O-Frontend.ApplicationOperators"> 
		  <title>Application Operators</title> 
		  <para></para> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-Frontend.Operators.html" type="xref">Frontend
					 Operators</ulink></para> 
		  <section id="O-Frontend.AddApplication"> 
				<title><indexterm><primary>AddApplication - Application
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>AddApplication</secondary></indexterm><indexterm><primary>Application
								Operators</primary><secondary>AddApplication</secondary></indexterm>Frontend.AddApplication</title>
				<?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.AddApplication" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>AddApplication</symbol> creates an application in the
					 Dataphor Server with the given ID, name, starting document, and requisite
					 library.</para> 
				<example> 
					 <title>Using Frontend.AddApplication</title> 
					 <programlisting>AddApplication("Example", "Application", "Form", "Lib");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.ApplicationOperators.html"
					  type="xref">Application Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.PrepareApplication"> 
				<title><indexterm><primary>PrepareApplication - Application
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>PrepareApplication</secondary></indexterm><indexterm><primary>Application
								Operators</primary><secondary>PrepareApplication</secondary></indexterm>Frontend.PrepareApplication</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.PrepareApplication" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>PrepareApplication</symbol> returns the starting
					 document expression for the application. It also ensures that all required
					 libraries are registered and registers those that are not.</para> 
				<example> 
					 <title>Using Frontend.PrepareApplication</title> 
					 <programlisting>PrepareApplication("Example");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink url="O-Frontend.ApplicationOperators.html"
					 type="xref">Application Operators</ulink> </para> 
		  </section> 
	 </section> 
	 <section id="O-Frontend.CRCOperators"> 
		  <title>CRC Operators</title> 
		  <para></para> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-Frontend.DocumentOperators.html"
				type="xref">Document Operators</ulink> | 
				<ulink url="O-Frontend.Operators.html" type="xref">Frontend
					 Operators</ulink></para> 
		  <section id="O-Frontend.GetCRC32"> 
				<title><indexterm><primary>GetCRC32 - CRC
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>GetCRC32</secondary></indexterm><indexterm><primary>CRC
								Operators</primary><secondary>GetCRC32</secondary></indexterm>Frontend.GetCRC32</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.GetCRC32" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>GetCRC32</symbol> returns the 32 bit Cyclic
					 Redundancy Check (CRC) for any value specified in <symbol>AValue</symbol>.
					 <symbol>AValue</symbol> can be any data type.</para> 
				<example> 
					 <title>Using Frontend.GetCRC32</title> 
					 <programlisting>select GetCRC32("This is a string");</programlisting> 
					 <programlisting>-2078621776</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.LoadIfNecessary.html"
					  type="xref">Frontend.LoadIfNecessary</ulink> | 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					  type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.LoadIfNecessary"> 
				<title><indexterm><primary>LoadIfNecessary - CRC
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>LoadIfNecessary</secondary></indexterm><indexterm><primary>CRC
								Operators</primary><secondary>LoadIfNecessary</secondary></indexterm>Frontend.LoadIfNecessary</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.LoadIfNecessary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>LoadIfNecessary</symbol> evaluates an expression and
					 creates a 32 bit CRC. The CRC is compared to the 32 bit CRC that is
					 passed.</para> 
				<para>If both CRCs match it returns <symbol>true</symbol> in
					 <symbol>CRCMatches</symbol>, <symbol>nil</symbol> in <symbol>Value,</symbol>
					 and the same CRC in <symbol>ActualCRC32</symbol>.</para> 
				<para>If the CRCs don't match it returns <symbol>false</symbol> in
					 <symbol>CRCMatches</symbol>, the value from the expression in
					 <symbol>Value</symbol>, and the new CRC in <symbol>ActualCRC32</symbol>.</para>
				
				<example> 
					 <title>Using Frontend.LoadIfNecessary</title> 
					 <programlisting>select table { LoadIfNecessary("Script('Users')", 841367), key {} } ;
select table { LoadIfNecessary("Script('Users')", 172836843), key {} } ;</programlisting> 
					 <programlisting>CRCMatches Value                     ActualCRC32
---------- ------------------------- -----------
False
create table .System.Users in System.Catalog
{
	ID : System.UserID,
	Name : System.String tags { Frontend.Preview.Include = "true" },
	Group_Name : System.GroupName,
	key{ID} static tags { Storage.Enforced = "true" }
	
} tags { Frontend.UseList = "true" }; 172836843

CRCMatches Value      ActualCRC32
---------- ---------- -----------
True       &lt;No Value&gt; 172836843</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.GetCRC32.html"
					 type="xref">Frontend.GetCRC32</ulink> | 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-Frontend.DocumentOperators"> 
		  <title>Document Operators</title> 
		  <para></para> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
					 Operators</ulink> | 
				<ulink url="O-Frontend.Operators.html" type="xref">Frontend
					 Operators</ulink></para> 
		  <section id="O-Frontend.CopyDocument"> 
				<title><indexterm><primary>CopyDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>CopyDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>CopyDocument</secondary></indexterm>Frontend.CopyDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.CopyDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>CopyDocument</symbol> makes a copy of
					 <symbol>ASourceDocument</symbol> in <symbol>ASourceLibrary</symbol>. The copy
					 will be named <symbol>ATargetDocument</symbol> and will be placed in
					 <symbol>ATargetLibrary</symbol>. 
					 <note> 
						  <para> If the target document already exists it will be
								overwritten without warning.</para> 
					 </note></para> 
				<example> 
					 <title>Using Frontend.CopyDocument</title> 
					 <programlisting>CreateAndSave
(
 "General",
 "Doc",
 "txt",
 "This is the contents of the text document."
);
select LoadDocument("General", "Doc");
CopyDocument
(
 "General", "Doc",
  "General", "OtherDoc"
);
select DocumentExists("General", "OtherDoc");
DeleteDocument("General", "OtherDoc");
select DocumentExists("General", "OtherDoc");
DeleteDocument("General", "Doc");</programlisting> 
					 <programlisting>This is the contents of the text document.
True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.CreateAndSave"> 
				<title><indexterm><primary>CreateAndSave - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>CreateAndSave</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>CreateAndSave</secondary></indexterm>Frontend.CreateAndSave</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.CreateAndSave" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>CreateAndSave</symbol> creates a document
					 <symbol>AName</symbol> in <symbol>ALibraryName</symbol> as a
					 <symbol>ADocumentType</symbol> document and saves it with the contents
					 <symbol>ADocument</symbol>.</para> 
				<para><symbol>ADocument</symbol> can be of type
					 <symbol>String</symbol> or <symbol>Binary</symbol> as needed to match
					 <symbol>ADocumentType</symbol>.</para> 
				<para>If a document by the same name already exists in the library,
					 that document will first be deleted.</para> 
				<example> 
					 <title>Using Frontend.CreateAndSave</title> 
					 <programlisting>CreateAndSave
(
 "General", "Doc",
 "txt", "This is the contents of the text document."
);
select LoadDocument("General", "Doc");
DeleteDocument("General", "Doc");</programlisting> 
					 <programlisting>This is the contents of my text document.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.CreateDocument"> 
				<title><indexterm><primary>CreateDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>CreateDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>CreateDocument</secondary></indexterm>Frontend.CreateDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.CreateDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>CreateDocument</symbol> creates a document
					 <symbol>AName</symbol> in <symbol>ALibraryName</symbol> as a
					 <symbol>ADocumentType</symbol> document.</para> 
				<para>If a document by the same name already exists in the library
					 a Runtime error will occur.</para> 
				<example> 
					 <title>Using Frontend.CreateDocument</title> 
					 <programlisting>CreateDocument("General", "Doc", "txt");
select DocumentExists("General", "Doc");
DeleteDocument("General", "Doc");
select DocumentExists("General", "Doc");</programlisting> 
					 <programlisting>True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.DeleteDocument"> 
				<title><indexterm><primary>DeleteDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>DeleteDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>DeleteDocument</secondary></indexterm>Frontend.DeleteDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.DeleteDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>DeleteDocument</symbol> deletes
					 <symbol>AName</symbol> from <symbol>ALibraryName</symbol>.</para> 
				<example> 
					 <title>Using Frontend.DeleteDocument</title> 
					 <programlisting>CreateDocument("General", "Doc", "txt");
select DocumentExists("General", "Doc");
DeleteDocument("General", "Doc");
select DocumentExists("General", "Doc");</programlisting> 
					 <programlisting>True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.DocumentExists"> 
				<title><indexterm><primary>DocumentExists - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>DocumentExists</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>DocumentExists</secondary></indexterm>Frontend.DocumentExists</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.DocumentExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>DocumentExists</symbol> returns <symbol>True</symbol>
					 if <symbol>AName</symbol> exists in <symbol>ALibraryName</symbol>, otherwise it
					 returns <symbol>False</symbol>.</para> 
				<example> 
					 <title>Using Frontend.DocumentExists</title> 
					 <programlisting>CreateDocument("General", "Doc", "txt");
select DocumentExists("General", "Doc");
DeleteDocument("General", "Doc");
select DocumentExists("General", "Doc");</programlisting> 
					 <programlisting>True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.GetDefaultDocumentType"> 
				<title><indexterm><primary>GetDefaultDocumentType - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>GetDefaultDocumentType</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>GetDefaultDocumentType</secondary></indexterm>Frontend.GetDefaultDocumentType</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.GetDefaultDocumentType" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>GetDefaultDocumentType</symbol> returns a document
					 type that can be associated with the specified
					 <symbol>ADesignerID</symbol>.</para> 
				<example> 
					 <title>Using Frontend.GetDefaultDocumentType</title> 
					 <programlisting>select GetDefaultDocumentType("D4");</programlisting> 
					 <programlisting>d4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.GetDocumentType"> 
				<title><indexterm><primary>GetDocumentType - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>GetDocumentType</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>GetDocumentType</secondary></indexterm>Frontend.GetDocumentType</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.GetDocumentType" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>GetDocumentType</symbol> returns the document type of
					 the document <symbol>AName</symbol> in the library
					 <symbol>ALibraryName</symbol>.</para> 
				<example> 
					 <title>Using Frontend.GetDocumentType</title> 
					 <programlisting>select GetDocumentType("Security", "Register");</programlisting> 
					 <programlisting>d4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.Load"> 
				<title><indexterm><primary>Load - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>Load</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>Load</secondary></indexterm>Frontend.Load</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.Load" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>Load</symbol> returns <symbol>AName</symbol> from the
					 library <symbol>ALibraryName</symbol>. Note that dfd and dfdx documents will be
					 loaded raw. No ancestors will be merged with the dfdx document.</para> 
				<para>The <symbol>LoadDocument</symbol> and <symbol>Load</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.Load</title> 
					 <programlisting>create table Table in Temp
{
 ID : Integer, Name : String, key { ID }
};
CreateAndSave("General", "Form", "dfd", Derive("General.Table"));
select Load("General", "Form");
drop table Table;
DeleteDocument("General", "Form");</programlisting> 
					 <programlisting>&lt;interface xmlns:bop="www.alphora.com/schemas/bop" ...</programlisting> 
					 <para>Note: Only the first few characters of the results are
						  shown.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.Image"> 
				<title><indexterm><primary>Image - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>Image</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>Image</secondary></indexterm>Frontend.Image</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.Image" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>Image</symbol> returns the contents of the document
					 <symbol>AName</symbol> in <symbol>ALibraryName</symbol> as a
					 <symbol>Binary</symbol>.</para> 
				<para>An error will occur if the document contents are not of type
					 <symbol>Binary</symbol>.</para> 
				<para>The <symbol>LoadBinary</symbol> and <symbol>Image</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.GetLibraryNodeTypes</title> 
					 <programlisting>select Image("Frontend", "Image.Edit");</programlisting> 
					 <programlisting>&lt;binary data&gt;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.LoadAndProcess"> 
				<title><indexterm><primary>LoadAndProcess - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>LoadAndProcess</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>LoadAndProcess</secondary></indexterm>Frontend.LoadAndProcess</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.LoadAndProcess" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>LoadAndProcess</symbol> returns
					 <symbol>AName</symbol>, a dfd or dfdx form from the library
					 <symbol>ALibraryName</symbol>. In the case of a dfdx, all ancestors will be
					 merged with the dfdx document.</para> 
				<para>The <symbol>LoadAndProcess</symbol> and <symbol>Form</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.LoadAndProcess</title> 
					 <programlisting>create table Table in Temp
{
 ID : Integer, Name : String, key { ID }
};
CreateAndSave("General", "Form", "dfd", Derive("General.Table"));
select LoadAndProcess("General", "Form");
drop table Table;
DeleteDocument("General", "Form");</programlisting> 
					 <programlisting>&lt;interface xmlns:bop="www.alphora.com/schemas/bop" ...</programlisting> 
					 <para>Note: Only the first few characters of the results are
						  shown.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.LoadBinary"> 
				<title><indexterm><primary>LoadBinary - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>LoadBinary</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>LoadBinary</secondary></indexterm>Frontend.LoadBinary</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.LoadBinary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>LoadBinary</symbol> returns the contents of the
					 document <symbol>AName</symbol> in <symbol>ALibraryName</symbol> as a
					 <symbol>Binary</symbol>.</para> 
				<para>An error will occur if the document contents are not of type
					 <symbol>Binary</symbol>.</para> 
				<para>The <symbol>LoadBinary</symbol> and <symbol>Image</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.LoadBinary</title> 
					 <programlisting>select LoadBinary("Frontend", "Image.Edit");</programlisting> 
					 <programlisting>&lt;binary data&gt;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.LoadCustomization"> 
				<title><indexterm><primary>LoadCustomization - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>LoadCustomization</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>LoadCustomization</secondary></indexterm>Frontend.LoadCustomization</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.LoadCustomization" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>LoadCustomization</symbol> returns a user interface
					 form as a string. It requires as an argument a string representing a dfdx form,
					 not a dfd, to which <symbol>LoadCustomization</symbol> will merge all
					 ancestors.</para> 
				<!--?<para>The <symbol>LoadAndProcess</symbol> and <symbol>Form</symbol>
					 operators are equivalent except that they load the dfdx document from the
					 library.</para>-->
				<example> 
					 <title>Using Frontend.LoadCustomization</title> 
					 <programlisting>begin
 var LDilxString : String;
 LDilxString := Load("General", "DFDXForm");
 LoadCustomization(LDilxString);
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.LoadDocument"> 
				<title><indexterm><primary>LoadDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>LoadDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>LoadDocument</secondary></indexterm>Frontend.LoadDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.LoadDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>LoadDocument</symbol> returns the contents of the
					 document <symbol>AName</symbol> in <symbol>ALibraryName</symbol> as a
					 <symbol>String</symbol>.</para> 
				<para>An error will occur if the document contents are not of type
					 <symbol>String</symbol>.</para> 
				<para>The <symbol>LoadDocument</symbol> and <symbol>Load</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.LoadDocument</title> 
					 <programlisting>CreateAndSave
(
 "General",
 "Doc",
 "txt",
 "This is the contents of the text document."
);
select LoadDocument("General", "Doc");
DeleteDocument("General", "Doc");</programlisting> 
					 <programlisting>This is the contents of the text document.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.MoveDocument"> 
				<title><indexterm><primary>MoveDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>MoveDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>MoveDocument</secondary></indexterm>Frontend.MoveDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.MoveDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>MoveDocument</symbol> moves the document
					 <symbol>ASourceDocument</symbol> in <symbol>ASourceLibrary</symbol> to
					 <symbol>ATargetDocument</symbol> in <symbol>ATargetLibrary</symbol>. </para> 
				<para>If the target document already exists, it will be overwritten
					 without warning. The source document will not exist after the move.</para> 
				<example> 
					 <title>Using Frontend.MoveDocument</title> 
					 <programlisting>CreateAndSave
(
 "General",
 "Doc",
 "txt",
 "This is the contents of the text document."
);
MoveDocument("General", "Doc", "General", "OtherDoc");
select Documents where Library_Name = "General";
select LoadDocument("General", "OtherDoc");
DeleteDocument("General", "OtherDoc");</programlisting> 
					 <programlisting>Library_Name Name     Type_ID
------------ -------- -------
General      OtherDoc txt

This is the contents of the text document.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.RefreshDocuments"> 
				<title><indexterm><primary>RefreshDocuments - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>RefreshDocuments</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>RefreshDocuments</secondary></indexterm>Frontend.RefreshDocuments</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.RefreshDocuments" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>RefreshDocuments</symbol> clears and reloads the
					 documents buffer.</para> 
				<example> 
					 <title>Using Frontend.RefreshDocuments</title> 
					 <programlisting>RefreshDocuments("General");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.RenameDocument"> 
				<title><indexterm><primary>RenameDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>RenameDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>RenameDocument</secondary></indexterm>Frontend.RenameDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.RenameDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>RenameDocument</symbol> moves the document
					 <symbol>AOldName</symbol> in <symbol>AOldLibraryName</symbol> to
					 <symbol>ANewName</symbol> in <symbol>ANewLibraryName</symbol>. </para> 
				<example> 
					 <title>Using Frontend.RenameDocument</title> 
					 <programlisting>CreateAndSave
(
 "General",
 "Doc",
 "txt",
 "This is the contents of the text document."
);
RenameDocument("General", "Doc", "General", "OtherDoc");
select Documents where Library_Name = "General";
select LoadDocument("General", "OtherDoc");
DeleteDocument("General", "OtherDoc");</programlisting> 
					 <programlisting>Library_Name Name     Type_ID
------------ -------- -------
General      OtherDoc txt

This is the contents of the text document.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.Save"> 
				<title><indexterm><primary>Save - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>Save</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>Save</secondary></indexterm>Frontend.Save</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.Save" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>Save</symbol> replaces the current contents of the
					 document <symbol>AName</symbol> in <symbol>ALibraryName</symbol> with
					 <symbol>ADocument</symbol>.</para> 
				<para><symbol>ADocument</symbol> can be of type
					 <symbol>String</symbol> or <symbol>Binary</symbol> as needed to match the type
					 of <symbol>ADocument</symbol>.</para> 
				<para>The <symbol>SaveDocument</symbol> and <symbol>Save</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.Save</title> 
					 <programlisting>CreateDocument("General", "Doc", "txt");
Save
(
 "General",
 "Doc",
 "This is the contents of the text document."
);
select LoadDocument("General", "Doc");
DeleteDocument("General", "Doc");</programlisting> 
					 <programlisting>This is the contents of the text document.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.SaveDocument"> 
				<title><indexterm><primary>SaveDocument - Document
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>SaveDocument</secondary></indexterm><indexterm><primary>Document
								Operators</primary><secondary>SaveDocument</secondary></indexterm>Frontend.SaveDocument</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.SaveDocument" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>SaveDocument</symbol> replaces the current contents
					 of the document <symbol>AName</symbol> in <symbol>ALibraryName</symbol> with
					 <symbol>ADocument</symbol>.</para> 
				<para><symbol>ADocument</symbol> can be of type
					 <symbol>String</symbol> or <symbol>Binary</symbol> as needed to match the type
					 of <symbol>ADocument</symbol>.</para> 
				<para>The <symbol>SaveDocument</symbol> and <symbol>Save</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.SaveDocument</title> 
					 <programlisting>CreateDocument("General", "Doc", "txt");
SaveDocument
(
 "General",
 "Doc",
 "This is the contents of the text document."
);
select LoadDocument("General", "Doc");
DeleteDocument("General", "Doc");</programlisting> 
					 <programlisting>This is the contents of the text document.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.CRCOperators.html" type="xref">CRC
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-Frontend.Dynamic-ExecutionOperators"> 
		  <title>Dynamic-Execution Operators</title> 
		  <para></para> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-Frontend.DocumentOperators.html"
				type="xref">Document Operators</ulink> | 
				<ulink url="O-Frontend.Operators.html" type="xref">Frontend
					 Operators</ulink></para> 
		  <section id="O-Frontend.ExecuteScript"> 
				<title><indexterm><primary>ExecuteScript - Dynamic-Execution
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>ExecuteScript</secondary></indexterm><indexterm><primary>Dynamic-Execution
								Operators</primary><secondary>ExecuteScript</secondary></indexterm>Frontend.ExecuteScript</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.ExecuteScript" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>ExecuteScript</symbol> opens the specified file and
					 executes the contents of the file as a D4 script.</para> 
				<example> 
					 <title>Using Frontend.ExecuteScript</title> 
					 <programlisting>CreateAndSave
(
 "General",
 "SampleScript",
 "d4",
 "RenameDocument('General', 'SampleScript', 'General', 'ExampleScript');"
);
select Documents where Library_Name = "General";
ExecuteScript("SampleScript");
select Documents where Library_Name = "General";
DeleteDocument("General", "ExampleScript");</programlisting> 
					 <programlisting>Library_Name Name         Type_ID
------------ ------------ -------
General      SampleScript d4

Library_Name Name          Type_ID
------------ ------------- -------
General      ExampleScript d4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-System.Execute.html"
					 type="xref">System.Execute</ulink> | 
					 <ulink url="O-System.Evaluate.html"
					 type="xref">System.Evaluate</ulink> </para> 
		  </section> 
	 </section> 
	 <section id="O-Frontend.FormOperators"> 
		  <title>Form Operators</title> 
		  <para></para> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-Frontend.DocumentOperators.html"
				type="xref">Document Operators</ulink> | 
				<ulink url="O-Frontend.Operators.html" type="xref">Frontend
					 Operators</ulink></para> 
		  <section id="O-Frontend.ClearDerivationCache"> 
				<title><indexterm><primary>ClearDerivationCache - Form
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>ClearDerivationCache</secondary></indexterm><indexterm><primary>Form
								Operators</primary><secondary>ClearDerivationCache</secondary></indexterm>Frontend.ClearDerivationCache</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.ClearDerivationCache" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>When a form is derived, the resulting form definition is
					 cached. This provides performance improvements when the form is recalled
					 because it does not have to be derived again.
					 <symbol>ClearDerivationCache</symbol> forces the flushing of all forms from the
					 derivation cache so that a subsequent request for a form will cause the
					 derivation process to occur again.</para> 
				<para>Normally this operator is unnecessary. The cached copy of a
					 derived form is automatically flushed any time a change is made to the
					 schema.</para> 
				<example> 
					 <title>Using Frontend.ClearDerivationCache</title> 
					 <programlisting>ClearDerivationCache();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.Derive.html"
					 type="xref">Frontend.Derive</ulink> | 
					 <ulink url="O-Frontend.Load.html"
					 type="xref">Frontend.Load</ulink> | 
					 <ulink url="O-Frontend.LoadDocument.html"
					 type="xref">Frontend.LoadDocument</ulink> | 
					 <ulink url="O-Frontend.Form.html"
					 type="xref">Frontend.Form</ulink> | 
					 <ulink url="O-Frontend.LoadAndProcess.html"
					 type="xref">Frontend.LoadAndProcess</ulink> | 
					 <ulink url="O-Frontend.FormOperators.html" type="xref">Form
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.Derive"> 
				<title><indexterm><primary>Derive - Form
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>Derive</secondary></indexterm><indexterm><primary>Form
								Operators</primary><secondary>Derive</secondary></indexterm>Frontend.Derive</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.Derive" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>Derive</symbol> returns a user-interface definition,
					 as a string, which is dynamicaly derived from the schema of
					 <symbol>AQuery</symbol>. Optional arguments are <symbol>APageType,
					 AMasterKeyNames, ADetailKeyNames, AElaborate</symbol>.</para> 
				<example> 
					 <title>Using Frontend.Derive</title> 
					 <programlisting>create table Table in Temp
{
 ID : Integer, Name : String, key { ID }
};
CreateAndSave("General", "Form", "dfd", Derive("General.Table"));
select Form("General", "Form");
drop table Table;
DeleteDocument("General", "Form");</programlisting> 
					 <programlisting>&lt;interface xmlns:bop="www.alphora.com/schemas/bop" .....</programlisting> 
					 <para>Note: The results are only the first few
						  characters.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.Form.html"
					 type="xref">Frontend.Form</ulink> | 
					 <ulink url="O-Frontend.Load.html"
					 type="xref">Frontend.Load</ulink> | 
					 <ulink url="O-Frontend.LoadAndProcess.html"
					 type="xref">Frontend.LoadAndProcess</ulink> | 
					 <ulink url="O-Frontend.FormOperators.html" type="xref">Form
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.Form"> 
				<title><indexterm><primary>Form - Form
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>Form</secondary></indexterm><indexterm><primary>Form
								Operators</primary><secondary>Form</secondary></indexterm>Frontend.Form</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.Form" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>Form</symbol> returns <symbol>AName</symbol>, a dfd
					 or dfdx form from the library <symbol>ALibraryName</symbol>. In the case of a
					 dfdx, all ancestors will be merged with the dfdx document.</para> 
				<para>The <symbol>LoadAndProcess</symbol> and <symbol>Form</symbol>
					 operators are equivalent.</para> 
				<example> 
					 <title>Using Frontend.Form</title> 
					 <programlisting>create table Table in Temp
{
 ID : Integer, Name : String, key { ID }
};
CreateAndSave("General", "Form", "dfd", Derive("General.Table"));
select Form("General", "Form");
drop table Table;
DeleteDocument("General", "Form");</programlisting> 
					 <programlisting>&lt;interface xmlns:bop="www.alphora.com/schemas/bop" .....</programlisting> 
					 <para>Note: The results are only the first few
						  characters.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink url="O-Frontend.Load.html"
					 type="xref">Frontend.Load</ulink> | 
					 <ulink url="O-Frontend.LoadAndProcess.html"
					 type="xref">Frontend.LoadAndProcess</ulink> | 
					 <ulink url="O-Frontend.FormOperators.html" type="xref">Form
						  Operators</ulink> | 
					 <ulink url="O-Frontend.DocumentOperators.html"
					 type="xref">Document Operators</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-Frontend.InternalOperators"> 
		  <title>Internal Operators</title> 
		  <para></para> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-Frontend.Operators.html" type="xref">Frontend
					 Operators</ulink></para> 
		  <section id="O-Frontend.GetApplicationNodeTypes"> 
				<title><indexterm><primary>GetApplicationNodeTypes - Application
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>GetApplicationNodeTypes</secondary></indexterm><indexterm><primary>Application
								Operators</primary><secondary>GetApplicationNodeTypes</secondary></indexterm>Frontend.GetApplicationNodeTypes</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.GetApplicationNodeTypes" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>GetApplicationNodeTypes</symbol> is used internally
					 by a Dataphor client to determine the available component types. This operator
					 will only be needed by someone developing their own client.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink url="O-Frontend.InternalOperators.html"
					 type="xref">Internal Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.GetLibraryNodeTypes"> 
				<title><indexterm><primary>GetLibraryNodeTypes - Internal
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>GetLibraryNodeTypes</secondary></indexterm><indexterm><primary>Internal
								Operators</primary><secondary>GetLibraryNodeTypes</secondary></indexterm>Frontend.GetLibraryNodeTypes</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.GetLibraryNodeTypes" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>GetLibraryNodeTypes</symbol> is used internally by a
					 Dataphor client to determine the available component types. This operator will
					 only be needed by someone developing their own client.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink url="O-Frontend.InternalOperators.html"
					 type="xref">Internal Operators</ulink></para> 
		  </section> 
		  <section id="O-Frontend.GetNodeTypes"> 
				<title><indexterm><primary>GetNodeTypes - Internal
								Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>GetNodeTypes</secondary></indexterm><indexterm><primary>Internal
								Operators</primary><secondary>GetNodeTypes</secondary></indexterm>Frontend.GetNodeTypes</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "Frontend.GetNodeTypes" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><symbol>GetNodeTypes</symbol> is used internally by a
					 Dataphor client to determine the available component types. This operator will
					 only be needed by someone developing their own client.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink url="O-Frontend.InternalOperators.html"
					 type="xref">Internal Operators</ulink></para> 
		  </section> 
	 </section> 
</section> 
