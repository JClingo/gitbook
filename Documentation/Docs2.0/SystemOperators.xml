<?xml version="1.0" encoding="UTF-8"?>
<section> 
	 <sectioninfo> 
		  <date>Wednesday, June 13, 2007 2:31:24 PM</date> 
	 </sectioninfo> 
	 <title><indexterm> 
				<primary>System Library</primary> 
				<secondary>Operators</secondary> 
		  </indexterm> 
		  <indexterm> 
				<primary>Operators</primary> 
				<secondary>System</secondary> 
		  </indexterm><indexterm> 
				<primary>System Operators</primary> 
				<secondary>Reference</secondary> 
		  </indexterm>Operators</title> 
	 <para>The following sections describe the operators available in the System
		  Library.</para> 
	 <section id="O-System.AggregateOperators"> 
		  <title><indexterm> 
					 <primary>Aggregate Operators</primary> 
					 <secondary>Reference</secondary> 
				</indexterm><indexterm> 
					 <primary>Operators</primary> 
					 <secondary>Aggregate Operators</secondary> 
				</indexterm>Aggregate Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.All"> 
				<title><indexterm> 
						  <primary>All - Aggregate Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>All</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>All</secondary> 
					 </indexterm>System.All</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.All" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">All</phrase> aggregate operator returns
					 true if all the values of a given column are true. 
					 <phrase role="code">All</phrase> returns true when the input
					 contains no rows. This operator is the logical equivalent of an iterated 
					 <phrase role="code"><emphasis
						  role="bold">and</emphasis></phrase>. Only rows that have a value for the
					 specified column are considered in the aggregation.</para> 
				<example> 
					 <title>Using System.All</title> 
					 <programlisting>select Employee
     add { (Name.Length() = 4) LengthIsFour };</programlisting> 
					 <programlisting>ID  Name    LengthIsFour
--  ----    -------------------
1   Joe     False
2   John    True
3   Josh    True
4   Jeff    True
5   Jake    True
6   Jeff    True</programlisting> 
					 <programlisting>select Employee
 add { (Name.Length() = 4) Length4 }
 group add { All(Length4) AreAllLengthOf4 };

select All(Length4 from (Employee add { (Name.Length() = 4) Length4 } ));</programlisting> 
					 <programlisting>AreAllLengthOf4 
---------------
False

False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.Any.html">System.Any</ulink>
					 | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.Any"> 
				<title><indexterm> 
						  <primary>Any - Aggregate Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Any</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>Any</secondary> 
					 </indexterm>System.Any</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Any" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">Any</phrase> aggregate operator returns
					 true if any value in the input is true, and false otherwise. 
					 <phrase role="code">Any</phrase> returns false when the input
					 contains no rows. This operator is the logical equivalent of an iterated 
					 <phrase role="code"><emphasis
						  role="bold">or</emphasis></phrase>. Only rows that have a value for the
					 specified column are considered in the aggregation.</para> 
				<example> 
					 <title>Using System.Any</title> 
					 <programlisting>select Employee
 add { (Name.Length() = 4) LengthIsFour };</programlisting> 
					 <programlisting>ID  Name    LengthIsFour
--  ----    ------------
1   Joe     False
2   John    True
3   Josh    True
4   Jeff    True
5   Jake    True
6   Jeff    True</programlisting> 
					 <programlisting>select Employee
 add { (Name.Length() = 4) Length4 }
 group add {Any(Length4) AreAnyLengthOf4};

select Any(Length4 from Employee add { (Name.Length() = 4) Length4 } );</programlisting> 
					 <programlisting>AreAnyLengthOf4
---------------
True

True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.All.html">System.All</ulink>
					 | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.Avg"> 
				<title><indexterm> 
						  <primary>Avg - Aggregate Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Avg</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>Avg</secondary> 
					 </indexterm><indexterm> 
						  <primary>Average</primary> 
					 </indexterm>System.Avg</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Avg" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">Avg</phrase> aggregate operator computes
					 the average value of the values in a given column. 
					 <phrase role="code">Avg</phrase> uses the formula 
					 <phrase role="code">Sum(&lt;values&gt;) /
						  Count(&lt;values&gt;)</phrase> to compute the average. 
					 <phrase role="code">Avg</phrase> returns nil when the input
					 contains no rows. 
					 <phrase role="code">Avg</phrase> returns a value of type 
					 <phrase role="code">System.Decimal</phrase>, even if the column
					 being averaged is an integer type. Only rows that have a value for the
					 specified column are considered in the aggregation.</para> 
				<example> 
					 <title>Using System.Avg</title> 
					 <programlisting>select Employee group add { Avg(ID) AvgID };

select Avg(ID from Employee);</programlisting> 
					 <programlisting>AvgID
-----
3.5</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.ConcatAggregate"> 
				<title>System.Concat</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Concat</phrase> is an aggregate and a
					 string operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref" url="O-System.Concat.html">System.Concat
						  String Operator</ulink></para> 
		  </section> 
		  <section id="O-System.Count"> 
				<title><indexterm> 
						  <primary>Count - Aggregate Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Count</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>Count</secondary> 
					 </indexterm>System.Count</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Count" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Count</phrase> is an aggregate operator
					 and a list operator.</para> 
				<para>The 
					 <phrase role="code">Count</phrase> aggregate operator returns
					 the number of rows in the input. 
					 <phrase role="code">Count</phrase> returns zero when the input
					 contains no rows.</para> 
				<para>When a column is specified 
					 <phrase role="code">Count</phrase> will return the number of
					 rows in the input that have a value for the specified column (are not 
					 <phrase role="code">nil</phrase>).</para> 
				<para>Only rows that have a value for the specified column are
					 considered in the aggregation.</para> 
				<para>The 
					 <phrase role="code">Count</phrase> list operator returns the
					 number of values in a list. Zero is return if the list is empty.</para> 
				<example> 
					 <title>Using System.Count</title> 
					 <programlisting>create table Test in Temp
{
 ID : Integer,
 Desc : String { nil },
 key { ID }
};
insert table
{
 row { 1 ID, 'First' Desc },
 row { 2, nil as String },
 row { 3, 'Third' },
 row { 4, 'Fourth' }
} into Test;
select Test;
select Test group add { Count() All, Count(Desc) DescNotNil };
select Count(Test); // standalone invocation
select Count(Desc from Test); // standalone invocation
drop table Test;

create table Test in Temp
{
	ElementCount : Integer
};
begin
 var StrList : list(String) := { 'A', 'B', 'C' };
 insert table { row { Count(StrList) ElementCount } } into Test;
end;
select Test;
drop table Test;</programlisting> 
					 <programlisting>ID Desc
-- ----------
1  First
2  &lt;No Value&gt;
3  Third
4  Fourth

All DescNotNil
--- ----------
4   3

4

3

ElementCount
------------
3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iAggregate"> 
				<title><indexterm> 
						  <primary>iAggregate - Aggregate Table Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iAggregate</secondary> 
					 </indexterm>System.iAggregate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iAggregate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">iAggregate</phrase> is the operator name
					 for the aggregate table operator. The parser-recognized symbol for this
					 operator is 
					 <phrase role="code"><emphasis
						  role="bold">group</emphasis></phrase>. For a complete description of this
					 operator, refer to the 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink>
					 discussion in the D4 Language Guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.Max"> 
				<title><indexterm> 
						  <primary>Max - Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Max</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>Max</secondary> 
					 </indexterm>System.Max</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Max" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">Max</phrase> aggregate operator returns the
					 largest value in a given column. 
					 <phrase role="code">Max</phrase> returns nil when the input
					 contains no rows. Only rows that have a value for the specified column are
					 considered in the aggregation.</para> 
				<para>The 
					 <phrase role="code">Max</phrase> scalar operator returns the
					 larger of the two arguments. If both arguments are nil, the operator returns
					 nil. If only one argument is nil, the non-nil argument is returned.</para> 
				<example> 
					 <title>Using System.Max</title> 
					 <programlisting>select Libraries
 where Version = Max(Version from Libaries)
 over { Name, Version };

select Max(3, 5);</programlisting> 
					 <programlisting>Name   Version
------ --------------
System 2.0.1592.24169

5
</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.Min.html">System.Min</ulink>
					 | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.Min"> 
				<title><indexterm> 
						  <primary>Min - Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Min</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>Min</secondary> 
					 </indexterm>System.Min</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Min" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">Min</phrase> aggregate operator returns the
					 smallest value in a given column. 
					 <phrase role="code">Min</phrase> returns nil when the input
					 contains no rows. Only rows that have a value for the specified column are
					 considered in the aggregation.</para> 
				<para>The 
					 <phrase role="code">Min</phrase> scalar operator returns the
					 smaller of the two arguments. If both arguments are nil, the operator returns
					 nil. If only one argument is nil, the non-nil argument is returned.</para> 
				<example> 
					 <title>Using System.Min</title> 
					 <programlisting>select Libraries
 where Version = Min(Version from Libraries)
 over { Name, Version };

select Min(3, 5);
</programlisting> 
					 <programlisting>Name    Version
------- -------
General *

3
</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.Max.html">System.Max</ulink>
					 | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.Sum"> 
				<title><indexterm> 
						  <primary>Sum - Aggregate Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Sum</secondary> 
					 </indexterm><indexterm> 
						  <primary>Aggregate Operators</primary> 
						  <secondary>Sum</secondary> 
					 </indexterm>System.Sum</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Sum" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">Sum</phrase> aggregate operator computes
					 the sum of the values of a given column. 
					 <phrase role="code">Sum</phrase> returns nil when the input
					 contains no rows.</para> 
				<para>Only rows that have a value for the specified column are
					 considered in the aggregation.</para> 
				<example> 
					 <title>Using System.Sum</title> 
					 <programlisting><emphasis role="bold">select</emphasis> Employee <emphasis role="bold">group add</emphasis> { Sum(ID) IDSum };</programlisting> 
					 <programlisting>IDSum
-----
21</programlisting> 
				</example> 
				<bridgehead>See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-Aggregate.html">Aggregate Table Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGCatalogElements-Operators-AggregateOperators.html">Aggregate
						  Operators</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.ArithmeticOperators"> 
		  <title><indexterm> 
					 <primary>Arithmetic Operators</primary> 
					 <secondary>Reference</secondary> 
				</indexterm><indexterm> 
					 <primary>Operators</primary> 
					 <secondary>Arithmetic Operators</secondary> 
				</indexterm>Arithmetic Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.iAddition"> 
				<title><indexterm> 
						  <primary>iAddition - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>Addition (+)</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Concatenation (+)</secondary> 
					 </indexterm><indexterm> 
						  <primary>+ (Addition, Concatenation)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>+ (Addition, Concatenation)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Concatenation (+)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Addition (+)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Concatenation (+)</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Concatenation Operator (+)</primary> 
					 </indexterm><indexterm> 
						  <primary>Addition (+)</primary> 
					 </indexterm>System.iAddition</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iAddition" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">+</phrase> operator adds two values
					 together. For numeric operands, this operator is arithmetic sum. For string
					 operands, this operator is string concatenation. For date/time operands, this
					 operator can be used to add a 
					 <phrase role="code">TimeSpan</phrase> value to a 
					 <phrase role="code">Date</phrase>, 
					 <phrase role="code">Time</phrase>, 
					 <phrase role="code">DateTime</phrase>, or 
					 <phrase role="code">TimeSpan</phrase> value. For these
					 operators, the result type is a 
					 <phrase role="code">Date</phrase>, 
					 <phrase role="code">Time</phrase>, 
					 <phrase role="code">DateTime</phrase>, or 
					 <phrase role="code">TimeSpan</phrase>, respectively.</para> 
				<para>Note that when adding a 
					 <phrase role="code">TimeSpan</phrase> value to a date/time
					 value, the type of the result is unchanged. This can lead to some unexpected
					 results, for example: 
					 <programlisting>select Date(2005, 10, 20) + Seconds(1);
select DateTime(2005, 10, 20) + Seconds(1);</programlisting> 
					 <programlisting>10/20/2005
10/20/2005 12:00:01 AM</programlisting></para> 
				<para>The effect of the first invocation of 
					 <phrase role="code">+</phrase> is undetectable because the
					 result is "rounded" to the nearest 
					 <phrase role="code">Date</phrase> value. Because changing
					 precision in date/time operations is unusual, this behavior results in less
					 need for explicit conversion, in general. In other words, if we are starting
					 with a 
					 <phrase role="code">Date</phrase> value, we are generally
					 dealing with days, or multiples of days when we perform date manipulation. Of
					 course, if further granularity is required, we can always convert a 
					 <phrase role="code">Date</phrase> to a 
					 <phrase role="code">DateTime</phrase> to obtain the desired
					 result.</para> 
				<para><phrase role="code">System.iAddition</phrase> is the operator
					 name for the 
					 <phrase role="code">+</phrase> operator.</para> 
				<para>The result of evaluating this operator is nil if either or
					 both of its arguments are nil.</para> 
				<example> 
					 <title>Using +</title> 
					 <programlisting>select TableDee add { 4.7 + 6.1 sum };
select Manager add { Manager_ID + Employee_ID sum};</programlisting> 
					 <programlisting>sum
----
10.8

Manager_ID Employee_ID sum
---------- ----------- ---
1          2           3
1          3           4
2          4           6
2          6           8
4          5           9</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="link"
					  url="O-System.ArithmeticOperators.html">Arithmetic Operators</ulink> | 
					 <ulink type="link" url="O-System.StringOperators.html">String
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iDiv"> 
				<title><indexterm> 
						  <primary>iDiv - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>div (Integer Division)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>div (Integer Division)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>div (Integer Division)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Integer Division (div)</primary> 
					 </indexterm>System.iDiv</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iDiv" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code"><emphasis
						  role="bold">div</emphasis></phrase> is the parser recognized symbol for 
					 <phrase role="code">iDiv</phrase>. The 
					 <phrase role="code"><emphasis
						  role="bold">div</emphasis></phrase> operator returns a quotient of the two
					 values. In all cases, including dividing decimal numbers, integer division is
					 performed. For decimal division, use 
					 <ulink type="xref" url="O-System.iDivision.html"><phrase
						  role="code">/</phrase></ulink>.</para> 
				<para>Integer divison is defined as iterated subtraction. The
					 divisor is subtracted from the dividend until the divisor cannot be subtracted
					 from what remains of the dividend without changing the sign of the remainder of
					 the dividend. The result of this operator is the number of times this can be
					 done. This same definition applies to decimal numbers. What remains of the
					 dividend can be accessed via the modulus (<ulink type="xref"
					 url="O-System.iMod.html"><phrase role="code"><emphasis
								role="bold">mod</emphasis></phrase></ulink>) operator.</para> 
				<example> 
					 <title>Using div</title> 
					 <programlisting>select TableDee add {17 div 5 IntDiv, 1.2 div 0.35 DecIntDiv };</programlisting> 
					 <programlisting>IntDiv DecIntDiv
------ ---------
3      3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-ArithmeticExpression.html">Arithmetic
						  Expressions</ulink> | 
					 <ulink type="xref" url="O-System.iMod.html">System.iMod
						  (<phrase role="code">mod</phrase>)</ulink> | 
					 <ulink type="xref"
					  url="O-System.iDivision.html">System.iDivison (<phrase
						  role="code">/</phrase>)</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Expressions</ulink></para> 
		  </section> 
		  <section id="O-System.iDivision"> 
				<title><indexterm> 
						  <primary>iDivision - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>/ (Division)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>/ (Division)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>/ (Division)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Division (/)</primary> 
					 </indexterm>System.iDivision</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iDivision" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">/</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iDivision</phrase>. The 
					 <phrase role="code">/</phrase> operator returns a quotient of
					 the two values. In all cases, decimal division will be performed. For integer
					 division, even in the case of two decimals, use 
					 <ulink type="xref" url="O-System.iDiv.html"><phrase
						  role="code"><emphasis role="bold">div</emphasis></phrase></ulink>.</para> 
				<para>The result type of this operator depends on the types of
					 arguments passed to it. See the Declarations section above for more
					 information.</para> 
				<example> 
					 <title>Using /</title> 
					 <programlisting>select TableDee add {17 / 5 IntDiv, 1.2 / 0.35 DecIntDiv };</programlisting> 
					 <programlisting>IntDiv DecIntDiv
------ ------------------------------
3.4    3.4285714285714285714285714286 </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-ArithmeticExpression.html">Arithmetic
						  Expressions</ulink> | 
					 <ulink type="xref" url="O-System.iMod.html">System.iMod
						  (<phrase role="code">mod</phrase>)</ulink> | 
					 <ulink type="xref" url="O-System.iDiv.html">System.iDiv
						  (<phrase role="code">div</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iMultiplication"> 
				<title><indexterm> 
						  <primary>iMultiplication - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>* (Multiplication)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>* (Multiplication)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>* (Multiplication)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Multiplication (*)</primary> 
					 </indexterm>System.iMultiplication</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iMultiplication" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">*</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iMultiplication</phrase>. This operator
					 returns the arithmetic product of the two operands.</para> 
				<example> 
					 <title>Using *</title> 
					 <programlisting>select Manager add {Employee_ID * Manager_ID Product};</programlisting> 
					 <programlisting>Manager_ID Employee_ID Product
---------- ----------- -------
1          2           2
1          3           3
2          4           8
2          6           12
4          5           20</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iNegate"> 
				<title><indexterm> 
						  <primary>iNegate - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>- (Negation)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>- (Negation)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>- (Negation)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Negation (-)</primary> 
					 </indexterm>System.iNegate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iNegate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">-</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iNegate</phrase>. This is a unary operator
					 that returns the negative equivalent (additive inverse) of a given positive
					 value. It has the same effect as taking a positive number and multiplying it by
					 negative one, except for the fact that this operator has a higher precedence
					 than the multiplicative operators.</para> 
				<example> 
					 <title>Using Unary -</title> 
					 <programlisting>select Employee where ID &gt; Abs(-2);</programlisting> 
					 <programlisting>ID Name 
-- ---- 
3  Josh 
4  Jeff 
5  Jake 
6  Jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref"
					  url="O-System.iSubtraction.html">System.iSubtraction (<phrase
						  role="code">-</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iPower"> 
				<title><indexterm> 
						  <primary>iPower - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>** (Power)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>** (Power)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>** (Power)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Exponentiation (**)</primary> 
					 </indexterm><indexterm> 
						  <primary>Power (**)</primary> 
					 </indexterm>System.iPower</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iPower" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">**</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iPower</phrase>. This is a binary operator
					 that takes the left value and raises it to the power of the right value.</para>
				
				<example> 
					 <title>Using **</title> 
					 <programlisting>select Manager add { Manager_ID ** Employee_ID Power };</programlisting> 
					 <programlisting>Manager_ID Employee_ID Power 
---------- ----------- ----- 
1          2           1     
1          3           1     
2          4           16    
2          6           64    
4          5           1024</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iSubtraction"> 
				<title><indexterm> 
						  <primary>iSubtraction - Arithmetic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>- (Subtraction)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>- (Subtraction)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Arithmetic Operators</primary> 
						  <secondary>- (Subtraction)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Subtraction (-)</primary> 
					 </indexterm>System.iSubtraction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iSubtraction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">-</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iSubtraction</phrase>. If the operands are
					 numeric, this operator subtracts one value from another (arithmetic
					 difference). For date/time values, this operator can be used to subtract a 
					 <phrase role="code">TimeSpan</phrase> value from a 
					 <phrase role="code">Date</phrase>, 
					 <phrase role="code">Time</phrase>, 
					 <phrase role="code">DateTime</phrase>, or 
					 <phrase role="code">TimeSpan</phrase> value, or to compute the
					 difference between two 
					 <phrase role="code">Date</phrase>, 
					 <phrase role="code">Time</phrase>, or 
					 <phrase role="code">DateTime</phrase> values as a 
					 <phrase role="code">TimeSpan</phrase>. As with the date/time
					 addition operators, the subtracting a 
					 <phrase role="code">TimeSpan</phrase> value from a date/time
					 type will result in a value of the same type.</para> 
				<para>Note that when subtracting a 
					 <phrase role="code">TimeSpan</phrase> value from a date/time
					 value, the type of the result is unchanged. This can lead to some unexpected
					 results, for example: 
					 <programlisting>select Date(2005, 10, 20) - Seconds(1);
select DateTime(2005, 10, 20) - Seconds(1);</programlisting> 
					 <programlisting>10/19/2005
10/19/2005 11:59:59 PM</programlisting></para> 
				<para>Because the result of the subtraction is "rounded" to the
					 nearest 
					 <phrase role="code">Date</phrase> value, the first invocation
					 of 
					 <phrase role="code">-</phrase> results in the previous day.
					 Because changing precision in date/time operations is unusual, this behavior
					 results in less need for explicit conversion, in general. In other words, if we
					 are starting with a 
					 <phrase role="code">Date</phrase> value, we are generally
					 dealing with days, or multiples of days when we perform date manipulation. Of
					 course, if further granularity is required, we can always convert a 
					 <phrase role="code">Date</phrase> to a 
					 <phrase role="code">DateTime</phrase> to obtain the desired
					 result.</para> 
				<example> 
					 <title>Using -</title> 
					 <programlisting>select Date() - Date(1945,5,8); // Timespan since VE Day
select ToString(571951 - 261797) + " square miles"; // difference in area of AK and TX</programlisting> 
					 <programlisting>3082wks 6days
310154 square miles</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref" url="O-System.iNegate.html">System.iNegate
						  (<phrase role="code">-</phrase>)</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.BitwiseOperators"> 
		  <title>Bitwise Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.iBitwiseAnd"> 
				<title><indexterm> 
						  <primary>iBitwiseAnd - Bitwise Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&amp; (Bitwise And)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&amp; (Bitwise And)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Operators</primary> 
						  <secondary>&amp; (And)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise And (&amp;)</primary> 
					 </indexterm>System.iBitwiseAnd</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iBitwiseAnd" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&amp;</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iBitwiseAnd</phrase>. Bitwise and matches
					 bit for bit, and compares the corresponding bits for two values. If both are 1,
					 then the corresponding bit in the resulting value will be 1, otherwise it will
					 be 0.</para> 
				<example> 
					 <title>Using System.iBitwiseAnd</title> 
					 <programlisting>create table BitwiseAnd { One : Integer, Two : Integer, Three : Integer };
begin
	var LInteger1 : Integer;
	var LInteger2 : Integer;
	var LInteger3 : Integer;
	LInteger1 := 314159265; // this has a bit value of 00010010 10111001 10110000 10100001
	LInteger2 := 271828182; // this has a bit value of 00010000 00110011 11000100 11010110
	LInteger3 := LInteger1 &amp; LInteger2; // 271679616   00010000 00110001 10000000 10000000
	insert table { row { LInteger1 One, LInteger2 Two, LInteger3 Three }} into BitwiseAnd;
end;
select BitwiseAnd;</programlisting> 
					 <programlisting>Statement Executed Successfully!

Statement Executed Successfully!

One       Two       Three     
--------- --------- --------- 
314159265 271828182 271679616</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref" url="O-System.iAnd.html">System.iAnd
						  (<phrase role="code">and</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iBitwiseNot"> 
				<title><indexterm> 
						  <primary>iBitwiseNot - Bitwise Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>~ (Bitwise Not)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>~ (Bitwise Not)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Operators</primary> 
						  <secondary>~ (Not)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Not (~)</primary> 
					 </indexterm>System.iBitwiseNot</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iBitwiseNot" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">~</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iBitwiseNot</phrase>. Bitwise not is a
					 unary operator. It takes the number given and looks at every byte. The value
					 that it returns is the number that would result if all of the bits were
					 switched from 1 to 0 and vice versa.</para> 
				<example> 
					 <title>Using System.iBitwiseNot</title> 
					 <programlisting>create table BitwiseNot { One : Integer , Two : Integer };
begin
	var LInteger1 : Integer := 314159265; //  bit value : 00010010 10111001 10110000 10100001
	var LInteger2 : Integer := ~LInteger1; // bit value : 11101101 01000110 01001111 01011110 
	insert table { row { LInteger1 One, LInteger2 Two } } into BitwiseNot;
end;
select BitwiseNot;</programlisting> 
					 <programlisting>Statement Executed Successfully!

Statement Executed Successfully!

One       Two        
--------- ---------- 
314159265 -314159266 </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref" url="O-System.iNot.html">System.iNot
						  (<phrase role="code">not</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iBitwiseOr"> 
				<title><indexterm> 
						  <primary>iBitwiseOr - Bitwise Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>| (Bitwise Or)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>| (Bitwise Or)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Operators</primary> 
						  <secondary>| (Or)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Or (|)</primary> 
					 </indexterm>System.iBitwiseOr</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iBitwiseOr" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">|</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iBitwiseOr</phrase>. 
					 <phrase role="code">|</phrase> is the vertical bar, also known
					 as the pipe. 
					 <phrase role="code">Bitwise Or</phrase> matches bit for bit,
					 and compares the corresponding bits for two values. If both are 0, then the
					 corresponding bit in the resulting value will be 0, otherwise it will be
					 1.</para> 
				<example> 
					 <title>Using System.iBitwiseOr</title> 
					 <programlisting>create table BitwiseOr { One : Integer, Two : Integer, Three : Integer };
begin
	var LInteger1 : Integer;
	var LInteger2 : Integer;
	var LInteger3 : Integer;
	LInteger1 := 314159265; // this has a bit value of 00010010 10111001 10110000 10100001
	LInteger2 := 271828182; // this has a bit value of 00010000 00110011 11000100 11010110
	LInteger3 := LInteger1 | LInteger2; // 314307831   00010010 10111011 11110100 11110111
	insert table { row { LInteger1 One, LInteger2 Two, LInteger3 Three }} into BitwiseOr;
end;
select BitwiseOr;</programlisting> 
					 <programlisting>Statement Executed Successfully!

Statement Executed Successfully!

One       Two       Three     
--------- --------- --------- 
314159265 271828182 314307831</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref" url="O-System.iOr.html">System.iOr (<phrase
						  role="code">or</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iBitwiseXor"> 
				<title><indexterm> 
						  <primary>iBitwiseXor - Bitwise Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>^ (Bitwise Xor)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>^ (Bitwise Xor)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Operators</primary> 
						  <secondary>^ (Xor)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Xor (^)</primary> 
					 </indexterm>System.iBitwiseXor</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iBitwiseXor" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">^</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iBitwiseXor</phrase>. Bitwise exclusive or
					 matches bit for bit, and compares the corresponding bits for two values. If
					 both are 0 or both are 1, then the corresponding bit in the resulting value
					 will be 0. Only if one is 0 and one is 1 will the corresponding bit in the
					 resulting value will be 1.</para> 
				<example> 
					 <title>Using System.iBitwiseXor</title> 
					 <programlisting>create table BitwiseXor { One : Integer, Two : Integer, Three : Integer };
begin
	var LInteger1 : Integer;
	var LInteger2 : Integer;
	var LInteger3 : Integer;
	LInteger1 := 314159265; // this has a bit value of 00010010 10111001 10110000 10100001
	LInteger2 := 271828182; // this has a bit value of 00010000 00110011 11000100 11010110
	LInteger3 := LInteger1 ^ LInteger2; // 42628215    00000010 10001010 01110100 01110111
	insert table { row { LInteger1 One, LInteger2 Two, LInteger3 Three }} into BitwiseXor;
end;
select BitwiseXor;</programlisting> 
					 <programlisting>Statement Executed Successfully!

Statement Executed Successfully!

One       Two       Three    
--------- --------- -------- 
314159265 271828182 42628215</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref" url="O-System.iXor.html">System.iXor
						  (<phrase role="code">xor</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iShiftLeft"> 
				<title><indexterm> 
						  <primary>iShiftLeft - Bitwise Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&lt;&lt; (Shift Left)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&lt;&lt; (Shift Left)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Operators</primary> 
						  <secondary>&lt;&lt; (Shift Left)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Shift Left (&lt;&lt;)</primary> 
					 </indexterm>System.iShiftLeft</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iShiftLeft" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&lt;&lt;</phrase> is the parser
					 recognized symbol for 
					 <phrase role="code">iShiftLeft</phrase>. This operator performs
					 a binary left bit shift on the given number. It takes the value on the left and
					 shifts it to the left the number of bits indicated by the right value. In
					 signed integers the far left bit is the negative place holder. If a bit is in
					 that position then the number is negative. Signed integers have a two's
					 complement implementation.</para> 
				<example> 
					 <title>Using System.iShiftLeft</title> 
					 <programlisting>select TableDee add { 1 &lt;&lt; 2 BitShift };
</programlisting> 
					 <programlisting>BitShift 
-------- 
4</programlisting> 
					 <programlisting>select TableDee add { 1 &lt;&lt; 31 BitShift };</programlisting> 
					 <programlisting>BitShift    
----------- 
-2147483648</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref"
					 url="O-System.iShiftRight.html">System.iShiftRight (<phrase
						  role="code">&gt;&gt;</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.iShiftRight"> 
				<title><indexterm> 
						  <primary>iShiftRight - Bitwise Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&gt;&gt; (Shift Right)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&gt;&gt; (Shift Right)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Bitwise Operators</primary> 
						  <secondary>&gt;&gt; (Shift Right)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Shift Right (&gt;&gt;)</primary> 
					 </indexterm>System.iShiftRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iShiftRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&gt;&gt;</phrase> is the parser
					 recognized symbol for 
					 <phrase role="code">iShiftRight</phrase> is . This operator
					 performs a binary right bit shift on the given number. It takes the value on
					 the left and shifts it to the right the number of bits indicated by the right
					 value. Bits shifted off the value are lost. In the case of unsigned types, the
					 Dataphor Server performs a logical shift (i.e. zeroes are shifted in from the
					 left). In signed types, the Dataphor Server performs an arithmetic right shift
					 (i.e. the most significant bit is copied and shifted in from the right).</para>
				
				<example> 
					 <title>Using System.iShiftRight</title> 
					 <programlisting>select TableDee add { -1 &gt;&gt; 5 BitShift };
</programlisting> 
					 <programlisting>BitShift 
-------- 
-1</programlisting> 
					 <programlisting>select TableDee add { 1048576 &gt;&gt; 10 BitShift };</programlisting> 
					 <programlisting>BitShift 
-------- 
1024</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="xref"
					 url="O-System.iShiftLeft.html">System.iShiftLeft (<phrase
						  role="code">&lt;&lt;</phrase>)</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.CatalogOperators"> 
		  <title>Catalog Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.CacheTimeStamp"> 
				<title><indexterm> 
						  <primary>CacheTimeStamp - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CacheTimeStamp</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>CacheTimeStamp</secondary> 
					 </indexterm>System.CacheTimeStamp</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CacheTimeStamp" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CacheTimeStamp</phrase> returns an
					 integer value representing the current cache timestamp. The cache timestamp is
					 incremented whenever the catalog is changed in a way that would affect a
					 client-side cache. For example, if a table is added to the cache the cache
					 timestamp is not changed. However, when a table listed in the cache is changed
					 or removed the cache timestamp is updated.</para> 
				<example> 
					 <title>Using System.CacheTimeStamp</title> 
					 <programlisting>select TableDee add { CacheTimeStamp() Cache };</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.UpdateTimeStamps.html">System.UpdateTimeStamps</ulink></para> 
		  </section> 
		  <section id="O-System.DependentObjects"> 
				<title><indexterm> 
						  <primary>DependentObjects - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DependentObjects</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>DependentObjects</secondary> 
					 </indexterm>System.DependentObjects</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DependentObjects" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DependentObjects</phrase> returns a table
					 listing the objects that depend on the specified object 
					 <phrase role="code">AObjectID</phrase> or 
					 <phrase role="code">AObjectName</phrase>. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">true</phrase> (or omitted) ALL objects that
					 depend on the specified object will be listed. This includes any objects that
					 depend on any objects that depend on 
					 <phrase role="code">AObjectID</phrase> or 
					 <phrase role="code">AObjectName</phrase>, and so on. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">false</phrase> only the objects that
					 directly depend on the specified object itself will be listed.</para> 
				<example> 
					 <title>Using System.DependentObjects</title> 
					 <programlisting>CreateLibrary
(
 LibraryDescriptor
 (
  "Lib",
  VersionNumberUndefined(),
  "Device",
  list(FileReference) {},
  list(LibraryReference) { LibraryReference("SimpleDevice",VersionNumberUndefined()) }
 )
);
RegisterLibrary("Lib");
create device Device
	reconciliation { mode = { Command }, master = device }
	class "SimpleDevice"
		attributes
		{
			"DirectoryName" = "c:\Data",
			"AutoSave" = "true"
		};
create table Table { ID: Integer, Name : String, key{ID} };
create view View Table where Name = "Alphora";
select DependentObjects("Device", false)
 over { Object_Description, Sequence, Level };
select DependentObjects("Device", true)
 over { Object_Description, Sequence, Level };
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Object_Description              Sequence Level
------------------------------- -------- -----
Base table variable "Lib.Table" 1        1</programlisting> 
					 <programlisting>Object_Description                Sequence Level
--------------------------------- -------- -----
Base table variable "Lib.Table"   1        1
Derived table variable "Lib.View" 2        2</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="xref"
					 url="O-System.RequiredObjects.html">System.RequiredObjects</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectExists.html">System.ObjectExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectID.html">System.ObjectID</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectName.html">System.ObjectName</ulink></para> 
		  </section> 
		  <section id="O-System.IsGenerated"> 
				<title><indexterm> 
						  <primary>IsGenerated - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsGenerated</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>IsGenerated</secondary> 
					 </indexterm>System.IsGenerated</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsGenerated" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsGenerated</phrase> checks to see if the
					 specified object was generated by the system, such as a scalar type selector or
					 accessor. Generated objects can be either system or non-system.</para> 
				<example> 
					 <title>Using System.IsGenerated</title> 
					 <programlisting>select IsGenerated("Binary");
select IsGenerated("Binary_System_String_");
select IsGenerated("IsGenerated_System_String_");</programlisting> 
					 <programlisting>False
True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsSystem.html">System.IsSystem</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-UsingGenerators.html">Using
						  Generators</ulink></para> 
		  </section> 
		  <section id="O-System.IsSystem"> 
				<title><indexterm> 
						  <primary>IsSystem - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsSystem</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>IsSystem</secondary> 
					 </indexterm>System.IsSystem</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsSystem" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsSystem</phrase> checks to see if the
					 specified object is a system object.</para> 
				<example> 
					 <title>Using System.IsSystem</title> 
					 <programlisting>select IsSystem("IsGenerated_System_String_"); //System operator
select IsSystem("Derive_System_String_"); //Frontend operator</programlisting> 
					 <programlisting>True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsGenerated.html">System.IsGenerated</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink></para> 
		  </section> 
		  <section id="O-System.ObjectDescription"> 
				<title><indexterm> 
						  <primary>ObjectDescription - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ObjectDescription</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ObjectDescription</secondary> 
					 </indexterm>System.ObjectDescription</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ObjectDescription" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ObjectDescription</phrase> returns the
					 verbose description of an object. When the ID is specified the description is
					 resolved from all objects. When the Name is specified the description is
					 resolved from the Catalog items.</para> 
				<example> 
					 <title>Using System.ObjectDescription</title> 
					 <programlisting>select Objects where ID = ObjectID("Boolean") over { ID, Name };
select ObjectDescription(ObjectID("Boolean"));
select ObjectDescription("Boolean");
select ObjectDisplayName("Boolean");
select ObjectID("Boolean");</programlisting> 
					 <programlisting>ID   Name
---- --------------
1003 System.Boolean

Type "System.Boolean"
Type "System.Boolean"
System.Boolean
1003</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="olinka"
					 url="D4LGLanguageElements-Types.html">Types</ulink> | 
					 <ulink type="olinkb" url="D4LGCatalogElements.html">Catalog
						  Elements</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectDisplayName.html">System.ObjectDisplayName</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectExists.html">System.ObjectExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectID.html">System.ObjectID</ulink></para> 
		  </section> 
		  <section id="O-System.ObjectDisplayName"> 
				<title><indexterm> 
						  <primary>ObjectDisplayName - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ObjectDisplayName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ObjectDisplayName</secondary> 
					 </indexterm>System.ObjectDisplayName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ObjectDisplayName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ObjectDisplayName</phrase> returns the
					 terse name of an object. When the ID is specified the DisplayName is resolved
					 from all objects. When the Name is spacified the DisplayName is resolved from
					 the Catalog items.</para> 
				<example> 
					 <title>Using System.ObjectDisplayName</title> 
					 <programlisting>select Objects where ID = ObjectID("Boolean") over { ID, Name };
select ObjectDisplayName(ObjectID("Boolean"));
select ObjectDisplayName("Boolean");
select ObjectDisplayName("Boolean");
select ObjectID("Boolean");</programlisting> 
					 <programlisting>ID   Name
---- --------------
1003 System.Boolean

System.Boolean
System.Boolean
System.Boolean
1003</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types.html">Types</ulink> | 
					 <ulink type="olinkb" url="D4LGCatalogElements.html">Catalog
						  Elements</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectDescription.html">System.ObjectDescription</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectExists.html">System.ObjectExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectID.html">System.ObjectID</ulink></para> 
		  </section> 
		  <section id="O-System.ObjectExists"> 
				<title><indexterm> 
						  <primary>ObjectExists - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ObjectExists</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ObjectExists</secondary> 
					 </indexterm>System.ObjectExists</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ObjectExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ObjectExists</phrase> returns 
					 <phrase role="code">true</phrase> if the name ASpecifier exists
					 in the Catalog items, otherwise 
					 <phrase role="code">false</phrase> is returned.</para> 
				<example> 
					 <title>Using System.ObjectExists</title> 
					 <programlisting>select Objects where ID = ObjectID("Boolean") over { ID, Name };
select ObjectExists("Boolean");</programlisting> 
					 <programlisting>ID   Name
---- --------------
1003 System.Boolean

True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types.html">Types</ulink> | 
					 <ulink type="olinkb" url="D4LGCatalogElements.html">Catalog
						  Elements</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectDescription.html">System.ObjectDescription</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectDisplayName.html">System.ObjectDisplayName</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectID.html">System.ObjectID</ulink></para> 
		  </section> 
		  <section id="O-System.ObjectID"> 
				<title><indexterm> 
						  <primary>ObjectID - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ObjectID</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ObjectID</secondary> 
					 </indexterm>System.ObjectID</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ObjectID" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ObjectID</phrase> returns the ID (as an
					 Integer) for the specified object name. Many of the objects in the system
					 catalog are operators that have overloads. This Operator requires the full
					 object name, not the abbreviated one.</para> 
				<example> 
					 <title>Using System.ObjectID</title> 
					 <programlisting>select Operators
   where ( OperatorName = "System.Avg" )
   add { ObjectID(Name) ObjID }
   over { Name, ObjID };</programlisting> 
					 <programlisting>Name                        ObjID
--------------------------- -----
System.Avg_System_Decimal_  4366
System.Avg_System_Integer_  4357
System.Avg_System_Money_    4374
System.Avg_System_TimeSpan_ 4392</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectName.html">System.ObjectName</ulink></para> 
		  </section> 
		  <section id="O-System.ObjectMetaData"> 
				<title><indexterm> 
						  <primary>ObjectMetaData - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ObjectMetaData</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ObjectMetaData</secondary> 
					 </indexterm>System.ObjectMetaData</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ObjectMetaData" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ObjectMetaData</phrase> allows retrieval
					 of metadata for a given tag name from a given object. The object can be
					 specified by ID, Name, or as a String. If the tag does not exist for the
					 object, 
					 <phrase role="code">ADefaultValue</phrase> is returned.</para> 
				<example> 
					 <title>Using System.ObjectMetaData</title> 
					 <programlisting>create table .Table in Temp
{
 ID : Integer,
 Name : String tags { Frontend.Width = "20" },
 key { ID }
};
select ObjectMetaData
(
 Object_ID from row from
 (
  TableVarColumns
  where TableVar_Name = "Table" and Name = "ID"
 ),
 "Frontend.Width",
 "10"
);
select ObjectMetaData
(
 Object_ID from row from
 (
  TableVarColumns
  where TableVar_Name = "Table" and Name = "Name"
 ),
 "Frontend.Width",
 "10"
);
drop table Table;</programlisting> 
					 <programlisting>10
20</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Objects-Metadata.html">MetaData</ulink></para> 
		  </section> 
		  <section id="O-System.ObjectName"> 
				<title><indexterm> 
						  <primary>ObjectName - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ObjectName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ObjectName</secondary> 
					 </indexterm>System.ObjectName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ObjectName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ObjectName</phrase> takes either an ID or
					 an unqualified name as a 
					 <phrase role="code">Name</phrase> or 
					 <phrase role="code">String</phrase>. The fully qualified name
					 will be returned.</para> 
				<example> 
					 <title>Using System.ObjectName</title> 
					 <programlisting>select ObjectName("TableVars");</programlisting> 
					 <programlisting>System.TableVars</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectID.html">System.ObjectID</ulink></para> 
		  </section> 
		  <section id="O-System.Reconcile"> 
				<title><indexterm> 
						  <primary>Reconcile - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Reconcile</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>Reconcile</secondary> 
					 </indexterm>System.Reconcile</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Reconcile" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Reconcile</phrase> reconciles with the
					 specified device. Reconciliation adds items in the device to the Dataphor
					 system catalog.</para> 
				<example> 
					 <title>Using System.Reconcile</title> 
					 <para><ulink type="olinkb"
						  url="DRMSSQLDeviceLibrary-Example.html">MSSQLDevice Documentation
								Example</ulink></para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DRMSSQLDeviceLibrary-Example.html">Reconciliation</ulink> | 
					 <ulink type="olinkb"
					 url="FTRTagsDescriptions-StorageTags-ShouldReconcile.html">ShouldReconcile</ulink></para>
				
		  </section> 
		  <section id="O-System.RequiredObjects"> 
				<title><indexterm> 
						  <primary>RequiredObjects - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RequiredObjects</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>RequiredObjects</secondary> 
					 </indexterm>System.RequiredObjects</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RequiredLibraries" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RequiredObjects</phrase> returns a table
					 listing the objects required by the specified object 
					 <phrase role="code">AObjectID</phrase> or 
					 <phrase role="code">AObjectName</phrase>. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">true</phrase> (or omitted) ALL objects
					 required by the specified object will be listed. This includes any objects
					 required by the objects that are required by 
					 <phrase role="code">AObjectID</phrase> or 
					 <phrase role="code">AObjectName</phrase>, and so on. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">false</phrase> only the objects required by
					 the specified object itself will be listed.</para> 
				<example> 
					 <title>Using System.RequiredObjects</title> 
					 <programlisting>CreateLibrary
 (LibraryDescriptor
  ("Lib",
   VersionNumberUndefined(),
   "Device",
   list(FileReference) {},
   list(LibraryReference) { LibraryReference("SimpleDevice",VersionNumberUndefined()) }
  )
 );
RegisterLibrary("Lib");
create device Device
	reconciliation { mode = { Command }, master = device }
	class "SimpleDevice"
		attributes
		{
			"DirectoryName" = "c:\Data",
			"AutoSave" = "true"
		};
create table Table { ID: Integer, Name : String, key{ID} };
create view View Table where Name = "Alphora";
select RequiredObjects("View", false) over { Object_Name, Sequence, Level };
select RequiredObjects("View", true) over { Object_Name, Sequence, Level };
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Object_Name                                Sequence Level
------------------------------------------ -------- -----
System.iEqual_System_String_System_String_ 1        1
Lib.Table                                  2        1
System.iRetrieve__                         3        1
System.iRestrict_table_System_Boolean_     4        1</programlisting> 
					 <programlisting>Object_Name                                Sequence Level
------------------------------------------ -------- -----
System.iEqual_System_String_System_String_ 1        1
System.String                              2        2
System.Boolean                             3        2
Lib.Table                                  4        1
System.String                              5        2
System.Integer                             6        2
Lib.Device                                 7        2
System.iRetrieve__                         8        1
System.iRestrict_table_System_Boolean_     9        1
System.Boolean                             10       2</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="xref"
					 url="O-System.DependentObjects.html">System.DependentObjects</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectExists.html">System.ObjectExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectID.html">System.ObjectID</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectName.html">System.ObjectName</ulink></para> 
		  </section> 
		  <section id="O-System.SafeDrop"> 
				<title><indexterm> 
						  <primary>SafeDrop - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SafeDrop</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>SafeDrop</secondary> 
					 </indexterm>System.SafeDrop</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SafeDrop" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SafeDrop</phrase> drops the specified 
					 <phrase role="code">AObjectSpecifier</phrase> catalog object
					 and all dependents, if it exists.</para> 
				<note> 
					 <para>An error is not raised if the catalog object does not
						  exist.</para> 
				</note> 
				<example> 
					 <title>Using System.SafeDrop</title> 
					 <programlisting>create table ExampleTable
{
 ID : Integer,
 key {}
};
select CatalogObjects where Name matches "Example" over { Name };
SafeDrop("ExampleTable");
select CatalogObjects where Name matches "Example" over { Name };</programlisting> 
					 <programlisting>Name
--------------------
General.ExampleTable

Name
----</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="D4LGCatalogElements.html">Catalog
						  Elements</ulink></para> 
		  </section> 
		  <section id="O-System.SaveLibraryCatalog"> 
				<title><indexterm> 
						  <primary>SaveLibraryCatalog - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SaveLibraryCatalog</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>SaveLibraryCatalog</secondary> 
					 </indexterm>System.SaveLibraryCatalog</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SaveLibraryCatalog" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SaveLibraryCatalog</phrase> is used
					 during development as a checkpoint save of the specified library.</para> 
				<example> 
					 <title>Using System.SaveLibraryCatalog</title> 
					 <programlisting>SaveLibraryCatalog("Lib");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DUGP1Dataphoria-DataphorExplorer-Server.html">Server</ulink></para> 
		  </section> 
		  <section id="O-System.Script"> 
				<title><indexterm> 
						  <primary>Script - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Script</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>Script</secondary> 
					 </indexterm>System.Script</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Script" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Script</phrase> returns a D4 script to
					 create the specified object. Optionally the script to create the dependents of
					 the object can be included using 
					 <phrase role="code">AIncludeDependents</phrase>. Optionally the
					 D4 script to create the specified object can be omitted using 
					 <phrase role="code">AIncludeObject</phrase>.</para> 
				<example> 
					 <title>Using System.Script</title> 
					 <programlisting>select Script("Users", false, true);</programlisting> 
					 <programlisting>create table .System.Users in System.Catalog
{
	ID : System.UserID, 
	Name : System.String tags { Frontend.Preview.Include = "true" }, 
	key{ID} static tags { Storage.Enforced = "true" }
	
} tags { Frontend.UseList = "true" };</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDrop.html">System.ScriptDrop</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptCatalog.html">System.ScriptCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropCatalog.html">System.ScriptDropCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptLibrary.html">System.ScriptLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
		  <section id="O-System.ScriptCatalog"> 
				<title><indexterm> 
						  <primary>ScriptCatalog - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ScriptCatalog</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ScriptCatalog</secondary> 
					 </indexterm>System.ScriptCatalog</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ScriptCatalog" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ScriptCatalog</phrase> returns a D4
					 script that would create the entire catalog.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Script.html">System.Script</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDrop.html">System.ScriptDrop</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropCatalog.html">System.ScriptDropCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptLibrary.html">System.ScriptLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
		  <section id="O-System.ScriptData"> 
				<title><indexterm> 
						  <primary>ScriptData - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ScriptData</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ScriptData</secondary> 
					 </indexterm>System.ScriptData</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ScriptData" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ScriptData</phrase> returns a table
					 selector (D4 script) that represents all the data in the specified table 
					 <phrase role="code">AExpression</phrase>.</para> 
				<example> 
					 <title>Using System.ScriptData</title> 
					 <programlisting>select ScriptData("Users");</programlisting> 
					 <programlisting>table of
{
 ID : System.UserID,
 Name : System.String
}
{
	row
 {
  System.UserID('Admin') ID,
  'Administrator' Name
 }, 
	row
 {
  System.UserID('System') ID,
  'System User' Name
 }
}</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Script.html">System.Script</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptCatalog.html">System.ScriptCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDrop.html">System.ScriptDrop</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropCatalog.html">System.ScriptDropCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptLibrary.html">System.ScriptLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
		  <section id="O-System.ScriptDrop"> 
				<title><indexterm> 
						  <primary>ScriptDrop - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ScriptDrop</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ScriptDrop</secondary> 
					 </indexterm>System.ScriptDrop</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ScriptDrop" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ScriptDrop</phrase> returns a D4 script
					 that would drop the specified object. Optionally the D4 script that would drop
					 the dependents of the object can be included using 
					 <phrase role="code">AIncludeDependents</phrase>. Optionally the
					 D4 script that would drop the specified object can be omitted using 
					 <phrase role="code">AIncludeObject</phrase>.</para> 
				<example> 
					 <title>Using System.ScriptDrop</title> 
					 <programlisting>select ScriptDrop("Users", false, true);</programlisting> 
					 <programlisting>drop table System.Users;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Script.html">System.Script</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptCatalog.html">System.ScriptCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropCatalog.html">System.ScriptDropCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptLibrary.html">System.ScriptLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
		  <section id="O-System.ScriptDropCatalog"> 
				<title><indexterm> 
						  <primary>ScriptDropCatalog - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ScriptDropCatalog</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ScriptDropCatalog</secondary> 
					 </indexterm>System.ScriptDropCatalog</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ScriptDropCatalog" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ScriptDropCatalog</phrase> returns a D4
					 script that would drop the entire catalog.</para> 
				<example> 
					 <title>Using System.ScriptDropCatalog</title> 
					 <programlisting>select ScriptDropCatalog();</programlisting> 
					 <programlisting>UnregisterLibrary('Security');
. . .
UnregisterLibrary('SQLDevice');
DropUser('Administrator');
DropUser('System User');</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Script.html">System.Script</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptCatalog.html">System.ScriptCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDrop.html">System.ScriptDrop</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptLibrary.html">System.ScriptLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
		  <section id="O-System.ScriptDropLibrary"> 
				<title><indexterm> 
						  <primary>ScriptDropLibrary - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ScriptDropLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ScriptDropLibrary</secondary> 
					 </indexterm>System.ScriptDropLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ScriptDropLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ScriptDropLibrary</phrase> returns a D4
					 script that would drop all the objects currently in the specified library 
					 <phrase role="code">ALibraryName</phrase>.</para> 
				<example> 
					 <title>Using System.ScriptDropLibrary</title> 
					 <programlisting>select ScriptDropLibrary("SimpleDevice");</programlisting> 
					 <programlisting>drop operator SimpleDevice.SaveTable(const System.Name, const System.Name);
drop operator SimpleDevice.LoadTable(const System.Name, const System.Name);
drop operator SimpleDevice.TruncateTable(const System.Name, const System.Name);
drop operator SimpleDevice.BeginUpdate(const System.Name, const System.Name);
drop operator SimpleDevice.EndUpdate(const System.Name, const System.Name);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Script.html">System.Script</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptCatalog.html">System.ScriptCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDrop.html">System.ScriptDrop</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropCatalog.html">System.ScriptDropCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
		  <section id="O-System.ScriptLibrary"> 
				<title><indexterm> 
						  <primary>ScriptLibrary - Catalog Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ScriptLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Catalog Operators</primary> 
						  <secondary>ScriptLibrary</secondary> 
					 </indexterm>System.ScriptLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ScriptLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ScriptLibrary</phrase> returns a D4
					 script that would create all the objects currently in the specified library 
					 <phrase role="code">ALibraryName</phrase>.</para> 
				<example> 
					 <title>Using System.ScriptLibrary</title> 
					 <programlisting>select ScriptLibrary("SimpleDevice");</programlisting> 
					 <programlisting>create operator .SimpleDevice.SaveTable(const ADeviceName : System.Name, const ATableName : System.Name)
 class "SimpleDevice.SaveTableNode" static tags { DAE.IsRemotable = "false" };
. . .
create operator .SimpleDevice.EndUpdate(const ADeviceName : System.Name, const ATableName : System.Name)
 class "SimpleDevice.EndUpdateNode" static tags { DAE.IsRemotable = "false" };
System.SetObjectOwner(System.Name('.SimpleDevice.SaveTable_System_Name_System_Name_'), 'Admin');
. . .
System.SetObjectOwner(System.Name('.SimpleDevice.EndUpdate_System_Name_System_Name_'), 'Admin');
begin
	System.SafeGrantRightToRole(System.Name('SimpleDevice.BeginUpdate_System_Name_System_Name_Execute'), System.Name('System.User'));
 . . .
	System.SafeGrantRightToRole(System.Name('SimpleDevice.SaveTable_System_Name_System_Name_Execute'), System.Name('System.User'));
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGScriptsandExecution.html">Scripts and Execution</ulink> | 
					 <ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Script.html">System.Script</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptCatalog.html">System.ScriptCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDrop.html">System.ScriptDrop</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropCatalog.html">System.ScriptDropCatalog</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptDropLibrary.html">System.ScriptDropLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ScriptData.html">System.ScriptData</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.ComparisonOperators"> 
		  <title>Comparison Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.iCompare"> 
				<title><indexterm> 
						  <primary>iCompare - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>?= (Comparison Operator)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>?= (Comparison Operator)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>?= (Comparison Operator)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operator (?=)</primary> 
					 </indexterm>System.iCompare</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iCompare" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">?=</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iCompare</phrase>. The 
					 <phrase role="code">Compare</phrase> operator is a comparison
					 operator that returns an integer. 
					 <informalexample> 
						  <para><phrase role="code">x ?= y</phrase></para> 
					 </informalexample>is defined as 
					 <informalexample> 
						  <para><phrase role="code">if x &lt; y then -1 else if x = y
									 then 0 else 1</phrase></para> 
					 </informalexample>It is a good operator to use to figure out if
					 two values are the same, or how they are different.</para> 
				<example> 
					 <title>Using System.iCompare</title> 
					 <programlisting>select Manager add { Manager_ID ?= Employee_ID compare };</programlisting> 
					 <programlisting>Manager_ID Employee_ID compare
---------- ----------- -------
1          2           -1
1          3           -1
2          4           -1
2          6           -1
4          5           -1</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iEqual"> 
				<title><indexterm> 
						  <primary>iEqual - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>= (Equal)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>= (Equal)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>= (Equal)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Equal (=)</primary> 
					 </indexterm>System.iEqual</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iEqual" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">=</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iEqual</phrase>. The 
					 <phrase role="code">Equal</phrase> operator is a comparison
					 operator that checks to see if the two values on either side of the operator
					 are equal. This operator returns a boolean value representing the result of the
					 comparison.</para> 
				<example> 
					 <title>Using System.iEqual</title> 
					 <programlisting>select EmployeePhone where Phone.Length() = 8 add {ID.ToString() = Phone bool};</programlisting> 
					 <programlisting>ID Phone    bool  
-- -------- ----- 
1  555-1000 False 
1  555-1234 False 
2  555-4321 False 
4  555-4444 False 
5  555-5678 False </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iGreater"> 
				<title><indexterm> 
						  <primary>iGreater - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&gt; (Greater)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&gt; (Greater)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>&gt; (Greater)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Greater (&gt;)</primary> 
					 </indexterm>System.iGreater</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iGreater" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&gt;</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iGreater</phrase>. The greater than
					 operator is a comparison operator. It looks at the left and right values and
					 compares them. If the left value is greater than the right value, the operator
					 returns true, otherwise it returns false. When the values are equal, the
					 operator returns false.</para> 
				<example> 
					 <title>Using System.iGreater</title> 
					 <programlisting>select Manager add { Manager_ID &gt; Employee_ID Greater};</programlisting> 
					 <programlisting>Manager_ID Employee_ID Greater 
---------- ----------- ------- 
1          2           False   
1          3           False   
2          4           False   
2          6           False   
4          5           False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iInclusiveGreater"> 
				<title><indexterm> 
						  <primary>iInclusiveGreater - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&gt;= (Inclusive Greater)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&gt;= (Inclusive Greater)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>&gt;= (Inclusive Greater)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Inclusive Greater (&gt;=)</primary> 
					 </indexterm>System.iInclusiveGreater</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iInclusiveGreater" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&gt;=</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iInclusiveGreater</phrase>. The inclusive
					 greater than operator is a comparison operator. D4 compares the left and right
					 values. If the left value is greater than or equal to the right value, the
					 operator returns true, otherwise it returns false.</para> 
				<example> 
					 <title>Using System.iInclusiveGreater</title> 
					 <programlisting>select Manager add { Manager_ID &gt;= Employee_ID Greater};</programlisting> 
					 <programlisting>Manager_ID Employee_ID Greater
---------- ----------- -------
1          2           False
1          3           False
2          4           False
2          6           False
4          5           False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iInclusiveLess"> 
				<title><indexterm> 
						  <primary>iInclusiveLess - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&lt;= (Inclusive Less)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&lt;= (Inclusive Less)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>&lt;= (Inclusive Less)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Inclusive Less (&lt;=)</primary> 
					 </indexterm>System.iInclusiveLess</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iInclusiveLess" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&lt;=</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iInclusiveLess</phrase>. The inclusive less
					 than operator is a comparison operator. It compares the left and right values.
					 If the left value is less than or equal to the right value, the operator
					 returns true, otherwise it returns false.</para> 
				<example> 
					 <title>Using System.iInclusiveLess</title> 
					 <programlisting>select Manager add { Manager_ID &lt;= Employee_ID Greater};</programlisting> 
					 <programlisting>Manager_ID Employee_ID Greater 
---------- ----------- ------- 
1          2           True    
1          3           True    
2          4           True    
2          6           True    
4          5           True    </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iLess"> 
				<title><indexterm> 
						  <primary>iLess - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&lt; (Less)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&lt; (Less)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>&lt; (Less)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Less (&lt;)</primary> 
					 </indexterm>System.iLess</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iLess" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&lt;</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iLess</phrase>. The less than operator is a
					 comparison operator. It looks at the left and right values and compares them.
					 If the left value is less than the right value, the operator returns true,
					 otherwise it returns false. When the left and right values are equal, the
					 operator returns false.</para> 
				<example> 
					 <title>Using System.iLess</title> 
					 <programlisting>select Manager add { Manager_ID &lt; Employee_ID Greater};</programlisting> 
					 <programlisting>Manager_ID Employee_ID Greater 
---------- ----------- ------- 
1          2           True    
1          3           True    
2          4           True    
2          6           True    
4          5           True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iNotEqual"> 
				<title><indexterm> 
						  <primary>iNotEqual - Comparison Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>&lt;&gt; (Not Equal)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>&lt;&gt; (Not Equal)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Comparison Operators</primary> 
						  <secondary>&lt;&gt; (Not Equal)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Not Equal (&lt;&gt;)</primary> 
					 </indexterm>System.iNotEqual</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iNotEqual" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">&lt;&gt;</phrase> is the parser
					 recognized symbol for 
					 <phrase role="code">iNotEqual</phrase>. This operator is a
					 comparison operator that checks to see if the two values on either side of the
					 operator are not equal. This operator returns a boolean value representing the
					 comparison.</para> 
				<example> 
					 <title>Using System.iNotEqual</title> 
					 <programlisting>select Manager where Manager_ID &lt;&gt; Employee_ID;</programlisting> 
					 <programlisting>Manager_ID Employee_ID 
---------- ----------- 
1          2           
1          3           
2          4           
2          6           
4          5</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-ComparisonOperators.html">Table Comparison
						  Operators</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.ConversionOperators"> 
		  <title>Conversion Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.ToBoolean"> 
				<title><indexterm> 
						  <primary>ToBoolean - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToBoolean</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToBoolean</secondary> 
					 </indexterm>System.ToBoolean</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToBoolean" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Byte</phrase>, 
					 <phrase role="code">Integer</phrase>, 
					 <phrase role="code">Long</phrase>, 
					 <phrase role="code">Short</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Boolean</phrase> using 
					 <phrase role="code">ToBoolean</phrase>.</para> 
				<para>With a numeric value, 0 will return as 
					 <phrase role="code">false</phrase>, any other value will return
					 as 
					 <phrase role="code">true</phrase>.</para> 
				<para>With strings, a case-insensitive compare is done. The string
					 "true" will return true, the string "false" will return false. An error will
					 occur if the string is not one of the two.</para> 
				<example> 
					 <title>Using System.ToBoolean</title> 
					 <programlisting>select ToBoolean(-1234);
select ToBoolean("FALSE");</programlisting> 
					 <programlisting>True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToByte"> 
				<title><indexterm> 
						  <primary>ToByte - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToByte</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToByte</secondary> 
					 </indexterm>System.ToByte</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToByte" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Boolean</phrase>, 
					 <phrase role="code">Integer</phrase>, 
					 <phrase role="code">Long</phrase>, 
					 <phrase role="code">Short</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Byte</phrase> using 
					 <phrase role="code">ToByte</phrase>.</para> 
				<para>With a 
					 <phrase role="code">Boolean</phrase>, 
					 <phrase role="code">true</phrase> will return 1, 
					 <phrase role="code">false</phrase> will return 0.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional plus sign, to an equivalent 8-bit unsigned integer.</para> 
				<para>An error will occur if the value is outside that range of a
					 Byte (0 to +255).</para> 
				<example> 
					 <title>Using System.ToByte</title> 
					 <programlisting>select ToByte(Integer(200));
select ToByte("+87");
select ToByte(true);</programlisting> 
					 <programlisting>200
87
1</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToDate"> 
				<title><indexterm> 
						  <primary>ToDate - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToDate</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToDate</secondary> 
					 </indexterm>System.ToDate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToDate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DateTime</phrase> and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to a 
					 <phrase role="code">Date</phrase> type using 
					 <phrase role="code">ToDate</phrase>.</para> 
				<para>A string that takes any of the forms described in 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings (Web link)</ulink> can be converted to a 
					 <phrase role="code">Data</phrase> type.</para> 
				<example> 
					 <title>Using System.ToDate</title> 
					 <programlisting>select ToDate(DateTime()); // time is removed
select ToDate("Dec 25, 2004 8:15"); // time is ignored
select ToDate("2004, 7, 4 18:30:59");</programlisting> 
					 <programlisting>2004-04-26
2004-12-25
2004-07-04</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings Web Link</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToDateTime"> 
				<title><indexterm> 
						  <primary>ToDateTime - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToDateTime</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToDateTime</secondary> 
					 </indexterm>System.ToDateTime</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToDateTime" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Date</phrase> and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to a 
					 <phrase role="code">DateTime</phrase> type using 
					 <phrase role="code">ToDateTime</phrase>.</para> 
				<para>A string that takes any of the forms described in 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings (Web link)</ulink> can be converted to a 
					 <phrase role="code">DateTime</phrase> type.</para> 
				<example> 
					 <title>Using System.ToDateTime</title> 
					 <programlisting>select ToDateTime(Date()); // time will be 0
select ToDateTime("Dec 25, 2004 8:15");
select ToDateTime("30 December 2004 11:59:59 pm");
select ToDateTime("2004, 7, 4 18:30:23");</programlisting> 
					 <programlisting>2004-04-26 00:00:00
2004-12-25 08:15:00
2004-12-30 23:59:59
2004-07-04 18:30:23</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings Web Link</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToDecimal"> 
				<title><indexterm> 
						  <primary>ToDecimal - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToDecimal</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToDecimal</secondary> 
					 </indexterm>System.ToDecimal</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToDecimal" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Integer</phrase>, 
					 <phrase role="code">Long</phrase>, 
					 <phrase role="code">Money</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Decimal</phrase> type using 
					 <phrase role="code">ToDecimal</phrase>.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional sign, to an equivalent 96-bit signed integer.</para> 
				<para>An error will occur if the value is outside that range of a 
					 <phrase role="code">Decimal</phrase>
					 (-79,228,162,514,264,337,593,543,950,335 to
					 +79,228,162,514,264,337,593,543,950,335).</para> 
				<example> 
					 <title>Using System.ToDecimal</title> 
					 <programlisting>select ToDecimal($357/84);
select ToDecimal("87.14");
select ToDecimal(193);</programlisting> 
					 <programlisting>4.25
87.14
193</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToGuid"> 
				<title><indexterm> 
						  <primary>ToGuid - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToGuid</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToGuid</secondary> 
					 </indexterm>System.ToGuid</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToGuid" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Guid</phrase> using 
					 <phrase role="code">ToGuid</phrase>.</para> 
				<para>A Guid string must contain 32 digits and 4 dashes in the
					 format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para> 
				<example> 
					 <title>Using System.ToGuid</title> 
					 <programlisting>select ToGuid("12345678-1234-1234-1234-123456789012");</programlisting> 
					 <programlisting>12345678-1234-1234-1234-123456789012</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref" url="O-System.Guid.html">System.Guid</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.NewGuid.html">System.NewGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.NameFromGuid.html">System.NameFromGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToInteger"> 
				<title><indexterm> 
						  <primary>ToInteger - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToInteger</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToInteger</secondary> 
					 </indexterm>System.ToInteger</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToInteger" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Boolean</phrase>, 
					 <phrase role="code">Byte</phrase>, 
					 <phrase role="code">Decimal</phrase>, 
					 <phrase role="code">Long</phrase>, 
					 <phrase role="code">Money</phrase>, 
					 <phrase role="code">Short</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Integer</phrase> using 
					 <phrase role="code">ToInteger</phrase>.</para> 
				<para>With a 
					 <phrase role="code">Boolean</phrase>, 
					 <phrase role="code">true</phrase> will return 1, 
					 <phrase role="code">false</phrase> will return 0.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional sign, to an equivalent signed 32-bit integer.</para> 
				<para>An error will occur if the value is outside that range of an 
					 <phrase role="code">Integer</phrase> (-2,147,483,648 to
					 +2,147,483,647).</para> 
				<example> 
					 <title>Using System.ToInteger</title> 
					 <programlisting>select ToInteger(Long(1234));
select ToInteger("-4567");
select ToInteger(false);</programlisting> 
					 <programlisting>1234
-4567
0</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToList"> 
				<title><indexterm> 
						  <primary>ToList - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToList</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToList</secondary> 
					 </indexterm>System.ToList</title> 
				<para>The 
					 <phrase role="code">ToList</phrase> operator is used to convert
					 a table value to a list of rows.</para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToList" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">ToList</phrase> operator results in a list
					 value containing the rows of 
					 <phrase role="code">AValue</phrase>, in the order specified by
					 the cursor definition.</para> 
				<example> 
					 <title>Using System.ToList</title> 
					 <programlisting>select ToTable(ToList(cursor(table { row { 1 Value }, row { 2 }, row { 3 } })))</programlisting> 
					 <programlisting>Value 
----- 
1     
2     
3     </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToTable.html">System.ToTable</ulink></para> 
		  </section> 
		  <section id="O-System.ToLong"> 
				<title><indexterm> 
						  <primary>ToLong - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToLong</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToLong</secondary> 
					 </indexterm>System.ToLong</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToLong" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Boolean</phrase>, 
					 <phrase role="code">Byte</phrase>, 
					 <phrase role="code">Decimal</phrase>, 
					 <phrase role="code">Integer</phrase>, 
					 <phrase role="code">Money</phrase>, 
					 <phrase role="code">Short</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Long</phrase> using 
					 <phrase role="code">ToLong</phrase>.</para> 
				<para>With a 
					 <phrase role="code">Boolean</phrase>, 
					 <phrase role="code">true</phrase> will return 1, 
					 <phrase role="code">false</phrase> will return 0.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional sign, to an equivalent signed 64-bit integer.</para> 
				<para>An error will occur if the value is outside that range of an 
					 <phrase role="code">Long</phrase> (-9,223,372,036,854,775,808
					 to +9,223,372,036,854,775,807).</para> 
				<example> 
					 <title>Using System.ToLong</title> 
					 <programlisting>select ToLong(Integer(1234));
select ToLong("-4567");
select ToInteger(false);</programlisting> 
					 <programlisting>1234
-4567
0</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToMoney"> 
				<title><indexterm> 
						  <primary>ToMoney - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToMoney</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToMoney</secondary> 
					 </indexterm>System.ToMoney</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToMoney" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Decimal</phrase>, 
					 <phrase role="code">Integer</phrase>, 
					 <phrase role="code">Long</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Money</phrase> type using 
					 <phrase role="code">ToMoney</phrase>.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional sign, to an equivalent 96-bit signed integer.</para> 
				<para>An error will occur if the value is outside that range of a 
					 <phrase role="code">Money</phrase>
					 (-79,228,162,514,264,337,593,543,950,335 to
					 +79,228,162,514,264,337,593,543,950,335).</para> 
				<example> 
					 <title>Using System.ToMoney</title> 
					 <programlisting>select 123.45*83;
select ToMoney(123.45*83);
select ToMoney("1234567.89");</programlisting> 
					 <programlisting>10246.35
$10,246.35
$1,234,567.89</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToShort"> 
				<title><indexterm> 
						  <primary>ToShort - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToShort</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToShort</secondary> 
					 </indexterm>System.ToShort</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToShort" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Boolean</phrase>, 
					 <phrase role="code">Byte</phrase>, 
					 <phrase role="code">Integer</phrase>, 
					 <phrase role="code">Long</phrase>, and 
					 <phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">Short</phrase> using 
					 <phrase role="code">ToShort</phrase>.</para> 
				<para>With a 
					 <phrase role="code">Boolean</phrase>, 
					 <phrase role="code">true</phrase> will return 1, 
					 <phrase role="code">false</phrase> will return 0.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional sign, to an equivalent signed 16-bit integer.</para> 
				<para>An error will occur if the value is outside that range of an 
					 <phrase role="code">Short</phrase> (-32768 to +32767).</para> 
				<example> 
					 <title>Using System.ToShort</title> 
					 <programlisting>select ToShort(Integer(1234));
select ToShort("-4567");
select ToShort(false);</programlisting> 
					 <programlisting>1234
-4567
0</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToString"> 
				<title><indexterm> 
						  <primary>ToString - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToString</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToString</secondary> 
					 </indexterm>System.ToString</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToString" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Boolean, Byte, Date, DateTime, Decimal,
						  Guid, Integer, Long, Money, Short, Time, TimeSpan,</phrase> and 
					 <phrase role="code">VersionNumber</phrase> types can be
					 explicitly converted to 
					 <phrase role="code">String</phrase> using 
					 <phrase role="code">ToString</phrase>.</para> 
				<example> 
					 <title>Using System.ToString</title> 
					 <programlisting>select ToString(123.45*83); // Long
select ToString(DateTime() + ToTimeSpan("714hours")); // DateTime
select ToString("yes" = "Yes"); // boolean</programlisting> 
					 <programlisting>10246.35
2004-05-26 19:53:49
false</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToTable"> 
				<title><indexterm> 
						  <primary>ToTable - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToTable</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToTable</secondary> 
					 </indexterm>System.ToTable</title> 
				<para>The 
					 <phrase role="code">ToTable</phrase> operator is used to
					 convert a list value to a table value.</para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToTable" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Any list value can be converted to a table value using this
					 operator. If the type of the elements in the list is a row type, the resulting
					 table type will have the same header as the rows in the list with an additional
					 Sequence column corresponding to the index of the entry in the list. Otherwise,
					 the resulting table type will have a value column named 
					 <phrase role="code">AColumnName</phrase> of the type of the
					 elements in the list, and a sequence column corresponding to the index of the
					 entry in the list. If 
					 <phrase role="code">AColumnName</phrase> is not specified, the
					 resulting column will be named <wordasword>Value</wordasword>. If 
					 <phrase role="code">AColumnName</phrase> is specified, it must
					 be literal (evaluable at compile-time) so that the type of the resulting table
					 can be determined. 
					 <phrase>ASequenceName</phrase> must also be literal, and
					 specifies the name of the sequence column. If no 
					 <phrase>ASequenceColumn</phrase> is given, then
					 <wordasword>Sequence</wordasword> is used. If the sequence column name is not
					 unique (because it conflicts with a row column name or with the value column
					 name) a number starting from one is appended to the name to ensure uniqueness.
					 If the list is of type row, the value column name is ignored. The value of the
					 sequence column starts with zero, corresponding to the index within the list.
					 </para> 
				<example> 
					 <title>Using System.ToTable</title> 
					 <programlisting>select ToTable({1, 2, 3})</programlisting> 
					 <programlisting>Sequence Value 
-------- ----- 
0        1     
1        2     
2        3     </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToList.html">System.ToList</ulink></para> 
		  </section> 
		  <section id="O-System.ToTime"> 
				<title><indexterm> 
						  <primary>ToTime - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToTime</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToTime</secondary> 
					 </indexterm>System.ToTime</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToTime" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>A 
					 <phrase role="code">String</phrase> type can be explicitly
					 converted to a 
					 <phrase role="code">Time</phrase> type using 
					 <phrase role="code">ToTime</phrase>.</para> 
				<para>A string that takes any of the forms described in 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings (Web link)</ulink> can be converted to a 
					 <phrase role="code">Time</phrase> type.</para> 
				<example> 
					 <title>Using System.ToTime</title> 
					 <programlisting>select ToTime("8:15");
select ToTime("8:15 pm");
select ToTime("18:30:59");</programlisting> 
					 <programlisting>08:15:00
20:15:00
18:30:59</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings Web Link</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToTimeSpan"> 
				<title><indexterm> 
						  <primary>ToTimeSpan - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToTimeSpan</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToTimeSpan</secondary> 
					 </indexterm>System.ToTimeSpan</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToTimeSpan" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>A 
					 <phrase role="code">String</phrase> type can be explicitly
					 converted to a 
					 <phrase role="code">TimeSpan</phrase> type using 
					 <phrase role="code">ToTimeSpan</phrase>.</para> 
				<example> 
					 <title>Using System.ToTimeSpan</title> 
					 <programlisting>select ToTimeSpan("2356wks 4days 14hrs 17min 1sec 84mil");
select ToTimeSpan("3h 15m");
select ToTimeSpan("9d 15m 18s");
select ToTimeSpan("123456789mil");
select ToDateTime("Dec 24, 2004 11:59 pm")+ToTimeSpan("7days");</programlisting> 
					 <programlisting>2356wks 4days 14hrs 17min 1sec 84mil
3hrs 15min
1wks 2days 0hrs 15min 18sec
1days 10hrs 17min 36sec 789mil
2004-12-31 23:59:00</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink
					 url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconstandarddatetimeformatstrings.asp">Standard
						  DateTime Format Strings Web Link</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.ToVersionNumber"> 
				<title><indexterm> 
						  <primary>ToVersionNumber - Conversion Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ToVersionNumber</secondary> 
					 </indexterm><indexterm> 
						  <primary>Conversion Operators</primary> 
						  <secondary>ToVersionNumber</secondary> 
					 </indexterm>System.ToVersionNumber</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ToVersionNumber" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">String</phrase> types can be explicitly
					 converted to 
					 <phrase role="code">VersionNumber</phrase> using 
					 <phrase role="code">ToVersionNumber</phrase>.</para> 
				<para>With strings, converts the specified 
					 <phrase role="code">String</phrase> representation of a number,
					 with optional plus sign, to an equivalent 96-bit signed integer.</para> 
				<para>An error will occur if the value is outside that range of a
					 Decimal (-79,228,162,514,264,337,593,543,950,335 to
					 +79,228,162,514,264,337,593,543,950,335).</para> 
				<example> 
					 <title>Using System.ToVersionNumber</title> 
					 <programlisting>select ToVersionNumber("2.0.15.9");</programlisting> 
					 <programlisting>2.0.15.9</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToBoolean.html">System.ToBoolean</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToByte.html">System.ToByte</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToDecimal.html">System.ToDecimal</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToInteger.html">System.ToInteger</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToLong.html">System.ToLong</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToMoney.html">System.ToMoney</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToShort.html">System.ToShort</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToString.html">System.ToString</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToTimeSpan.html">System.ToTimeSpan</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.CursorOperators"> 
		  <title>Cursor Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.BOF"> 
				<title><indexterm> 
						  <primary>BOF - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>BOF</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>BOF</secondary> 
					 </indexterm>System.BOF</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.BOF" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">BOF</phrase> checks to see if the cursor
					 specified is at the beginning of the current recordset. Returns true if the
					 cursor is at the beginning, false if it is anywhere else.</para> 
				<example> 
					 <title>Using System.BOF</title> 
					 <programlisting>begin
	var Output : String := "";
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.Last();
	TempCursor.Prior();
	while not TempCursor.BOF() do
	begin
		Output := Output + String.Unicode({13})+ Name from TempCursor.Select();
		TempCursor.Prior();
	end;
	raise Error(Output + Unicode({13}));
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.EOF.html">System.EOF</ulink>
					 | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink></para> 
		  </section> 
		  <section id="O-System.Change"> 
				<title><indexterm> 
						  <primary>Change - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Change</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Change</secondary> 
					 </indexterm>System.Change</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Change" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Change</phrase> is a cursor level
					 operator. It allows access to the proposable calls for the cursor. It permits a
					 "what if" check.</para> 
				<para>By passing in the proposed row change in 
					 <phrase role="code">ARow</phrase>, the results that would occur
					 if the change were made are passed back in 
					 <phrase role="code">ARow</phrase>.</para> 
				<para>If 
					 <phrase role="code">AColumnName</phrase> is specified, only
					 that column is involved in the proposal. If 
					 <phrase role="code">AColumnName</phrase> is omitted, all
					 columns are involved.</para> 
				<para>The boolean value returned is 
					 <phrase role="code">true</phrase> if a change occured to any of
					 the columns in the row, 
					 <phrase role="code">false</phrase> if no change occured.</para>
				
				<example> 
					 <title>Using System.Change</title> 
					 <programlisting>CreateLibrary
(
 LibraryDescriptor
 (
  "Lib",
  VersionNumberUndefined(),
  "",
  list(FileReference) {},
  list(LibraryReference) { LibraryReference("System",VersionNumberUndefined()) }
 )
);
RegisterLibrary("Lib");
EnsureGenerators();
create table Table in Temp
{
 ID : Integer { default GetNextGenerator("Table.ID") },
 Price : Money { default $10.00 },
 Quantity : Integer
 {
  constraint QValue value &gt; 0
   tags
   {
    DAE.SimpleMessage = "Quantity must be greater than zero"
   }
 },
 key { ID }
};
create view Extended	Table add { Price * Quantity Total };

create operator TryChange() : typeof(row from Extended)
begin
 var LCursor := cursor(Extended);
 try
  if LCursor.Next() then
   begin   result := LCursor.Select();
    update result set { Price := $25.10, Quantity := 4 };
    LCursor.Change(var result);
   end;
 finally
  LCursor.Close();
 end;
end;

create operator TryDefault() : typeof(row from (Extended))
begin
 var LCursor := cursor(Extended);
 try
  result := row { nil ID, nil Price, 1 Quantity, nil Total };
  LCursor.Default(var result);
 finally
  LCursor.Close();
 end;
end;

create operator TryValidate(const AQuantity : Integer) : String
begin
 var LCursor := cursor(Extended);
 var LRow : typeof(row from(Extended));
 try
  LRow := row { nil ID, nil Price, AQuantity Quantity, nil Total };
  try
   result :=
    if LCursor.Validate(var LRow)
    then ""
    else "Validation OK";
  except
   on E : Error do
   begin
    result := E.Message;
   end;
  end;
 finally
  LCursor.Close();
 end;
end;

insert table { row { $14.21 Price, 5 Quantity } } into Table;
select "** Change operator **";
select table { TryChange() };
select "** Default operator **";
select table { TryDefault() };
select "** Validate operator **";
select TryValidate(-1);
select TryValidate(1);
select "What is really in the table?";
select Extended;

drop operator TryValidate(Integer);
drop operator TryDefault();
drop operator TryChange();
drop view Extended;
drop table Table;
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>** Change operator **
ID Price  Quantity Total
-- ------ -------- -------
1  $25.10 4        $100.40

** Default operator **
ID Price  Quantity Total
-- ------ -------- ------
2  $10.00 1        $10.00

** Validate operator **
Quantity must be greater than zero.
Validation OK

What is really in the table?
ID Price  Quantity Total
-- ------ -------- ------
1  $14.21 5        $71.05</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Change.html">System.Change</ulink> | 
					 <ulink type="xref"
					 url="O-System.Default.html">System.Default</ulink></para> 
		  </section> 
		  <section id="O-System.Close"> 
				<title><indexterm> 
						  <primary>Close - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Close</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Close</secondary> 
					 </indexterm>System.Close</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Close" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Close</phrase> closes the specified
					 cursor.</para> 
				<example> 
					 <title>Using System.Close</title> 
					 <programlisting>begin
	var EmpCursor : cursor(table{ID : Integer, Name : String});
	var Employees : String := "";
	EmpCursor := cursor(Employee);
	try
		while EmpCursor.Next() do
		begin
			Employees := Employees + Unicode({13}) + (Name from EmpCursor.Select());
		end;
	finally
		EmpCursor.Close();
		raise Error(Employees);
	end;
end;</programlisting> 
					 <programlisting>Joe
John
Josh
Jeff
Jake
Jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-CursorValues.html">Cursors
						  Values</ulink></para> 
		  </section> 
		  <section id="O-System.CompareBookmarks"> 
				<title><indexterm> 
						  <primary>CompareBookmarks - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CompareBookmarks</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>CompareBookmarks</secondary> 
					 </indexterm>System.CompareBookmarks</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CompareBookmarks" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CompareBookmarks</phrase> return values
					 are similar to the 
					 <phrase role="code">compare</phrase> operator. 
					 <phrase role="code">CompareBookmarks</phrase> compares two
					 bookmarks. The values returned are interpreted as follows: -1 if the left
					 bookmark is less than the right bookmark based on the ordering of the cursor, 0
					 if the bookmarks are the same, 1 if the left bookmark occurs is greater than
					 the right bookmark. A bookmark is returned from the 
					 <phrase role="code">GetBookmark</phrase> operator.</para>

      <!--
	 <example> 
		  <title>Using System.CompareBookmarks</title> 
		  <para>See 
				<ulink url="D4LGUsingCursors.html">Programming Topics, Using
					 Cursors</ulink></para> 
	 </example>
-->
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DDGP2Bookmarkable.html">Cursor
						  Capabilities, Bookmarkable</ulink> | 
					 <ulink type="olinka"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Select
						  Statement, Cursor Capabilities</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="xref"
					 url="O-System.iCompare.html">System.iCompare</ulink> | 
					 <ulink type="xref"
					 url="O-System.GetBookmark.html">System.GetBookmark</ulink></para> 
		  </section> 
		  <section id="O-System.Default"> 
				<title><indexterm> 
						  <primary>Default - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Default</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Default</secondary> 
					 </indexterm>System.Default</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Default" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Default</phrase> is a cursor level
					 operator. It allows access to the proposable calls for the cursor. It permits a
					 "what if" check.</para> 
				<para>By passing in the proposed new row in 
					 <phrase role="code">ARow</phrase>, the results that would occur
					 if the insert were made are passed back in 
					 <phrase role="code">ARow</phrase>. These changes are due to the
					 defaults assigned to columns and scalar types involved in the expression for
					 the cursor, as well as default event handlers.</para> 
				<para>If 
					 <phrase role="code">AColumnName</phrase> is specified, only
					 that column is involved in the proposal. If 
					 <phrase role="code">AColumnName</phrase> is omitted, all
					 columns are involved.</para> 
				<para>The boolean value returned is 
					 <phrase role="code">true</phrase> if a change occured to any of
					 the columns in the row, 
					 <phrase role="code">false</phrase> if no change occured.</para>
				
				<example> 
					 <title>Using System.Default</title> 
					 <programlisting>See <ulink type="xref" url="O-System.Change.html">System.Change</ulink> for the example.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Change.html">System.Change</ulink> | 
					 <ulink type="xref"
					 url="O-System.Validate.html">System.Validate</ulink></para> 
		  </section> 
		  <section id="O-System.Delete"> 
				<title><indexterm> 
						  <primary>Delete - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Delete</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Delete</secondary> 
					 </indexterm>System.Delete</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Delete" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Delete</phrase> deletes the current row
					 from the specified cursor.</para> 
				<example> 
					 <title>Using System.Delete</title> 
					 <programlisting>begin
	BeginTransaction();
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	TempCursor.Insert( row { 16 ID, "Jed" Name});
	TempCursor.Delete();
	PrepareTransaction();
	RollbackTransaction();
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink></para> 
		  </section> 
		  <section id="O-System.EOF"> 
				<title><indexterm> 
						  <primary>EOF - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>EOF</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>EOF</secondary> 
					 </indexterm>System.EOF</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.EOF" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Checks to see if the cursor specified is at the end of the
					 current recordset. Returns true if the cursor is at the end, false if it is
					 anywhere else.</para> 
				<example> 
					 <title>Using System.EOF</title> 
					 <programlisting>begin
	var Output : String := "";
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	while not TempCursor.EOF() do
	begin
		Output := Output + String.Unicode({13})+ Name from TempCursor.Select();
		TempCursor.Next();
	end;
	raise Error(Output + Unicode({13}));
end;</programlisting> 
					 <programlisting>Joe
John
Josh
Jeff
Jake
Jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.BOF.html">System.BOF</ulink>
					 | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink></para> 
		  </section> 
		  <section id="O-System.FindKey"> 
				<title><indexterm> 
						  <primary>FindKey - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>FindKey</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>FindKey</secondary> 
					 </indexterm>System.FindKey</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.FindKey" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">FindKey</phrase> takes the cursor to the
					 specified key. If the row doesn't exist, then this operator returns false, and
					 it leaves the cursor where it was before the operator call. If the key is
					 found, then it returns true and moves the cursor to that row. This key is
					 either one recieved from 
					 <phrase role="code">GetKey</phrase>, or one made. The key data
					 specified must come from columns in the order clause in the table definition.
					 This operator first checks to see if the first column in the order
					 specification is in the row provided, then the second column in the order, and
					 so on.</para>

      <!--
	 <example>
		  <title>Using System.FindKey</title>
		  <programlisting>begin
	var EmpCursor : cursor := cursor (Employee capabilities {Updateable});
	var TempRow : row;
	TempRow = row {"Jed" Name,45 ID};
	EmpCursor.Insert(TempRow);
end;</programlisting>
	 </example>
-->
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="xref"
					  url="O-System.GotoBookmark.html">System.GotoBookmark</ulink> | 
					 <ulink type="xref"
					  url="O-System.GetKey.html">System.GetKey</ulink> | 
					 <ulink type="xref"
					  url="O-System.FindNearest.html">System.FindNearest</ulink></para> 
		  </section> 
		  <section id="O-System.FindNearest"> 
				<title><indexterm> 
						  <primary>FindNearest - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>FindNearest</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>FindNearest</secondary> 
					 </indexterm>System.FindNearest</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.FindNearest" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">FindNearest</phrase> takes the cursor to
					 the specified key. If the row doesn't exist then it will attempt to move the
					 cursor to the row closest to the specified row. This key is either one recieved
					 from 
					 <phrase role="code">GetKey</phrase>, or one made. The key data
					 specified must come from columns in the order clause in the table definition.
					 This operator first checks to see if the first column in the order
					 specification is in the row provided, then the second column in the order, and
					 so on.</para>

      <!--
	 <example>
		  <title>Using System.FindNearest</title>
		  <programlisting>begin
	var EmpCursor : cursor := cursor (Employee capabilities {Updateable});
	var TempRow : row;
	TempRow = row {"Jed" Name,45 ID};
	EmpCursor.Insert(TempRow);
end;</programlisting>
	 </example> 
-->
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="xref"
					 url="O-System.FindKey.html">System.FindKey</ulink></para> 
		  </section> 
		  <section id="O-System.First"> 
				<title><indexterm> 
						  <primary>First - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>First</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>First</secondary> 
					 </indexterm>System.First</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.First" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">First</phrase> moves the specified cursor
					 to the BOF crack just prior to the first row.</para> 
				<example> 
					 <title>Using System.First</title> 
					 <programlisting>begin
	var Output : String := "";
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	while not TempCursor.EOF() do
	begin
		Output :=
   Output
   + String.Unicode({13})
   + Name from TempCursor.Select();
		TempCursor.Next();
	end;
	raise Error(Output + Unicode({13}));
end;</programlisting> 
					 <programlisting>Joe
John
Josh
Jeff
Jake
Jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink></para> 
		  </section> 
		  <section id="O-System.GetBookmark"> 
				<title><indexterm> 
						  <primary>GetBookmark - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GetBookmark</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>GetBookmark</secondary> 
					 </indexterm>System.GetBookmark</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GetBookmark" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GetBookmark</phrase> returns a row that
					 acts as a bookmark, that will be unique to the current row. This information
					 can be saved in a row variable and used later in 
					 <phrase role="code">GotoBookmark</phrase>.</para> 
				<example> 
					 <title>Using System.GetBookmark</title> 
					 <programlisting>begin
	var EmpCursor : cursor := cursor (Employee capabilities {Updateable});
	var TempRow : row;
	TempRow = row {"Jed" Name,45 ID};
	EmpCursor.Insert(TempRow);
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="xref"
					 url="O-System.GotoBookmark.html">System.GotoBookmark</ulink> | 
					 <ulink type="xref"
					 url="O-System.GetKey.html">System.GetKey</ulink></para> 
		  </section> 
		  <section id="O-System.GetKey"> 
				<title><indexterm> 
						  <primary>GetKey - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GetKey</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>GetKey</secondary> 
					 </indexterm>System.GetKey</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GetKey" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GetKey</phrase> returns a row with
					 structure the same as the searchable key, with data that is the same as the
					 data in those columns in the current row. This information can be saved in a
					 row variable and used later in 
					 <phrase role="code">FindKey</phrase>. This is similar to the
					 bookmark, except that the data and structure of a bookmark is
					 unimportant.</para> 
				<example> 
					 <title>Using System.GetKey</title> 
					 <programlisting>begin
	var EmpCursor : cursor := cursor (Employee capabilities {Updateable});
	var TempRow : row;
	TempRow = row {"Jed" Name,45 ID};
	EmpCursor.Insert(TempRow);
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="xref"
					 url="O-System.FindKey.html">System.FindKey</ulink> | 
					 <ulink type="xref"
					 url="O-System.GetBookmark.html">System.GetBookmark</ulink></para> 
		  </section> 
		  <section id="O-System.GotoBookmark"> 
				<title><indexterm> 
						  <primary>GotoBookmark - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GotoBookmark</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>GotoBookmark</secondary> 
					 </indexterm>System.GotoBookmark</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GotoBookmark" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GotoBookmark</phrase> takes the cursor to
					 the specified bookmark. If the row no longer exists, then this operator returns
					 false, and it will leave the cursor where it was before the operator call. If
					 it could find the bookmark, then it returns true and moves the cursor to that
					 row. This bookmark is one recieved from 
					 <phrase role="code">Get</phrase><phrase
					 role="code">Bookmark</phrase>.</para>

      <!--
	 <example>
		  <title>Using System.GotoBookmark</title>
		  <programlisting>begin
	var EmpCursor : cursor := cursor (Employee capabilities {Updateable});
	var TempRow : row;
	TempRow = row {"Jed" Name,45 ID};
	EmpCursor.Insert(TempRow);
end;</programlisting>
	 </example>
-->
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="xref"
					 url="O-System.FindKey.html">System.FindKey</ulink> | 
					 <ulink type="xref"
					 url="O-System.GetBookmark.html">System.GetBookmark</ulink> | 
					 <ulink type="xref"
					 url="O-System.CompareBookmarks.html">System.CompareBookmarks</ulink></para> 
		  </section> 
		  <section id="O-System.Insert"> 
				<title><indexterm> 
						  <primary>Insert - Cursor &amp; List &amp; String
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Insert</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Insert</secondary> 
					 </indexterm>System.Insert</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Insert" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>As a cursor operator, 
					 <phrase role="code">Insert</phrase> inserts 
					 <phrase role="code">ARow</phrase> into 
					 <phrase role="code">ACursor</phrase>.</para> 
				<para>As a list operator, 
					 <phrase role="code">Insert</phrase> inserts 
					 <phrase role="code">AValue</phrase> into 
					 <phrase role="code">AList</phrase> at location 
					 <phrase role="code">AIndex</phrase>.</para> 
				<para>As a String operator, 
					 <phrase role="code">Insert</phrase> inserts 
					 <phrase role="code">AInsertString</phrase> into 
					 <phrase role="code">AString</phrase> starting at location 
					 <phrase role="code">AStartIndex</phrase>. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.Insert</title> 
					 <programlisting>create table Test in Temp { TestString : String };
begin
 var LTestString : String;
 var LTestList := list(String){ "Great" };
 var LTestCursor : cursor
  := cursor(Test capabilities { Navigable, Updateable } );
 LTestList.Insert("Dataphor", 0 );
 LTestString := LTestList[0] + LTestList[1];
 LTestString := LTestString.Insert(8, " is ");
 LTestCursor.Insert( row { LTestString TestString } );
 LTestCursor.Close();
end;
select Test;
drop table Test;</programlisting> 
					 <programlisting>TestString
-----------------
Dataphor is Great</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink></para> 
		  </section> 
		  <section id="O-System.iOrder"> 
				<title><indexterm> 
						  <primary>iOrder - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iOrder</secondary> 
					 </indexterm><indexterm> 
						  <primary>order</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>order</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>order</secondary> 
					 </indexterm>System.iOrder</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iOrder" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">order</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iOrder</phrase>. This clause modifies the
					 ordering of rows in a cursor definition. The 
					 <phrase role="code">order by</phrase> clause returns the list
					 of rows ordered by the contents of the columns specified.</para> 
				<example> 
					 <title>Using System.iOrder</title> 
					 <programlisting>select Employee order by { Name };</programlisting> 
					 <programlisting>ID Name 
-- ---- 
5  Jake 
4  Jeff 
6  Jeff 
1  Joe  
2  John 
3  Josh</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-OrderingTheResultSet.html">Ordering
						  the Result Set</ulink> | 
					 <ulink type="olinkb" url="D4LGOrders.html">Orders</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement.html">Select Statement</ulink> | 
					 <ulink type="link"
					 url="O-System.iBrowse.html">System.iBrowse</ulink></para> 
		  </section> 
		  <section id="O-System.Last"> 
				<title><indexterm> 
						  <primary>Last - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Last</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Last</secondary> 
					 </indexterm>System.Last</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Last" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Last</phrase> moves the specified cursor
					 to the EOF crack just after the last row of the current dataset.</para> 
				<example> 
					 <title>Using System.Last</title> 
					 <programlisting>begin
	var Output : String := "";
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.Last();
	TempCursor.Prior();
	while not TempCursor.BOF() do
	begin
		Output := Output + String.Unicode({13})+ Name from TempCursor.Select();
		TempCursor.Prior();
	end;
	raise Error(Output + Unicode({13}));
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink></para> 
		  </section> 
		  <section id="O-System.Next"> 
				<title><indexterm> 
						  <primary>Next - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Next</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Next</secondary> 
					 </indexterm>System.Next</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Next" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Next</phrase> moves the specified cursor
					 to the next row of the specified cursor. 
					 <phrase role="code">next</phrase> returns true if the cursor is
					 not on the EOF crack after the attempted move.</para> 
				<example> 
					 <title>Using System.Next</title> 
					 <programlisting>begin
	var OutputString : String := Unicode({13}) + "From the Beginning: ";
	var EmployeeCursor : cursor(table { ID : Integer, Name : String }) := cursor(Employee);
	try
		EmployeeCursor.First();
		while EmployeeCursor.Next() do
		begin
			OutputString := OutputString + Unicode({13}) + (Name from EmployeeCursor.Select()) + " ";
		end;
		EmployeeCursor.Last();
		OutputString := OutputString + Unicode({13}) + "From the End: ";
		while EmployeeCursor.Prior() do
		begin
			OutputString := OutputString + Unicode({13}) + (Name from EmployeeCursor.Select()) + " ";
		end;
		raise Error(OutputString);
	finally
		EmployeeCursor.Close();
	end;
end;</programlisting> 
					 <programlisting>From the Beginning: 
Joe 
John 
Josh 
Jeff 
Jake 
Jeff 
From the End: 
Jeff 
Jake 
Jeff 
Josh 
John 
Joe</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinka" url="DDGP2Navigable.html">Cursors
						  Capabilities, Navigable</ulink> | 
					 <ulink type="xref"
					 url="O-System.EOF.html">System.EOF</ulink></para> 
		  </section> 
		  <section id="O-System.Open"> 
				<title><indexterm> 
						  <primary>Open - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Open</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Open</secondary> 
					 </indexterm>System.Open</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Open" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Open</phrase> opens a cursor based on a
					 string representation of a table expression. The 
					 <phrase role="code">Open</phrase> operator is similar to the
					 Cursor selector, but this takes a string, rather than an expression allowing
					 the user to construct a string at runtime for the cursor.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">Open</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>functional</para> 
						  </listitem> 
						  <listitem> 
								<para>deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>repeatable</para> 
						  </listitem> 
						  <listitem> 
								<para>nilable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.Open</title> 
					 <programlisting>begin
	var EmployeeCursor : cursor(table { ID : Integer, Name : String });
	EmployeeCursor := Open("Employee") as cursor(table { ID : Integer, Name : String});
	try
		EmployeeCursor.Next();
		raise Error((Name from EmployeeCursor.Select()));
	finally
		EmployeeCursor.Close();
	end;
end;</programlisting> 
					 <programlisting>Joe</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Execute.html">System.Execute</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic Execution</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink></para> 
		  </section> 
		  <section id="O-System.Prior"> 
				<title><indexterm> 
						  <primary>Prior - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Prior</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Prior</secondary> 
					 </indexterm>System.Prior</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Prior" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><superscript>Prior</superscript> moves the specified cursor
					 to the prior (or previous) row of the specified cursor. 
					 <phrase role="code">prior</phrase> returns true if the cursor
					 is not on the BOF crack after the attempted move.</para> 
				<example> 
					 <title>Using System.Prior</title> 
					 <programlisting>begin
	var OutputString : String := Unicode({13}) + "From the Beginning: ";
	var EmployeeCursor : cursor(table { ID : Integer, Name : String }) := cursor(Employee);
	try
		EmployeeCursor.First();
		while EmployeeCursor.Next() do
		begin
			OutputString :=
    OutputString
    + Unicode({13})
    + (Name from EmployeeCursor.Select())
    + " ";
		end;
		EmployeeCursor.Last();
		OutputString :=
   OutputString
   + Unicode({13})
   + "From the End: ";
		while EmployeeCursor.Prior() do
		begin
			OutputString :=
    OutputString
    + Unicode({13})
    + (Name from EmployeeCursor.Select())
    + " ";
		end;
		raise Error(OutputString);
	finally
		EmployeeCursor.Close();
	end;
end;</programlisting> 
					 <programlisting>From the Beginning: 
Joe 
John 
Josh 
Jeff 
Jake 
Jeff 
From the End: 
Jeff 
Jake 
Jeff 
Josh 
John 
Joe</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="xref"
					 url="O-System.BOF.html">System.BOF</ulink></para> 
		  </section> 
		  <section id="O-System.Refresh"> 
				<title><indexterm> 
						  <primary>Refresh - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Refresh</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Refresh</secondary> 
					 </indexterm>System.Refresh</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Refresh" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Refresh</phrase> refreshes the current
					 cursor. 
					 <phrase role="code">Refresh</phrase> closes, reopens, and does
					 a 
					 <phrase role="code">FindNearest</phrase> on the cursor. If a
					 row is not specified as the current location, the current row is used in the 
					 <phrase role="code">FindNearest</phrase>. Note that regardless
					 of whether the cursor was declared static or dynamic, calling refresh will
					 always re-evaluate the cursor expression against the database.</para> 
				<example> 
					 <title>Using System.Refresh</title> 
					 <programlisting>begin
	var EmployeeCursor :
  cursor( table { ID : Integer, Name : String });
	EmployeeCursor := cursor(Employee);
	var NewRow : row { ID : Integer, Name : String };
	NewRow := row { 9 ID, "Jack" Name};
	insert table { NewRow } into Employee;
	EmployeeCursor.Refresh(NewRow);
	raise Error
 (
  "The current row is: "
  + (Name from EmployeeCursor.Select() )
 );
end;</programlisting> 
					 <programlisting>The current row is: Jack</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Reset.html">System.Reset</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorType.html">Cursor Type</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.FindNearest.html">System.FindNearest</ulink></para> 
		  </section> 
		  <section id="O-System.Reset"> 
				<title><indexterm> 
						  <primary>Reset - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Reset</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Reset</secondary> 
					 </indexterm>System.Reset</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Reset" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Reset</phrase> resets the current cursor.
					 
					 <phrase role="code">Reset</phrase> closes and reopens the
					 cursor. Note that regardless of whether the cursor was declared static or
					 dynamic, calling refresh will always re-evaluate the cursor expression against
					 the database.</para> 
				<example> 
					 <title>Using System.Reset</title> 
					 <programlisting>begin
	var EmployeeCursor : cursor( table { ID : Integer, Name : String });
	EmployeeCursor := cursor(Employee);
	var NewRow : row { ID : Integer, Name : String };	NewRow := row { 11 ID, "Jose" Name};	insert table { NewRow } into Employee;
	EmployeeCursor.Reset();
	EmployeeCursor.FindKey(row { 11 ID } );
	raise Error("The current row is: " + (Name from EmployeeCursor.Select() ) );
end;</programlisting> 
					 <programlisting>The current row is: Jose</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Refresh.html">System.Refresh</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorType.html">Cursor
						  Type</ulink></para> 
		  </section> 
		  <section id="O-System.Select"> 
				<title><indexterm> 
						  <primary>Select - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Select</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Select</secondary> 
					 </indexterm>System.Select</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Select" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Select</phrase> returns the current row
					 for the specified cursor. The individual elements can be accessed by
					 extraction. It is an error to call 
					 <phrase role="code">Select</phrase> when the cursor is
					 positioned on the BOF or EOF cracks.</para> 
				<example> 
					 <title>Using System.Select</title> 
					 <programlisting>begin
 var OutputString : String := "From the Beginning: ";
 var EmployeeCursor : cursor(table { ID : Integer, Name : String }) := cursor(Employee);
 try
  EmployeeCursor.First();
  while EmployeeCursor.Next() do
  begin
   OutputString := OutputString + EmployeeCursor.Select().Name + " ";
  end;
  EmployeeCursor.Last();
  OutputString := OutputString + " From the End: ";
  while EmployeeCursor.Prior() do
  begin
   OutputString := OutputString + EmployeeCursor.Select().Name + " ";
  end;
  raise Error(OutputString);
 finally
  EmployeeCursor.Close();
 end;
end;</programlisting> 
					 <programlisting>From the Beginning: Joe John Josh Jeff Jake Jeff  From the End: Jeff Jake Jeff Josh John Joe</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="olinka"
					 url="bk02pt02ch07s02s15.html">Extraction</ulink></para> 
		  </section> 
		  <section id="O-System.Update"> 
				<title><indexterm> 
						  <primary>Update - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Update</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Update</secondary> 
					 </indexterm>System.Update</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Update" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Update</phrase> updates the current row
					 of the specified cursor. It is an error to attempt to update a cursor that is
					 positioned on the BOF or EOF cracks.</para> 
				<example> 
					 <title>Using System.Update</title> 
					 <programlisting>begin
	var LCursor : cursor( table{ID: Integer, Name: String} );
	LCursor := cursor(Employee capabilities {Updateable});
	LCursor.Next();
	LCursor.Update(row{"Jim" Name});
	LCursor.Close();
end;
select Employee;</programlisting> 
					 <programlisting>Statement Executed Successfully!

ID Name
-- ----
1  Jim
2  John
3  Josh
4  Jeff
5  Jake
6  Jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingCursors.html">Using
						  Cursors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorCapabilities.html">Cursor
						  Capabilities</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement-CursorType.html">Cursor Type</ulink>
					 | 
					 <ulink type="olinkb" url="D4LGDataManipulation.html">Data
						  Manipulation</ulink></para> 
		  </section> 
		  <section id="O-System.Validate"> 
				<title><indexterm> 
						  <primary>Validate - Cursor Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Validate</secondary> 
					 </indexterm><indexterm> 
						  <primary>Cursor Operators</primary> 
						  <secondary>Validate</secondary> 
					 </indexterm>System.Validate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Validate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Validate</phrase> is a cursor level
					 operator. It allows access to the proposable calls for the cursor. It permits a
					 "what if" check.</para> 
				<para>By passing in the proposed row in 
					 <phrase role="code">ARow</phrase>, 
					 <phrase role="code">Validate</phrase> verifies that the
					 appropriate constraints have been met.</para> 
				<para>If 
					 <phrase role="code">AColumnName</phrase> is specified, only
					 that column is involved in the proposal. If 
					 <phrase role="code">AColumnName</phrase> is omitted, all
					 columns are involved.</para> 
				<para>The boolean value returned is 
					 <phrase role="code">true</phrase> if a change occured to any of
					 the columns in the row, 
					 <phrase role="code">false</phrase> if no change occured. Note
					 that 
					 <phrase role="code">true</phrase> would be returned only if a
					 validation handler were implemented.</para> 
				<example> 
					 <title>Using System.Validate</title> 
					 <programlisting>See <ulink type="xref" url="O-System.Change.html">System.Change</ulink> for the example.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Change.html">System.Change</ulink> | 
					 <ulink type="xref"
					 url="O-System.Validate.html">System.Validate</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.DateTimeOperators"> 
		  <title>Date-Time Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.ActualDate"> 
				<title><indexterm> 
						  <primary>ActualDate - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ActualDate</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>ActualDate</secondary> 
					 </indexterm>System.ActualDate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ActualDate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ActualDate</phrase> returns a 
					 <phrase role="code">Date</phrase> value representing the
					 current date. Unlike the 
					 <phrase role="code">ActualDateTime</phrase> operator, this
					 operator does not return the time. Only the date portion is returned.</para> 
				<para>Note that 
					 <phrase role="code">ActualDate</phrase> will always return the
					 current date. It is not affected by the current transaction. As a result, the
					 operator is non-repeatable, and cannot be used in contexts that require
					 repeatable expressions, such as a 
					 <phrase role="code">where</phrase> clause. For a repeatable
					 invocation, use the 
					 <phrase role="code">Date</phrase> operator.</para> 
				<para>Note also that the 
					 <phrase role="code">ActualDate</phrase> operator will return
					 the date for the machine on which it is running. In particular, if the operator
					 is invoked in a client-side context such as a proposable call, the client date
					 will be returned, rather than the server date. As a result, expressions
					 involving this operator are remotable. To ensure the server date is always
					 obtained, use the 
					 <phrase role="code">Date</phrase> operator.</para>
				<example> 
					 <title>Using System.ActualDate</title> 
					 <programlisting>select TableDee add { ActualDate() ActualDate };</programlisting> 
					 <programlisting>ActualDate
--------
14:28:56</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="xref" url="O-System.Date.html">System.Date</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ActualDateTime.html">System.ActualDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualTime.html">System.ActualTime</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type Conversions</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink></para> 
		  </section> 
		  <section id="O-System.ActualDateTime"> 
				<title><indexterm> 
						  <primary>ActualDateTime - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ActualDateTime</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>ActualDateTime</secondary> 
					 </indexterm>System.ActualDateTime</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ActualDateTime" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ActualDateTime</phrase> returns a 
					 <phrase role="code">DateTime</phrase> value representing the
					 current date and time.</para> 
				<para>Note that 
					 <phrase role="code">ActualDateTime</phrase> will always return
					 the server date and time. It is not affected by the current transaction. As a
					 result, the operator is non-repeatable, and cannot be used in contexts that
					 require repeatable expressions, such as a 
					 <phrase role="code">where</phrase> clause. For a repeatable
					 invocation, use the 
					 <phrase role="code">DateTime</phrase> operator.</para> 
				<para>Note also that the 
					 <phrase role="code">ActualDateTime</phrase> operator will
					 return the date and time for the machine on which it is running. In particular,
					 if the operator is invoked in a client-side context such as a proposable call,
					 the client date and time will be returned, rather than the server date and
					 time. As a result, expressions involving this operator are remotable. To ensure
					 the server date and time is always obtained, use the 
					 <phrase role="code">DateTime</phrase> operator.</para>
				<example> 
					 <title>Using System.ActualDateTime</title> 
					 <programlisting>select TableDee add { ActualDateTime() ActualDateTime };</programlisting> 
					 <programlisting>ActualDateTime
--------
14:28:56</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link"
					 url="T-System.DateTime.html">System.DateTime Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.DateTime.html">System.DateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualDate.html">System.ActualDate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualTime.html">System.ActualTime</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type Conversions</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink></para> 
		  </section> 
		  <section id="O-System.ActualTime"> 
				<title><indexterm> 
						  <primary>ActualTime - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ActualTime</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>ActualTime</secondary> 
					 </indexterm>System.ActualTime</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ActualTime" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ActualTime</phrase> returns a 
					 <phrase role="code">Time</phrase> value representing the
					 current time. Unlike the 
					 <phrase role="code">ActualDateTime</phrase> operator, this
					 operator does not return the Date. Only the time portion is returned.</para> 
				<para>Note that 
					 <phrase role="code">ActualTime</phrase> will always return the
					 server time. It is not affected by the current transaction. As a result, the
					 operator is non-repeatable, and cannot be used in contexts that require
					 repeatable expressions, such as a 
					 <phrase role="code">where</phrase> clause. For a repeatable
					 invocation, use the 
					 <phrase role="code">Time</phrase> operator.</para> 
				<para>Note also that the 
					 <phrase role="code">ActualTime</phrase> operator will return
					 the time for the machine on which it is running. In particular, if the operator
					 is invoked in a client-side context such as a proposable call, the client time
					 will be returned, rather than the server time. As a result, expressions
					 involving this operator are remotable. To ensure the server time is always
					 obtained, use the 
					 <phrase role="code">Time</phrase> operator.</para>
				<example> 
					 <title>Using System.ActualTime</title> 
					 <programlisting>select TableDee add { ActualTime() ActualTime };</programlisting> 
					 <programlisting>ActualTime
--------
14:28:56</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Time.html">System.Time
						  Scalar Type</ulink> | 
					 <ulink type="xref" url="O-System.Time.html">System.Time</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ActualDateTime.html">System.ActualDateTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualDate.html">System.ActualDate</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type Conversions</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink></para> 
		  </section> 
		  <section id="O-System.AddMonths"> 
				<title><indexterm> 
						  <primary>AddMonths - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>AddMonths</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>AddMonths</secondary> 
					 </indexterm>System.AddMonths</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.AddMonths" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Adds the specified number of months to the given Date or
					 DateTime and returns it.</para> 
				<example> 
					 <title>Using System.AddMonths</title> 
					 <programlisting>select
(
 TableDee add { Date().AddMonths(6) Months }
) // returns the date 6 months from today.
	union
	(
  TableDee add { AddMonths(DateTime(),-1) Months}
 ); // returns a the date represented by 1 month ago from now.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="T-System.Date.html">System.Date</ulink></para> 
		  </section> 
		  <section id="O-System.AddYears"> 
				<title><indexterm> 
						  <primary>AddYears - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>AddYears</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>AddYears</secondary> 
					 </indexterm>System.AddYears</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.AddYears" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Adds the specified number of Years to the given DateTime and
					 returns it.</para> 
				<example> 
					 <title>Using System.AddYears</title> 
					 <programlisting>select TableDee add {Date().AddYears(6) SixYears};
 // returns the date 6 years from today.
select TableDee add {AddYears(DateTime(),-1) LastYear};
 // returns the date represented by 1 year ago from now.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="T-System.Date.html">System.Date</ulink></para> 
		  </section> 
		  <section id="O-System.Date"> 
				<title><indexterm> 
						  <primary>Date - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Date</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>Date</secondary> 
					 </indexterm>System.Date</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Date" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">Date</phrase> operator, with no arguments,
					 returns a 
					 <phrase role="code">Date</phrase> value representing the
					 current date. Unlike the 
					 <phrase role="code">DateTime</phrase> operator, this operator
					 does not return the time. Only the date portion is returned.</para> 
				<para>Note that when the 
					 <phrase role="code">Date</phrase> operator is invoked within a
					 transaction, it will return the date portion of the start time of the outermost
					 transaction. This allows the 
					 <phrase role="code">Date</phrase> operator to have the
					 <emphasis>repeatable</emphasis> characteristic, although it is still
					 non-deterministic. To return the actual date independent of the current
					 transaction, use the 
					 <phrase role="code">ActualDate</phrase> operator.</para> 
				<para>Note also that the 
					 <phrase role="code">Date</phrase> operator invoked with no
					 arguments will always return the server date, regardless of whether the
					 invocation occurs server-side, or in a client-side context. This means in
					 particular that expressions involving this operator are not remotable and will
					 force a server round-trip when used in potentially client-side contexts such as
					 proposables. The 
					 <phrase role="code">ActualDate</phrase> operator can be used to
					 obtain the machine-dependent date in a client-side context.</para>
				<para>With integer year, month, and day specified, this operator
					 returns a 
					 <phrase role="code">Date</phrase> value representing the date
					 specified.</para> 
				<example> 
					 <title>Using System.Date</title> 
					 <programlisting>select Date();
select Date(2003,1,18);
select Date.Ticks(627346080000000000);</programlisting> 
					 <programlisting>2004-04-20
2003-01-18
1988-12-25</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualDate.html">System.ActualDate</ulink> |<ulink type="xref"
					 url="O-System.DateTime.html">System.DateTime</ulink> | 
					 <ulink type="xref" url="O-System.Time.html">System.Time</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.TimeSpan.html">System.TimeSpan</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-ScalarTypes-Conveyors.html">Conveyors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ScalarValues.html">Scalar Values</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type Conversions</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToDate.html">System.ToDate</ulink></para> 
		  </section> 
		  <section id="O-System.DatePart"> 
				<title><indexterm> 
						  <primary>DatePart - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DatePart</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>DatePart</secondary> 
					 </indexterm>System.DatePart</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DatePart" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DatePart</phrase> returns the date
					 portion of a 
					 <phrase role="code">DateTime</phrase> value as a 
					 <phrase role="code">Date</phrase> value.</para> 
				<example> 
					 <title>Using System.DatePart</title> 
					 <programlisting>select DateTime();
select DatePart(DateTime());</programlisting> 
					 <programlisting>2004-04-20 07:10:30
2004-04-20</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.TimePart.html">System.TimePart</ulink></para> 
		  </section> 
		  <section id="O-System.DateTime"> 
				<title><indexterm> 
						  <primary>DateTime - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DateTime</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>DateTime</secondary> 
					 </indexterm>System.DateTime</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DateTime" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">DateTime</phrase> operator, with no
					 arguments, returns a 
					 <phrase role="code">DateTime</phrase> value representing the
					 current date and time. Unlike the 
					 <phrase role="code">Date</phrase> operator, this operator
					 returns both the date and time.</para> 
				<para>Note that when the 
					 <phrase role="code">DateTime</phrase> operator is invoked
					 within a transaction, it will return the date and time of the start time of the
					 outermost transaction. This allows the 
					 <phrase role="code">DateTime</phrase> operator to have the
					 <emphasis>repeatable</emphasis> characteristic, although it is still
					 non-deterministic. To return the actual date and time independent of the
					 current transaction, use the 
					 <phrase role="code">ActualDateTime</phrase> operator.</para>
				<para>Note also that the 
					 <phrase role="code">DateTime</phrase> operator invoked with no
					 arguments will always return the server date and time, regardless of whether
					 the invocation occurs server-side, or in a client-side context. This means in
					 particular that expressions involving this operator are not remotable and will
					 force a server round-trip when used in potentially client-side contexts such as
					 proposables. The 
					 <phrase role="code">ActualDateTime</phrase> operator can be
					 used to obtain the machine-dependent date and time in a client-side
					 context.</para> 
				<para>With integer year, month, day, [hours, minutes, [seconds]]
					 specified, this operator returns a 
					 <phrase role="code">DateTime</phrase> value representing the
					 date and time specified.</para> 
				<example> 
					 <title>Using System.DateTime</title> 
					 <programlisting>select DateTime();
select DateTime(1998, 11, 22, 10, 15);
select DateTime.Ticks(631680313950000000);</programlisting> 
					 <programlisting>2004-04-20 07:25:13
1998-11-22 10:15:00
2002-09-19 11:23:15</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualDateTime.html">System.ActualDateTime</ulink> | 
					 <ulink type="xref" url="O-System.Date.html">System.Date</ulink>
					 | 
					 <ulink type="xref" url="O-System.Time.html">System.Time</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.TimeSpan.html">System.TimeSpan</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-ScalarTypes-Conveyors.html">Conveyors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ScalarValues.html">Scalar Values</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type Conversions</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToDateTime.html">System.ToDateTime</ulink></para> 
		  </section> 
		  <section id="O-System.DayOfWeek"> 
				<title><indexterm> 
						  <primary>DayOfWeek - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DayOfWeek</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>DayOfWeek</secondary> 
					 </indexterm>System.DayOfWeek</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DayOfWeek" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DayOfWeek</phrase> returns an Integer
					 from 0 to 6 representing the day of the week. Sunday is 0, Monday 1, all the
					 way to Saturday being 6.</para> 
				<example> 
					 <title>Using System.DayOfWeek</title> 
					 <programlisting>select TableDee
 add
 {
  DateTime(2004,04,19).DayOfWeek() Day19,
  DateTime(2004,04,24).DayOfWeek() Day24
 };</programlisting> 
					 <programlisting>Day19 Day24
----- -----
0     6</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.DayOfYear.html">System.DayOfYear</ulink> | 
					 <ulink type="xref"
					 url="O-System.DaysInMonth.html">System.DaysInMonth</ulink> | 
					 <ulink type="xref" url="O-System.Date.html">System.Date</ulink>
					 | 
					 <ulink type="xref" url="O-System.Time.html">System.Time</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DateTime.html">System.DateTime</ulink></para> 
		  </section> 
		  <section id="O-System.DayOfYear"> 
				<title><indexterm> 
						  <primary>DayOfYear - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DayOfYear</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>DayOfYear</secondary> 
					 </indexterm>System.DayOfYear</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DayOfYear" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Returns an Integer that represents the day of the year of the
					 specified DateTime. This will always be a number between 1 and 366.</para> 
				<example> 
					 <title>Using System.DayOfYear</title> 
					 <programlisting>select TableDee add { DateTime(2004,11,18).DayOfYear() Day };</programlisting> 
					 <programlisting>Day
---
323</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.DayOfWeek.html">System.DayOfWeek</ulink> | 
					 <ulink type="xref"
					 url="O-System.DayOfYear.html">System.DayOfYear</ulink> | 
					 <ulink type="xref"
					 url="O-System.DaysInMonth.html">System.DaysInMonth</ulink> | 
					 <ulink type="xref" url="O-System.Date.html">System.Date</ulink>
					 | 
					 <ulink type="xref" url="O-System.Time.html">System.Time</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DateTime.html">System.DateTime</ulink></para> 
		  </section> 
		  <section id="O-System.DaysInMonth"> 
				<title><indexterm> 
						  <primary>DaysInMonth - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DaysInMonth</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>DaysInMonth</secondary> 
					 </indexterm>System.DaysInMonth</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DaysInMonth" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>This returns an Integer representing the number of days in
					 the specified month of the specified year. This number will always be between
					 28 and 31 inclusive.</para> 
				<example> 
					 <title>Using System.DaysInMonth</title> 
					 <programlisting>select TableDee add { DaysInMonth(2004,2) Days }; </programlisting> 
					 <programlisting>Days
----
29</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.DayOfWeek.html">System.DayOfWeek</ulink> | 
					 <ulink type="xref"
					 url="O-System.DayOfYear.html">System.DayOfYear</ulink> | 
					 <ulink type="xref" url="O-System.Date.html">System.Date</ulink>
					 | 
					 <ulink type="xref" url="O-System.Time.html">System.Time</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DateTime.html">System.DateTime</ulink></para> 
		  </section> 
		  <section id="O-System.Duration"> 
				<title><indexterm> 
						  <primary>Duration - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Duration</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>Duration</secondary> 
					 </indexterm>System.Duration</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Duration" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>This is a TimeSpan operator that returns a positive TimeSpan
					 value for the specified value. It is equivalent to the Absolute value (<phrase
					 role="code">System.Abs</phrase>) operator for numberic values.</para> 
				<example> 
					 <title>Using System.Duration</title> 
					 <programlisting>select TableDee add { Duration(-TimeSpan.Ticks(10000000)) Duration };</programlisting> 
					 <programlisting>Duration
--------
1sec</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.TimeSpan.html">System.TimeSpan
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.Abs.html">System.Abs</ulink></para> 
		  </section> 
		  <section id="O-System.IsLeapYear"> 
				<title><indexterm> 
						  <primary>IsLeapYear - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsLeapYear</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>IsLeapYear</secondary> 
					 </indexterm>System.IsLeapYear</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsLeapYear" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsLeapYear</phrase> specifies whether or
					 not the specified year is a leap year. Leap years are years that are divisible
					 by 4, unless they are divisible by 100. If a year is divisible by 100 then it
					 is only a leap year if it is divisible by 400.</para> 
				<example> 
					 <title>Using System.IsLeapYear</title> 
					 <programlisting>select TableDee add { IsLeapYear(2000) Leap };</programlisting> 
					 <programlisting>Leap
----
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.MonthsBetween"> 
				<title><indexterm> 
						  <primary>MonthsBetween - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>MonthsBetween</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>MonthsBetween</secondary> 
					 </indexterm>System.MonthsBetween</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.MonthsBetween" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Returns the number of month boundaries crossed between
					 AStartDate and AEndDate. If AStartDate is less than AEndDate, the result will
					 be a positive value. If AStartDate is greater than AEndDate, the result will be
					 negative.</para> 
				<example> 
					 <title>Using System.MonthsBetween</title> 
					 <programlisting>select MonthsBetween(Date(2007, 1, 1), Date(2007, 4, 1)); // returns 3

select MonthsBetween(Date(2007, 4, 1), Date(2007, 1, 1)); // returns -3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="T-System.Date.html">System.Date</ulink></para> 
		  </section> 
		  <section id="O-System.Time"> 
				<title><indexterm> 
						  <primary>Time - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Time</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>Time</secondary> 
					 </indexterm>System.Time</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Time" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Time</phrase> returns a 
					 <phrase role="code">Time</phrase> representing the current
					 time. Unlike the 
					 <phrase role="code">DateTime</phrase> operator, this operator
					 does not return the Date. Only the time portion is returned.</para> 
				<para>Note that when the 
					 <phrase role="code">Time</phrase> operator is invoked within a
					 transaction, it will return the start time of the outermost transaction. This
					 allows the 
					 <phrase role="code">Time</phrase> operator to have the
					 <emphasis>repeatable</emphasis> characteristic, although it is still
					 non-deterministic. To return the actual time independent of the current
					 transaction, use the 
					 <phrase role="code">ActualTime</phrase> operator.</para> 
				<para>Note also that the 
					 <phrase role="code">Time</phrase> operator invoked with no
					 arguments will always return the server time, regardless of whether the
					 invocation occurs server-side, or in a client-side context. This means in
					 particular that expressions involving this operator are not remotable and will
					 force a server round-trip when used in potentially client-side contexts such as
					 proposables. The 
					 <phrase role="code">ActualTime</phrase> operator can be used to
					 obtain the machine-dependent time in a client-side context.</para>
				<example> 
					 <title>Using System.Time</title> 
					 <programlisting>select TableDee add { Time() Time };</programlisting> 
					 <programlisting>Time
--------
14:28:56</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Time.html">System.Time
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.ActualTime.html">System.ActualTime</ulink> | 
					 <ulink type="xref"
					 url="O-System.DateTime.html">System.DateTime</ulink> | 
					 <ulink type="xref" url="O-System.Date.html">System.Date</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.TimeSpan.html">System.TimeSpan</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-ScalarTypes-Conveyors.html">Conveyors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type Conversions</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ToTime.html">System.ToTime</ulink></para> 
		  </section> 
		  <section id="O-System.TimePart"> 
				<title><indexterm> 
						  <primary>TimePart - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>TimePart</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>TimePart</secondary> 
					 </indexterm>System.TimePart</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.TimePart" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">TimePart</phrase> returns the time
					 portion of a DateTime value as a Time value.</para> 
				<example> 
					 <title>Using System.TimePart</title> 
					 <programlisting>select TableDee add {TimePart(DateTime(2063,4,5,13,25,37)) Time};</programlisting> 
					 <programlisting>Time
--------
13:25:37</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Date.html">System.Date
						  Scalar Type</ulink> | 
					 <ulink type="link" url="T-System.DateTime.html">System.DateTime
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.DatePart.html">System.DatePart</ulink></para> 
		  </section> 
		  <section id="O-System.YearsBetween"> 
				<title><indexterm> 
						  <primary>YearsBetween - Date-Time Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>YearsBetween</secondary> 
					 </indexterm><indexterm> 
						  <primary>Date-Time Operators</primary> 
						  <secondary>YearsBetween</secondary> 
					 </indexterm>System.YearsBetween</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.YearsBetween" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Returns the number of year boundaries crossed between
					 AStartDate and AEndDate. If AStartDate is less than AEndDate, the result will
					 be a positive value. If AStartDate is greater than AEndDate, the result will be
					 negative.</para> 
				<example> 
					 <title>Using System.YearsBetween</title> 
					 <programlisting>select YearsBetween(Date(2004, 1, 1), Date(2007, 1, 1)); // returns 3

select YearsBetween(Date(2007, 1, 1), Date(2004, 1, 1)); // returns -3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="T-System.Date.html">System.Date</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.DiagnosticsOperators"> 
		  <title>Diagnostics Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.Diagnostics.DisableErrorLogging"> 
				<title><indexterm> 
						  <primary>Diagnostics.DisableErrorLogging - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.DisableErrorLogging</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.DisableErrorLogging</secondary> 
					 </indexterm>System.Diagnostics.DisableErrorLogging</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.DisableErrorLogging" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DisableErrorLogging</phrase> stops the
					 logging of errors that cross the CLI boundry.</para> 
				<example> 
					 <title>Using System.Diagnostics.DisableErrorLogging</title> 
					 <programlisting>DisableErrorLogging();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DUGP1ConfiguringtheDataphorService.html">Configuring the Dataphor
						  Service</ulink> | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.EnableErrorLogging.html">System.Diagnostics.EnableErrorLogging</ulink></para>
				
		  </section> 
		  <section id="O-System.Diagnostics.EnableErrorLogging"> 
				<title><indexterm> 
						  <primary>Diagnostics.EnableErrorLogging - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.EnableErrorLogging</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.EnableErrorLogging</secondary> 
					 </indexterm>System.Diagnostics.EnableErrorLogging</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.EnableErrorLogging" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">EnableErrorLogging</phrase> starts the
					 logging of errors that cross the CLI boundry.</para> 
				<example> 
					 <title>Using System.Diagnostics.EnableErrorLogging</title> 
					 <programlisting>EnableErrorLogging();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DUGP1ConfiguringtheDataphorService.html">Configuring the Dataphor
						  Service</ulink> | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.DisableErrorLogging.html">System.Diagnostics.DisableErrorLogging</ulink></para>
				
		  </section> 
		  <section id="O-System.Diagnostics.GetDetailedErrorDescription"> 
				<title><indexterm> 
						  <primary>Diagnostics.GetDetailedErrorDescription -
								Diagnostic Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.GetDetailedErrorDescription</secondary>
						  
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.GetDetailedErrorDescription</secondary>
						  
					 </indexterm>System.Diagnostics.GetDetailedErrorDescription</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.GetDetailedErrorDescription" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GetDetailedErrorDescription</phrase>
					 returns a detailed description of the specified error, 
					 <phrase role="code">AValue</phrase>, and inner errors
					 recursively, starting at the deepest error.</para> 
				<example> 
					 <title>Using
						  System.Diagnostics.GetDetailedErrorDescription</title> 
					 <programlisting>create operator Divide
(
 const ANumerator : Integer, const ADenominator : Integer
) : String
begin
 try
  result := ToString(ANumerator / ADenominator);
 except
  on LError : Error do
  begin
   try
    raise Error("User",500000,"This is my error",LError);
   except
    on L2Error : Error do
     result := GetDetailedErrorDescription(L2Error);
   end;
  end;
 end;
end;

select Divide(1,0);
drop operator Divide(Integer, Integer);</programlisting> 
					 <programlisting>DivideByZeroException: Attempted to divide by zero.
   at System.Decimal.Divide(Decimal d1, Decimal d2)
   at System.Decimal.op_Division(Decimal d1, Decimal d2)
   at Alphora.Dataphor.DAE.Runtime.Instructions.IntegerDivisionNode.InternalExecute(ServerProcess AProcess, DataVar[] AArguments)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\ArithmeticNodes.cs:line 946
   at Alphora.Dataphor.DAE.Runtime.Instructions.InstructionNode.InternalExecute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\InstructionNode.cs:line 207
   at Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.Execute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\PlanNode.cs:line 338
RuntimeException: Runtime error: Attempted to divide by zero.
	Exception occurred while executing the following code: (ANumerator / ADenominator)
   at Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.Execute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\PlanNode.cs:line 345
   at Alphora.Dataphor.DAE.Runtime.Instructions.TryExceptNode.InternalExecute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\ImperativeNodes.cs:line 371

DataphorException: This is my error
   at Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.Execute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\PlanNode.cs:line 358
   at Alphora.Dataphor.DAE.Runtime.Instructions.TryExceptNode.InternalExecute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\ImperativeNodes.cs:line 371
</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Diagnostics.GetErrorDecsription.html">System.Diagnostics.GetErrorDecsription</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogError.html">System.Diagnostics.LogError</ulink> | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogMessage.html">System.Diagnostics.LogMessage</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Error.html">System.Error</ulink></para> 
		  </section> 
		  <section id="O-System.Diagnostics.GetErrorDescription"> 
				<title><indexterm> 
						  <primary>Diagnostics.GetErrorDescription - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.GetErrorDescription</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.GetErrorDescription</secondary> 
					 </indexterm>System.Diagnostics.GetErrorDescription</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.GetErrorDescription" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GetErrorDescription</phrase> returns a
					 detailed description of the specified error, 
					 <phrase role="code">AValue</phrase>, and inner errors
					 recursively, starting at deepest error.</para> 
				<example> 
					 <title>Using System.Diagnostics.GetErrorDescription</title> 
					 <programlisting>create operator Divide
(
 const ANumerator : Integer, const ADenominator : Integer
) : String
begin
 try  result := ToString(ANumerator / ADenominator);
 except
  on LError : Error do
  begin   try
    raise Error("User",500000,"This is my error",LError);
   except
    on L2Error : Error do
     result := GetErrorDescription(L2Error);
   end;
  end;
 end;
end;

select Divide(1,0);
drop operator Divide(Integer, Integer);</programlisting> 
					 <programlisting>Attempted to divide by zero.
Runtime error: Attempted to divide by zero.
	Exception occurred while executing the following code: (ANumerator / ADenominator)

This is my error</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Diagnostics.GetDetailedErrorDecsription.html">System.Diagnostics.GetDetailedErrorDecsription</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogError.html">System.Diagnostics.LogError</ulink> | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogMessage.html">System.Diagnostics.LogMessage</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Error.html">System.Error</ulink></para> 
		  </section> 
		  <section id="O-System.Diagnostics.IsSupported"> 
				<title><indexterm> 
						  <primary>Diagnostics.IsSupported - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.IsSupported</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.IsSupported</secondary> 
					 </indexterm>System.Diagnostics.IsSupported</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.IsSupported" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsSupported</phrase> returns 
					 <phrase role="code">true</phrase> if 
					 <phrase role="code">AStatement</phrase> is supported by 
					 <phrase role="code">ADeviceName</phrase>, otherwise it returns 
					 <phrase role="code">falst</phrase>.</para> 
				<example> 
					 <title>Using System.Diagnostics.IsSupported</title> 
					 <programlisting>CreateLibrary
(
 LibraryDescriptor
 (
  "Lib",
  VersionNumberUndefined(),
  "Device",
  list(FileReference) {},
  list(LibraryReference)
  {
   LibraryReference("MSSQLDevice",VersionNumberUndefined()),
   LibraryReference("SimpleDevice",VersionNumberUndefined())
  }
 )
);
RegisterLibrary("Lib");
create device Device
 reconciliation { mode = { Command }, master = device }
 class "MSSQLDevice"
		attributes { "ServerName" = ".", "DatabaseName" = "Docs" };
CreateDeviceUser("System", "Device", "sa", "");
CreateDeviceUser("Admin", "Device", "sa", "");
create table SQLTable { ID : Integer, key { ID } };
select
 if IsSupported('Device', 'SQLTable group add { Count() Count }')
 then "MSSQLDevice supports Count"
 else "MSSQLDevice does not support Count";
drop table SQLTable;
drop device Device;
create device Device
 reconciliation { mode = { Command }, master = device }
 class "SimpleDevice"
  attributes
  {
   "DirectoryName" = "c:\Data",
   "AutoSave" = "true"
  };
create table SimpleTable { ID : Integer, key { ID } };
select
 if IsSupported('Device', 'SimpleTable group add { Count() Count }')
 then "SimpleDevice supports Count"
 else "SimpleDevice does not support Count";
drop table SimpleTable;
drop device Device;
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>MSSQLDevice supports Count

SimpleDevice does not support Count</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Diagnostics.GetDetailedErrorDecsription.html">System.Diagnostics.GetDetailedErrorDecsription</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogError.html">System.Diagnostics.LogError</ulink> | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogMessage.html">System.Diagnostics.LogMessage</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Error.html">System.Error</ulink></para> 
		  </section> 
		  <section id="O-System.Diagnostics.LogError"> 
				<title><indexterm> 
						  <primary>Diagnostics.LogError - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.LogError</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.LogError</secondary> 
					 </indexterm>System.Diagnostics.LogError</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.LogError" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LogError</phrase> writes the specified
					 error 
					 <phrase role="code">AError</phrase> to the Dataphor log.</para>
				
				<example> 
					 <title>Using System.Diagnostics.LogError</title> 
					 <programlisting>begin
 try
  raise Error("This is a test Error message");
 except
  on LError : Error do
  begin
   LogError(LError);
  end;
 end;
end;</programlisting> 
					 <programlisting>Entries in log file read:

2004-05-24 10:24:29.2745 Event: LogStarted
2004-05-24 10:24:41.7590 Event: ServerStarted
2004-05-24 10:36:42.9043 Error: DataphorException: This is a test Error message
   at Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.Execute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\PlanNode.cs:line 358
   at Alphora.Dataphor.DAE.Runtime.Instructions.TryExceptNode.InternalExecute(ServerProcess AProcess)
     in C:\src\Alphora\Dataphor\DAE\Runtime.Instructions\ImperativeNodes.cs:line 371</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Diagnostics.DisableErrorLogging.html">System.Diagnostics.DisableErrorLogging</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.EnableErrorLogging.html">System.Diagnostics.EnableErrorLogging</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogMessage.html">System.Diagnostics.LogMessage</ulink></para>
				
		  </section> 
		  <section id="O-System.Diagnostics.LogMessage"> 
				<title><indexterm> 
						  <primary>Diagnostics.LogMessage - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.LogMessage</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.LogMessage</secondary> 
					 </indexterm>System.Diagnostics.LogMessage</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.LogMessage" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LogMessage</phrase> writes the specified
					 message 
					 <phrase role="code">AMessage</phrase> to the Dataphor
					 log.</para> 
				<example> 
					 <title>Using System.Diagnostics.LogMessage</title> 
					 <programlisting>LogMessage("This is a test Message");</programlisting> 
					 <programlisting>Entries in log file read:

2004-05-24 10:24:29.2745 Event: LogStarted
2004-05-24 10:24:41.7590 Event: ServerStarted
2004-05-24 10:59:13.2530 This is a test Message</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Diagnostics.DisableErrorLogging.html">System.Diagnostics.DisableErrorLogging</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.EnableErrorLogging.html">System.Diagnostics.EnableErrorLogging</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.Diagnostics.LogError.html">System.Diagnostics.LogError</ulink></para>
				
		  </section> 
		  <section id="O-System.Diagnostics.ShowPlan"> 
				<title><indexterm> 
						  <primary>Diagnostics.ShowPlan - Diagnostic
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Diagnostics.ShowPlan</secondary> 
					 </indexterm><indexterm> 
						  <primary>Diagnostic Operators</primary> 
						  <secondary>Diagnostics.ShowPlan</secondary> 
					 </indexterm>System.Diagnostics.ShowPlan</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Diagnostics.ShowPlan" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ShowPlan</phrase> returns the execution
					 plan of the specified statement 
					 <phrase role="code">AStatement</phrase>.</para> 
				<example> 
					 <title>Using System.Diagnostics.ShowPlan</title> 
					 <programlisting>select ShowPlan("select 'Operators'")</programlisting> 
					 <programlisting>2214: Alphora.Dataphor.DAE.Runtime.Instructions.FrameNode
	No device
	2213: Alphora.Dataphor.DAE.Runtime.Instructions.ValueNode
		Type: System.String
		No device</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="bk02pt01ch04s02s03.html">Compiler</ulink> | 
					 <ulink type="olinkb" url="bk02pt01ch04s02s04.html">Query
						  Processor</ulink> | 
					 <ulink type="olinkb" url="DDGP2QueryChunking3.html">Query
						  Chunking</ulink> | 
					 <ulink type="olinkb" url="bk02pt04ch21s01s03s01.html">SQL
						  Language</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.DynamicExecutionOperators"> 
		  <title>Dynamic-Execution Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.Evaluate"> 
				<title><indexterm> 
						  <primary>Evaluate - Dynamic-Execution Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Evaluate</secondary> 
					 </indexterm><indexterm> 
						  <primary>Dynamic-Execution Operators</primary> 
						  <secondary>Evaluate</secondary> 
					 </indexterm>System.Evaluate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Evaluate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Evaluate</phrase> dynamically evaluates
					 the given expression and returns the result as a generic value.</para> 
				<para>If AProcessID is specified the evaluation will be performed
					 on the specified process, otherwise it will be performed on the current
					 process.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">Evaluate</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>functional</para> 
						  </listitem> 
						  <listitem> 
								<para>deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>repeatable</para> 
						  </listitem> 
						  <listitem> 
								<para>nilable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.Evaluate</title> 
					 <programlisting>select Evaluate("6 - 2");
select Evaluate("Arg1 + Arg2", row { 2 Arg1, 6 Arg2 });</programlisting> 
					 <programlisting>4
8</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Execute.html">System.Execute</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic
						  Execution</ulink></para> 
		  </section> 
		  <section id="O-System.Execute"> 
				<title><indexterm> 
						  <primary>Execute - Dynamic-Execution Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Execute</secondary> 
					 </indexterm><indexterm> 
						  <primary>Dynamic-Execution Operators</primary> 
						  <secondary>Execute</secondary> 
					 </indexterm>System.Execute</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Execute" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Execute</phrase> compiles and executes
					 the code in the string specified in 
					 <phrase role="code">AString</phrase>. It is executed as if it
					 were normal code. The string can be typed in as literals or built and placed as
					 a variable. If 
					 <phrase role="code">AProcessID</phrase> is omitted, the current
					 process will be used.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">Execute</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>non-functional</para> 
						  </listitem> 
						  <listitem> 
								<para>non-deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>non-repeatable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.Execute</title> 
					 <programlisting>create table Example in Temp
{
 PID : Integer,
 Key : String,
 key{Key}
};
insert table { row { ProcessID() PID, "Cur" Key } } into Example;
begin
 var LProcessID : Integer := StartProcess();
 insert table { row { LProcessID PID, "New" Key } } into Example;
 Execute(LProcessID, "insert table { row { ProcessID() PID, 'Pro' Key } } into Example;");
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>PID  Key
---- ---
2430 Cur
2013 New
2013 Pro</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Evaluate.html">System.Evaluate</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAs.html">System.ExecuteAs</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAsync.html">System.ExecuteAsync</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteMultiple.html">System.ExecuteMultiple</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteWithTimeout.html">System.ExecuteWithTimeout</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic
						  Execution</ulink></para> 
		  </section> 
		  <section id="O-System.ExecuteAs"> 
				<title><indexterm> 
						  <primary>ExecuteAs - Dynamic-Execution Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ExecuteAs</secondary> 
					 </indexterm><indexterm> 
						  <primary>Dynamic-Execution Operators</primary> 
						  <secondary>ExecuteAs</secondary> 
					 </indexterm>System.ExecuteAs</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ExecuteAs" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ExecuteAs</phrase> compiles and executes
					 the code in the string specified in 
					 <phrase role="code">AString</phrase>. It is executed as if it
					 were normal code and is run as the user specified in 
					 <phrase role="code">AUserID</phrase>. The string can be typed
					 in as literals or built and placed as a variable.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">ExecuteAs</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>non-functional</para> 
						  </listitem> 
						  <listitem> 
								<para>non-deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>non-repeatable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.ExecuteAs</title> 
					 <programlisting>create table Example in Temp
	 { PID : Integer, Key : String, key{Key} };
begin
 insert table { row { ProcessID() PID, "Cur" Key } } into Example;
 ExecuteAs
 (
  "insert table
  {
   row { ProcessID() PID, 'Pro' Key }
  } into Example;",
  "Admin",
  ""
 );
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>PID  Key
---- ---
2800 Cur
2753 Pro</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Evaluate.html">System.Evaluate</ulink> | 
					 <ulink type="xref"
					 url="O-System.Execute.html">System.Execute</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAsync.html">System.ExecuteAsync</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteMultiple.html">System.ExecuteMultiple</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteWithTimeout.html">System.ExecuteWithTimeout</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic
						  Execution</ulink></para> 
		  </section> 
		  <section id="O-System.ExecuteAsync"> 
				<title><indexterm> 
						  <primary>ExecuteAsync - Dynamic-Execution
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ExecuteAsync</secondary> 
					 </indexterm><indexterm> 
						  <primary>Dynamic-Execution Operators</primary> 
						  <secondary>ExecuteAsync</secondary> 
					 </indexterm>System.ExecuteAsync</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ExecuteAsync" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ExecuteAsync</phrase> compiles and
					 executes the code in the string specified in 
					 <phrase role="code">AString</phrase>. It is executed as if it
					 were normal code and is run on the specified process 
					 <phrase role="code">AProcessID</phrase>. The string can be
					 typed in as literals or built and placed as a variable. If 
					 <phrase role="code">AProcessID</phrase> is omitted, the current
					 process will be used.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">ExecuteAsync</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>non-functional</para> 
						  </listitem> 
						  <listitem> 
								<para>non-deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>non-repeatable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.ExecuteAsync</title> 
					 <programlisting>create table Example in Temp
{
 PID : Integer,
 Key : String,
 key{Key}
};
insert table { row { ProcessID() PID, "Cur" Key } } into Example;
begin
 var LProcessID : Integer := StartProcess();
 insert table { row { LProcessID PID, "New" Key } } into Example;
 ExecuteAsync
 (
  LProcessID,
  "insert table
  {
   row { ProcessID() PID, 'Pro' Key }
  } into Example;" );
 StopProcess(LProcessID);
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>PID  Key 
---- --- 
2703 Cur 
2696 New 
2696 Pro</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Evaluate.html">System.Evaluate</ulink> | 
					 <ulink type="xref"
					 url="O-System.Execute.html">System.Execute</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAs.html">System.ExecuteAs</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteMultiple.html">System.ExecuteMultiple</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteWithTimeout.html">System.ExecuteWithTimeout</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic
						  Execution</ulink></para> 
		  </section> 
		  <section id="O-System.ExecuteMultiple"> 
				<title><indexterm> 
						  <primary>ExecuteMultiple - Dynamic-Execution
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ExecuteMultiple</secondary> 
					 </indexterm><indexterm> 
						  <primary>Dynamic-Execution Operators</primary> 
						  <secondary>ExecuteMultiple</secondary> 
					 </indexterm>System.ExecuteMultiple</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ExecuteMultiple" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ExecuteMultiple</phrase> compiles and
					 executes the code in the string specified in 
					 <phrase role="code">AString</phrase>. It is executed as if it
					 were normal code and repeated 
					 <phrase role="code">ANumber</phrase> times. The string can be
					 typed in as literals or built and placed as a variable. Optionally a 
					 <phrase role="code">AUserID</phrase> and 
					 <phrase role="code">APassword</phrase> can be specified in
					 which case the code will be executed as the specified user.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">ExecuteMultiple</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>non-functional</para> 
						  </listitem> 
						  <listitem> 
								<para>non-deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>non-repeatable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.ExecuteMultiple</title> 
					 <programlisting>create table Example in Temp
	 { TString : String, key{} };
insert table { row { "" TString } } into Example;
ExecuteMultiple
(
 "update Example set { TString := TString + 'x' };",
 5
);
select Example;
drop table Example;</programlisting> 
					 <programlisting>TString 
------- 
xxxxx</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Evaluate.html">System.Evaluate</ulink> | 
					 <ulink type="xref"
					 url="O-System.Execute.html">System.Execute</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAs.html">System.ExecuteAs</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAsync.html">System.ExecuteAsync</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteWithTimeout.html">System.ExecuteWithTimeout</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic
						  Execution</ulink></para> 
		  </section> 
		  <section id="O-System.ExecuteWithTimeout"> 
				<title><indexterm> 
						  <primary>ExecuteWithTimeout - Dynamic-Execution
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ExecuteWithTimeout</secondary> 
					 </indexterm><indexterm> 
						  <primary>Dynamic-Execution Operators</primary> 
						  <secondary>ExecuteWithTimeout</secondary> 
					 </indexterm>System.ExecuteWithTimeout</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ExecuteWithTimeout" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ExecuteWithTimeout</phrase> compiles and
					 executes the code in the string specified in 
					 <phrase role="code">AString</phrase>. It is executed as if it
					 were normal code and, optionally, is run on the specified process 
					 <phrase role="code">AProcessID</phrase>. If AProcessID is not
					 specified, execution will be in the current process. The string can be typed in
					 as literals or built and placed as a variable. 
					 <phrase role="code">ATimeout</phrase> is the number of
					 milliseconds to wait for the code to execute. If the code does not finish in
					 the specified time an error will occur.</para> 
				<para>By default, the inferred characteristics for the 
					 <phrase role="code">ExecuteWithTimeout</phrase> operator are: 
					 <itemizedlist> 
						  <listitem> 
								<para>non-literal</para> 
						  </listitem> 
						  <listitem> 
								<para>non-functional</para> 
						  </listitem> 
						  <listitem> 
								<para>non-deterministic</para> 
						  </listitem> 
						  <listitem> 
								<para>non-repeatable</para> 
						  </listitem> 
					 </itemizedlist></para> 
				<example> 
					 <title>Using System.ExecuteWithTimeout</title> 
					 <programlisting>create table Example in Temp
	 { TString : String, key{} };
insert table { row { "" TString } } into Example;
ExecuteWithTimeout
(
 "
  for I : Integer := 0 to 9 do
   update Example
    set { TString := TString + ToString(I) };
 ",
 100 );
select Example;
drop table Example;</programlisting> 
					 <programlisting>TString
----------
0123456789</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-Frontend.ExecuteScript.html">Frontend.ExecuteScript</ulink> | 
					 <ulink type="xref"
					 url="O-System.Evaluate.html">System.Evaluate</ulink> | 
					 <ulink type="xref"
					 url="O-System.Execute.html">System.Execute</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAs.html">System.ExecuteAs</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAsync.html">System.ExecuteAsync</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteMultiple.html">System.ExecuteMultiple</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGProgrammingTopics-DynamicExecution.html">Dynamic
						  Execution</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.ExtractorOperators"> 
		  <title>Extractor Operators</title> 
		  <para></para> 
		  <section id="O-System.iIndexer"> 
				<title><indexterm> 
						  <primary>iIndexer</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>[] (Indexer) (Declaration)</secondary> 
					 </indexterm><indexterm> 
						  <primary>[] - (Indexer) (Declaration)</primary> 
					 </indexterm><indexterm> 
						  <primary>Extractor Operators</primary> 
						  <secondary>[] (Indexer) (Declaration)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Indexer ([]) (Declaration)</primary> 
					 </indexterm>System.iIndexer</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iIndexer" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">[]</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iIndexer</phrase>. 
					 <phrase role="code">iIndexer</phrase> is an extractor operator.
					 The 
					 <phrase role="code">iIndexer</phrase> operator is overloaded
					 for tables, lists, and strings, and may be overloaded for other types by using
					 the operator name iIndexer.</para> 
				<note> 
					 <para>List and string indexes are zero-based.</para> 
				</note> 
				<example> 
					 <title>Using System.iIndexer with lists</title> 
					 <para>For a list, the indexer returns the element of the list
						  specified by the index.</para> 
					 <programlisting>select "The element at index position 2 in the list 'AA BB CC DD' is "
 + { "AA", "BB", "CC", "DD" }[2]
 + ".";</programlisting> 
					 <programlisting>The element at index position 2 in the list 'AA BB CC DD' is CC.</programlisting> 
				</example> 
				<example> 
					 <title>Using System.iIndexer with strings</title> 
					 <para>For a string, the indexer returns the character in the
						  position specified by the index.</para> 
					 <programlisting>select "The character at index position 2 in the string 'abcde' is "
 + "abcde"[2]
 + ".";</programlisting> 
					 <programlisting>The character at index position 2 in the string 'abcde' is c.</programlisting> 
				</example> 
				<example> 
					 <title>Using System.iIndexer with tables</title> 
					 <para>For a table, the indexer returns a row.</para> 
					 <para>See 
						  <ulink type="olinkb"
						  url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer
								Expression</ulink> for more details about using indexer expressions with
						  tables.</para> 
					 <para>In some of the following examples the 
						  <ulink type="olinkb"
						  url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
								Expession</ulink> (period) is used as a column extractor.</para> 
					 <programlisting>create table ExtractorExample in Temp
{
 Sign : String,
 Shape : String,
 Colors : String,
 key { Sign }
};
ExtractorExample := table
{
 row { "Stop" Sign, "Octagon" Shape, "Red and White" Colors },
 row { "Yield", "Triangle", "Red and White" },
 row { "School", "Pentagon", "Yellow and Black" }
};
select "Yield signs are "
 + ExtractorExample["Yield"].Colors
 + ".";
select "Octagon shaped signs are "
 + ExtractorExample["Octagon" by { Shape } ].Sign
 + "signs.";
select table { ExtractorExample["Yellow and Black" by { Colors } ] };

// The next statement returns nothing (nil) because
// 'Octagon' is not a value in the key column
// and the by clause was not used.

select ExtractorExample["Octagon"];

// The next statement (which is commented out)
// will cause an error to be thrown at run time
// because it results in more than on row.

// select ExtractorExample["Red and White" by { Colors } ].Sign;

// The next statement works because it returns only one row. 

select ExtractorExample["Triangle", "Red and White" by { Shape, Colors } ].Sign;

drop table ExtractorExample;</programlisting> 
					 <programlisting>Yield signs are Red and White.

Octagon shaped signs are Stop signs.

Sign   Shape    Colors           
------ -------- ---------------- 
School Pentagon Yellow and Black 

&lt;No Value&gt;

Row extractor expression must reference a table expression with
 at most one row.
Use a restriction or quota query to limit the number of rows in
 the source table expression.

Yield</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer
						  Expression</ulink> | 
					 <ulink type="xref"
					 url="O-System.iLeftJoin.html">System.iIndexer</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingLists">Using Lists</ulink>
					 | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.GeneratorOperators"> 
		  <title>Generator Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.CreateGenerators"> 
				<title><indexterm> 
						  <primary>CreateGenerators - Generator Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateGenerators</secondary> 
					 </indexterm><indexterm> 
						  <primary>Generator Operators</primary> 
						  <secondary>CreateGenerators</secondary> 
					 </indexterm>System.CreateGenerators</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateGenerators" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CreateGenerators</phrase> creates a 
					 <phrase role="code">Generators</phrase> table and 
					 <phrase role="code">GetNextGenerator</phrase> operator in the
					 current library. 
					 <note> 
						  <para><ulink type="xref"
								url="O-System.EnsureGenerators.html">EnsureGenerators</ulink> will first check
								to see if the 
								<phrase role="code">Generators</phrase> table already
								exists and will call 
								<phrase role="code">CreateGenerators</phrase> only if
								necessary.</para> 
					 </note> </para> 
				<para>The 
					 <phrase role="code">Generators</phrase> table is created using
					 the following statement: 
					 <programlisting><emphasis role="bold">create table</emphasis> Generators
{
	ID : System.Name,
	NextKey : System.Integer,
	<emphasis role="bold">key</emphasis> { ID }
} <emphasis role="bold">tags</emphasis> { DAE.ShouldTranslate = 'false' };</programlisting></para> 
				<para>The 
					 <phrase role="code">GetNextGenerator</phrase> operator is
					 created using the following script: 
					 <programlisting><emphasis role="bold">create operator</emphasis> GetNextGenerator(<emphasis role="bold">const</emphasis> AID : System.Name) : System.Integer
<emphasis role="bold">begin</emphasis>
	<emphasis role="bold">update</emphasis> Generators
		<emphasis role="bold">set</emphasis> { NextKey := NextKey + 1 } 
		<emphasis role="bold">where</emphasis> ID = AID;
	<emphasis role="bold">if not exists</emphasis> (Generators <emphasis role="bold">where</emphasis> ID = AID) <emphasis role="bold">then</emphasis>
		<emphasis role="bold">insert table</emphasis> { <emphasis role="bold">row</emphasis> { AID ID, 2 NextKey } }
			<emphasis role="bold">into</emphasis> Generators;
	<emphasis role="bold">result</emphasis> := Generators[AID].NextKey - 1;
<emphasis role="bold">end</emphasis>
	<emphasis role="bold">tags</emphasis> 
	{ 
		DAE.IsDeterministic = 'false', 
		DAE.IsRepeatable = 'false', 
		DAE.ShouldTranslate = 'false' 
	};
				
<emphasis role="bold">grant usage on</emphasis> GetNextGenerator(System.Name)
	<emphasis role="bold">to role</emphasis> System.User;</programlisting></para> 
				<example> 
					 <title>Using System.CreateGenerators</title> 
					 <programlisting>CreateGenerators();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.EnsureGenerators.html">System.EnsureGenerators</ulink> | 
					 <ulink type="olinka" url="bk01pt02ch06s03s01s03.html">Ensure
						  Generators (Tutorial)</ulink></para> 
		  </section> 
		  <section id="O-System.EnsureGenerators"> 
				<title><indexterm> 
						  <primary>EnsureGenerators - Generator Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>EnsureGenerators</secondary> 
					 </indexterm><indexterm> 
						  <primary>Generator Operators</primary> 
						  <secondary>EnsureGenerators</secondary> 
					 </indexterm>System.EnsureGenerators</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.EnsureGenerators" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">EnsureGenerators</phrase> ensures that a 
					 <phrase role="code">Generators</phrase> table exists. If one
					 does not exist, the 
					 <phrase role="code">CreateGenerators</phrase> operator is used
					 to create a 
					 <phrase role="code">Generators</phrase> table and a 
					 <phrase role="code">GetNextGenerator</phrase> operator.</para> 
				<example> 
					 <title>Using System.EnsureGenerators</title> 
					 <programlisting>EnsureGenerators();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.CreateGenerators.html">System.CreateGenerators</ulink> | 
					 <ulink type="olinka" url="bk01pt02ch06s03s01s03.html">Ensure
						  Generators (Tutorial)</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.GuidOperators"> 
		  <title>GUID Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.NameFromGuid"> 
				<title><indexterm> 
						  <primary>NameFromGuid - GUID Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>NameFromGuid</secondary> 
					 </indexterm><indexterm> 
						  <primary>GUID Operators</primary> 
						  <secondary>NameFromGuid</secondary> 
					 </indexterm>System.NameFromGuid</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.NameFromGuid" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">NameFromGuid</phrase> takes a 
					 <phrase role="code">Guid</phrase> value and returns a valid 
					 <phrase role="code">Name</phrase> value. It is formed by taking
					 the Guid, as a string, changing all the dashes to underscores, and prepending
					 "Object_".</para> 
				<example> 
					 <title>Using System.NameFromGuid</title> 
					 <programlisting>select NameFromGuid(Guid("12345678-1234-1234-1234-123456789012"));</programlisting> 
					 <programlisting>Object_12345678_1234_1234_1234_123456789012</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Guid.html">System.Guid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.NewGuid.html">System.NewGuid</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ScalarValues.html">Scalar Values</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-ScalarTypes-Conveyors.html">Domains, Conveyors</ulink>
					 | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type
						  Conversion</ulink></para> 
		  </section> 
		  <section id="O-System.NewGuid"> 
				<title><indexterm> 
						  <primary>NewGuid - GUID Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>NewGuid</secondary> 
					 </indexterm><indexterm> 
						  <primary>GUID Operators</primary> 
						  <secondary>NewGuid</secondary> 
					 </indexterm>System.NewGuid</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.NewGuid" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">NewGuid</phrase> returns a new unique
					 GUID. These GUIDs are generated by the system and are guaranteed to be globally
					 unique.</para> 
				<example> 
					 <title>Using System.NewGuid</title> 
					 <programlisting>select TableDee add { NewGuid() Guid };</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Guid.html">System.Guid</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToGuid.html">System.ToGuid</ulink> | 
					 <ulink type="xref"
					 url="O-System.NameFromGuid.html">System.NameFromGuid</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ScalarValues.html">Scalar Values</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-ScalarTypes-Conveyors.html">Scalar Types,
						  Conveyors</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-TypeConversions.html">Type
						  Conversion</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.ListOperators"> 
		  <title>List Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.Add"> 
				<title><indexterm> 
						  <primary>Add - List Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Add</secondary> 
					 </indexterm><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>Add</secondary> 
					 </indexterm>System.Add</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Add" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Adds an element to a list. It returns the index of the new
					 item. This index will be one less than the size of the list after the
					 insert.</para> 
				<example> 
					 <title>Using System.Add</title> 
					 <programlisting>begin
	var EmpList : list(String) := list(String){};
	var EmpCur : cursor(table{ID: Integer, Name: String});
	EmpCur := cursor(Employee);
	EmpCur.Next();
	while not EmpCur.EOF() do
	begin
		EmpList.Add(Name from EmpCur.Select());
		EmpCur.Next();		
	end;
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingLists">Using Lists</ulink>
					 | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-ListTypes.html">List Types</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ListValues.html">List Values</ulink></para> 
		  </section> 
		  <section id="O-System.Clear"> 
				<title><indexterm> 
						  <primary>Clear - List Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Clear</secondary> 
					 </indexterm><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>Clear</secondary> 
					 </indexterm>System.Clear</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Clear" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Clear</phrase> clears the specified
					 list.</para> 
				<example> 
					 <title>Using System.Clear</title> 
					 <programlisting>begin
 var EmpList : list(String) := list(String){};
 var EmpCur : cursor(table{ID: Integer, Name: String});
 EmpCur := cursor(Employee);
 EmpCur.Next();
 while not EmpCur.EOF() do
 begin
  EmpList.Add(Name from EmpCur.Select());
  EmpCur.Next();		
 end;
 EmpList.Clear();
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Remove.html">System.Remove</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingLists">Using
						  Lists</ulink></para> 
		  </section> 
		  <section id="O-System.iInListOperator.html"> 
				<title><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>in</secondary> 
					 </indexterm>System.iIn</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">in</phrase> is the parser recognized
					 symbol for the membership operator 
					 <phrase role="code">iIn</phrase>. The 
					 <phrase role="code">in</phrase> operator is a table, row, and
					 list operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref" url="O-System.iIn.html">System.iIn table
						  operator</ulink></para> 
		  </section> 
		  <section id="O-System.iIndexerListOperator"> 
				<title><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>[]</secondary> 
					 </indexterm><phrase
					 role="code">iIndexer</phrase>System.iIndexer (List)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">[]</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iIndexer</phrase>. 
					 <phrase role="code">iIndexer</phrase> is an extractor
					 operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.iIndexer.html">System.iIndexer</ulink></para> 
		  </section> 
		  <section id="O-System.IndexOfListOperator"> 
				<title><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>IndexOf</secondary> 
					 </indexterm>System.IndexOf</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>See 
					 <ulink type="xref"
					 url="O-System.IndexOf.html">System.IndexOf</ulink></para> 
		  </section> 
		  <section id="O-System.InsertListOperator"> 
				<title><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>Insert</secondary> 
					 </indexterm>System.Insert (List)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><ulink type="xref" url="O-System.Insert.html"><phrase
						  role="code">System.Insert</phrase></ulink> is a Cursor, List, and String
					 operator. See 
					 <ulink type="xref"
					 url="O-System.Insert.html">System.Insert</ulink>.</para> 
		  </section> 
		  <section id="O-System.Remove"> 
				<title><indexterm> 
						  <primary>Remove - List &amp; String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Remove</secondary> 
					 </indexterm><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>Remove</secondary> 
					 </indexterm>System.Remove</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Remove" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>As a string operator, 
					 <phrase role="code">Remove</phrase> removes 
					 <phrase role="code">ALength</phrase> characters from 
					 <phrase role="code">AString</phrase> starting at 
					 <phrase role="code">AStartIndex</phrase>.</para> 
				<para>As a list operator, 
					 <phrase role="code">Remove</phrase> removes 
					 <phrase role="code">AValue</phrase> from 
					 <phrase role="code">AList</phrase>. If the item is not in the
					 list then an exception is thrown. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.Remove</title> 
					 <programlisting>create table Test in Temp { TestString : String };
begin
 var CurrString : String;
 var CurrList : list(String) :=
 {
  "Michelle",
  "Melinda",
  "Melissa",
  "Melody",
  "Margaret"
 };
 CurrList.Remove("Michelle");
 CurrString :=
  CurrList[0] + " " + CurrList[1]
  + " " + CurrList[2] + " " + CurrList[3];
 insert table { row { CurrString TestString } } into Test;
 CurrString := CurrString.Remove(7, 8);
 insert table { row { CurrString TestString } } into Test;
end;
select Test;
drop table Test;</programlisting> 
					 <programlisting>TestString
-------------------------------
Melinda Melissa Melody Margaret
Melinda Melody Margaret</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.RemoveAt.html">System.RemoveAt</ulink> | 
					 <ulink type="xref"
					 url="O-System.Insert.html">System.Insert</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingLists">Using
						  Lists</ulink></para> 
		  </section> 
		  <section id="O-System.RemoveAt"> 
				<title><indexterm> 
						  <primary>RemoveAt - List Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RemoveAt</secondary> 
					 </indexterm><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>RemoveAt</secondary> 
					 </indexterm>System.RemoveAt</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RemoveAt" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RemoveAt</phrase> removes the item at the
					 specified index from the specified list. If the index is not in the list then
					 an exception is thrown. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.RemoveAt</title> 
					 <programlisting>begin
 var CurrList : list :=
 {
  "Michelle",
  "Melinda",
  "Melissa",
  "Melody",
  "Margaret"
 };
 CurrList.RemoveAt(1);
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Remove.html">System.Remove</ulink> | 
					 <ulink type="xref"
					 url="O-System.Insert.html">System.Insert</ulink> | 
					 <ulink type="olinka"
					 url="DDGModelingProcessLogic-ValuesandVariables-UsingLists">Using
						  Lists</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.LibraryOperators"> 
		  <title>Library Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.AttachLibrary"> 
				<title><indexterm> 
						  <primary>AttachLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>AttachLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>AttachLibrary</secondary> 
					 </indexterm>System.AttachLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.AttachLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">AttachLibrary</phrase> attaches an
					 existing library to the Dataphor Server and makes that library avaiable for
					 registration or loading.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link"
					 url="O-System.DetachLibrary.html">System.DetachLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="olinkb"
					 url="DDGWorkingWithLibraries.html"><citetitle>Working With
								Libraries</citetitle></ulink></para> 
		  </section> 
		  <section id="O-System.Compatible"> 
				<title><indexterm> 
						  <primary>Compatible - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Compatible</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>Compatible</secondary> 
					 </indexterm>System.Compatible</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Compatible" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Compatible</phrase> compares two version
					 numbers. 
					 <phrase role="code">Returns</phrase> 
					 <phrase role="code">true</phrase> if 
					 <phrase role="code">ATarget</phrase> matches all digits
					 specified in 
					 <phrase role="code">ASource</phrase>, if not returns
					 <token>false</token>.</para> 
				<example> 
					 <title>Using System.Compatible</title> 
					 <programlisting>select Compatible
(
 "1.2.*".ToVersionNumber(),
 "1.2.3.2".ToVersionNumber()
);</programlisting> 
					 <programlisting>True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link"
					 url="T-System.VersionNumber.html">System.VersionNumber Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsUndefined.html">System.IsUndefined</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ScalarValues.html">Scalar
						  Values</ulink></para> 
		  </section> 
		  <section id="O-System.CreateLibrary"> 
				<title><indexterm> 
						  <primary>CreateLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>CreateLibrary</secondary> 
					 </indexterm>System.CreateLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CreateLibrary</phrase> creates a new
					 library using the specified LibraryDescriptor.</para> 
				<example> 
					 <title>Using System.CreateLibrary</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ReguiredLibraries.html">System.ReguiredLibraries</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibraryDescriptor.html">System.SetLibraryDescriptor</ulink></para>
				
		  </section> 
		  <section id="O-System.DependentLibraries"> 
				<title><indexterm> 
						  <primary>DependentLibraries, Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DependentLibraries</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>DependentLibraries</secondary> 
					 </indexterm>System.DependentLibraries</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DependentLibraries" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DependentLibraries</phrase> returns a
					 table listing the libraries that depend on the specified library 
					 <phrase role="code">ALibraryName</phrase>. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">true</phrase> (or omitted) ALL libraries
					 that depend on 
					 <phrase role="code">ALibraryName</phrase> will be listed. This
					 includes any libraries that depend on the libraries that depend on 
					 <phrase role="code">ALibraryName</phrase>, and so on. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">false</phrase> only the libraries that
					 depend on 
					 <phrase role="code">ALibraryName</phrase> itself will be
					 listed.</para> 
				<example> 
					 <title>Using System.DependentLibraries</title> 
					 <programlisting>select DependentLibraries("System", false) where Sequence &lt; 5;
select DependentLibraries("System", true) where Sequence &lt; 5;</programlisting> 
					 <programlisting>Library_Name Sequence Level
------------ -------- -----
General      1        1
SimpleDevice 2        1
Connection   3        1
SQLDevice    4        1</programlisting> 
					 <programlisting>Library_Name Sequence Level
------------ -------- -----
General      1        1
SimpleDevice 2        1
Frontend     3        2
Security     4        3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.RequiredLibraries.html">System.RequiredLibraries</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibraryDescriptor.html">System.SetLibraryDescriptor</ulink></para>
				
		  </section> 
		  <section id="O-System.DetachLibrary"> 
				<title><indexterm> 
						  <primary>DetachLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DetachLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>DetachLibrary</secondary> 
					 </indexterm>System.DetachLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DetachLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DetachLibrary</phrase> detaches an
					 available library from the Dataphor Server. The library must be unloaded in
					 order to be attached. Once a library is detached, it will no longer be
					 available for reference by other libraries. Note that if the library is
					 contained within one of the configured library directories for the Dataphor
					 Server, it will be available again the next time the server is started.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link"
					 url="O-System.AttachLibrary.html">System.AttachLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropLibrary.html">System.DropLibrary</ulink> | 
					 <ulink type="olinkb"
					 url="DDGWorkingWithLibraries.html"><citetitle>Working With
								Libraries</citetitle></ulink></para> 
		  </section> 
		  <section id="O-System.DropLibrary"> 
				<title><indexterm> 
						  <primary>DropLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DropLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>DropLibrary</secondary> 
					 </indexterm>System.DropLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DropLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DropLibrary</phrase> deletes the
					 specified library. To drop a library it must be unloaded or
					 unregistered.</para> 
				<example> 
					 <title>Using System.DropLibrary</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink></para> 
		  </section> 
		  <section id="O-System.GetDefaultDeviceName"> 
				<title><indexterm> 
						  <primary>GetDefaultDeviceName - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GetDefaultDeviceName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>GetDefaultDeviceName</secondary> 
					 </indexterm>System.GetDefaultDeviceName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GetDefaultDeviceName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GetDefaultDeviceName</phrase> gets the
					 default device name for the current session of Dataphor. All base table
					 variables are created in the default device unless another device is specified
					 in the create table statement. Because the device is specified by name, it does
					 not have to exist when 
					 <phrase role="code">SetDefaultDeviceName</phrase> is called. If
					 the device does not exist when the default device is accessed, by a create or
					 other operation, D4 raises an exception. Optionally the library (<phrase
					 role="code">ALibraryName</phrase>) name can be specified.</para> 
				<example> 
					 <title>Using System.GetDefaultDeviceName</title> 
					 <programlisting>select GetDefaultDeviceName("Sample.Common");</programlisting> 
					 <programlisting>SampleDevice</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDefaultDeviceName.html">System.SetDefaultDeviceName</ulink></para>
				
		  </section> 
		  <section id="O-System.GetLibraryDescriptor"> 
				<title><indexterm> 
						  <primary>GetLibraryDescriptor - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GetLibraryDescriptor</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>GetLibraryDescriptor</secondary> 
					 </indexterm>System.GetLibraryDescriptor</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GetLibraryDescriptor" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GetLibraryDescriptor</phrase> returns the
					 LibraryDescriptor for the specified library.</para> 
				<example> 
					 <title>Using System.GetLibraryDescriptor</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
select GetLibraryDescriptor("Lib").Name;
select GetLibraryDescriptor("Lib").Version;
select GetLibraryDescriptor("Lib").DefaultDeviceName;
select GetLibraryDescriptor("Lib").Files.Count();
select GetLibraryDescriptor("Lib").Requisites.Count();
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib
*
Temp
0
0</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink></para> 
		  </section> 
		  <section id="O-System.IsUndefined"> 
				<title><indexterm> 
						  <primary>IsUndefined - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsUndefined</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>IsUndefined</secondary> 
					 </indexterm>System.IsUndefined</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsUndefined" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsUndefined</phrase> returns 
					 <phrase role="code">true</phrase> if the specified 
					 <phrase role="code">VersionNumber</phrase>, 
					 <phrase role="code">AValue</phrase>, is the special 
					 <phrase role="code">VersionNumber</phrase> value 
					 <phrase role="code">VersionNumberUndefined</phrase>. Otherwise
					 false is returned.</para> 
				<example> 
					 <title>Using System.IsUndefined</title> 
					 <programlisting>create session table Example in Temp
{
 VersNbr : VersionNumber,
 key{VersNbr}
};
begin
	insert table { row { VersionNumberUndefined() VersNbr } } into Example;
	insert table { row { "2.3.*".ToVersionNumber() VersNbr } } into Example;
	insert table { row { "2.3.4.5".ToVersionNumber() VersNbr } } into Example;
end;
select Example
	add { VersNbr.IsUndefined() UnDefined };
drop table Example;</programlisting> 
					 <programlisting>VersNbr UnDefined
------- ---------
*       True
2.3.*   False
2.3.4.5 False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.VersionNumber.html">System.VersionNumber</ulink> | 
					 <ulink type="xref"
					 url="O-System.ToVersionNumber.html">System.ToVersionNumber</ulink></para> 
		  </section> 
		  <section id="O-System.LibraryName"> 
				<title><indexterm> 
						  <primary>LibraryName - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LibraryName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>LibraryName</secondary> 
					 </indexterm>System.LibraryName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LibraryName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LibraryName</phrase> returns the current
					 library name if no argument is provided.</para> 
				<para><phrase role="code">LibraryName</phrase> returns the name of
					 the library with the specified ObjectID if the argument, 
					 <phrase role="code">AObjectID</phrase>, is provided.</para> 
				<para><phrase role="code">LibraryName</phrase> returns the name of
					 the library with the specified ObjectName if the argument, 
					 <phrase role="code">AObjectName</phrase>, is provided.</para> 
				<example> 
					 <title>Using System.LibraryName</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink></para> 
		  </section> 
		  <section id="O-System.LibrarySetting"> 
				<title><indexterm> 
						  <primary>LibrarySetting - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LibrarySetting</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>LibrarySetting</secondary> 
					 </indexterm>System.LibrarySetting</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LibrarySetting" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LibrarySetting</phrase>, when invoked
					 with the 
					 <phrase role="code">ALibraryName</phrase> and 
					 <phrase role="code">ASettingName</phrase> arguments, returns
					 the value of the 
					 <phrase role="code">ASettingName</phrase> setting defined in
					 the library 
					 <phrase role="code">ALibraryName</phrase>. If the setting is
					 not defined for the library, 
					 <ulink type="olinka" url="D4LGNilSemantics.html"><phrase
						  role="code">nil</phrase></ulink> is returned.</para> 
				<para><phrase role="code">LibrarySetting</phrase>, when invoked
					 with only the 
					 <phrase role="code">ASettingName</phrase> argument, returns the
					 value of the 
					 <phrase role="code">ASettingName</phrase> setting defined in
					 the first library in a breath-first traversal of the library dependency graph
					 beginning with the current library. If the setting is defined in more than one
					 library at any level of the traversal, an ambiguous setting error is thrown. If
					 the setting is not found 
					 <ulink type="olinka" url="D4LGNilSemantics.html"><phrase
						  role="code">nil</phrase></ulink> is returned.</para> 
				<example> 
					 <title>Using System.LibrarySetting</title> 
					 <programlisting>CreateLibrary
(
 LibraryDescriptor
 ("RequiredLib",
  VersionNumberUndefined(),
  "Temp"
 )
);
CreateLibrary
(
 LibraryDescriptor
 ("ExampleLib",
  VersionNumberUndefined(),
  "Temp",
  list(FileReference) {},
  list(LibraryReference) { LibraryReference("RequiredLib",VersionNumberUndefined()) }
 )
);
select LibrarySetting("SettingA");
select LibrarySetting("ExampleLib", "SettingB");
RegisterLibrary("ExampleLib");
insert
 table
 {
  row { "RequiredLib" Library_Name, "SettingA" Name, "ValueA" Value },
  row { "ExampleLib", "SettingB", "ValueB" }
 } into LibrarySettings;
select LibrarySetting("SettingA");
select LibrarySetting("ExampleLib", "SettingB");
UnregisterLibrary("ExampleLib");
UnregisterLibrary("RequiredLib");
DropLibrary("ExampleLib");
DropLibrary("RequiredLib");</programlisting> 
					 <programlisting>&lt;No Value&gt;
&lt;No Value&gt;
ValueA
ValueB</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="bk01pt01ch02s03s02s01s04.html">Library Settings</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Libraries.html">Libraries</ulink></para> 
		  </section> 
		  <section id="O-System.RefreshLibraries"> 
				<title><indexterm> 
						  <primary>RefreshLibraries - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RefreshLibraries</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>RefreshLibraries</secondary> 
					 </indexterm>System.RefreshLibraries</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RefreshLibraries" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RefreshLibraries</phrase> ensures that
					 the Dataphor server has all the libraries in the library directory. There are
					 no arguments and nothing is returned.</para> 
				<example> 
					 <title>Using System.RefreshLibraries</title> 
					 <programlisting>RefreshLibraries();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s08.html">Library
						  Implementation</ulink></para> 
		  </section> 
		  <section id="O-System.RegisterLibrary"> 
				<title><indexterm> 
						  <primary>RegisterLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RegisterLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>RegisterLibrary</secondary> 
					 </indexterm>System.RegisterLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RegisterLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RegisterLibrary</phrase> registers the
					 specified library so that it can be used. For more information on libraries,
					 see the Working With Libraries chapter in the Dataphor Developer's
					 Guide.</para> 
				<para>The 
					 <phrase role="code">AWithReconciliation</phrase> option
					 indicates whether device-level communication should be enabled while
					 registering the library. For more information, see the 
					 <ulink type="olinkb"
					  url="DUGP1Loadingvs.Registering.html">Reconciliation and Registering</ulink>
					 discussion in the Dataphor User's Guide.</para> 
				<para>When a library is registered, the following sequence of steps
					 is taken in the order listed:</para> 
				<itemizedlist> 
					 <listitem> 
						  <para>The Dataphor Server ensures that the required version
								of each requisite library is registered.</para> 
					 </listitem> 
				</itemizedlist> 
				<itemizedlist> 
					 <listitem> 
						  <para>Each file listed in the library is copied into the
								run-time directory of the Dataphor Server. Copy errors are ignored so that
								assemblies that are already registered will not prevent the library from being
								registered. (Note that this means the Dataphor Server must be restarted to
								update assemblies which have been changed.)</para> 
					 </listitem> 
				</itemizedlist> 
				<itemizedlist> 
					 <listitem> 
						  <para>Each file that is marked as an assembly is registered
								with the Dataphor Server.</para> 
					 </listitem> 
				</itemizedlist> 
				<itemizedlist> 
					 <listitem> 
						  <para>The library is set as the current library for the
								session.</para> 
					 </listitem> 
				</itemizedlist> 
				<itemizedlist> 
					 <listitem> 
						  <para>If there is a file called Documents\Register.d4 in
								the library directory, it is run as the registration script for the
								library.</para> 
					 </listitem> 
				</itemizedlist> 
				<example> 
					 <title>Using System.RegisterLibrary</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Loadingvs.Registering.html">Reconciliation and
						  Registering</ulink></para> 
		  </section> 
		  <section id="O-System.RenameLibrary"> 
				<title><indexterm> 
						  <primary>RenameLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RenameLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>RenameLibrary</secondary> 
					 </indexterm>System.RenameLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RenameLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RenameLibrary</phrase> changes the name
					 of the library from 
					 <phrase role="code">AOldName</phrase> to 
					 <phrase role="code">ANewName</phrase>. The library must be
					 unloaded.</para> 
				<example> 
					 <title>Using System.RenameLibrary</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
RenameLibrary("Lib", "OtherLib");
DropLibrary("OtherLib");</programlisting> 
					 <programlisting>Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibraryDescriptor.html">System.SetLibraryDescriptor</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropLibrary.html">System.DropLibrary</ulink></para> 
		  </section> 
		  <section id="O-System.RequiredLibraries"> 
				<title><indexterm> 
						  <primary>RequiredLibraries - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RequiredLibraries</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>RequiredLibraries</secondary> 
					 </indexterm>System.RequiredLibraries</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RequiredLibraries" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RequiredLibraries</phrase> returns a
					 table listing the libraries required by the specified library 
					 <phrase role="code">ALibraryName</phrase>. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">true</phrase> (or omitted) ALL libraries
					 required to register 
					 <phrase role="code">ALibraryName</phrase> will be listed. This
					 includes any libraries required by the libraries that are required by 
					 <phrase role="code">ALibraryName</phrase>, and so on. If 
					 <phrase role="code">ARecursive</phrase> is 
					 <phrase role="code">false</phrase> only the libraries required
					 by 
					 <phrase role="code">ALibraryName</phrase> itself will be
					 listed.</para> 
				<example> 
					 <title>Using System.RequiredLibraries</title> 
					 <programlisting>CreateLibrary
 (LibraryDescriptor
  ("Lib", VersionNumberUndefined(), "Device",
   list(FileReference) {},
   list(LibraryReference)
    { LibraryReference("MSSQLDevice",VersionNumberUndefined()) }
 ));
RegisterLibrary("Lib");
select RequiredLibraries("Lib", false);
select RequiredLibraries("Lib", true);
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Library_Name Sequence Level 
------------ -------- ----- 
MSSQLDevice  1        1</programlisting> 
					 <programlisting>Library_Name Sequence Level 
------------ -------- ----- 
MSSQLDevice  1        1     
System       2        2     
SQLDevice    3        2     
System       4        3     
Connection   5        3     
System       6        4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.DependentLibraries.html">System.DependentLibraries</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibraryDescriptor.html">System.SetLibraryDescriptor</ulink></para>
				
		  </section> 
		  <section id="O-System.SetDefaultDeviceName"> 
				<title><indexterm> 
						  <primary>SetDefaultDeviceName - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDefaultDeviceName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>SetDefaultDeviceName</secondary> 
					 </indexterm>System.SetDefaultDeviceName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDefaultDeviceName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetDefaultDeviceName</phrase> sets the
					 default device name (ADeviceName) for the current session of Dataphor. After
					 executing 
					 <phrase role="code">SetDefaultDeviceName</phrase>, all base
					 table variables are created in the specified device unless another device is
					 specified in the create table statement. Because the device is specified by
					 name, it does not have to exist when 
					 <phrase role="code">SetDefaultDeviceName</phrase> is called. If
					 the device does not exist when the default device is accessed, by a create or
					 other operation, D4 raises an exception. Optionally the library (ALibraryName)
					 name can be specified.</para> 
				<example> 
					 <title>Using System.SetDefaultDeviceName</title> 
					 <programlisting>SetDefaultDeviceName("MSSQL");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DUGP3Security.html">Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.GetDefaultDeviceName.html">System.GetDefaultDeviceName</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.SetLibrary"> 
				<title><indexterm> 
						  <primary>SetLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>SetLibrary</secondary> 
					 </indexterm>System.SetLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetLibrary</phrase> sets the specified
					 library as the current library for the session.</para> 
				<example> 
					 <title>Using System.SetLibrary</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
SetLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib
General
Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibraryDescriptor.html">System.SetLibraryDescriptor</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropLibrary.html">System.DropLibrary</ulink></para> 
		  </section> 
		  <section id="O-System.SetLibraryDescriptor"> 
				<title><indexterm> 
						  <primary>SetLibraryDescriptor - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetLibraryDescriptor</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>SetLibraryDescriptor</secondary> 
					 </indexterm>System.SetLibraryDescriptor</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetLibraryDescriptor" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetLibraryDescriptor</phrase> is used to
					 modify the settings of the library 
					 <phrase role="code">AName</phrase> using the LibraryDescriptor 
					 <phrase role="code">ADescriptor</phrase>.</para> 
				<example> 
					 <title>Using System.SetLibraryDescriptor</title> 
					 <programlisting>CreateLibrary
(
 LibraryDescriptor
 (
  "Lib",
  VersionNumberUndefined(),
  "Temp"
 )
);
select Libraries
 where Name = "Lib"
 over { Name, Version, DefaultDeviceName };
SetLibraryDescriptor
( "Lib",
 LibraryDescriptor
 (
  "Lib",
  ToVersionNumber("1.0.*"),
  "Temp"
 )
);
select Libraries
 where Name = "Lib"
 over { Name, Version, DefaultDeviceName };
DropLibrary("Lib");</programlisting> 
					 <programlisting>Name  Version DefaultDeviceName
----- ------- -----------------
MyLib *       Temp

Name  Version DefaultDeviceName
----- ------- -----------------
MyLib 1.0.*   Temp</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.ReguiredLibraries.html">System.ReguiredLibraries</ulink> | 
					 <ulink type="xref"
					 url="O-System.UnregisterLibrary.html">System.UnregisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibrary.html">System.SetLibrary</ulink></para> 
		  </section> 
		  <section id="O-System.UnregisterLibrary"> 
				<title><indexterm> 
						  <primary>UnregisterLibrary - Library Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UnregisterLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Library Operators</primary> 
						  <secondary>UnregisterLibrary</secondary> 
					 </indexterm>System.UnregisterLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UnregisterLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UnregisterLibrary</phrase> drops all
					 objects in the library and issues corresponding drop statements to devices.
					 </para> 
				<para>The 
					 <phrase role="code">AWithReconciliation</phrase> option can be
					 used to indicate that the unregistration process should not affect the
					 structure or data mapped in devices. If the unregistration is performed with
					 reconciliation, data loss will occur because the corresponding drop commands
					 will be issued to the target systems.</para> 
				<example> 
					 <title>Using System.UnregisterLibrary</title> 
					 <programlisting>CreateLibrary(LibraryDescriptor("Lib", VersionNumberUndefined(), "Temp"));
RegisterLibrary("Lib");
select LibraryName();
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>Lib</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DUGP1Loadingvs.Registering.html">Reconciliation and Registering</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateLibrary.html">System.CreateLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.RegisterLibrary.html">System.RegisterLibrary</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetLibraryDescriptor.html">System.SetLibraryDescriptor</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropLibrary.html">System.DropLibrary</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.LogicalOperators"> 
		  <title>Logical Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.iAnd"> 
				<title><indexterm> 
						  <primary>iAnd - Logical Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>and</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>and</secondary> 
					 </indexterm><indexterm> 
						  <primary>Logical Operators</primary> 
						  <secondary>and</secondary> 
					 </indexterm>System.iAnd</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iAnd" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">and</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iAnd</phrase>. The 
					 <phrase role="code">and</phrase> operator is a logical and.
					 Both of the operands must be true for the result to be true.</para> 
				<note> 
					 <para>Dataphor does not do short-circuit evaluation.</para> 
				</note> 
				<para>The following table displays the results of evaluating 
					 <phrase role="code"><emphasis
						  role="bold">and</emphasis></phrase>: 
					 <informaltable> 
						  <tgroup cols="4">
								<colspec colname="col1" colnum="1" colwidth="*"/>
								<colspec colname="col2" colnum="2" colwidth="*"/>
								<colspec colname="col3" colnum="3" colwidth="*"/>
								<colspec colname="col4" colnum="4" colwidth="*"/> 
								<thead> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">and</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
								</thead> 
								<tbody> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
								</tbody> 
						  </tgroup> 
					 </informaltable></para> 
				<example> 
					 <title>Using System.iAnd</title> 
					 <programlisting>select Manager where (Manager_ID % 2 == Employee_ID % 2) and (Employee_ID &gt; 2);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iNot"> 
				<title><indexterm> 
						  <primary>iNot - Logical Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iNot</secondary> 
					 </indexterm><indexterm> 
						  <primary>not</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>not</secondary> 
					 </indexterm><indexterm> 
						  <primary>Logical Operators</primary> 
						  <secondary>not</secondary> 
					 </indexterm>System.iNot</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iNot" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">not</phrase> if the parser recognized
					 symbol for 
					 <phrase role="code">iNot</phrase>. This is a unary operator
					 that returns the logical negation of the given value.</para> 
				<para>The following table displays the results of evaluating 
					 <phrase role="code"><emphasis
						  role="bold">not</emphasis></phrase>: 
					 <informaltable> 
						  <tgroup cols="2"> <colspec colname="col1" colnum="1"/>
								<colspec colname="col2" colnum="2" colwidth="*"/> 
								<thead> 
									 <row> 
										  <entry colname="col1">Argument</entry> 
										  <entry colname="col2">Result</entry> 
									 </row> 
								</thead> 
								<tbody> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
									 </row> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
									 </row> 
								</tbody> 
						  </tgroup> 
					 </informaltable></para> 
				<example> 
					 <title>Using System.iNot</title> 
					 <programlisting>select Employee where not( ID in (Manager over {Manager_ID}));</programlisting> 
					 <programlisting>ID Name 
-- ---- 
3  Josh 
5  Jake 
6  Jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iOr"> 
				<title><indexterm> 
						  <primary>iOr - Logical Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iOr</secondary> 
					 </indexterm><indexterm> 
						  <primary>or</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>or</secondary> 
					 </indexterm><indexterm> 
						  <primary>Logical Operators</primary> 
						  <secondary>or</secondary> 
					 </indexterm>System.iOr</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iOr" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">or</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iOr</phrase>. The 
					 <phrase role="code">or</phrase> operator is a logical or. Both
					 of the operands must be false for the result to be false.</para> 
				<note> 
					 <para>D4 does not do short-circuit evaluation.</para> 
				</note> 
				<para>The following table displays the results of evaluating 
					 <phrase role="code"><emphasis
						  role="bold">or</emphasis></phrase>: 
					 <informaltable> 
						  <tgroup cols="4">
								<colspec colname="col1" colnum="1" colwidth="*"/>
								<colspec colname="col2" colnum="2" colwidth="*"/>
								<colspec colname="col3" colnum="3" colwidth="*"/>
								<colspec colname="col4" colnum="4" colwidth="*"/> 
								<thead> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">or</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
								</thead> 
								<tbody> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
									 </row> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
									 </row> 
									 <row> 
										  <entry colname="col1"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
										  <entry colname="col2"><phrase
												role="code"><emphasis role="bold">true</emphasis></phrase></entry> 
										  <entry colname="col3"><phrase
												role="code"><emphasis role="bold">nil</emphasis></phrase></entry> 
										  <entry colname="col4"><phrase
												role="code"><emphasis role="bold">false</emphasis></phrase></entry> 
									 </row> 
								</tbody> 
						  </tgroup> 
					 </informaltable></para> 
				<example> 
					 <title>Using System.iOr</title> 
					 <programlisting>select Manager where (Manager_ID = 1 or Manager_ID = 2);</programlisting> 
					 <programlisting>Manager_ID Employee_ID 
---------- ----------- 
1          2           
1          3           
2          4           
2          6</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.ManagementOperators"> 
		  <title>Management Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.CloseSession"> 
				<title><indexterm> 
						  <primary>CloseSession - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CloseSession</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>CloseSession</secondary> 
					 </indexterm>System.CloseSession</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CloseSession" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CloseSession</phrase> closes the session
					 corresponding to the Session ID specified.</para> 
				<example> 
					 <title>Using System.CloseSession</title> 
					 <programlisting>CloseSession(0);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DDGP1Session.html">Session</ulink></para> 
		  </section> 
		  <section id="O-System.Error"> 
				<title><indexterm> 
						  <primary>Error - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Error</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>Error</secondary> 
					 </indexterm>System.Error</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Error" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>This operator is the selector for values of type 
					 <phrase role="code">Error</phrase>. Errors are used in the
					 structured exception handling constructs of the D4 language.</para> 
				<para><phrase role="code">ASeverity</phrase> is one of User,
					 Application, System, or Environment. 
					 <phrase role="code">ACode</phrase> is a six digit error code.
					 The first three digits indicate the origin, the last three digits indicate the
					 message code. Origin codes in the range 500000 to 500999 are reserved for 
					 <phrase role="code">User</phrase> error messages. 
					 <phrase role="code">AMessage</phrase> is the message to be
					 displayed. 
					 <phrase role="code">AInnerError</phrase> is an error that can
					 be passed as context information when selecting an error value.</para> 
				<para>In addition to the main 
					 <phrase role="code">Error</phrase> selector, several overloads
					 are provided to simplify the usage of 
					 <phrase role="code">Error</phrase> values. If 
					 <phrase role="code">ASeverity</phrase> is unspecified, the
					 resulting 
					 <phrase role="code">Error</phrase> has a severity of User. If 
					 <phrase role="code">ACode</phrase> is unspecified, the
					 resulting 
					 <phrase role="code">Error</phrase> has a code of 500000.</para>
				
				<example> 
					 <title>Using System.Error</title> 
					 <programlisting>raise Error
(
 "User",
 500000,
 "This isn't a real error, but it will generate an error anyway."
);</programlisting> 
					 <programlisting>Warnings
  Description
  (User:500000) This isn't a real error, but it will generate an error anyway.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="link" url="T-System.Error.html">System.Error
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Types-SystemDataTypes.html">System Data Types</ulink>
					 | 
					 <ulink type="olinkb"
					 url="D4LGImperativeStatements-ExceptionHandling.html">Exception
						  Handling</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Values-ScalarValues.html">Scalar Values</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-ScalarTypes-Conveyors.html">Conveyors</ulink> | 
					 <ulink type="olinkb" url="DRErrorMessagePrefixCodes.html">Error
						  Message Prefix Codes</ulink></para> 
		  </section> 
		  <section id="O-System.GC.Collect"> 
				<title><indexterm> 
						  <primary>GC.Collect - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Garbage Colection</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GC.Collect</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>GC.Collect</secondary> 
					 </indexterm>System.GC.Collect</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GC.Collect" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>GC.Collect tells the system to perform a garbage
					 collection.</para> 
				<example> 
					 <title>Using System.GC.Collect</title> 
					 <programlisting>GC.Collect();</programlisting> 
				</example> 
		  </section> 
		  <section id="O-System.HostName"> 
				<title><indexterm> 
						  <primary>HostName - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>HostName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>HostName</secondary> 
					 </indexterm>System.HostName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.HostName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">HostName</phrase> returns the name of the
					 computer on which the Dataphor client is running.</para> 
				<example> 
					 <title>Using System.HostName</title> 
					 <programlisting>select HostName();</programlisting> 
					 <programlisting>MyClient</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.MachineName.html">System.MachineName</ulink> | 
					 <ulink type="olinka"
					 url="DUGP1Dataphoria-Aliases.html">Dataphoria, Aliases</ulink></para> 
		  </section> 
		  <section id="O-System.MachineName"> 
				<title><indexterm> 
						  <primary>MachineName - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>MachineName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>MachineName</secondary> 
					 </indexterm>System.MachineName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.MachineName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">MachineName</phrase> returns the name of
					 the computer on which Dataphor server is running.</para> 
				<example> 
					 <title>Using System.MachineName</title> 
					 <programlisting>select MachineName();</programlisting> 
					 <programlisting>MyServer</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.HostName.html">System.HostName</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases.html">Aliases</ulink></para> 
		  </section> 
		  <section id="O-System.ProcessID"> 
				<title><indexterm> 
						  <primary>ProcessID - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ProcessID</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>ProcessID</secondary> 
					 </indexterm>System.ProcessID</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ProcessID" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ProcessID</phrase> returns the ID of the
					 current process. This operator is non-deterministic unless called within the
					 same process.</para> 
				<example> 
					 <title>Using System.ProcessID</title> 
					 <programlisting>select Processes where ID = ProcessID();</programlisting> 
					 <programlisting>ID   Session_ID UseDTC 
---- ---------- ------ 
1934 1          False</programlisting> 
					 <para>Note: This is just an example, results will vary.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.ServerName"> 
				<title><indexterm> 
						  <primary>ServerName - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ServerName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>ServerName</secondary> 
					 </indexterm>System.ServerName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ServerName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ServerName</phrase> returns the current
					 server name. The server name is specified upon creation. The default server
					 name for both In-Process servers and servers running as a service is
					 "dataphor".</para> 
				<example> 
					 <title>Using System.ServerName</title> 
					 <programlisting>select TableDee add {ServerName() server };</programlisting> 
					 <programlisting>server   
-------- 
dataphor </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DUGP1UsingDataphorApplications-StartingaDataphorApplication-Connecting.html">Connecting
						  to a Server</ulink> | 
					 <ulink type="olinka"
					 url="DUGP1ProductTour-ArchitecturalOverview.html">Server
						  Architecture</ulink></para> 
		  </section> 
		  <section id="O-System.SessionID"> 
				<title><indexterm> 
						  <primary>SessionID - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SessionID</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SessionID</secondary> 
					 </indexterm>System.SessionID</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SessionID" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SessionID</phrase> returns the ID for the
					 current session.</para> 
				<example> 
					 <title>Using System.SessionID</title> 
					 <programlisting>select Sessions where ID = SessionID() over {ID, User_ID};</programlisting> 
					 <programlisting>ID User_ID
-- -------
1  Admin</programlisting> 
					 <para>Note that session information may not be exactly the same
						  in every case.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="DDGP1Session.html">Session</ulink></para> 
		  </section> 
		  <section id="O-System.SetDefaultIsolationLevel"> 
				<title><indexterm> 
						  <primary>SetDefaultIsolationLevel - Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDefaultIsolationLevel</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetDefaultIsolationLevel</secondary> 
					 </indexterm>System.SetDefaultIsolationLevel</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDefaultIsolationLevel" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetDefaultIsolationLevel</phrase> sets
					 the isolation level that will be used by the session as the default isolation
					 level for any new processes started on the session. This in turn is used as the
					 isolation level for any transactions started on the process unless another
					 isolation level is specified, or the process default isolation level is changed
					 using 
					 <phrase role="code">SetIsolationLevel</phrase>.</para> 
				<para><phrase role="code">AIsolationLevel</phrase> must be one of 
					 <phrase role="code">Browse</phrase>, 
					 <phrase role="code">Cursor Stability</phrase>, or 
					 <phrase role="code">Isolated</phrase></para> 
				<example> 
					 <title>Using System.SetDefaultIsolationLevel</title> 
					 <programlisting>SetDefaultIsolationLevel("Cursor Stability");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGP1TransactionManagement.html">DBM Concepts Transaction
						  Management</ulink> | 
					 <ulink type="olinkb"
					 url="DDGP1Isolation.html">Isolation</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultIsolationLevel.html">DefaultIsolationLevel</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SetDefaultMaxCallDepth"> 
				<title><indexterm> 
						  <primary>SetDefaultMaxCallDepth - Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDefaultMaxCallDepth</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetDefaultMaxCallDepth</secondary> 
					 </indexterm>System.SetDefaultMaxCallDepth</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDefaultMaxCallDepth" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetDefaultMaxCallDepth</phrase> sets the
					 default maximum call depth to 
					 <phrase role="code">ADefaultMaxCallDepth</phrase> for the
					 session for any new processes that may be started. The initial default is
					 1024.</para> 
				<example> 
					 <title>Using System.SetDefaultMaxCallDepth</title> 
					 <programlisting>SetDefaultMaxCallDepth(4096);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.SetMaxCallDepth.html">System.SetMaxCallDepth</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultMaxCallDepth.html">DefaultMaxCallDepth</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SetDefaultMaxStackDepth"> 
				<title><indexterm> 
						  <primary>SetDefaultMaxStackDepth - Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDefaultMaxStackDepth</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetDefaultMaxStackDepth</secondary> 
					 </indexterm>System.SetDefaultMaxStackDepth</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDefaultMaxStackDepth" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetDefaultMaxStackDepth</phrase> sets the
					 default maximum stack depth at 
					 <phrase role="code">ADefaultMaxStackDepth</phrase> for the
					 session for any new processes that may be started. The initial default is
					 32767.</para> 
				<example> 
					 <title>Using System.SetDefaultMaxStackDepth</title> 
					 <programlisting>SetDefaultMaxStackDepth(40959);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.SetMaxStackDepth.html">System.SetMaxStackDepth</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultMaxStackDepth.html">DefaultMaxStackDepth</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SetDefaultUseImplicitTransactions"> 
				<title><indexterm> 
						  <primary>SetDefaultUseImplicitTransactions, Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDefaultUseImplicitTransactions</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetDefaultUseImplicitTransactions</secondary> 
					 </indexterm>System.SetDefaultUseImplicitTransactions</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDefaultUseImplicitTransactions" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase
					 role="code">SetDefaultUseImplicitTransactions</phrase> takes a boolean
					 argument. It specifies if processes created from this session will use implicit
					 transactions.</para> 
				<example> 
					 <title>Using System.SetDefaultUseImplicitTransactions</title> 
					 <programlisting>SetDefaultUseImplicitTransactions(true);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.UseImplicitTransactions.html">System.UseImplicitTransactions</ulink>
					 | 
					 <ulink type="olinka"
					 url="DUGP1DefaultUseImplicitTransactions.html">Transactional Call
						  Protocol</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SettIsolationLevel"> 
				<title><indexterm> 
						  <primary>SetIsolationLevel - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetIsolationLevel</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetIsolationLevel</secondary> 
					 </indexterm>System.SetIsolationLevel</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetIsolationLevel" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetIsolationLevel</phrase> sets the
					 isolation level that will be used by the process for any new transactions
					 unless another isolation level is specified.</para> 
				<para><phrase role="code">AIsolationLevel</phrase> must be one of 
					 <phrase role="code">Browse</phrase>, 
					 <phrase role="code">Cursor Stability</phrase>, or 
					 <phrase role="code">Isolated</phrase></para> 
				<example> 
					 <title>Using System.SetIsolationLevel</title> 
					 <programlisting>SetIsolationLevel("Cursor Stability");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="DDGP1TransactionManagement.html">DBM Concepts Transaction
						  Management</ulink> | 
					 <ulink type="olinkb"
					 url="DDGP1Isolation.html">Isolation</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultIsolationLevel.html">DefaultIsolationLevel</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SetMaxCallDepth"> 
				<title><indexterm> 
						  <primary>SetMaxCallDepth - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetMaxCallDepth</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetMaxCallDepth</secondary> 
					 </indexterm>System.SetMaxCallDepth</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetMaxCallDepth" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetMaxCallDepth</phrase> sets the maximum
					 call depth at 
					 <phrase role="code">AMaxCallDepth</phrase> for the current
					 process. The initial default is 1024.</para> 
				<example> 
					 <title>Using System.SetMaxCallDepth</title> 
					 <programlisting>SetMaxCallDepth(4096);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.DefaultSetMaxCallDepth.html">System.DefaultSetMaxCallDepth</ulink>
					 | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultMaxCallDepth.html">DefaultMaxCallDepth</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SetMaxConcurrentProcesses"> 
				<title><indexterm> 
						  <primary>SetMaxConcurrentProcesses - Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetMaxConcurrentProcesses</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetMaxConcurrentProcesses</secondary> 
					 </indexterm>System.SetMaxConcurrentProcesses</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetMaxConcurrentProcesses" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetMaxConcurrentProcesses</phrase> sets
					 the maximum number of concurrently executing processes. The default is 20. Any
					 processes over the maximum will be placed on the queue to be executed when
					 others complete.</para> 
				<example> 
					 <title>Using System.SetMaxConcurrentProcesses</title> 
					 <programlisting>SetMaxConcurrentProcesses(35);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.SetProcessWaitTimeout.html">System.SetProcessWaitTimeout</ulink></para>
				
		  </section> 
		  <section id="O-System.SetMaxStackDepth"> 
				<title><indexterm> 
						  <primary>SetMaxStackDepth - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetMaxStackDepth</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetMaxStackDepth</secondary> 
					 </indexterm>System.SetMaxStackDepth</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetMaxStackDepth" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetMaxStackDepth</phrase> sets the
					 maximum stack depth at 
					 <phrase role="code">AMaxStackDepth</phrase> for the current
					 process. The initial default is 32767.</para> 
				<example> 
					 <title>Using System.SetMaxStackDepth</title> 
					 <programlisting>SetMaxStackDepth(40959);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.DefaultSetMaxStackDepth.html">System.DefaultSetMaxStackDepth</ulink>
					 | 
					 <ulink type="olinkb"
					 url="DUGP1DefaultMaxStackDepth.html">DefaultMaxStackDepth</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.SetProcessWaitTimeout"> 
				<title><indexterm> 
						  <primary>SetProcessWaitTimeout - Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetProcessWaitTimeout</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetProcessWaitTimeout</secondary> 
					 </indexterm>System.SetProcessWaitTimeout</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetProcessWaitTimeout" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetProcessWaitTimeout</phrase> sets the
					 amount of time, in milliseconds, that the process will wait for a chance to
					 execute. The default is one minute (60,000 milliseconds).</para> 
				<example> 
					 <title>Using System.SetProcessWaitTimeout</title> 
					 <programlisting>SetProcessWaitTimeout(30000);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.SetMaxConcurrentProcesses.html">System.SetMaxConcurrentProcesses</ulink></para>
				
		  </section> 
		  <section id="O-System.SetUseImplicitTransactions"> 
				<title><indexterm> 
						  <primary>SetUseImplicitTransactions - Management
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetUseImplicitTransactions</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>SetUseImplicitTransactions</secondary> 
					 </indexterm>System.SetUseImplicitTransactions</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetUseImplicitTransactions" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetUseImplicitTransactions</phrase> takes
					 a boolean argument. It specifies if the current session will use implicit
					 transactions.</para> 
				<example> 
					 <title>Using System.SetUseImplicitTransactions</title> 
					 <programlisting>SetUseImplicitTransactions(true);</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.SetDefaultUseImplicitTransactions.html">System.SetDefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="olinka"
					 url="DUGP1DefaultUseImplicitTransactions.html">Transactional Call
						  Protocol</ulink></para> 
		  </section> 
		  <section id="O-System.Sleep"> 
				<title><indexterm> 
						  <primary>Sleep - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Sleep</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>Sleep</secondary> 
					 </indexterm>System.Sleep</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Sleep" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Sleep</phrase> stops the current process
					 for the specified number of milliseconds.</para> 
				<example> 
					 <title>Using System.Sleep</title> 
					 <programlisting>Sleep(2000);</programlisting> 
				</example> 
		  </section> 
		  <section id="O-System.StartProcess"> 
				<title><indexterm> 
						  <primary>StartProcess - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>StartProcess</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>StartProcess</secondary> 
					 </indexterm>System.StartProcess</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.StartProcess" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">StartProcess</phrase> starts a new
					 process.</para> 
				<example> 
					 <title>Using System.StartProcess</title> 
					 <programlisting>create table Example in Temp
{
 PID : Integer,
 Key : String,
 key{Key}
};
insert table "
begin
 var LProcessID : Integer := StartProcess();
 insert table { row { LProcessID PID, "Cur" Key } } into Example;
 ExecuteAsync
 (
  LProcessID,
  "insert table
  {
   row
   {
    ProcessID() PID, 'Pro' Key
   }
  } into Example;"
 );
 StopProcess(LProcessID);
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>PID  Key 
---- --- 
2703 Cur 
2696 New 
2696 Pro</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.ProcessID.html">System.ProcessID</ulink> | 
					 <ulink type="xref"
					  url="O-System.SetMaxConcurrentProcesses.html">System.SetMaxConcurrentProcesses</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.SetProcessWaitTimeout.html">System.SetProcessWaitTimeout</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.StopProcess.html">System.StopProcess</ulink> | 
					 <ulink type="xref"
					  url="O-System.ExecuteAsync.html">System.ExecuteAsync</ulink></para> 
		  </section> 
		  <section id="O-System.StopProcess"> 
				<title><indexterm> 
						  <primary>StopProcess - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>StopProcess</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>StopProcess</secondary> 
					 </indexterm>System.StopProcess</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.StopProcess" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">StopProcess</phrase> stops a
					 process.</para> 
				<example> 
					 <title>Using System.StopProcess</title> 
					 <programlisting>create table Example in Temp
{
 PID : Integer,
 Key : String,
 key{Key}
};
insert table "
begin
 var LProcessID : Integer := StartProcess();
 insert table { row { LProcessID PID, "Cur" Key } } into Example;
 ExecuteAsync
 (
  LProcessID,
  "insert table
  {
   row
   {
    ProcessID() PID,
    'Pro' Key
   }
  } into Example;"
 );
 StopProcess(LProcessID);
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>PID  Key 
---- --- 
2703 Cur 
2696 New 
2696 Pro</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.ProcessID.html">System.ProcessID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetMaxConcurrentProcesses.html">System.SetMaxConcurrentProcesses</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetProcessWaitTimeout.html">System.SetProcessWaitTimeout</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.StartProcess.html">System.StartProcess</ulink> | 
					 <ulink type="xref"
					 url="O-System.ExecuteAsync.html">System.ExecuteAsync</ulink></para> 
		  </section> 
		  <section id="O-System.UpdateTimeStamps"> 
				<title><indexterm> 
						  <primary>UpdateTimeStamps - Management Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UpdateTimeStamps</secondary> 
					 </indexterm><indexterm> 
						  <primary>Management Operators</primary> 
						  <secondary>UpdateTimeStamps</secondary> 
					 </indexterm>System.UpdateTimeStamps</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UpdateTimeStamps" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UpdateTimeStamps</phrase> updates the
					 various timestamps tracked for the system catalog. This is useful for forcing a
					 refresh of the various caches based on these timestamps such as client-side
					 catalog caches, and the Frontend Server's derivation cache.</para> 
				<example> 
					 <title>Using System.UpdateTimeStamps</title> 
					 <programlisting>select TableDee add {CacheTimeStamp() Cache};
UpdateTimeStamps();
select TableDee add {CacheTimeStamp() Cache};</programlisting> 
					 <programlisting>Cache 
----- 
182

Cache 
----- 
183</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.CacheTimeStamp.html">System.CacheTimeStamp</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.MathOperators"> 
		  <title>Math Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.Abs"> 
				<title><indexterm> 
						  <primary>Abs - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Abs</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Abs - Absolute</secondary> 
					 </indexterm><indexterm> 
						  <primary>Absolute value</primary> 
					 </indexterm>System.Abs</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Abs" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">System.Abs</phrase> returns the Absolute
					 value (nonnegative) of a given value. If the given value is negative, then this
					 function will return the opposite (additive inverse) of the given
					 number.</para> 
				<example> 
					 <title>Using System.Abs</title> 
					 <programlisting>select
	TableDee add
	{
		Abs(3) Pos, // returns 3
		Abs(-3.14159) Neg // returns 3.14159
	};</programlisting> 
					 <programlisting>Pos Neg
--- -------
3   3.14159</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Duration.html">System.Duration</ulink></para> 
		  </section> 
		  <section id="O-System.Ceiling"> 
				<title><indexterm> 
						  <primary>Ceiling - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Ceiling</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Ceiling</secondary> 
					 </indexterm>System.Ceiling</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Ceiling" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Ceiling</phrase> takes a value and
					 returns the smallest integer value that is greater than or equal to the
					 specified value. It is essentially a round-up operator.</para> 
				<example> 
					 <title>Using System.Ceiling</title> 
					 <programlisting>select TableDee add { Ceiling(-3.4) Neg, Ceiling(3.4) Pos };</programlisting> 
					 <programlisting>Neg Pos 
--- --- 
-3  4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Floor.html">System.Floor</ulink> | 
					 <ulink type="xref"
					 url="O-System.Round.html">System.Round</ulink></para> 
		  </section> 
		  <section id="O-System.Floor"> 
				<title><indexterm> 
						  <primary>Floor - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Floor</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Floor</secondary> 
					 </indexterm>System.Floor</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Floor" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Floor</phrase> rounds down to the nearest
					 Integer. It takes and returns values of type decimal, but will return a value
					 that could be represented as an integer. This is done because it still allows
					 you to multiply and divide by a power of ten (or any other number) to round to
					 different precisions. An integer can be easily attained by converting to an
					 integer.</para> 
				<example> 
					 <title>Using System.Floor</title> 
					 <programlisting>select TableDee add { Floor(-3.4) Neg, Floor(3.4) Pos };</programlisting> 
					 <programlisting>Neg Pos
--- ---
-4  3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Ceiling.html">System.Ceiling</ulink> | 
					 <ulink type="xref"
					 url="O-System.Round.html">System.Round</ulink></para> 
		  </section> 
		  <section id="O-System.Frac"> 
				<title><indexterm> 
						  <primary>Frac - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Frac</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Frac</secondary> 
					 </indexterm>System.Frac</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Frac" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Frac</phrase> returns the fractional
					 portion of the specified decimal value.</para> 
				<example> 
					 <title>Using System.Frac</title> 
					 <programlisting>select TableDee add { Frac(-3.4) Neg, Frac(3.4) Pos };</programlisting> 
					 <programlisting>Neg  Pos
---- ---
-0.4 0.4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Floor.html">System.Floor</ulink></para> 
		  </section> 
		  <section id="O-System.iMod"> 
				<title><indexterm> 
						  <primary>iMod - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>mod (Modulus)</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>mod (Modulus)</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>mod (Modulus)</secondary> 
					 </indexterm>System.iMod</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iMod" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code"><emphasis
						  role="bold">mod</emphasis></phrase> is the parser recognized symbol for 
					 <phrase role="code">iMod</phrase>. This operator can be used on
					 both integer types and decimal types.</para> 
				<para>
					This operator behaves as follows:
					<programlisting>(a mod b = r) given (a div b = q) and (a = b*q + r where 0 &lt;= r &lt; b).</programlisting>
				</para> 
				<example> 
					 <title>Using System.iMod</title> 
					 <programlisting>select TableDee add {17 mod 5 IntMod, 1.2 mod 0.35 DecIntMod, -340 mod 60 NegIntMod };</programlisting> 
					 <programlisting>IntMod DecIntMod NegIntMod
------ --------- ---------
2      0.15      -40</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-ArithmeticExpression.html">Arithmetic
						  Expressions</ulink> | 
					 <ulink type="xref" url="O-System.iDiv.html">System.iDiv
						  (<phrase role="code">div</phrase>)</ulink> | 
					 <ulink type="xref"
					 url="O-System.iDivision.html">System.iDivison (<phrase
						  role="code">/</phrase>)</ulink></para> 
		  </section> 
		  <section id="O-System.Math.Exp"> 
				<title><indexterm> 
						  <primary>Exp - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Exp</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Exp</secondary> 
					 </indexterm>System.Math.Exp</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Exp" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Exp</phrase> calculates the natural
					 exponent of the specified value. In other words it returns
					 <emphasis>e</emphasis> raised to the specified power
					 (<emphasis>e<superscript>x</superscript></emphasis>) 
					 <informalexample> 
						  <para><emphasis>e<superscript>6</superscript> =
								403.428793492735</emphasis></para> 
					 </informalexample></para> 
				<example> 
					 <title>Using System.Math.Exp</title> 
					 <programlisting>select TableDee add { Exp(6) NaturalExponent};</programlisting> 
					 <programlisting>NaturalExponent 
---------------- 
403.428793492735</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Math.Ln.html">System.Math.Ln</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Log.html">System.Math.Log</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Log10.html">System.Math.Log10</ulink></para> 
		  </section> 
		  <section id="O-System.Math.Factorial"> 
				<title><indexterm> 
						  <primary>Factorial - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Factorial</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Factorial</secondary> 
					 </indexterm>System.Math.Factorial</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Factorial" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Factorial</phrase> computes the factorial
					 of the specified number (<emphasis>n</emphasis>!). 
					 <informalexample> 
						  <para><phrase role="code">0! = 1</phrase></para> 
						  <para><phrase role="code">n! = n * (n-1)!</phrase></para> 
					 </informalexample></para> 
				<example> 
					 <title>Using System.Math.Factorial</title> 
					 <programlisting>select TableDee add { Math.Factorial(10) Fact};</programlisting> 
					 <programlisting>Fact    
------- 
3628800</programlisting> 
				</example> 
		  </section> 
		  <section id="O-System.Math.Ln"> 
				<title><indexterm> 
						  <primary>Ln - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Ln</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Ln</secondary> 
					 </indexterm>System.Math.Ln</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Ln" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Ln</phrase> returns the natural logarithm
					 (base <emphasis>e</emphasis>) of the specified value. The value that is
					 returned is the value that if raised to the power of <emphasis>e</emphasis>
					 would result in the value passed to the function. 
					 <informalexample> 
						  <para><emphasis>6<superscript>e</superscript> =
								1.79175946922806</emphasis></para> 
					 </informalexample></para> 
				<example> 
					 <title>Using System.Math.Ln</title> 
					 <programlisting>select TableDee add {Math.Ln(6) ln };</programlisting> 
					 <programlisting>ln 
---------------- 
1.79175946922806</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Math.Exp.html">System.Math.Exp</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Log.html">System.Math.Log</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Log10.html">System.Math.Log10</ulink></para> 
		  </section> 
		  <section id="O-System.Math.Log"> 
				<title><indexterm> 
						  <primary>Log - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Log</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Log</secondary> 
					 </indexterm>System.Math.Log</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Log" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Log</phrase> calculates the logarithm to
					 the specified base. The number that results is the number needed to raise the
					 specified base to, to make it equal the number of the the logarithm. 
					 <informalexample> 
						  <para><emphasis>2<superscript>4.75488750216347</superscript>
								= 27</emphasis></para> 
					 </informalexample></para> 
				<example> 
					 <title>Using System.Math.Log</title> 
					 <programlisting>select TableDee add { Math.Log(27, 2) log };</programlisting> 
					 <programlisting>log 
----------------
4.75488750216347</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Math.Exp.html">System.Math.Exp</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Ln.html">System.Math.Ln</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Log10.html">System.Math.Log10</ulink></para> 
		  </section> 
		  <section id="O-System.Math.Log10"> 
				<title><indexterm> 
						  <primary>Log10 - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Log10</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Log10</secondary> 
					 </indexterm>System.Math.Log10</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Log10" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Log10</phrase> returns the common
					 logarithm (base 10) of the specified number. The number that is returned is the
					 number that if 10 was raised to that power would result in the specified
					 number. 
					 <informalexample> 
						  <para><emphasis>10<superscript>3</superscript> =
								1000</emphasis></para> 
					 </informalexample></para> 
				<example> 
					 <title>Using System.Math.Log10</title> 
					 <programlisting>select TableDee add { Math.Log10(1000) log };</programlisting> 
					 <programlisting>log 
--- 
3</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Math.Exp.html">System.Math.Exp</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Ln.html">System.Math.Ln</ulink> | 
					 <ulink type="xref"
					 url="O-System.Math.Log.html">System.Math.Log</ulink></para> 
		  </section> 
		  <section id="O-System.Math.Random"> 
				<title><indexterm> 
						  <primary>Random - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Random</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Random</secondary> 
					 </indexterm>System.Math.Random</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Random" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Random</phrase> returns a pseudo-random
					 number. The output of this operator depends on the parameters. It returns a
					 random decimal between 0 and 1, if no parameters are passed. If one integer is
					 passed then the number returned will be an integer between zero and one less
					 than the number specified, inclusive. If two integers are specified then the
					 number returned will be between the first number and one less than the second
					 number, inclusive. The one Integer overload is equivalent to calling the two
					 integer overload with 0 as the first parameter. The first number can not be
					 less than the second number. In the one integer overload the number can not be
					 less than zero. Both numbers can be negative in the two integer overload if the
					 second is still larger, not larger magnitude, than the second number. If the
					 numbers are the same or are only one apart, then the number generated will be
					 the same each time. The first time this operator is used, a seed is generated
					 from the system time. A seed can be specified with the 
					 <phrase role="code">Seed</phrase> operator.</para> 
				<example> 
					 <title>Using System.Math.Random</title> 
					 <programlisting>select TableDee add
{
	Math.Random() RandDecimal,
	Math.Random(15) RandInteger,
	Math.Random(-100,0) RandIntInt
};</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Math.Seed.html">System.Math.Seed</ulink></para> 
		  </section> 
		  <section id="O-System.Math.Seed"> 
				<title><indexterm> 
						  <primary>Seed - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Seed</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Seed</secondary> 
					 </indexterm>System.Math.Seed</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Math.Seed" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Math.Seed</phrase> sets the seed value
					 for generating pseudo-random numbers. If no arguments are specified, then a
					 number from the system clock will be used. If a value is passed to the
					 operator, then that number will be used for the seed.</para> 
				<example> 
					 <title>Using System.Math.Seed</title> 
					 <programlisting>Math.Seed();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Math.Random.html">System.Math.Random</ulink></para> 
		  </section> 
		  <section id="O-System.Round"> 
				<title><indexterm> 
						  <primary>Round - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Round</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Round</secondary> 
					 </indexterm>System.Round</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Round" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Round</phrase> returns the specifiied
					 value rounded to the number of decimal spaces speficied by the precision. If
					 the number of decimal places specified is positive then rounding will occur
					 right of the decimel point that many digits. If the number of decimal places
					 specified is zero then it rounds to the nearest whole number. If the number of
					 decimal places specified is negative then rounding will occur left of the
					 decimal point that many digits. If the number of decimal places is not
					 specified, the value is rounded to two (2) places.</para> 
				<example> 
					 <title>Using System.Round</title> 
					 <programlisting>select TableDee
 add { 3141.59265 Number	}
 add 
 {
  Round(Number, 0) RoundZero,
  Round(Number, 2) RoundPositive,
  Round(Number,-2) RoundNegative
 };</programlisting> 
					 <programlisting>Number     RoundZero RoundPositive RoundNegative
---------- --------- ------------- -------------
3141.59265 3142      3141.59       3100         </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Ceiling.html">System.Ceiling</ulink> | 
					 <ulink type="xref"
					 url="O-System.Floor.html">System.Floor</ulink></para> 
		  </section> 
		  <section id="O-System.Truncate"> 
				<title><indexterm> 
						  <primary>Truncate - Math Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Truncate</secondary> 
					 </indexterm><indexterm> 
						  <primary>Math Operators</primary> 
						  <secondary>Truncate</secondary> 
					 </indexterm>System.Truncate</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Truncate" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Truncate</phrase> returns the integer
					 portion of a decimal value.</para> 
				<example> 
					 <title>Using System.Truncate</title> 
					 <programlisting>select TableDee add { Truncate(-3.2) Neg, Truncate(3.2) Pos };</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Ceiling.html">System.Ceiling</ulink> | 
					 <ulink type="xref"
					 url="O-System.Floor.html">System.Floor</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.NilHandlingOperators"> 
		  <title>Nil-Handling Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.IfNil"> 
				<title><indexterm> 
						  <primary>IfNil - Nil-Handling Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IfNil</secondary> 
					 </indexterm><indexterm> 
						  <primary>Nil-Handling Operators</primary> 
						  <secondary>IfNil</secondary> 
					 </indexterm>System.IfNil</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IfNil" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IfNil</phrase> is a shorthand. The
					 expression 
					 <informalexample> 
						  <para><phrase role="code">IfNil(a, b)</phrase></para> 
					 </informalexample> is shorthand for 
					 <informalexample> 
						  <para><phrase role="code">if IsNil(a) then b else
									 a</phrase></para> 
					 </informalexample></para> 
				<example> 
					 <title>Using System.IfNil</title> 
					 <programlisting>select Employee left join EmployeePhone 
   redefine { Phone := IfNil(Phone, "No Phone") };</programlisting> 
					 <programlisting>ID Name Phone
-- ---- --------
1  Joe  555-1000
1  Joe  555-1234
2  John 555-4321
3  Josh No Phone
4  Jeff 555-4444
5  Jake 555-5678
6  Jeff No Phone</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsNil.html">System.IsNil</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsNotNil.html">System.IsNotNil</ulink> | 
					 <ulink type="olinkb" url="D4LGNilSemantics.html">Nil
						  Semantics</ulink></para> 
		  </section> 
		  <section id="O-System.IsNil"> 
				<title><indexterm> 
						  <primary>IsNil - Nil-Handling Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsNil</secondary> 
					 </indexterm><indexterm> 
						  <primary>Nil-Handling Operators</primary> 
						  <secondary>IsNil</secondary> 
					 </indexterm>System.IsNil</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsNil" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsNil</phrase> returns true if its
					 argument is nil, false otherwise. The row-valued overload returns true if the
					 column specified in 
					 <phrase role="code">AColumnName</phrase> is nil, false
					 otherwise.</para> 
				<example> 
					 <title>Using System.IsNil</title> 
					 <programlisting>select Employee
 left join EmployeePhone 
 add { not IsNil(Phone) HasPhone };</programlisting> 
					 <programlisting>ID Name Phone      HasPhone
-- ---- ---------- --------
1  Joe  555-1000   True
1  Joe  555-1234   True
2  John 555-4321   True
3  Josh &lt;no value&gt; False
4  Jeff 555-4444   True
5  Jake 555-5678   True
6  Jeff &lt;no value&gt; False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IfNil.html">System.IfNil</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsNotNil.html">System.IsNotNil</ulink> | 
					 <ulink type="olinkb" url="D4LGNilSemantics.html">Nil
						  Semantics</ulink></para> 
		  </section> 
		  <section id="O-System.IsNotNil"> 
				<title><indexterm> 
						  <primary>IsNotNil - Nil-Handling Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsNotNil</secondary> 
					 </indexterm><indexterm> 
						  <primary>Nil-Handling Operators</primary> 
						  <secondary>IsNotNil</secondary> 
					 </indexterm>System.IsNotNil</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsNotNil" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsNotNil</phrase> returns true if its
					 argument has a value, false otherwise. The row-valued overload returns true if
					 the column specified in 
					 <phrase role="code">AColumnName</phrase> has a value, false
					 otherwise.</para> 
				<example> 
					 <title>Using System.IsNotNil</title> 
					 <programlisting>select Employee
 left join EmployeePhone 
 add { IsNotNil(Phone) HasPhone };</programlisting> 
					 <programlisting>ID Name Phone      HasPhone
-- ---- ---------- --------
1  Joe  555-1000   True
1  Joe  555-1234   True
2  John 555-4321   True
3  Josh &lt;no value&gt; False
4  Jeff 555-4444   True
5  Jake 555-5678   True
6  Jeff &lt;no value&gt; False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IfNil.html">System.IfNil</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsNil.html">System.IsNil</ulink> | 
					 <ulink type="olinkb" url="D4LGNilSemantics.html">Nil
						  Semantics</ulink></para> 
		  </section> 
		  <section id="O-System.IsSpecial"> 
				<title><indexterm> 
						  <primary>IsSpecial - Nil-Handling Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsSpecial</secondary> 
					 </indexterm><indexterm> 
						  <primary>Nil-Handling Operators</primary> 
						  <secondary>IsSpecial</secondary> 
					 </indexterm>System.IsSpecial</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsSpecial" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IsSpecial</phrase> checks to see if a
					 given value is equal to some special defined for the type of the value. When a
					 new scalar type is created, an overload of 
					 <phrase role="code">IsSpecial</phrase> is created to provide a
					 means of checking for special values.</para> 
				<example> 
					 <title>Using System.IsSpecial</title> 
					 <programlisting>select IsSpecial(VersionNumberUndefined());
select IsSpecial(ToVersionNumber("*"));
select IsSpecial(ToVersionNumber("2.1.*.*"));</programlisting> 
					 <programlisting>True
True
False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGCatalogElements-ScalarTypes-SpecialValues.html">Scalar Values, Special
						  values</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsUndefined.html">System.IsUndefined</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.RowOperators"> 
		  <title>Row Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.iExtendRowOperator"> 
				<title><indexterm> 
						  <primary>Row Operators</primary> 
						  <secondary>add</secondary> 
					 </indexterm>System.iExtend</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">add</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iExtend</phrase>. 
					 <phrase role="code">iExtend</phrase> is a table and a row
					 operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref" url="O-System.iExtend.html">System.iExtend
						  table operator</ulink></para> 
		  </section> 
		  <section id="O-System.iInRowOperator.html"> 
				<title><indexterm> 
						  <primary>Row Operators</primary> 
						  <secondary>in</secondary> 
					 </indexterm>System.iIn</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">in</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iIn</phrase>. The 
					 <phrase role="code">in</phrase> operator is a table, row, and
					 list operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref" url="O-System.iIn.html">System.iIn table
						  operator</ulink></para> 
		  </section> 
		  <section id="O-System.iJoinRowOperator"> 
				<title><indexterm> 
						  <primary>Row Operators</primary> 
						  <secondary>join</secondary> 
					 </indexterm>System.iJoin (row)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>See 
					 <ulink type="xref"
					 url="O-System.iJoin.html">System.iJoin</ulink></para> 
		  </section> 
		  <section id="O-System.iProjectRowOperator"> 
				<title><indexterm> 
						  <primary>Row Operators</primary> 
						  <secondary>over</secondary> 
					 </indexterm>System.iProject (Row)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">over</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iProject</phrase>.</para> 
				<para>See 
					 <ulink type="xref"
					 url="O-System.iProject.html">System.iProject</ulink>.</para> 
		  </section> 
		  <section id="O-System.iRemoveRowOperator"> 
				<title><indexterm> 
						  <primary>Row Operators</primary> 
						  <secondary>remove</secondary> 
					 </indexterm>System.iRemove</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">remove</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iRemove</phrase>.</para> 
				<para>See 
					 <ulink type="xref"
					 url="O-System.iRemove.html">System.iRemove</ulink>.</para> 
		  </section> 
		  <section id="O-System.iRenameRowOperator"> 
				<title><indexterm> 
						  <primary>Row Operators</primary> 
						  <secondary>rename</secondary> 
					 </indexterm>System.iRename</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">rename</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iRename</phrase>.</para> 
				<para>See 
					 <ulink type="xref"
					 url="O-System.iRename.html">System.iRename</ulink>.</para> 
		  </section> 
	 </section> 
	 <section id="O-System.SecurityOperators"> 
		  <title>Security Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.AddUserToRole"> 
				<title><indexterm> 
						  <primary>AddUserToRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>AddUserToRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>AddUserToRole</secondary> 
					 </indexterm>System.AddUserToRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.AddUserToRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">AddUserToRole</phrase> adds the user to
					 the role</para> 
				<example> 
					 <title>Using System.AddUserToRole</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRight("AddProgram");
GrantRightToRole("AddProgram", "SoftwareDeveloper");

CreateUser("JS1", "John Smith", "Password");
AddUserToRole("JS1", "SoftwareDeveloper");

DropUser("JS1");
DropRight("AddProgram");
DropRole("SoftwareDeveloper");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RemoveUserFromRole.html">System.RemoveUserFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleExists.html">System.RoleExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleHasRight.html">System.RoleHasRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.ChangeDeviceUserPassword"> 
				<title><indexterm> 
						  <primary>ChangeDeviceUserPassword - Security
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ChangeDeviceUserPassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>ChangeDeviceUserPassword</secondary> 
					 </indexterm>System.ChangeDeviceUserPassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ChangeDeviceUserPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ChangeDeviceUserPassword</phrase> makes
					 it possible for passwords to be changed. By specifying the device, the old
					 password and a new password, this operator changes the password used to access
					 the device for the current user.</para> 
				<example> 
					 <title>Using System.ChangeDeviceUserPassword</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
create device Linter
	class "Alphora.Dataphor.DAE.Device.Linter.LinterDevice,AlphoraLinterDevice";
CreateDeviceUser("JS1", "Linter", "SYSTEM", "DevicePassword");
ChangeDeviceUserPassword("Linter", "SYSTEM", "NewDevicePassword");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="olinkb" url="DUGP1Users.html">Users</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.ChangePassword"> 
				<title><indexterm> 
						  <primary>ChangePassword - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>ChangePassword - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>ChangePassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>ChangePassword</secondary> 
					 </indexterm>System.ChangePassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.ChangePassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">ChangePassword</phrase> changes the
					 password for the current Dataphor user.</para> 
				<example> 
					 <title>Using System.ChangePassword</title> 
					 <programlisting>ChangePassword("OldPassword", "NewPassword");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.CreateDeviceUser"> 
				<title><indexterm> 
						  <primary>CreateDeviceUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateDeviceUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>CreateDeviceUser</secondary> 
					 </indexterm>System.CreateDeviceUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateDeviceUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CreateDeviceUser</phrase> creates a
					 device user mapping for user specified by 
					 <phrase role="code">AUserID</phrase> in the device specified by
					 
					 <phrase role="code">ADeviceName</phrase>. The mapping will use
					 the login specified by 
					 <phrase role="code">ADeviceUserID</phrase>, and the password
					 specified by 
					 <phrase role="code">ADevicePassword</phrase> to connect to the
					 device. Additional connection parameters can be specified using 
					 <phrase role="code">AConnectionParameters</phrase>.</para> 
				<para>For information on device user mappings and connection
					 strings, refer to the 
					 <ulink type="link" url="DDGP2BasicConnectivity.html">Basic
						  Connectivity</ulink> section of the Dataphor Developer's Guide.</para> 
				<example> 
					 <title>Using System.CreateDeviceUser</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
create device Linter
	 class "Alphora.Dataphor.DAE.Device.Linter.LinterDevice,AlphoraLinterDevice";
CreateDeviceUser("JS1", "Linter", "SYSTEM", "DevicePassword");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.CreateDeviceUserWithEncryptedPassword"> 
				<title><indexterm> 
						  <primary>CreateDeviceUserWithEncryptedPassword, Security
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateDeviceUserWithEncryptedPassword</secondary>
						  
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>CreateDeviceUserWithEncryptedPassword</secondary>
						  
					 </indexterm>System.CreateDeviceUserWithEncryptedPassword</title>
				
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateDeviceUserWithEncryptedPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase
					 role="code">CreateDeviceUserWithEncryptedPassword</phrase> creates a device
					 user for the user specified by 
					 <phrase role="code">AUserID</phrase> in the device specified by
					 
					 <phrase role="code">ADeviceName</phrase>. The device user will
					 use the login specified by 
					 <phrase role="code">ADeviceUserID</phrase>, and the password
					 specified by the encrypted string 
					 <phrase role="code">AEncryptedDevicePassword</phrase>.
					 Additional connection parameters can be specified using 
					 <phrase role="code">AConnectionParameters</phrase>.</para> 
				<para>For information on device user mappings and connection
					 strings, refer to the 
					 <ulink type="link" url="DDGP2BasicConnectivity.html">Basic
						  Connectivity</ulink> section of the Dataphor Developer's Guide.</para> 
				<example> 
					 <title>Using
						  System.CreateDeviceUserWithEncryptedPassword</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
create device Linter
	class "Alphora.Dataphor.DAE.Device.Linter.LinterDevice,AlphoraLinterDevice";
select EncryptPassword("DevicePassword");
CreateDeviceUserWithEncrypedPassword
(
 "JS1",
 "Linter",
 "SYSTEM",
 "ENOq2MyVfW04WwuFthdVmu4="
);</programlisting> 
					 <programlisting>ENOq2MyVfW04WwuFthdVmu4=</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.CreateRight"> 
				<title><indexterm> 
						  <primary>CreateRight - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateRight</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>CreateRight</secondary> 
					 </indexterm>System.CreateRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>A right is the basic unit of permission in the Dataphor
					 Server. Any operation which must be protected has an associated right. Rights
					 are then assigned to users and roles to allow users access to the various
					 objects and functions of the Dataphor Server. A right can be granted or
					 revoked, and a right assignment can be reverted. The Dataphor Server defines
					 several system rights which protect basic Dataphor Server functions such as DDL
					 statements.</para> 
				<para>Whenever a catalog object is created, the rights necessary to
					 protect operations on that object are also created. For example, creating a
					 table creates select, insert, update, and delete rights for that table, as well
					 as alter and drop rights.</para> 
				<para>The user that creates a catalog item has full rights to that
					 item.</para> 
				<para>Because a right is not a catalog object, its name is only
					 required to be unique among the other rights in the system, not among all the
					 catalog objects.</para> 
				<para>If the UserID is not specified, the current user will be the
					 owner of the right. If the UserID is specified, the current user must have the 
					 <phrase role="code">System.AlterUser</phrase> right and the
					 specified user will be the owner of the right.</para> 
				<example> 
					 <title>Using System.CreateRight</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRight("AddProgram");
GrantRightToRole("AddProgram", "SoftwareDeveloper");

CreateUser("JS1", "John Smith", "Password");
AddUserToRole("JS1", "SoftwareDeveloper");

DropUser("JS1");
DropRight("AddProgram");
DropRole("SoftwareDeveloper");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserHasRight.html">System.UserHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.CreateRole"> 
				<title><indexterm> 
						  <primary>CreateRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>CreateRole</secondary> 
					 </indexterm>System.CreateRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>A role is a group of right assignments in the Dataphor
					 Server. The Dataphor Server defines several system roles which it uses to
					 manage basic system rights. Users can be assigned to any number of roles. When
					 a user is a member of a role, the rights assigned to that role are available to
					 the user. A role is a catalog object with rights and ownership.</para> 
				<example> 
					 <title>Using System.CreateRole</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRight("AddProgram");
GrantRightToRole("AddProgram", "SoftwareDeveloper");

CreateUser("JS1", "John Smith", "Password");
AddUserToRole("JS1", "SoftwareDeveloper");

DropUser("JS1");
DropRight("AddProgram");
DropRole("SoftwareDeveloper");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRole.html">System.DropRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RemoveUserFromRole.html">System.RemoveUserFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleExists.html">System.RoleExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleHasRight.html">System.RoleHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.CreateUser"> 
				<title><indexterm> 
						  <primary>CreateUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>CreateUser</secondary> 
					 </indexterm>System.CreateUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Creates a user in the Dataphor Server with the specified ID,
					 name, and password. For more information on users and security, refer to the
					 Security documentation in the Dataphor User's Guide and Dataphor Developer's
					 Guide.</para> 
				<example> 
					 <title>Using System.CreateUser</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
DropUser("JS1");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserName.html">System.UserName</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserID.html">System.UserID</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.ChangePassword.html">System.ChangePassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RemoveUserFromRole.html">System.RemoveUserFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetUserName.html">System.SetUserName</ulink></para> 
		  </section> 
		  <section id="O-System.CreateUserWithEncryptedPassword"> 
				<title><indexterm> 
						  <primary>CreateUserWithEncryptedPassword - Security
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CreateUserWithEncryptedPassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>CreateUserWithEncryptedPassword</secondary> 
					 </indexterm>System.CreateUserWithEncryptedPassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CreateUserWithEncryptedPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Creates a user with the password specified by the encrypted
					 string.</para> 
				<example> 
					 <title>Using System.CreateUserWithEncryptedPassword</title> 
					 <programlisting>select EncryptPassword("Password");</programlisting> 
					 <programlisting>ED9BnEp1mumPakUrawTrdYA=</programlisting> 
					 <programlisting>CreateUserWithEncryptedPassword
(
  "JS1",
  "JohnSmith1",
  "ED9BnEp1mumPakUrawTrdYA="
);

DropUser("JS1");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangePassword.html">System.ChangePassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RemoveUserFromRole.html">System.RemoveUserFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetUserName.html">System.SetUserName</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserHasRight.html">System.UserHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.DecryptString"> 
				<title> 
					 <indexterm> 
						  <primary>DecryptString - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DecryptString</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>DecryptString</secondary> 
					 </indexterm>System.DecryptString </title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DecryptString" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting>
					  <?DocLib D4Field Declaration?>
				  </programlisting> </para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para> Returns a decrypted representation of the given encrypted
					 string. The encrypted string should have been produced using 
					 <ulink type="xref"
					 url="O-System.EncryptString.html">EncryptString</ulink>. Unlike EncryptString,
					 DecryptString is deterministic because given a certain encrypted string it will
					 always produce the same encrypted result. EncryptString and DecryptString are
					 based on symetrical (hidden key) encryption using the Rijndael
					 algorithm.</para> 
				<example> 
					 <title>Using System.DecryptString</title> 
					 <programlisting>select DecryptString("ptTFNJl2/2JHNnIgPhORS/tgmjcPPpOE/WyPSO9u8uY=");</programlisting> 
					 <programlisting>Text To Hide</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink type="xref"
					 url="O-System.SecurityOperators.html">Security Operators</ulink> | 
					 <ulink type="xref"
					 url="O-System.EncryptString.html">System.EncryptString</ulink> </para> 
		  </section> 
		  <section id="O-System.DeviceUserExists"> 
				<title><indexterm> 
						  <primary>DeviceUserExists - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DeviceUserExists</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>DeviceUserExists</secondary> 
					 </indexterm>System.DeviceUserExists</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DeviceUserExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Returns 
					 <phrase role="code">true</phrase> if the specified Device User
					 (AUserID) exists, otherwise returns 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.DeviceUserExists</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
create device Linter
	class "Alphora.Dataphor.DAE.Device.Linter.LinterDevice,AlphoraLinterDevice";
CreateDeviceUser ("JS1", "Linter", "SYSTEM", "DevicePassword");
select DeviceUserExists("SYSTEM", "Linter");</programlisting> 
					 <programlisting>true</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.DropDeviceUser"> 
				<title><indexterm> 
						  <primary>DropDeviceUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DropDeviceUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>DropDeviceUser</secondary> 
					 </indexterm>System.DropDeviceUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DropDeviceUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DropDeviceUser</phrase> removes the
					 specified mapping from Dataphor user to user on device.</para> 
				<example> 
					 <title>Using System.DropDeviceUser</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
create device Linter
	 class "Alphora.Dataphor.DAE.Device.Linter.LinterDevice,AlphoraLinterDevice";
CreateDeviceUser("JS1", "Linter", "SYSTEM", "DevicePassword");
DropDeviceUser("JS1", "Linter");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.DropRight"> 
				<title><indexterm> 
						  <primary>DropRight - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DropRight</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>DropRight</secondary> 
					 </indexterm>System.DropRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DropRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DropRight</phrase> deletes the specified
					 right.</para> 
				<example> 
					 <title>Using System.DropRight</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRight("AddProgram");
GrantRightToRole("AddProgram", "SoftwareDeveloper");

CreateUser("JS1", "John Smith", "Password");
AddUserToRole("JS1", "SoftwareDeveloper");

DropUser("JS1");
DropRight("AddProgram");
DropRole("SoftwareDeveloper");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleHasRight.html">System.RoleHasRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserHasRight.html">System.UserHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.DropRole"> 
				<title><indexterm> 
						  <primary>DropRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DropRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>DropRole</secondary> 
					 </indexterm>System.DropRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DropRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DropRole</phrase> deletes the specified
					 role.</para> 
				<example> 
					 <title>Using System.DropRole</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");

DropRole("SoftwareDeveloper");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RemoveUserFromRole.html">System.RemoveUserFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink></para>
				
		  </section> 
		  <section id="O-System.DropUser"> 
				<title><indexterm> 
						  <primary>DropUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DropUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>DropUser</secondary> 
					 </indexterm>System.DropUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DropUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DropUser</phrase> drops the user
					 specified by 
					 <phrase role="code">AUserID</phrase>. This user will no longer
					 be able to login to Dataphor. Users must have the 
					 <phrase role="code">System.DropUser</phrase> right in order to
					 invoke this operator.</para> 
				<example> 
					 <title>Using System.DropUser</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
DropUser("JS1");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RemoveUserFromRole.html">System.RemoveUserFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserHasRight.html">System.UserHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.EncryptPassword"> 
				<title><indexterm> 
						  <primary>EncryptPassword - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>EncryptPassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>EncryptPassword</secondary> 
					 </indexterm>System.EncryptPassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.EncryptPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Returns the encrypted version of the specified string.</para>
				
				<example> 
					 <title>Using System.EncryptPassword</title> 
					 <programlisting>select EncryptPassword("MyPassword");</programlisting> 
					 <programlisting>EE0ixxdSnzyfSyw2APBOtG8=</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangePassword.html">System.ChangePassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.EncryptString"> 
				<title> 
					 <indexterm> 
						  <primary>EncryptString - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>EncryptString</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>EncryptString</secondary> 
					 </indexterm>System.EncryptString </title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.EncryptString" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting>
					  <?DocLib D4Field Declaration?>
				  </programlisting> </para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para> Returns an encrypted representation of the specified string.
					 A SALT (random number) is encrypted with the string to ensure that routine
					 never produces the same encrypted string. This technique is used to counter
					 dictionary based hacks. Because of the included SALT, EncryptString is not
					 deterministic. EncryptString and DecryptString are based on symetrical (hidden
					 key) encryption using the Rijndael algorithm. </para> 
				<example> 
					 <title>Using System.EncryptString</title> 
					 <programlisting>select EncryptString("Text To Hide");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para> 
					 <ulink type="xref"
					 url="O-System.SecurityOperators.html">Security Operators</ulink> | 
					 <ulink type="xref"
					 url="O-System.DecryptString.html">System.DecryptString</ulink> </para> 
		  </section> 
		  <section id="O-System.GrantRightToRole"> 
				<title><indexterm> 
						  <primary>GrantRightToRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GrantRightToRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>GrantRightToRole</secondary> 
					 </indexterm>System.GrantRightToRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GrantRightToRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GrantRightToRole</phrase> assigns the
					 specified right to the specified role.</para> 
				<example> 
					 <title>Using System.GrantRightToRole</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRight("AddProgram");

GrantRightToRole("AddProgram", "SoftwareDeveloper");

DropRight("AddProgram");
DropRole("SoftwareDeveloper");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRole.html">System.DropRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleExists.html">System.RoleExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleHasRight.html">System.RoleHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.GrantRightToUser"> 
				<title><indexterm> 
						  <primary>GrantRightToUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>GrantRightToUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>GrantRightToUser</secondary> 
					 </indexterm>System.GrantRightToUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.GrantRightToUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">GrantRightToUser</phrase> assignes the
					 specified right to the specified user.</para> 
				<example> 
					 <title>Using System.GrantRightToUser</title> 
					 <programlisting>CreateRight("AddProgram");

CreateUser("JS1", "John Smith", "Password");
GrantRightToUser("AddProgram", "JS1");

DropUser("JS1");
DropRight("AddProgram");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserHasRight.html">System.UserHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.RemoveUserFromRole"> 
				<title><indexterm> 
						  <primary>RemoveUserFromRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RemoveUserFromRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RemoveUserFromRole</secondary> 
					 </indexterm>System.RemoveUserFromRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RemoveUserFromRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RemoveUserFromRole</phrase> removes the
					 specified 
					 <phrase role="code">User</phrase> as a member of the specified 
					 <phrase role="code">Role</phrase>.</para> 
				<example> 
					 <title>Using System.RemoveUserFromRole</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRole("SoftwareTester");
CreateUser("JS1", "John Smith", "Password");

AddUserToRole("JS1", "SoftwareDeveloper");
AddUserToRole("JS1", "SoftwareTester");

select UserRoles where User_ID = "JS1";
RemoveUserFromRole("JS1", "SoftwareDeveloper");
select UserRoles where User_ID = "JS1";

DropUser("JS1");
DropRole("SoftwareDeveloper");DropRole("SoftwareTester");</programlisting> 
					 <programlisting>User_ID Role_Name             
------- ----------------------
JS1     Test.SoftwareDeveloper
JS1     Test.SoftwareTester

User_ID Role_Name             
------- ----------------------
JS1     Test.SoftwareTester</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.AddUserToRole.html">System.AddUserToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropRole.html">System.DropRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleExists.html">System.RoleExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.RevertRightForRole"> 
				<title><indexterm> 
						  <primary>RevertRightForRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RevertRightForRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RevertRightForRole</secondary> 
					 </indexterm>System.RevertRightForRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RevertRightForRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RevertRightForRole</phrase> removes any
					 reference (Grant or Revoke) to the specified 
					 <phrase role="code">Right</phrase> from the specified 
					 <phrase role="code">Role</phrase>.</para> 
				<example> 
					 <title>Using System.RevertRightForRole</title> 
					 <programlisting>CreateRight("AddProgram");
CreateRole("SoftwareDeveloper");

GrantRightToRole("AddProgram", "SoftwareDeveloper");
select RoleHasRight("SoftwareDeveloper", "AddProgram");

RevertRightForRole("AddProgram", "SoftwareDeveloper");
select RoleHasRight("SoftwareDeveloper", "AddProgram");

DropRole("SoftwareDeveloper");
DropRight("AddProgram");</programlisting> 
					 <programlisting>true
false</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRole.html">System.DropRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleExists.html">System.RoleExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleHasRight.html">System.RoleHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.RevertRightForUser"> 
				<title><indexterm> 
						  <primary>RevertRightForUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RevertRightForUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RevertRightForUser</secondary> 
					 </indexterm>System.RevertRightForUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RevertRightForUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RevertRightForUser</phrase> removes any
					 reference (Grant or Revoke) to the specified 
					 <phrase role="code">Right</phrase> from the specified 
					 <phrase role="code">User</phrase>.</para> 
				<example> 
					 <title>Using System.RevertRightForUser</title> 
					 <programlisting>CreateRight("AddProgram");
CreateUser("JS1", "John Smith", "Password");

GrantRightToUser("AddProgram", "JS1");
select UserHasRight("JS1", "AddProgram");

RevertRightForUser("AddProgram", "JS1");
select UserHasRight("JS1", "AddProgram");

DropUser("JS1");
DropRight("AddProgram");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserHasRight.html">System.UserHasRight</ulink></para> 
		  </section> 
		  <section id="O-System.RevokeRightFromRole"> 
				<title><indexterm> 
						  <primary>RevokeRightFromRole - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RevokeRightFromRole</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RevokeRightFromRole</secondary> 
					 </indexterm>System.RevokeRightFromRole</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RevokeRightFromRole" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RevokeRightFromRole</phrase> revokes the
					 specified 
					 <phrase role="code">Right</phrase> from the specified 
					 <phrase role="code">Role</phrase>.</para> 
				<example> 
					 <title>Using System.RevokeRightFromRole</title> 
					 <programlisting>CreateRight("AddProgram");
CreateRole("SoftwareDeveloper");
CreateRole("SoftwareTester");

GrantRightToRole("AddProgram", "SoftwareDeveloper");
RevokeRightFromRole("AddProgram", "SoftwareTester");
select RoleRightAssignments 
  where Right_Name = "AddProgram";

DropRight("AddProgram");
DropRole("SoftwareDeveloper");DropRole("SoftwareTester");</programlisting> 
					 <programlisting>Role_Name              Right_Name Granted
---------------------- ---------- -------
Docs.SoftwareDeveloper AddProgram True
Docs.SoftwareTester    AddProgram False</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRole.html">System.DropRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.RoleExists.html">System.RoleExists</ulink></para> 
		  </section> 
		  <section id="O-System.RevokeRightFromUser"> 
				<title><indexterm> 
						  <primary>RevokeRightFromUser - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RevokeRightFromUser</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RevokeRightFromUser</secondary> 
					 </indexterm>System.RevokeRightFromUser</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RevokeRightFromUser" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RevokeRightFromUser</phrase> revokes the
					 specified 
					 <phrase role="code">Right</phrase> from the specified 
					 <phrase role="code">User</phrase>.</para> 
				<example> 
					 <title>Using System.RevokeRightFromUser</title> 
					 <programlisting>CreateRight("AddProgram");
CreateRole("SoftwareDeveloper");
CreateUser("JS1", "John Smith", "Password");
AddUserToRole("JS1", "SoftwareDeveloper");

GrantRightToRole("AddProgram", "SoftwareDeveloper");
select UserHasRight("JS1", "AddProgram");

RevokeRightFromUser("AddProgram", "JS1");
select UserHasRight("JS1", "AddProgram");select RoleRightAssignments where Right_Name = "AddProgram";
select UserRightAssignments where User_ID = "JS1";
DropUser("JS1");
DropRole("SoftwareDeveloper");
DropRight("AddProgram");</programlisting> 
					 <programlisting>true
false

Role_Name              Right_Name Granted
---------------------- ---------- -------
Docs.SoftwareDeveloper AddProgram True

User_ID Right_Name Granted 
------- ---------- ------- 
JS1     AddProgram False </programlisting> 
					 <para>Note in this example, without the 
						  <phrase role="code">Revoke</phrase> the user JS1 would have
						  the AddProgram 
						  <phrase role="code">Right</phrase> since he is a member of
						  the SoftwareDeveloper 
						  <phrase role="code">Role</phrase>.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.RightExists"> 
				<title><indexterm> 
						  <primary>RightExists - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RightExists</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RightExists</secondary> 
					 </indexterm>System.RightExists</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RightExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RightExists</phrase> returns 
					 <phrase role="code">true</phrase> if the specified 
					 <phrase role="code">Right</phrase> exists, otherwise it returns
					 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.RightExists</title> 
					 <programlisting>CreateRight("AddProgram");

select if RightExists("AddProgram") 
    then "The AddProgram right exists"
    else "The AddProgram right does NOT exists";

DropRight("AddProgram");</programlisting> 
					 <programlisting>The AddProgram right exists</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink></para> 
		  </section> 
		  <section id="O-System.RoleExists"> 
				<title><indexterm> 
						  <primary>RoleExists - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RoleExists</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RoleExists</secondary> 
					 </indexterm>System.RoleExists</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RoleExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RoleExists</phrase> returns 
					 <phrase role="code">true</phrase> if the specified 
					 <phrase role="code">Role</phrase> exists, otherwise it returns 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.RoleExists</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");

select
 if RoleExists("SoftwareDeveloper") 
  then "The SoftwareDeveloper role exists"
  else "The SoftwareDeveloper role does NOT exists";

DropRole("SoftwareDeveloper");</programlisting> 
					 <programlisting>The SoftwareDeveloper role exists</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRole.html">System.CreateRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRole.html">System.DropRole</ulink></para> 
		  </section> 
		  <section id="O-System.RoleHasRight"> 
				<title><indexterm> 
						  <primary>RoleHasRight - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RoleHasRight</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>RoleHasRight</secondary> 
					 </indexterm>System.RoleHasRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RoleHasRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RoleHasRight</phrase> returns 
					 <phrase role="code">true</phrase> if the specified 
					 <phrase role="code">Role</phrase> has the specified 
					 <phrase role="code">Right</phrase>, otherwise it returns 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.RoleHasRight</title> 
					 <programlisting>CreateRight("AddProgram");
CreateRole("SoftwareDeveloper");

select RoleHasRight("SoftwareDeveloper", "AddProgram");
GrantRightToRole("AddProgram", "SoftwareDeveloper");
select RoleHasRight("SoftwareDeveloper", "AddProgram");

DropRole("SoftwareDeveloper");
DropRight("AddProgram");</programlisting> 
					 <programlisting>false
true</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToRole.html">System.GrantRightToRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForRole.html">System.RevertRightForRole</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromRole.html">System.RevokeRightFromRole</ulink></para>
				
		  </section> 
		  <section id="O-System.SetDeviceUserConnectionParameters"> 
				<title><indexterm> 
						  <primary>SetDeviceUserConnectionParameters - Security
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDeviceUserConnectionParameters</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetDeviceUserConnectionParameters</secondary> 
					 </indexterm>System.SetDeviceUserConnectionParameters</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDeviceUserConnectionParameters" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase
					 role="code">SetDeviceUserConnectionParameters</phrase> alters a mapping
					 previously created by 
					 <phrase role="code">CreateDeviceUser</phrase>. This only
					 changes the connection parameters used to connect to the specified
					 device.</para> 
				<example> 
					 <title>Using System.SetDeviceUserConnectionParameters</title> 
					 <programlisting>create device MSSQL reconciliation { mode = { command }, master = server }
 	class "Alphora.Dataphor.DAE.Device.MSSQL.MSSQLDevice.AlphoraMSSQLDevice";
    {
      "ServerName" = ".",
      "DatebaseName" = "SP",
						"ConnectionParameters" = "maxpoolsize=200"
    };
CreateDeviceUser("Admin", "MSSQL", "Admin", "secret");
SetDeviceUserConnectionParameters("Admin", "MSSQL", "maxpoolsize=1000");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.SetDeviceUserID"> 
				<title><indexterm> 
						  <primary>SetDeviceUserID - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDeviceUserID</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetDeviceUserID</secondary> 
					 </indexterm>System.SetDeviceUserID</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDeviceUserID" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetDeviceUserID</phrase> alters a mapping
					 previously created by 
					 <phrase role="code">CreateDeviceUser</phrase>. This only
					 changes the login used to connect to the specified device.</para> 
				<example> 
					 <title>Using System.SetDeviceUserID</title> 
					 <programlisting>create device Test
	class "Alphora.Dataphor.DAE.Device.Memory.MemoryDevice,Alphora.Dataphor.DAE";
CreateDeviceUser("Admin", "Test", "Admin", "secret");
SetDeviceUserID("Admin", "Test", "Administrator");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserPassword.html">System.SetDeviceUserPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.SetDeviceUserPassword"> 
				<title><indexterm> 
						  <primary>SetDeviceUserPassword - Security
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetDeviceUserPassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetDeviceUserPassword</secondary> 
					 </indexterm>System.SetDeviceUserPassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetDeviceUserPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetDeviceUserPassword</phrase> alters a
					 mapping previously created by 
					 <phrase role="code">CreateDeviceUser</phrase>. This only
					 changes the password used to connect to the specified device.</para> 
				<example> 
					 <title>Using System.SetDeviceUserPassword</title> 
					 <programlisting>create device Test
	class "Alphora.Dataphor.DAE.Device.Memory.MemoryDevice,Alphora.Dataphor.DAE";
CreateDeviceUser("Admin", "Test", "Admin", "secret");
SetDeviceUserPassword("Admin", "Test", "power");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Devices.html">Devices</ulink> | 
					 <ulink type="xref"
					 url="O-System.ChangeDeviceUserPassword.html">System.ChangeDeviceUserPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUser.html">System.CreateDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateDeviceUserWithEncryptedPassword.html">System.CreateDeviceUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DeviceUserExists.html">System.DeviceUserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropDeviceUser.html">System.DropDeviceUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserConnectionParameters.html">System.SetDeviceUserConnectionParameters</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.SetDeviceUserID.html">System.SetDeviceUserID</ulink></para> 
		  </section> 
		  <section id="O-System.SetEncryptedPassword"> 
				<title><indexterm> 
						  <primary>SetEncryptedPassword - Security Operator</primary>
						  
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetEncryptedPassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetEncryptedPassword</secondary> 
					 </indexterm>System.SetEncryptedPassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetEncryptedPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetEncryptedPassword</phrase> sets the
					 specified user's password the the specified encrypted password.</para> 
				<example> 
					 <title>Using System.SetEncryptedPassword</title> 
					 <programlisting>select EncryptPassword("aNewPassword");</programlisting> 
					 <programlisting>EFSF/0npXuFJdlKFRj0JnhQ=</programlisting> 
					 <programlisting>CreateUser("JS1", "John Smith", "aPasswordToUse");
SetEncryptedPassword("JS1", "EFSF/0npXuFJdlKFRj0JnhQ=");
DropUser("JS1");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.SetObjectOwner"> 
				<title><indexterm> 
						  <primary>SetObjectOwner - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetObjectOwner</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetObjectOwner</secondary> 
					 </indexterm>System.SetObjectOwner</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetObjectOwner" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The owner of an object can be changed using the 
					 <phrase role="code">SetObjectOwner</phrase> operator. All
					 rights for the object are implicitly available to the owner of the
					 object.</para> 
				<example> 
					 <title>Using System.SetObjectOwner</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "Password");
<emphasis role="bold">create table</emphasis> Example <emphasis role="bold">in</emphasis> Temp 
{ 
	UnTrimmed : String, 
	Trimmed : String, 
	<emphasis role="bold">key</emphasis> { }
};

<emphasis role="bold">select</emphasis> UserHasRight("Admin","Sample.ExampleAlter");
<emphasis role="bold">select</emphasis> UserHasRight("JS1","Sample.ExampleAlter");

SetObjectOwner("Sample.Example","JS1");
<emphasis role="bold">select</emphasis> UserHasRight("Admin","Sample.ExampleAlter");
<emphasis role="bold">select</emphasis> UserHasRight("JS1","Sample.ExampleAlter");

<emphasis role="bold">drop table</emphasis> Example;
DropUser("JS1");</programlisting> 
					 <programlisting>True
False

True
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGCatalogElements-Objects.html">Objects</ulink> | 
					 <ulink type="xref"
					 url="O-System.ObjectExists.html">System.ObjectExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.SetPassword"> 
				<title><indexterm> 
						  <primary>SetPassword - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetPassword</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetPassword</secondary> 
					 </indexterm>System.SetPassword</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetPassword" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetPassword</phrase> sets the password
					 for the specified user.</para> 
				<example> 
					 <title>Using System.SetPassword</title> 
					 <programlisting>CreateUser("JS1", "John Smith", "FirstPassword");
SetPassword("JS1", "NewPassword");
DropUser("JS1");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.SetRightOwner"> 
				<title><indexterm> 
						  <primary>SetRightOwner - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetRightOwner</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetRightOwner</secondary> 
					 </indexterm>System.SetRightOwner</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetRightOwner" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetRightOwner</phrase> is used to set 
					 <phrase role="code">AUserID</phrase> as the owner of 
					 <phrase role="code">ARightName</phrase>. The current user must
					 have sufficient rights to 
					 <phrase role="code">ARightName</phrase> and 
					 <phrase role="code">AUserID</phrase>.</para> 
				<example> 
					 <title>Using System.SetRightOwner</title> 
					 <programlisting>CreateRight("AddProgram");

select Rights where Name = "AddProgram";
CreateUser("JS1", "John Smith", "Password");
SetRightOwner("AddProgram", "JS1");
select Rights where Name = "AddProgram";

DropUser("JS1");
DropRight("AddProgram");</programlisting> 
					 <programlisting>Name       Owner_User_ID
---------- -------------
AddProgram Admin

Name       Owner_User_ID
---------- -------------
AddProgram JS1
</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.SetUserName"> 
				<title><indexterm> 
						  <primary>SetUserName - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SetUserName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>SetUserName</secondary> 
					 </indexterm>System.SetUserName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SetUserName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SetUserName</phrase> sets the User Name
					 for the specified User ID.</para> 
				<example> 
					 <title>Using System.SetUserName</title> 
					 <programlisting>CreateUser("JS1", "J. Smith" "Password");
SetUserName("JS1", "John Smith");
DropUser("JS1");</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.UserExists"> 
				<title><indexterm> 
						  <primary>UserExists - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UserExists</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>UserExists</secondary> 
					 </indexterm>System.UserExists</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UserExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UserExists</phrase> returns 
					 <phrase role="code">true</phrase> if the specified 
					 <phrase role="code">User</phrase> exists, otherwise it returns 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.UserExists</title> 
					 <programlisting>select UserExists("JS1");
CreateUser("JS1", "John Smith", "Password");
select UserExists("JS1");
DropUser("JS1");</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink></para>
				
		  </section> 
		  <section id="O-System.UserHasRight"> 
				<title><indexterm> 
						  <primary>UserHasRight - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UserHasRight</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>UserHasRight</secondary> 
					 </indexterm>System.UserHasRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UserHasRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UserHasRight</phrase> returns true if the
					 specified User has the specified Right.</para> 
				<example> 
					 <title>Using System.UserHasRight</title> 
					 <programlisting>CreateRole("SoftwareDeveloper");
CreateRight("AddProgram");
CreateUser("JS1", "John Smith", "Password");
AddUserToRole("JS1", "SoftwareDeveloper");

<emphasis role="bold">select</emphasis> UserHasRight("JS1", "AddProgram");
GrantRightToRole("AddProgram", "SoftwareDeveloper");
<emphasis role="bold">select</emphasis> UserHasRight("JS1", "AddProgram");

DropUser("JS1");
DropRight("AddProgram");
DropRole("SoftwareDeveloper");</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateRight.html">System.CreateRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropRight.html">System.DropRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.GrantRightToUser.html">System.GrantRightToUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevertRightForUser.html">System.RevertRightForUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RevokeRightFromUser.html">System.RevokeRightFromUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.RightExists.html">System.RightExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink></para> 
		  </section> 
		  <section id="O-System.UserID"> 
				<title><indexterm> 
						  <primary>UserID - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UserID</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>UserID</secondary> 
					 </indexterm>System.UserID</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UserID" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UserID</phrase> returns the 
					 <phrase role="code">UserID</phrase> for the current Dataphor
					 user.</para> 
				<example> 
					 <title>Using System.UserID</title> 
					 <programlisting>select UserID();</programlisting> 
					 <programlisting>Admin</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="link" url="T-System.UserID.html">System.UserID
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserName.html">System.UserName</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
		  <section id="O-System.UserName"> 
				<title><indexterm> 
						  <primary>UserName - Security Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UserName</secondary> 
					 </indexterm><indexterm> 
						  <primary>Security Operators</primary> 
						  <secondary>UserName</secondary> 
					 </indexterm>System.UserName</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UserName" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UserName</phrase> returns the UserName
					 for the current Dataphor user.</para> 
				<example> 
					 <title>Using System.UserName</title> 
					 <programlisting>select UserName();</programlisting> 
					 <programlisting>Administrator</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="DUGP3Security.html">Administration,
						  Security</ulink> | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Objects-Security.html">Catalog Object Security</ulink>
					 | 
					 <ulink type="olinka"
					 url="D4LGCatalogElements-Security.html">Catalog Element Security</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUser.html">System.CreateUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.CreateUserWithEncryptedPassword.html">System.CreateUserWithEncryptedPassword</ulink>
					 | 
					 <ulink type="xref"
					 url="O-System.DropUser.html">System.DropUser</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetEncryptedPassword.html">System.SetEncryptedPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.SetPassword.html">System.SetPassword</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserExists.html">System.UserExists</ulink> | 
					 <ulink type="xref"
					 url="O-System.UserID.html">System.UserID</ulink> | 
					 <ulink type="olinkb"
					 url="DUGP1Dataphoria-Aliases-SessionInformation.html">Session
						  Information</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.StringOperators"> 
		  <title>String Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.CompareText"> 
				<title><indexterm> 
						  <primary>CompareText - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CompareText</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>CompareText</secondary> 
					 </indexterm>System.CompareText</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CompareText" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CompareText</phrase> performs a case
					 insensitive compare of two strings. If the left string compares as less than
					 the right string -1 is returned. If the strings are compared as equal 0 is
					 returned. If the left string is compared as greater than the right string 1 is
					 returned.</para> 
				<example> 
					 <title>Using System.CompareText</title> 
					 <programlisting>select CompareText("ABC", "bcd");
select CompareText("abc", "ABC");
select "BCD".CompareText("abc");</programlisting> 
					 <programlisting>-1
0
1</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.iEqual.html">System.iEqual
						  (<phrase role="code">=</phrase>)</ulink> | 
					 <ulink type="xref" url="O-System.iCompare.html">System.iCompare
						  (<phrase role="code">?=</phrase>)</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Concat"> 
				<title><indexterm> 
						  <primary>Concat - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Concat</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Concat</secondary> 
					 </indexterm>System.Concat</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Concat" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Concat</phrase> can be invoked as a
					 standard or an aggregate operator. It is used to concatinate strings together
					 into a single string.</para> 
				<para><phrase role="code">Concat</phrase> as a standard operator
					 takes a 
					 <phrase role="code">List</phrase> of type 
					 <phrase role="code">String</phrase> as an argument. An optional
					 delimiter can also be passed as a 
					 <phrase role="code">String</phrase> argument. It returns a
					 string that is the concatination of the strings in the list.</para> 
				<para><phrase role="code">Concat</phrase> as an aggregate operator
					 takes an optional delimiter as a 
					 <phrase role="code">String</phrase> argument. It returns a
					 string that is the concatination of all the source string from each row.</para>
				
				<note> 
					 <para>Concatination of an empy list of strings returns an empty
						  string.</para> 
				</note> 
				<example> 
					 <title>Using System.Concat</title> 
					 <programlisting>create session table ConcatExample
{
 TheString : String,
 key{TheString}
};
begin
 var LList : list(String) := { "Concat" };
 LList.Add("Operator");
 LList.Insert("Standard", 0);
 
 ConcatExample :=
 table
  {
   row { LList.Concat(" ") TheString },
   row { LList.Concat() TheString }
  };
end;
select ConcatExample;

ConcatExample :=
 table
 {
  row { "Aggregate" TheString },
  row { "ConCat" },
  row { "Operator" }
 };
select ConcatExample group add { Concat(TheString) NoDelimiter };
select ConcatExample add { " " Delimiter } group add { Concat(TheString, Delimiter) WithDelimiter };

insert table { row { "Standalone invocation" TheString } } into ConcatExample;
select Concat( { TheString, Space } from ConcatExample add { ", " Space });

drop table ConcatExample;</programlisting> 
					 <programlisting>TheString
------------------------
Standard Concat Operator
StandardConcatOperator

NoDelimiter
-----------------------
AggregateConCatOperator

WithDelimiter
-------------------------
Aggregate ConCat Operator

Aggregate, ConCat, Operator, Standalone invocation</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Split.html">System.Split</ulink> | 
					 <ulink type="olinka"
					 url="D4LGTableExpressions-Aggregate.html">Aggregate Operators</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.EndsWith"> 
				<title><indexterm> 
						  <primary>EndsWith - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>EndsWith</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>EndsWith</secondary> 
					 </indexterm>System.EndsWith</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.EndsWith" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The 
					 <phrase role="code">EndsWith</phrase> operator does a
					 case-sensitive comparison of 
					 <phrase role="code">ASubString</phrase> and the equivalent
					 number of characters at the end of 
					 <phrase role="code">AString</phrase>. If there is an exact
					 match 
					 <phrase role="code">EndsWith</phrase> returns 
					 <phrase role="code">true</phrase>, otherwise it returns 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.EndsWith</title> 
					 <programlisting>select "Dataphoria".EndsWith("ria");</programlisting> 
					 <programlisting>True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringIndexOf.html">System.IndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringLastIndexOf.html">System.LastIndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink></para> 
		  </section> 
		  <section id="O-System.iAdditionString"> 
				<title>System.iAddition</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">iAddition</phrase> is an Arithmetic and a
					 String operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.iAddition.html">System.iAddition Arithmetic
						  Operator</ulink></para> 
		  </section> 
		  <section id="O-System.iIndexerStringOperator"> 
				<title><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>[]</secondary> 
					 </indexterm><phrase
					 role="code">iIndexer</phrase>System.iIndexer (String)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">[]</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iIndexer</phrase>. 
					 <phrase role="code">iIndexer</phrase> is an extractor
					 operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.iIndexer.html">System.iIndexer</ulink></para> 
		  </section> 
		  <section id="O-System.iLike"> 
				<title><indexterm> 
						  <primary>iLike - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>like - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>like</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>like</secondary> 
					 </indexterm>System.iLike</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iLike" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">like</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iLike</phrase>. This operator performs a
					 string comparison using an inexact match containing wildcard characters. Using
					 the wildcard characters one can specify how to limit the dataset. The percent
					 character and the underscore character are used as wildcard characters to
					 signify part of a string that is unknown. The underscore is used to represent
					 one unknown character, and the percent is used to represent an unknown number
					 of unknown characters.</para> 
				<example> 
					 <title>Using System.iLike</title> 
					 <programlisting>select Employee where Name like "J%";
select Employee where Name like "J___";</programlisting> 
					 <programlisting>ID Name 
-- ---- 
1  Joe  
2  John 
3  Josh 
4  Jeff 
5  Jake 
6  Jeff 

ID Name 
-- ---- 
2  John 
3  Josh 
4  Jeff 
5  Jake 
6  Jeff </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iMatches"> 
				<title><indexterm> 
						  <primary>iMatches - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iMatches</secondary> 
					 </indexterm><indexterm> 
						  <primary>matches - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>matches</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>matches</secondary> 
					 </indexterm>System.iMatches</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iMatches" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">matches</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iMatches</phrase>. This operator matches
					 using regular expressions. This operator functions similar to 
					 <phrase role="code">like</phrase>. For Information on how this
					 is handled, see the .NET documentation for Regular Expression Classes (linked
					 below).</para> 
				<example> 
					 <title>Using System.iMatches</title> 
					 <programlisting>select Employee where Name matches "^Jo";</programlisting> 
					 <programlisting>ID Name 
-- ---- 
1  Joe 
2  John 
3  Josh</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.iLike.html">System.iLike
						  (<phrase role="code">like</phrase>)</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink url="http://regexlib.com/CheatSheet.htm">Regular
						  Expression Cheat Sheet</ulink> | 
					 <ulink
					 url="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpgenref/html/cpconRegularExpressionsLanguageElements.asp">Regular
						  Expression Language Elements</ulink></para> 
		  </section> 
		  <section id="O-System.ListIndexOf"> 
				<title><indexterm> 
						  <primary>IndexOf - List Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IndexOf (List)</secondary> 
					 </indexterm><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>IndexOf</secondary> 
					 </indexterm>System.IndexOf (List)</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IndexOf" where Signature.StartsWith("(list,") add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IndexOf</phrase> returns the index of 
					 <phrase role="code">AValue</phrase> within 
					 <phrase role="code">AList</phrase>. If the value is not in the
					 list, -1 is returned.</para> 
				<para>Overloads that include a starting index parameter will search
					 from the given index, ignoring any preceding items. Overloads that do not
					 include this parameter assume the first item (index of zero). If this index is
					 less than zero, it is assumed to be zero; if it is greater than the list
					 length, then the list length is assumed. Overloads that include a length
					 parameter will search for up to 
					 <phrase>ALength</phrase> number of items after the starting
					 index. If 
					 <phrase>ALength</phrase> exceeds the list length then the list
					 length is used. Specifying an 
					 <phrase>ALength</phrase> value of less than zero will raise an
					 error.</para> 
				<para> 
					 <note> 
						  <para>List and string indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IndexOf</title> 
					 <programlisting>select list(String){ "a", "b", "c", "b" }.IndexOf("b");
select list(String){ "a", "b", "c", "b" }.IndexOf("x");</programlisting> 
					 <programlisting>1
-1</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.ListLastIndexOf.html">System.LastIndexOf (List)</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink></para> 
		  </section> 
		  <section id="O-System.StringIndexOf"> 
				<title><indexterm> 
						  <primary>IndexOf - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IndexOf (String)</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IndexOf</secondary> 
					 </indexterm>System.IndexOf (String)</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IndexOf" where Signature.StartsWith("(System.String,") add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IndexOf</phrase> returns an 
					 <phrase role="code">Integer</phrase> value identifying the
					 starting position in 
					 <phrase role="code">AString</phrase> of the
					 <emphasis>first</emphasis> occurrence of 
					 <phrase role="code">ASubString</phrase>. If 
					 <phrase role="code">ASubString</phrase> is not found in 
					 <phrase role="code">AString</phrase>, -1 is returned.</para> 
				<para>Overloads that include a starting index parameter will search
					 from the given index, ignoring any preceding characters. Overloads that do not
					 include this parameter assume the first character (index of zero). If this
					 index is less than zero, it is assumed to be zero; if it is greater than the
					 string length, then the string length is assumed. Overloads that include a
					 length parameter will search for up to 
					 <phrase>ALength</phrase> number of characters after the
					 starting index. If 
					 <phrase>ALength</phrase> exceeds the string length then the
					 string length is used. Specifying an 
					 <phrase>ALength</phrase> value of less than zero will raise an
					 error.</para> 
				<para><phrase role="code">IndexOf</phrase> is similar to the 
					 <phrase role="code">Pos</phrase> operator. The difference is in
					 the order of the parameters. Using method-style invocation, the operator is
					 invoked using the calling variable as the first argument of the operator.
					 Though the 
					 <phrase role="code">Pos</phrase> operator makes more sense when
					 calling using standard syntax, this operator makes more sense when called using
					 method-style invocation. 
					 <note> 
						  <para>List and string indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IndexOf</title> 
					 <programlisting>select "abcabcabc".IndexOf("b");
select "abcabcabc".LastIndexOf("b");
select "abcabcabc".IndexOf("x");
select "abcabcabc".IndexOf("b", 3, 3);
</programlisting> 
					 <programlisting>1
7
-1
4
</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringLastIndexOf.html">System.LastIndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink></para> 
		  </section> 
		  <section id="O-System.IndexOfAny"> 
				<title><indexterm> 
						  <primary>IndexOfAny - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IndexOfAny</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IndexOfAny</secondary> 
					 </indexterm>System.IndexOfAny</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IndexOfAny" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">IndexOfAny</phrase> returns the index of
					 the starting location of the <emphasis>first</emphasis> occurrence of one of
					 the substrings found in 
					 <phrase role="code">AString</phrase>. If none of the substrings
					 in the 
					 <phrase role="code">AAnyOf</phrase> list are found in 
					 <phrase role="code">AString</phrase>, -1 is returned.</para> 
				<para>Overloads that include a starting index parameter will search
					 the string from the given index, ignoring any preceding characters. Overloads
					 that do not include this parameter assume the first character (index of zero).
					 If this index is less than zero, it is assumed to be zero; if it is greater
					 than the string length, then the string length is assumed. Overloads that
					 include a length parameter will search for up to 
					 <phrase>ALength</phrase> number of characters after the
					 starting index. If 
					 <phrase>ALength</phrase> exceeds the string length then the
					 string length is used. Specifying an 
					 <phrase>ALength</phrase> value of less than zero will raise an
					 error.</para> 
				<para>The substrings are each checked and the match with the lowest
					 index is returned. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IndexOfAny</title> 
					 <programlisting>create session table Example 
 { Index : Integer, Occurance : String, key{TIndex} };
begin
 var LStringList : list(String) := { "or", "at", "if", "oo" };
 insert table
 {
  row
  { 
   "Dataphor from Alphora is so cool!".IndexOfAny(LStringList) TIndex,
   "First" Occurance
  }
 } into Example;
 insert table
 {
  row
  { 
   "Dataphor from Alphora is so cool!".LastIndexOfAny(LStringList) TIndex,
   "Last" Occurance
  }
 } into Example;
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>TIndex Occurance
------ ---------
6      First
18     Last</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOf.html">System.IndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringLastIndexOf.html">System.LastIndexOf (String)</ulink> | 
					 <ulink type="xref"
					 url="O-System.ListLastIndexOf.html">System.LastIndexOf (List)</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink></para> 
		  </section> 
		  <section id="O-System.InsertStringOperator"> 
				<title><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Insert</secondary> 
					 </indexterm>System.Insert (String)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><ulink type="xref" url="O-System.Insert.html"><phrase
						  role="code">System.Insert</phrase></ulink> is a Cursor, List, and String
					 operator. See 
					 <ulink type="xref"
					 url="O-System.Insert.html">System.Insert</ulink>.</para> 
		  </section> 
		  <section id="O-System.IsDigit"> 
				<title><indexterm> 
						  <primary>IsDigit - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsDigit</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IsDigit</secondary> 
					 </indexterm>System.IsDigit</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsDigit" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is specified, 
					 <phrase role="code">IsDigit</phrase> returns 
					 <phrase role="code">true</phrase> if the character 
					 <phrase role="code">AString[AIndex]</phrase> is a digit,
					 otherwise 
					 <phrase role="code">IsDigit</phrase> returns 
					 <phrase role="code">false</phrase>.</para> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is not specified, 
					 <phrase role="code">IsDigit</phrase> returns 
					 <phrase role="code">true</phrase> if every character of 
					 <phrase role="code">AString</phrase> is a digit, otherwise 
					 <phrase role="code">IsDigit</phrase> returns 
					 <phrase role="code">false</phrase>. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IsDigit</title> 
					 <programlisting>select IsDigit("123abc");
select IsDigit("123abc", 0);</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsLetter.html">System.IsLetter</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsLetterOrDigit.html">System.IsLetterOrDigit</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer</ulink></para>
				
		  </section> 
		  <section id="O-System.IsLetter"> 
				<title><indexterm> 
						  <primary>IsLetter - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsLetter</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IsLetter</secondary> 
					 </indexterm>System.IsLetter</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsLetter" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is specified, 
					 <phrase role="code">IsLetter</phrase> returns 
					 <phrase role="code">true</phrase> if the character 
					 <phrase role="code">AString[AIndex]</phrase> is a letter,
					 otherwise 
					 <phrase role="code">IsLetter</phrase> returns 
					 <phrase role="code">false</phrase>.</para> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is not specified, 
					 <phrase role="code">IsLetter</phrase> returns 
					 <phrase role="code">true</phrase> if every character of 
					 <phrase role="code">AString</phrase> is a letter, otherwise 
					 <phrase role="code">IsLetter</phrase> returns 
					 <phrase role="code">false</phrase>. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IsLetter</title> 
					 <programlisting>select IsLetter("123abc");
select IsLetter("123abc", 4);</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsDigit.html">System.IsDigit</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsLetterOrDigit.html">System.IsLetterOrDigit</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer</ulink></para>
				
		  </section> 
		  <section id="O-System.IsLetterOrDigit"> 
				<title><indexterm> 
						  <primary>IsLetterOrDigit - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsLetterOrDigit</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IsLetterOrDigit</secondary> 
					 </indexterm>System.IsLetterOrDigit</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsLetterOrDigit" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is specified, 
					 <phrase role="code">IsLetterOrDigit</phrase> returns 
					 <phrase role="code">true</phrase> if the character 
					 <phrase role="code">AString[AIndex]</phrase> is a letter or a
					 digit, otherwise 
					 <phrase role="code">IsLetterOrDigit</phrase> returns 
					 <phrase role="code">false</phrase>.</para> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is not specified, 
					 <phrase role="code">IsLetterOrDigit</phrase> returns 
					 <phrase role="code">true</phrase> if every character of 
					 <phrase role="code">AString</phrase> is a letter or a digit,
					 otherwise 
					 <phrase role="code">IsLetterOrDigit</phrase> returns 
					 <phrase role="code">false</phrase>. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IsLetterOrDigit</title> 
					 <programlisting>select IsLetterOrDigit("$123.85");
select IsLetterOrDigit("$123.85", 3);</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsDigit.html">System.IsDigit</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsLetter.html">System.IsLetter</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer</ulink></para>
				
		  </section> 
		  <section id="O-System.IsLower"> 
				<title><indexterm> 
						  <primary>IsLower - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsLower</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IsLower</secondary> 
					 </indexterm>System.IsLower</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsLower" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is specified, 
					 <phrase role="code">IsLower</phrase> returns 
					 <phrase role="code">true</phrase> if the character 
					 <phrase role="code">AString[AIndex]</phrase> is a lower case
					 letter, otherwise 
					 <phrase role="code">IsLower</phrase> returns 
					 <phrase role="code">false</phrase>.</para> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is not specified, 
					 <phrase role="code">IsLower</phrase> returns 
					 <phrase role="code">true</phrase> if every character of 
					 <phrase role="code">AString</phrase> that is a letter is a
					 lower case letter, otherwise 
					 <phrase role="code">IsLower</phrase> returns 
					 <phrase role="code">false</phrase>. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IsLower</title> 
					 <programlisting>select IsLower("abcDEF");
select IsLower("abcDEF", 0);</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsUpper.html">System.IsUpper</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer</ulink></para>
				
		  </section> 
		  <section id="O-System.IsUpper"> 
				<title><indexterm> 
						  <primary>IsUpper - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>IsUpper</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>IsUpper</secondary> 
					 </indexterm>System.IsUpper</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.IsUpper" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is specified, 
					 <phrase role="code">IsUpper</phrase> returns 
					 <phrase role="code">true</phrase> if the character 
					 <phrase role="code">AString[AIndex]</phrase> is an upper case
					 letter, otherwise 
					 <phrase role="code">IsUpper</phrase> returns 
					 <phrase role="code">false</phrase>.</para> 
				<para>If 
					 <phrase role="code">AIndex</phrase> is not specified, 
					 <phrase role="code">IsUpper</phrase> returns 
					 <phrase role="code">true</phrase> if every character of 
					 <phrase role="code">AString</phrase> that is a letter is an
					 upper case letter, otherwise 
					 <phrase role="code">IsUpper</phrase> returns 
					 <phrase role="code">false</phrase>. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.IsUpper</title> 
					 <programlisting>select IsUpper("abcDEF");
select IsUpper("abcDEF", 4);</programlisting> 
					 <programlisting>False
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.IsLower.html">System.IsLower</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer</ulink></para>
				
		  </section> 
		  <section id="O-System.ListLastIndexOf"> 
				<title><indexterm> 
						  <primary>LastIndexOf - List Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LastIndexOf - List</secondary> 
					 </indexterm><indexterm> 
						  <primary>List Operators</primary> 
						  <secondary>LastIndexOf</secondary> 
					 </indexterm>System.LastIndexOf (List)</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LastIndexOf" where Signature.StartsWith("(list,") add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LastIndexOf</phrase> returns an 
					 <phrase role="code">Integer</phrase> value identifying index of
					 the <emphasis>last</emphasis> occurrence of 
					 <phrase role="code">AValue</phrase> in the given list. If 
					 <phrase role="code">AValue</phrase> is not found in 
					 <phrase role="code">AList</phrase>, -1 is returned.</para> 
				<para>Overloads that include a starting index parameter will search
					 the list backwards from the given index, ignoring any following items.
					 Overloads that do not include this parameter assume the last item. If the given
					 index is less than zero, it is assumed to be zero; if it is greater than the
					 list length, then the list length is assumed. Overloads that include a length
					 parameter will search up to 
					 <phrase>ALength</phrase> number of items before the starting
					 index. If 
					 <phrase>ALength</phrase> exceeds the list bounds then the
					 maximum possible length is used. Specifying an 
					 <phrase>ALength</phrase> value of less than zero will raise an
					 error.</para> 
				<para> 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.LastIndexOf</title> 
					 <programlisting>select { "A", "B", "A" }.IndexOf("A");
select { "A", "B", "A" }.LastIndexOf("A");
</programlisting> 
					 <programlisting>0
2</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.ListIndexOf.html">System.IndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.StringLastIndexOf"> 
				<title><indexterm> 
						  <primary>LastIndexOf - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LastIndexOf - String</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>LastIndexOf</secondary> 
					 </indexterm>System.LastIndexOf (String)</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LastIndexOf" where Signature.StartsWith("(System.String,") add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LastIndexOf</phrase> returns an 
					 <phrase role="code">Integer</phrase> value identifying starting
					 position in 
					 <phrase role="code">AString</phrase> of the
					 <emphasis>last</emphasis> occurrence of 
					 <phrase role="code">ASubString</phrase>. If 
					 <phrase role="code">ASubString</phrase> is not found in 
					 <phrase role="code">AString</phrase>, -1 is returned.</para> 
				<para>Overloads that include a starting index parameter will search
					 the string backwards from the given index, ignoring any following characters.
					 Overloads that do not include this parameter assume the last character. If this
					 index is less than zero, it is assumed to be zero; if it is greater than the
					 string length, then the string length is assumed. Overloads that include a
					 length parameter will search for up to 
					 <phrase>ALength</phrase> number of characters before the
					 starting index. If 
					 <phrase>ALength</phrase> exceeds the string bounds then the
					 maximum possible length is used. Specifying an 
					 <phrase>ALength</phrase> value of less than zero will raise an
					 error.</para> 
				<para><phrase role="code">LastIndexOf</phrase> is similar to the 
					 <phrase role="code">LastPos</phrase> operator. The difference
					 is in the order of the parameters. Using method-style invocation, the operator
					 is invoked using the calling variable as the first argument of the operator.
					 Though the 
					 <phrase role="code">LastPos</phrase> operator makes more sense
					 when using standard invocation, this operator makes more sense when using
					 method-style invocation. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.LastIndexOf</title> 
					 <programlisting>select "abcabcabc".IndexOf("b");
select "abcabcabc".LastIndexOf("b");
select "abcabcabc".LastIndexOf("b", 3, 3);
select "abcabcabc".LastIndexOf("x");</programlisting> 
					 <programlisting>1
7
1
-1</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringIndexOf.html">System.IndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.LastIndexOfAny"> 
				<title><indexterm> 
						  <primary>LastIndexOfAny - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LastIndexOfAny</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>LastIndexOfAny</secondary> 
					 </indexterm>System.LastIndexOfAny</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LastIndexOfAny" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LastIndexOfAny</phrase> returns the index
					 of the starting location of the <emphasis>last</emphasis> occurrence of one of
					 the given substrings found in 
					 <phrase role="code">AString</phrase>. If none of the substrings
					 in the 
					 <phrase role="code">AAnyOf</phrase> list are found in 
					 <phrase role="code">AString</phrase>, -1 is returned.</para> 
				<para>Overloads that include a starting index parameter will search
					 the string backwards from the given index, ignoring any following characters.
					 Overloads that do not include this parameter assume the last character. If the
					 index given is less than zero, it is assumed to be zero; if it is greater than
					 the string length, then the string length is assumed (one position after the
					 last index). Overloads with a length parameter will search for up to 
					 <phrase>ALength</phrase> characters before the starting index.
					 If the starting index minus the 
					 <phrase>ALength</phrase> exceeds the string bounds then the
					 maximum possible length is assumed. Specifying an 
					 <phrase>ALength</phrase> value of less than zero will raise an
					 error.</para> 
				<para>The substrings are each checked and the one resulting in the
					 greatest index is choosen. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.LastIndexOfAny</title> 
					 <programlisting>create session table Example 
{
 Index : Integer, Occurance : String, key{Index}
};
begin
 var LStringList := { "or", "at", "if", "oo" };
 insert 
  row
  { 
   "Dataphor from Alphora is so cool!".IndexOfAny(LStringList) Index,
   "First" Occurance
  }
  into Example;
 insert
  row
  { 
   "Dataphor from Alphora is so cool!".LastIndexOfAny(LStringList) Index,
   "Last" Occurance
  }
  into Example;
end;
select Example;
drop table Example;</programlisting> 
					 <programlisting>Index Occurance
------ ---------
6      First
18     Last</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringIndexOf.html">System.IndexOf (String)</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringLastIndexOf.html">System.LastIndexOf (String)</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.LastPos"> 
				<title><indexterm> 
						  <primary>LastPos - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LastPos</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>LastPos</secondary> 
					 </indexterm>System.LastPos</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LastPos" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LastPOS</phrase> returns an 
					 <phrase role="code">Integer</phrase> value identifying the
					 starting position in 
					 <phrase role="code">AString</phrase> of the LAST occurrence of 
					 <phrase role="code">ASubString</phrase>. If 
					 <phrase role="code">ASubString</phrase> is not found in 
					 <phrase role="code">AString</phrase>, -1 is returned.</para> 
				<para><phrase role="code">LastPOS</phrase> is similar to the 
					 <phrase role="code">LastIndexOf</phrase> operator. The
					 difference is in the order of the parameters. Using method-style invocation,
					 the operator is invoked using the calling argument as the first argument of the
					 operator. Though the 
					 <phrase role="code">LastIndexOf</phrase> operator makes more
					 sense when using method-style invocation, this operator makes more sense when
					 called using standard invocation. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.LastPos</title> 
					 <programlisting>select Pos("b", "abcabcabc");
select LastPos("b", "abcabcabc");
select if LastPos("x", "abcabcabc") &gt;= 0 then "Found it" else "Not found";</programlisting> 
					 <programlisting>1
7
Not found</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringIndexOf.html">System.IndexOf</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringLastIndexOf.html">System.LastIndexOf (String)</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Length"> 
				<title><indexterm> 
						  <primary>Length - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Length</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Length</secondary> 
					 </indexterm>System.Length</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Length" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Length</phrase> returns the length of the
					 specified string.</para> 
				<example> 
					 <title>Using System.Length</title> 
					 <programlisting>select Employee add { Name.Length() NameLength};</programlisting> 
					 <programlisting>ID Name NameLength
-- ---- ----------
1  Joe  3
2  John 4
3  Josh 4
4  Jeff 4
5  Jake 4
6  Jeff 4</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Lower"> 
				<title><indexterm> 
						  <primary>Lower - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Lower</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Lower</secondary> 
					 </indexterm>System.Lower</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Lower" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Lower</phrase> returns the lower case
					 equivalent of the specified string.</para> 
				<example> 
					 <title>Using System.Lower</title> 
					 <programlisting>select Employee add {Name.Lower() LowerName};</programlisting> 
					 <programlisting>ID Name LowerName
-- ---- ---------
1  Joe  joe
2  John john
3  Josh josh
4  Jeff jeff
5  Jake jake
6  Jeff jeff</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsUpper.html">System.IsUpper</ulink> | 
					 <ulink type="xref"
					 url="O-System.IsLower.html">System.IsLower</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.PadLeft"> 
				<title><indexterm> 
						  <primary>PadLeft - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>PadLeft</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>PadLeft</secondary> 
					 </indexterm>System.PadLeft</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.PadLeft" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">PadLeft</phrase> right-aligns the
					 characters in 
					 <phrase role="code">AString</phrase>, padding on the left with
					 spaces or optionally a specified string 
					 <phrase role="code">APadChar</phrase>, for a specified total
					 length 
					 <phrase role="code">ATotalLength</phrase>.</para> 
				<example> 
					 <title>Using System.PadLeft</title> 
					 <programlisting>create session table Example
{
 Before : String,
 After : String, key{}
};
begin
	var LString : String;
	LString := "Hello World";
	insert table
 {
  row 
  {
   LString Before, LString.PadLeft(15, "*") After
  }
 } into Example;
end;
select Example add { After.Length() AfterLength };
drop table Example;</programlisting> 
					 <programlisting>Before      After           AfterLength
----------- --------------- -----------
Hello World ****Hello World 15</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Trim.html">System.Trim</ulink> | 
					 <ulink type="xref"
					 url="O-System.TrimLeft.html">System.TrimLeft</ulink> | 
					 <ulink type="xref"
					 url="O-System.TrimRight.html">System.TrimRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.PadRight.html">System.PadRight</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.PadRight"> 
				<title><indexterm> 
						  <primary>PadRight - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>PadRight</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>PadRight</secondary> 
					 </indexterm>System.PadRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.PadRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">PadRight</phrase> left-aligns the
					 characters in 
					 <phrase role="code">AString</phrase>, padding on the right with
					 spaces or optionally a specified string 
					 <phrase role="code">APadChar</phrase>, for a specified total
					 length 
					 <phrase role="code">ATotalLength</phrase>.</para> 
				<example> 
					 <title>Using System.PadRight</title> 
					 <programlisting>create session table Example
{
 Before : String, After : String, key{}
};
begin
	var LString : String;
	LString := "Hello World";
	insert table
 {
  row 
  {
   LString Before, LString.PadRight(15, "*") After
  }
 } into Example;
end;
select Example add { After.Length() AfterLength };
drop table Example;</programlisting> 
					 <programlisting>Before      After           AfterLength
----------- --------------- -----------
Hello World Hello World**** 15</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Trim.html">System.Trim</ulink> | 
					 <ulink type="xref"
					 url="O-System.TrimLeft.html">System.TrimLeft</ulink> | 
					 <ulink type="xref"
					 url="O-System.TrimRight.html">System.TrimRight</ulink> | 
					 <ulink type="xref"
					 url="O-System.PadLeft.html">System.PadLeft</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Pos"> 
				<title><indexterm> 
						  <primary>Pos - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Pos</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Pos</secondary> 
					 </indexterm>System.Pos</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Pos" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Pos</phrase> returns an 
					 <phrase role="code">Integer</phrase> value identifying the
					 starting position in 
					 <phrase role="code">AString</phrase> of the FIRST occurrence of
					 
					 <phrase role="code">ASubString</phrase>. If 
					 <phrase role="code">ASubString</phrase> is not found in 
					 <phrase role="code">AString</phrase>, -1 is returned.</para> 
				<para><phrase role="code">Pos</phrase> is similar to the 
					 <phrase role="code">IndexOf</phrase> operator. The difference
					 is in the order of the parameters. Using method-style invocation, the operator
					 is invoked passing the calling argument as the first argument to the operator.
					 Though the 
					 <phrase role="code">IndexOf</phrase> operator makes more sense
					 when using method-style invocation, this operator makes more sense when using
					 standard invocation. 
					 <note> 
						  <para>String and list indexes are zero based.</para> 
					 </note></para> 
				<example> 
					 <title>Using System.Pos</title> 
					 <programlisting>select Pos("b", "abcabcabc");
select LastPos("b", "abcabcabc");
select if Pos("x", "abcabcabc") &gt;= 0 then "Found it" else "Not found";</programlisting> 
					 <programlisting>1
7
Not found</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.StartsWith.html">System.StartsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringIndexOf.html">System.IndexOf (String)</ulink> | 
					 <ulink type="xref"
					 url="O-System.StringLastIndexOf.html">System.LastIndexOf (String)</ulink> | 
					 <ulink type="xref"
					 url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref"
					 url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					 url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					 url="O-System.Upper.html">System.Upper</ulink> | 
					 <ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-QualifierExpression.html">Qualifier
						  Expression</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.RemoveStringOperator"> 
				<title><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Remove</secondary> 
					 </indexterm>System.Remove (String)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Remove</phrase> is a list and a string
					 operator. See 
					 <ulink type="xref"
					 url="O-System.RemoveAt.html">System.Remove</ulink>.</para> 
		  </section> 
		  <section id="O-System.Replace"> 
				<title><indexterm> 
						  <primary>Replace - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Replace</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Replace</secondary> 
					 </indexterm>System.Replace</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Replace" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Replace</phrase> replaces all occurrences
					 of 
					 <phrase role="code">OldString</phrase> with 
					 <phrase role="code">ANewString</phrase> in 
					 <phrase role="code">AString</phrase>. AOldString and ANewString
					 are not required to be the same length.</para> 
				<example> 
					 <title>Using System.Replace</title> 
					 <programlisting>select "Let's play leap bunny.".Replace("bunny","frog");</programlisting> 
					 <programlisting>Let's play leap frog.</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Split"> 
				<title><indexterm> 
						  <primary>Split - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Split</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Split</secondary> 
					 </indexterm>System.Split</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Split" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Split</phrase> is used to split the given
					 string into a list of strings. The splitting is based on one or more
					 delimiters.</para> 
				<para><phrase role="code">Split</phrase> invoked with only one
					 argument, 
					 <phrase role="code">AString</phrase>, will use the default
					 delimiters "," and ";" (comma and semi-colon).</para> 
				<para><phrase role="code">Split</phrase> invoked with two
					 arguments, 
					 <phrase role="code">AString</phrase> and 
					 <phrase role="code">ADelimiter</phrase>, will split 
					 <phrase role="code">AString</phrase> at each point where 
					 <phrase role="code">ADelimiter</phrase> is found in the
					 string.</para> 
				<para><phrase role="code">Split</phrase> invoked with two
					 arguments, 
					 <phrase role="code">AString</phrase> and 
					 <phrase role="code">ADelimiters</phrase>, will split 
					 <phrase role="code">AString</phrase> at each point where any of
					 the delimiters in the list 
					 <phrase role="code">ADelimiters</phrase> is found.</para> 
				<note> 
					 <para>Splitting an empty string will return an empty
						  string.</para> 
					 <para>Splitting a string that contains no delimiter(s) will
						  return the original string.</para> 
				</note> 
				<example> 
					 <title>Using System.Split</title> 
					 <programlisting>create session table SplitExample
{
	ListIndex : Integer,
	SubString : String,
	key { ListIndex }
};
begin
  var LList : list(String);
  var Recipe := "Bread contains: Flour, Sugar, Water, Oil, Yeast, Salt";
  LList := Recipe.Split( { ":", "," } );
  for I : Integer := 0 to LList.Count() - 1 do
    insert
      table
      {
        row { I ListIndex, LList[I].Trim() SubString }
      } into SplitExample;
end;
select SplitExample;
drop table SplitExample;</programlisting> 
					 <programlisting>ListIndex SubString
--------- --------------
0         Bread contains
1         Flour
2         Sugar
3         Water
4         Oil
5         Yeast
6         Salt</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.ConCat.html">System.ConCat</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.StartsWith"> 
				<title><indexterm> 
						  <primary>StartsWith - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>StartsWith</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>StartsWith</secondary> 
					 </indexterm>System.StartsWith</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.StartsWith" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">StartsWith</phrase> does a case-sensitive
					 comparison of 
					 <phrase role="code">ASubString</phrase> and the equivalent
					 number of characters at the beginning of 
					 <phrase role="code">AString</phrase>. If there is an exact
					 match 
					 <phrase role="code">StartsWith</phrase> returns 
					 <phrase role="code">true</phrase>, otherwise it returns 
					 <phrase role="code">false</phrase>.</para> 
				<example> 
					 <title>Using System.StartsWith</title> 
					 <programlisting>select "Dataphoria".StartsWith("Data");</programlisting> 
					 <programlisting>True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					  url="O-System.EndsWith.html">System.EndsWith</ulink> | 
					 <ulink type="xref"
					  url="O-System.StringIndexOf.html">System.IndexOf (String)</ulink> | 
					 <ulink type="xref"
					  url="O-System.StringLastIndexOf.html">System.LastIndexOf (String)</ulink> | 
					 <ulink type="xref"
					  url="O-System.IndexOfAny.html">System.IndexOfAny</ulink> | 
					 <ulink type="xref"
					  url="O-System.LastIndexOfAny.html">System.LastIndexOfAny</ulink> | 
					 <ulink type="xref" url="O-System.Pos.html">System.Pos</ulink> |
					 
					 <ulink type="xref"
					  url="O-System.LastPos.html">System.LastPos</ulink> | 
					 <ulink type="xref"
					  url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					  url="O-System.Upper.html">System.Upper</ulink></para> 
		  </section> 
		  <section id="O-System.SubString"> 
				<title><indexterm> 
						  <primary>SubString - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SubString</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>SubString</secondary> 
					 </indexterm>System.SubString</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SubString" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SubString</phrase> returns a string that
					 is a part, or substring of, the given string.</para> 
				<note> 
					 <para>String and list indexes are zero based.</para> 
				</note> 
				<example> 
					 <title>Using System.SubString</title> 
					 <programlisting>select TableDee add { "Data" + SubString("Alphora", 2, 4) Copied };</programlisting> 
					 <programlisting>Copied
--------
Dataphor</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Trim"> 
				<title><indexterm> 
						  <primary>Trim - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Trim</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Trim</secondary> 
					 </indexterm>System.Trim</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Trim" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Trim</phrase> returns the specified
					 string with all white space removed from the left and right sides.</para> 
				<para>Valid white space characters are members of the
					 SpaceSeparator category in UnicodeCategory. Signified by the Unicode
					 designation "Zs" (separator, space). Also these Unicode characters: hexadecimal
					 0x0009 (horizontal tab), 0x000a (line feed), 0x000b (vertical tab), 0x000c
					 (form feed), 0x000d (carriage return), 0x0085, 0x2028, and 0x2029.</para> 
				<example> 
					 <title>Using System.Trim</title> 
					 <programlisting>create session table Example
	 { UnTrimmed : String, Trimmed : String, key{} };
begin
	var LString : String;
	LString := "  Hello World  ";
	insert table { row { LString UnTrimmed, Trim(LString) Trimmed } } into Example;
end;
select Example
	add { UnTrimmed.Length() UnTrimmedLength, Trimmed.Length() TrimmedLength };
drop table Example;</programlisting> 
					 <programlisting>UnTrimmed       Trimmed     UnTrimmedLength TrimmedLength
--------------- ----------- --------------- -------------
  Hello World   Hello World 15              11</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					  url="O-System.TrimLeft.html">System.TrimLeft</ulink> | 
					 <ulink type="xref"
					  url="O-System.TrimRight.html">System.TrimRight</ulink> | 
					 <ulink type="xref"
					  url="O-System.PadLeft.html">System.PadLeft</ulink> | 
					 <ulink type="xref"
					  url="O-System.PadRight.html">System.PadRight</ulink></para> 
		  </section> 
		  <section id="O-System.TrimLeft"> 
				<title><indexterm> 
						  <primary>TrimLeft - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>TrimLeft</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>TrimLeft</secondary> 
					 </indexterm>System.TrimLeft</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.TrimLeft" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">TrimLeft</phrase> returns the specified
					 string with all white space removed from the left side.</para> 
				<para>Valid white space characters are members of the
					 SpaceSeparator category in UnicodeCategory. Signified by the Unicode
					 designation "Zs" (separator, space). Also these Unicode characters: hexadecimal
					 0x0009 (horizontal tab), 0x000a (line feed), 0x000b (vertical tab), 0x000c
					 (form feed), 0x000d (carriage return), 0x0085, 0x2028, and 0x2029.</para> 
				<example> 
					 <title>Using System.TrimLeft</title> 
					 <programlisting>create session table Example
	 { UnTrimmed : String, Trimmed : String, key{} };
begin
	var LString : String;
	LString := "     Hello World";
	insert table { row { LString UnTrimmed, TrimLeft(LString) Trimmed } } into Example;
end;
select Example
	add { UnTrimmed.Length() UnTrimmedLength, Trimmed.Length() TrimmedLength };
drop table Example;</programlisting> 
					 <programlisting>UnTrimmed        Trimmed     UnTrimmedLength TrimmedLength
---------------- ----------- --------------- -------------
     Hello World Hello World 16              11</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Trim.html">System.Trim</ulink> | 
					 <ulink type="xref"
					  url="O-System.TrimRight.html">System.TrimRight</ulink> | 
					 <ulink type="xref"
					  url="O-System.PadLeft.html">System.PadLeft</ulink> | 
					 <ulink type="xref"
					  url="O-System.PadRight.html">System.PadRight</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.TrimRight"> 
				<title><indexterm> 
						  <primary>TrimRight - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>TrimRight</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>TrimRight</secondary> 
					 </indexterm>System.TrimRight</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.TrimRight" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">TrimRight</phrase> returns the specified
					 string with all white space removed from the right side.</para> 
				<para>Valid white space characters are members of the
					 SpaceSeparator category in UnicodeCategory. Signified by the Unicode
					 designation "Zs" (separator, space). Also these Unicode characters: hexadecimal
					 0x0009 (horizontal tab), 0x000a (line feed), 0x000b (vertical tab), 0x000c
					 (form feed), 0x000d (carriage return), 0x0085, 0x2028, and 0x2029.</para> 
				<example> 
					 <title>Using System.TrimRight</title> 
					 <programlisting>create session table Example
	 { UnTrimmed : String, Trimmed : String, key{} };
begin
	var LString : String;
	LString := "Hello World     ";
	insert table { row { LString UnTrimmed, TrimRight(LString) Trimmed } } into Example;
end;
select Example
	add { UnTrimmed.Length() UnTrimmedLength, Trimmed.Length() TrimmedLength };
drop table Example;</programlisting> 
					 <programlisting>UnTrimmed        Trimmed     UnTrimmedLength TrimmedLength
---------------- ----------- --------------- -------------
Hello World      Hello World 16              11</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.Trim.html">System.Trim</ulink> | 
					 <ulink type="xref"
					  url="O-System.TrimLeft.html">System.TrimLeft</ulink> | 
					 <ulink type="xref"
					  url="O-System.PadLeft.html">System.PadLeft</ulink> | 
					 <ulink type="xref"
					  url="O-System.PadRight.html">System.PadRight</ulink> | 
					 <ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink></para> 
		  </section> 
		  <section id="O-System.Upper"> 
				<title><indexterm> 
						  <primary>Upper - String Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>Upper</secondary> 
					 </indexterm><indexterm> 
						  <primary>String Operators</primary> 
						  <secondary>Upper</secondary> 
					 </indexterm>System.Upper</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.Upper" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">Upper</phrase> returns the upper case
					 equivalent of the specified string.</para> 
				<example> 
					 <title>Using System.Upper</title> 
					 <programlisting>select Employee add {Name.Upper() UpperName};</programlisting> 
					 <programlisting>ID Name UpperName 
-- ---- --------- 
1  Joe  JOE
2  John JOHN
3  Josh JOSH
4  Jeff JEFF
5  Jake JAKE
6  Jeff JEFF</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="T-System.String.html">System.String
						  Scalar Type</ulink> | 
					 <ulink type="xref"
					  url="O-System.Lower.html">System.Lower</ulink> | 
					 <ulink type="xref"
					  url="O-System.IsUpper.html">System.IsUpper</ulink> | 
					 <ulink type="xref"
					  url="O-System.IsLower.html">System.IsLower</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.TableOperators"> 
		  <title><indexterm> 
					 <primary>Table Operators</primary> 
					 <secondary>Reference</secondary> 
				</indexterm>Table Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.iAdorn"> 
				<title><indexterm> 
						  <primary>iAdorn - Table Operator</primary> 
					 </indexterm>System.iAdorn</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iAdorn" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">adorn</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iAdorn</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Adorn.html">Adorn</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iBrowse"> 
				<title><indexterm> 
						  <primary>iBrowse - Table Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iBrowse</secondary> 
					 </indexterm><indexterm> 
						  <primary>browse - Table Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>browse</secondary> 
					 </indexterm><indexterm> 
						  <primary>Table Operators</primary> 
						  <secondary>browse</secondary> 
					 </indexterm>System.iBrowse</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iBrowse" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">browse</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iBrowse</phrase>. The 
					 <phrase role="code">browse</phrase> keyword can be used
					 anywhere an 
					 <phrase role="code">order</phrase> can be used. Like 
					 <phrase role="code">order</phrase>, the 
					 <phrase role="code">browse</phrase> clause allows the order in
					 which the rows are to be presented to be specified. Browse also tells the
					 Dataphor Server to use navigational access technology to retrieve the result
					 set. For more information about the browse clause see 
					 <ulink type="olinkb" url="bk02pt03ch17s01.html">Navigational
						  Access</ulink>.</para> 
				<example> 
					 <title>Using System.iBrowse</title> 
					 <programlisting>select Employee browse by { Name };</programlisting> 
					 <programlisting>ID Name 
-- ---- 
5  Jake 
4  Jeff 
6  Jeff 
1  Joe  
2  John 
3  Josh </programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="xref" url="O-System.iOrder.html">System.iOrder
						  (<phrase role="code">order</phrase>)</ulink> | 
					 <ulink type="olinkb" url="bk02pt03ch17.html">Navigational
						  Access</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGDataManipulation-SelectStatement-OrderingTheResultSet.html">Ordering
						  The Result Set</ulink></para> 
		  </section> 
		  <section id="O-System.iDifference"> 
				<title><indexterm> 
						  <primary>iDifference - Table Operator</primary> 
					 </indexterm>System.iDifference</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iDifference" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">minus</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iDifference</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Minus.html">Minus</ulink> | 
					 <ulink type="xref"
					  url="O-System.iJoin.html">System.iJoin</ulink> | 
					 <ulink type="xref"
					  url="O-System.iUnion.html">System.iUnion</ulink></para> 
		  </section> 
		  <section id="O-System.iExists"> 
				<title><indexterm> 
						  <primary>iExists - Table Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>exists</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>exists</secondary> 
					 </indexterm><indexterm> 
						  <primary>Table Operators</primary> 
						  <secondary>exists</secondary> 
					 </indexterm>System.iExists</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iExists" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">exists</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iExists</phrase>. The 
					 <phrase role="code">exists</phrase> operator returns true if
					 the table specified has any rows in it.</para> 
				<example> 
					 <title>Using System.iExists</title> 
					 <programlisting>if (not exists Employee) then
begin
	insert table { row { "Jed" Name, 1 ID } } into Employee;
end
else
begin
	insert table { row { "Jed" Name, 42 ID } } into Employee;
end;
select Employee;</programlisting> 
					 <programlisting>Statement Executed Successfully!

ID Name 
-- ---- 
1  Joe  
2  John 
3  Josh 
4  Jeff 
5  Jake 
6  Jeff 
42 Jed</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iExplode"> 
				<title><indexterm> 
						  <primary>iExplode - Table Operator</primary> 
					 </indexterm>System.iExplode</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iExplode" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">explode</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iExplode</phrase>. For more information see
					 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Explode.html">explode</ulink>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-Explode.html">Explode - Table Operator</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iExtend"> 
				<title><indexterm> 
						  <primary>iExtend - Table &amp; Row Operator</primary> 
					 </indexterm>System.iExtend</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iExtend" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">add</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iExtend</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-Add.html">Table Expressions, Add</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Expressions</ulink></para> 
		  </section> 
		  <section id="O-System.iHaving"> 
				<title><indexterm> 
						  <primary>iHaving - Table Operator</primary> 
					 </indexterm>System.iHaving</title> 
				<para><phrase role="code">System.iHaving</phrase> is the
					 instruction name for the semijoin or 
					 <phrase role="code"><emphasis
						  role="bold">having</emphasis></phrase> operator in D4.</para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iHaving" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The parser recognized symbol for this operator is 
					 <phrase role="code"><emphasis
						  role="bold">having</emphasis></phrase>. This operator computes the semijoin of
					 two tables.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Having.html">Semijoin</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Without.html">Semiminus</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Join.html">Join</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-OuterJoin.html">Outer Join</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iIn"> 
				<title><indexterm> 
						  <primary>iIn - Table &amp; Row &amp; List
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>iIn</secondary> 
					 </indexterm><indexterm> 
						  <primary>in - System Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>in</secondary> 
					 </indexterm><indexterm> 
						  <primary>Table Operators</primary> 
						  <secondary>in</secondary> 
					 </indexterm>System.iIn</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iIn" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">in</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iIn</phrase>. The 
					 <phrase role="code">in</phrase> table/row/list operator is a
					 binary operator that checks for the existence of a particular value in the
					 source. The check can be for a row in a table, a value in a list, or a value in
					 a table consisting of a single column. If the value is in the source, then the
					 operator returns true, if it is not in the source, then the operator returns
					 false.</para> 
				<example> 
					 <title>Using System.iIn</title> 
					 <programlisting>create table Test in Temp
{
 ID : Integer,
 Direction : String,
 key {ID}
};
insert table
{
 row { 1 ID, 'North' Direction },
 row { 2, 'South' },
 row { 3, 'East' },
 row { 4, 'West' }
} into Test;
select 'South' in (Test over { Direction });
select row { 2 ID, 'South' Direction } in Test;
drop table Test;</programlisting> 
					 <programlisting>True
True</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iIndexerTableOperator"> 
				<title><phrase role="code">iIndexer</phrase>System.iIndexer
					 (Table)</title> 
				<para></para> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">[]</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iIndexer</phrase>. 
					 <phrase role="code">iIndexer</phrase> is an extractor
					 operator.</para> 
				<bridgehead renderas="sect3">See</bridgehead> 
				<para><ulink type="xref"
					 url="O-System.iIndexer.html">System.iIndexer</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-IndexerExpression.html">Indexer
						  Expression</ulink></para> 
		  </section> 
		  <section id="O-System.iJoin"> 
				<title><indexterm> 
						  <primary>iJoin - Table &amp; Row Operator</primary> 
					 </indexterm>System.iJoin</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iJoin" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">join</phrase>, 
					 <phrase role="code">lookup</phrase>, 
					 <phrase role="code">intersect</phrase>, and 
					 <phrase role="code">times</phrase> are the parser recognized
					 symbols for 
					 <phrase role="code">iJoin</phrase>. This operator combines two
					 rows or tables together.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Join.html">Join</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-OuterJoin.html">Outer Join</ulink> | 
					 <ulink type="xref"
					  url="O-System.iLeftJoin.html">System.iLeftJoin</ulink> | 
					 <ulink type="xref"
					  url="O-System.iRightJoin.html">System.iRightJoin</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Intersect.html">Intersect - Table Operator</ulink> | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Times.html">Times - Table Operator</ulink> | 
					 <ulink type="olinka"
					  url="DDGModelingProcessLogic-ValuesandVariables-UsingRows.html">Using
						  Rows</ulink></para> 
		  </section> 
		  <section id="O-System.iLeftJoin"> 
				<title><indexterm> 
						  <primary>iLeftJoin - Table Operator</primary> 
					 </indexterm>System.iLeftJoin</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iLeftJoin" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">left join</phrase> is the parser
					 recognized symbol for 
					 <phrase role="code">iLeftJoin</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Join.html">Join Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-OuterJoin.html">Outer Join Operator</ulink> | 
					 <ulink type="xref"
					  url="O-System.iJoin.html">System.iJoin</ulink> | 
					 <ulink type="xref"
					  url="O-System.iRightJoin.html">System.iRightJoin</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGDataManipulation-SelectStatement.html">Select Statement</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iProject"> 
				<title><indexterm> 
						  <primary>iProject - Table &amp; Row Operator</primary> 
					 </indexterm>System.iProject</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iProject" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">over</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iProject</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka"
					 url="D4LGTableExpressions-OverandRemove.html">Over and Remove</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink> | 
					 <ulink type="olinka"
					  url="DDGModelingProcessLogic-ValuesandVariables-UsingRows.html">Using
						  Rows</ulink></para> 
		  </section> 
		  <section id="O-System.iQuota"> 
				<title><indexterm> 
						  <primary>iQuota - Table Operator</primary> 
					 </indexterm>System.iQuota</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iQuota" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code"><emphasis
						  role="bold">return</emphasis></phrase> is the parser recognized symbol for 
					 <phrase role="code">iQuota</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Quota.html">Quota</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Expressions</ulink></para> 
		  </section> 
		  <section id="O-System.iRemove"> 
				<title><indexterm> 
						  <primary>iRemove - Table &amp; Row Operator</primary> 
					 </indexterm>System.iRemove</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iRemove" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">remove</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iRemove</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-OverandRemove.html">Over and Remove</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink> | 
					 <ulink type="olinka"
					  url="DDGModelingProcessLogic-ValuesandVariables-UsingRows.html">Using
						  Rows</ulink></para> 
		  </section> 
		  <section id="O-System.iRename"> 
				<title><indexterm> 
						  <primary>iRename - Table &amp; Row Operator</primary> 
					 </indexterm>System.iRename</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iRename" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">rename</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iRename</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Rename.html">Rename</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iRestrict"> 
				<title><indexterm> 
						  <primary>iRestrict - Table Operator</primary> 
					 </indexterm>System.iRestrict</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iRestrict" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code"><emphasis
						  role="bold">where</emphasis></phrase> is the parser recognized symbol for the
					 restriction operator 
					 <phrase role="code">iRestrict</phrase>. For a complete
					 description of this operator, refer to the 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Where.html">Restriction</ulink> discussion in the D4
					 Language Guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Where.html">Restriction</ulink></para> 
		  </section> 
		  <section id="O-System.iRetrieve"> 
				<title><indexterm> 
						  <primary>iRetrieve - Table Operator</primary> 
					 </indexterm>System.iRetrieve</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iRetrieve" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>Provides table variable access.</para> 
				<example> 
					 <title>Using System.iRetrieve</title> 
					 <para> 
						  <programlisting>Employees;</programlisting></para> 
					 <para>Stating a table implicitly calls the 
						  <phrase role="code">iRetrieve</phrase> operator. This code
						  returns the table named Employees, and could be used anywhere a table was
						  called. This code will not output anything to the output window except for
						  stating that it executed successfully. To output the contents of the table, the
						  select operator will have to be used. For more information about the select
						  statement, see its listing in the D4 Language guide.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGDataManipulation-SelectStatement.html">Select Statement</ulink></para>
				
		  </section> 
		  <section id="O-System.iRightJoin"> 
				<title><indexterm> 
						  <primary>iRightJoin - Table Operator</primary> 
					 </indexterm>System.iRightJoin</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iRightJoin" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">right join</phrase> is the parser
					 recognized symbol for 
					 <phrase role="code">iRightJoin</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Join.html">Join Operator</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-OuterJoin.html">Outer Join Operator</ulink> | 
					 <ulink type="xref"
					  url="O-System.iJoin.html">System.iJoin</ulink> | 
					 <ulink type="xref"
					  url="O-System.iLeftJoin.html">System.iLeftJoin</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGDataManipulation-SelectStatement.html">Select Statement</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
		  <section id="O-System.iUnion"> 
				<title><indexterm> 
						  <primary>iUnion - Table Operator</primary> 
					 </indexterm>System.iUnion</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iUnion" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">union</phrase> is the parser recognized
					 symbol for 
					 <phrase role="code">iUnion</phrase>.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink> | 
					 <ulink type="olinka"
					  url="D4LGTableExpressions-Union.html">Union - Table Operator</ulink> | 
					 <ulink type="olinkb" url="D4LGTableExpressions.html">Table
						  Operators</ulink></para> 
		  </section> 
		  <section id="O-System.iWithout"> 
				<title><indexterm> 
						  <primary>iWithout - Table Operator</primary> 
					 </indexterm>System.iWithout</title> 
				<para><phrase role="code">System.iWithout</phrase> is the
					 instruction name for the semiminus, or 
					 <phrase role="code"><emphasis
						  role="bold">without</emphasis></phrase>, operator in D4.</para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.iWithout" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para>The parser recognized symbol for this operator is 
					 <phrase role="code"><emphasis
						  role="bold">without</emphasis></phrase>. This operator computes the semiminus
					 of two tables.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb"
					 url="D4LGTableExpressions-Without.html">Semiminus</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Having.html">Semijoin</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-Join.html">Join</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGTableExpressions-OuterJoin.html">Outer Join</ulink> | 
					 <ulink type="olinkb"
					  url="D4LGLanguageElements-Expressions-OperatorPrecedence.html">Operator
						  Precedence</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.TransactionOperators"> 
		  <title>Transaction Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.BeginApplicationTransaction"> 
				<title><indexterm> 
						  <primary>BeginApplicationTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>BeginApplicationTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>BeginApplicationTransaction</secondary> 
					 </indexterm>System.BeginApplicationTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.BeginApplicationTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">BeginApplicationTransaction</phrase>
					 begins an application transaction. An application transaction is an optimistic
					 transaction. It does not take locks on the requested data, but performs an
					 optimistic concurrency check prior to updating the changed data from the
					 created cache. For more information see The Space Between the Data in Part III
					 of the Dataphor Developers Guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt03ch18s02.html">Application
						  Transactions, Presentation Layer</ulink> | 
					 <ulink type="olinka"
					  url="bk02pt01ch04s02s06s04.html">Application Transactions, Application
						  Development</ulink> | 
					 <ulink type="xref"
					  url="O-System.JoinApplicationTransaction.html">System.JoinApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.PrepareApplicationTransaction.html">System.PrepareApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.CommitApplicationTransaction.html">System.CommitApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.RollbackApplicationTransaction.html">System.RollbackApplicationTransaction</ulink></para>
				
		  </section> 
		  <section id="O-System.BeginTransaction"> 
				<title><indexterm> 
						  <primary>BeginTransaction - Transaction Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>BeginTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>BeginTransaction</secondary> 
					 </indexterm>System.BeginTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.BeginTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">BeginTransaction</phrase> begins a
					 database transaction.</para> 
				<example> 
					 <title>Using System.BeginTransaction</title> 
					 <programlisting>begin
	BeginTransaction();
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	TempCursor.Insert( row { 10 ID, "Juan" Name});
	TempCursor.Delete();
	PrepareTransaction();
	RollbackTransaction();
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt02ch09s06.html">Transaction
						  Management, Application Design</ulink> | 
					 <ulink type="olinka"
					  url="DDGP1TransactionManagement.html">Transaction Management, Database
						  Management Concepts</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.PrepareTransaction.html">System.PrepareTransaction</ulink> | 
					 <ulink type="xref"
					  url="O-System.CommitTransaction.html">System.CommitTransaction</ulink> | 
					 <ulink type="xref"
					  url="O-System.RollbackTransaction.html">System.RollbackTransaction</ulink> | 
					 <ulink type="xref"
					  url="O-System.TransactionCount.html">System.TransactionCount</ulink> |<ulink
					 type="xref"
					 url="O-System.InTransaction.html">System.InTransaction</ulink></para> 
		  </section> 
		  <section id="O-System.CommitApplicationTransaction"> 
				<title><indexterm> 
						  <primary>CommitApplicationTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CommitApplicationTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>CommitApplicationTransaction</secondary> 
					 </indexterm>System.CommitApplicationTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CommitApplicationTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><token>CommitApplicationTransaction</token> commits all that
					 has occurred since the beginning of the current application transaction. For
					 more information about application transactions, see the corresponding entry in
					 the Dataphor Developers guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt03ch18s02.html">Application
						  Transactions, Presentation Layer</ulink> | 
					 <ulink type="olinka"
					  url="bk02pt01ch04s02s06s04.html">Application Transactions, Application
						  Development</ulink> | 
					 <ulink type="xref"
					  url="O-System.BeginApplicationTransaction.html">System.BeginApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.JoinApplicationTransaction.html">System.JoinApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.PrepareApplicationTransaction.html">System.PrepareApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.RollbackApplicationTransaction.html">System.RollbackApplicationTransaction</ulink></para>
				
		  </section> 
		  <section id="O-System.CommitTransaction"> 
				<title><indexterm> 
						  <primary>CommitTransaction - Transaction Operator</primary>
						  
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>CommitTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>CommitTransaction</secondary> 
					 </indexterm>System.CommitTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.CommitTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">CommitTransaction</phrase> commits all
					 that has occurred since the beginning of the current transaction.</para> 
				<example> 
					 <title>Using System.CommitTransaction</title> 
					 <programlisting>begin
	BeginTransaction();
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	TempCursor.Insert( row { 12 ID, "Joel" Name});
	TempCursor.Delete();
	PrepareTransaction();
	RollbackTransaction();
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt02ch09s06.html">Transaction
						  Management, Application Design</ulink> | 
					 <ulink type="olinka"
					  url="DDGP1TransactionManagement.html">Transaction Management, Database
						  Management Concepts</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginTransaction.html">System.BeginTransaction</ulink> | 
					 <ulink type="xref"
					  url="O-System.PrepareTransaction.html">System.PrepareTransaction</ulink> | 
					 <ulink type="xref"
					  url="O-System.RollbackTransaction.html">System.RollbackTransaction</ulink> | 
					 <ulink type="xref"
					  url="O-System.TransactionCount.html">System.TransactionCount</ulink> | 
					 <ulink type="xref"
					  url="O-System.InTransaction.html">System.InTransaction</ulink></para> 
		  </section> 
		  <section id="O-System.InTransaction"> 
				<title><indexterm> 
						  <primary>InTransaction - Transaction Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>InTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>InTransaction</secondary> 
					 </indexterm>System.InTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.InTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">InTransaction</phrase> performs a check
					 to see if the code is currently being executed in a transaction. It returns a
					 boolean value representing the state.</para> 
				<example> 
					 <title>Using System.InTransaction</title> 
					 <programlisting>begin
	var Err : String := "";
	Err := Err + Unicode({13}) + InTransaction().ToString();
	CommitTransaction();
	Err := Err + Unicode({13}) + InTransaction().ToString();
	raise Error(Err);
end;</programlisting> 
					 <programlisting>true
false</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt02ch09s06.html">Transaction
						  Management, Application Design</ulink> | 
					 <ulink type="olinka"
					  url="DDGP1TransactionManagement.html">Transaction Management, Database
						  Management Concepts</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginTransaction.html">System.BeginTransaction</ulink></para> 
		  </section> 
		  <section id="O-System.JoinApplicationTransaction"> 
				<title><indexterm> 
						  <primary>JoinApplicationTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>JoinApplicationTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>JoinApplicationTransaction</secondary> 
					 </indexterm>System.JoinApplicationTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.JoinApplicationTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">JoinApplicationTransaction</phrase>
					 allows the process to join the specified application transaction in progress.
					 For more information about application transactions, see the corresponding
					 entry in the Dataphor Developers guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt03ch18s02.html">Application
						  Transactions, Presentation Layer</ulink> | 
					 <ulink type="olinka"
					  url="bk02pt01ch04s02s06s04.html">Application Transactions, Application
						  Development</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginApplicationTransaction.html">System.BeginApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.LeaveApplicationTransaction.html">System.LeaveApplicationTransaction</ulink></para>
				
		  </section> 
		  <section id="O-System.LeaveApplicationTransaction"> 
				<title><indexterm> 
						  <primary>LeaveApplicationTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LeaveApplicationTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>LeaveApplicationTransaction</secondary> 
					 </indexterm>System.LeaveApplicationTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LeaveApplicationTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LeaveApplicationTransaction</phrase>
					 allows the process to exit the specified application transaction without ending
					 the transaction. For more information about application transactions, see the
					 corresponding entry in the Dataphor Developers guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt03ch18s02.html">Application
						  Transactions, Presentation Layer</ulink> | 
					 <ulink type="olinka"
					  url="bk02pt01ch04s02s06s04.html">Application Transactions, Application
						  Development</ulink> | 
					 <ulink type="xref"
					  url="O-System.BeginApplicationTransaction.html">System.BeginApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.JoinApplicationTransaction.html">System.JoinApplicationTransaction</ulink></para>
				
		  </section> 
		  <section id="O-System.PrepareApplicationTransaction"> 
				<title><indexterm> 
						  <primary>PrepareApplicationTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>PrepareApplicationTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>PrepareApplicationTransaction</secondary> 
					 </indexterm>System.PrepareApplicationTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.PrepareApplicationTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">PrepareApplicationTransaction</phrase>
					 prepares the application transaction for for the final commit. Executing the 
					 <phrase role="code">PrepareApplicationTransaction</phrase>
					 operator checks all of the integrity constraints and ensures that everything is
					 ready in this application transaction to commit.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt03ch18s02.html">Application
						  Transactions, Presentation Layer</ulink> | 
					 <ulink type="olinka"
					  url="bk02pt01ch04s02s06s04.html">Application Transactions, Application
						  Development</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginApplicationTransaction.html">System.BeginApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.JoinApplicationTransaction.html">System.JoinApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.CommitApplicationTransaction.html">System.CommitApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.RollbackApplicationTransaction.html">System.RollbackApplicationTransaction</ulink></para>
				
		  </section> 
		  <section id="O-System.PrepareTransaction"> 
				<title><indexterm> 
						  <primary>PrepareTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>PrepareTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>PrepareTransaction</secondary> 
					 </indexterm>System.PrepareTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.PrepareTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">PrepareTransaction</phrase> prepares the
					 transaction for the final commit. Executing the 
					 <phrase role="code">PrepareTransaction</phrase> operator checks
					 all of the integrity constraints and ensures that everything is ready in this
					 transaction to commit.</para> 
				<example> 
					 <title>Using System.PrepareApplicationTransaction</title> 
					 <programlisting>begin
	BeginTransaction();
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	TempCursor.Insert( row { 10 ID, "Juan" Name});
	PrepareTransaction();
	RollbackTransaction();
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt02ch09s06.html">Transaction
						  Management, Application Design</ulink> | 
					 <ulink type="olinka"
					  url="DDGP1TransactionManagement.html">Transaction Management, Database
						  Management Concepts</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginTransaction.html">System.BeginTransaction</ulink></para> 
		  </section> 
		  <section id="O-System.RollbackApplicationTransaction"> 
				<title><indexterm> 
						  <primary>RollbackApplicationTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RollbackApplicationTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>RollbackApplicationTransaction</secondary> 
					 </indexterm>System.RollbackApplicationTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RollbackApplicationTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RollbackApplicationTransaction</phrase>
					 rolls back the specified application transaction. All changes that were made
					 under this application transaction are undone and the application transaction
					 is ended. For more information about application transactions, see the
					 corresponding entry in the Dataphor Developers guide.</para> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt03ch18s02.html">Application
						  Transactions, Presentation Layer</ulink> | 
					 <ulink type="olinka"
					  url="bk02pt01ch04s02s06s04.html">Application Transactions, Application
						  Development</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginApplicationTransaction.html">System.BeginApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.JoinApplicationTransaction.html">System.JoinApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.PrepareApplicationTransaction.html">System.PrepareApplicationTransaction</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.CommitApplicationTransaction.html">System.CommitApplicationTransaction</ulink></para>
				
		  </section> 
		  <section id="O-System.RollbackTransaction"> 
				<title><indexterm> 
						  <primary>RollbackTransaction - Transaction
								Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>RollbackTransaction</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>RollbackTransaction</secondary> 
					 </indexterm>System.RollbackTransaction</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.RollbackTransaction" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">RollbackTransaction</phrase> rolls back
					 the current transaction. All changes that were made under this transaction are
					 undone and the transaction is ended.</para> 
				<example> 
					 <title>Using System.RollbackTransaction</title> 
					 <programlisting>begin
	BeginTransaction();
	var TempCursor : cursor(table { ID: Integer, Name : String});
	TempCursor := cursor(Employee capabilities { Updateable });
	TempCursor.First();
	TempCursor.Next();
	TempCursor.Insert( row { 10 ID, "Juan" Name});
	PrepareTransaction();
	RollbackTransaction();
end;</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt02ch09s06.html">Transaction
						  Management, Application Design</ulink> | 
					 <ulink type="olinka"
					  url="DDGP1TransactionManagement.html">Transaction Management, Database
						  Management Concepts</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginTransaction.html">System.BeginTransaction</ulink></para> 
		  </section> 
		  <section id="O-System.TransactionCount"> 
				<title><indexterm> 
						  <primary>TransactionCount - Transaction Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>TransactionCount</secondary> 
					 </indexterm><indexterm> 
						  <primary>Transaction Operators</primary> 
						  <secondary>TransactionCount</secondary> 
					 </indexterm>System.TransactionCount</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.TransactionCount" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">TransactionCount</phrase> returns the
					 current level of nested transactions. The transaction count returned includes
					 implicit transactions, but does not include application transactions.</para> 
				<example> 
					 <title>Using System.TransactionCount</title> 
					 <programlisting>select TableDee add {TransactionCount() Transactions};</programlisting> 
					 <programlisting>Transactions
------------
1</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinka" url="bk02pt02ch09s06.html">Transaction
						  Management, Application Design</ulink> | 
					 <ulink type="olinka"
					  url="DDGP1TransactionManagement.html">Transaction Management, Database
						  Management Concepts</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1DefaultUseImplicitTransactions.html">DefaultUseImplicitTransactions</ulink>
					 | 
					 <ulink type="xref"
					  url="O-System.BeginTransaction.html">System.BeginTransaction</ulink></para> 
		  </section> 
	 </section> 
	 <section id="O-System.UpgradeOperators"> 
		  <title>Upgrade Operators</title> 
		  <para><?xm-replace_text {Paragraph}?></para> 
		  <section id="O-System.DeleteUpgrade"> 
				<title><indexterm> 
						  <primary>DeleteUpgrade - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>DeleteUpgrade</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>DeleteUpgrade</secondary> 
					 </indexterm>System.DeleteUpgrade</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.DeleteUpgrade" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">DeleteUpgrade</phrase> deletes the
					 specified upgrade script from the library.</para> 
				<example> 
					 <title>Using System.DeleteUpgrade</title> 
					 <para>NOTE: This example is only intended to demonstrate the
						  functionality of the upgrade operators and not a logical sequence of their use.
						  To understand the Dataphor upgrade system see 
						  <ulink type="olinkb"
							url="D4LGUpgrade.html">Upgrades</ulink>.</para> 
					 <programlisting>CreateLibrary
(
 LibraryDescriptor("Lib", VersionNumber(0, 1, 0, 5), "Temp")
);
RegisterLibrary("Lib");
create table Table in Temp { ID : Integer, Name : String, key { ID } };
select InjectUpgrade
(
 "Lib",
 "alter table Table
 {
  create column Address : Boolean { nil }
 };"
);
select UpgradeVersions("Lib");
SaveUpgrade
(
 "Lib",
 ToVersionNumber("0.1.2.*"),
 LoadUpgrade("Lib", ToVersionNumber("0.1.1.*")).Replace("Boolean", "String")
);
DeleteUpgrade("Lib", ToVersionNumber("0.1.1.*"));
select UpgradeVersions("Lib");
select LoadUpgrade("Lib", ToVersionNumber("0.1.2.*"));
UnregisterLibrary("Lib", false);
update Libraries
 where Name = "Lib"
 set { Version := ToVersionNumber("0.1.2.5") };
RegisterLibrary("Lib", false);
UpgradeLibrary("Lib");
select Table;
drop table Table;
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
					 <programlisting>0.1.1.*

Version
-------
0.1.1.*

Version
-------
0.1.2.*

alter table Table
 {
  create column Address : String { nil }
 };

ID Name Address 
-- ---- -------</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.InjectUpgrade.html">System.InjectUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.LoadUpgrade.html">System.LoadUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.SaveUpgrade.html">System.SaveUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibraries.html">System.UpgradeLibraries</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibrary.html">System.UpgradeLibrary</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeVersions.html">System.UpgradeVersions</ulink></para> 
		  </section> 
		  <section id="O-System.InjectUpgrade"> 
				<title><indexterm> 
						  <primary>InjectUpgrade - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>InjectUpgrade</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>InjectUpgrade</secondary> 
					 </indexterm>System.InjectUpgrade</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.InjectUpgrade" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">InjectUpgrade</phrase> increments the
					 revision number of 
					 <phrase role="code">ALibraryName</phrase> by one. The revision
					 number is the third component of the version number. If the version number of 
					 <phrase role="code">ALibraryName</phrase> is not specified to
					 at least the third position an error will be raised.</para> 
				<para><phrase role="code">InjectUpgrade</phrase> then saves the
					 upgrade script 
					 <phrase role="code">AScript</phrase> in 
					 <phrase role="code">ALibraryName</phrase> with the new version
					 number from above.</para> 
				<example> 
					 <title>Using System.InjectUpgrade</title> 
					 <para>See the 
						  <ulink type="xref"
							url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> example.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.LoadUpgrade.html">System.LoadUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.SaveUpgrade.html">System.SaveUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibraries.html">System.UpgradeLibraries</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibrary.html">System.UpgradeLibrary</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeVersions.html">System.UpgradeVersions</ulink></para> 
		  </section> 
		  <section id="O-System.LoadUpgrade"> 
				<title><indexterm> 
						  <primary>LoadUpgrade - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>LoadUpgrade</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>LoadUpgrade</secondary> 
					 </indexterm>System.LoadUpgrade</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.LoadUpgrade" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">LoadUpgrade</phrase> returns the upgrade
					 script, as a string. 
					 <phrase role="code">ALibraryName</phrase> and 
					 <phrase role="code">AVersion</phrase> identify the script to
					 return.</para> 
				<example> 
					 <title>Using System.LoadUpgrade</title> 
					 <para>See the 
						  <ulink type="xref"
							url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> example.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.InjectUpgrade.html">System.InjectUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.SaveUpgrade.html">System.SaveUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibraries.html">System.UpgradeLibraries</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibrary.html">System.UpgradeLibrary</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeVersions.html">System.UpgradeVersions</ulink></para> 
		  </section> 
		  <section id="O-System.SaveUpgrade"> 
				<title><indexterm> 
						  <primary>SaveUpgrade - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>SaveUpgrade</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>SaveUpgrade</secondary> 
					 </indexterm>System.SaveUpgrade</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.SaveUpgrade" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">SaveUpgrade</phrase> saves the specified 
					 <phrase role="code">AScript</phrase> to 
					 <phrase role="code">ALibraryName</phrase> as version number 
					 <phrase role="code">AVersion</phrase>.</para> 
				<example> 
					 <title>Using System.SaveUpgrade</title> 
					 <para>See the 
						  <ulink type="xref"
							url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> example.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.InjectUpgrade.html">System.InjectUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.LoadUpgrade.html">System.LoadUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibraries.html">System.UpgradeLibraries</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibrary.html">System.UpgradeLibrary</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeVersions.html">System.UpgradeVersions</ulink></para> 
		  </section> 
		  <section id="O-System.UpgradeLibraries"> 
				<title><indexterm> 
						  <primary>UpgradeLibraries - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UpgradeLibraries</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>UpgradeLibraries</secondary> 
					 </indexterm>System.UpgradeLibraries</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UpgradeLibraries" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UpgradeLibraries</phrase> runs the
					 required existing upgrade scripts in all libraries. They are upgraded in load
					 order. No arguments are used and nothing is returned.</para> 
				<example> 
					 <title>Using System.UpgradeLibraries</title> 
					 <programlisting>UpgradeLibraries();</programlisting> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.InjectUpgrade.html">System.InjectUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.LoadUpgrade.html">System.LoadUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.SaveUpgrade.html">System.SaveUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibrary.html">System.UpgradeLibrary</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeVersions.html">System.UpgradeVersions</ulink></para> 
		  </section> 
		  <section id="O-System.UpgradeLibrary"> 
				<title><indexterm> 
						  <primary>UpgradeLibrary - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UpgradeLibrary</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>UpgradeLibrary</secondary> 
					 </indexterm>System.UpgradeLibrary</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UpgradeLibrary" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UpgradeLibrary</phrase> runs the required
					 existing upgrade scripts in the library 
					 <phrase role="code">AName</phrase>. It also ensures all
					 required libraries are upgraded recursively.</para> 
				<example> 
					 <title>Using System.UpgradeLibrary</title> 
					 <para>See the 
						  <ulink type="xref"
							url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> example.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.InjectUpgrade.html">System.InjectUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.LoadUpgrade.html">System.LoadUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.SaveUpgrade.html">System.SaveUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibraries.html">System.UpgradeLibraries</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeVersions.html">System.UpgradeVersions</ulink></para> 
		  </section> 
		  <section id="O-System.UpgradeVersions"> 
				<title><indexterm> 
						  <primary>UpgradeVersions - Upgrade Operator</primary> 
					 </indexterm><indexterm> 
						  <primary>Operators</primary> 
						  <secondary>UpgradeVersions</secondary> 
					 </indexterm><indexterm> 
						  <primary>Upgrade Operators</primary> 
						  <secondary>UpgradeVersions</secondary> 
					 </indexterm>System.UpgradeVersions</title> 
				<para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "System.UpgradeVersions" add { Script(Name) Declaration }?>
				<formalpara> 
					 <title>Declarations</title> 
					 <para> 
						  <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
				</formalpara> 
				<bridgehead renderas="sect3">Remarks</bridgehead> 
				<para><phrase role="code">UpgradeVersions</phrase> returns a table
					 containing the list of version numbers available for 
					 <phrase role="code">ALibraryName</phrase></para> 
				<example> 
					 <title>Using System.UpgradeVersions</title> 
					 <para>See the 
						  <ulink type="xref"
							url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> example.</para> 
				</example> 
				<bridgehead renderas="sect3">See Also</bridgehead> 
				<para><ulink type="olinkb" url="bk02pt02ch12s09.html">Deployment
						  and Maintenance</ulink> | 
					 <ulink type="olinkb"
					  url="DUGP1UpgradingLibraries.html">Upgrading Libraries</ulink> | 
					 <ulink type="olinkb" url="DUGP1LibraryUpgrades.html">Library
						  Upgrades</ulink> | 
					 <ulink type="olinkb"
					  url="bk02pt02ch12s02.html">Versioning</ulink> | 
					 <ulink type="xref"
					  url="O-System.DeleteUpgrade.html">System.DeleteUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.InjectUpgrade.html">System.InjectUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.LoadUpgrade.html">System.LoadUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.SaveUpgrade.html">System.SaveUpgrade</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibraries.html">System.UpgradeLibraries</ulink> | 
					 <ulink type="xref"
					  url="O-System.UpgradeLibrary.html">System.UpgradeLibrary</ulink></para> 
		  </section> 
	 </section>

  <!--jimh-->
</section>
