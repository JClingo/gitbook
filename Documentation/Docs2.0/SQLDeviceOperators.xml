<?xml version="1.0"?>
<section> 
	 <sectioninfo><date>Friday, January 06, 2006 10:01:22 AM</date> 
	 </sectioninfo> 
	 <title><indexterm><primary>SQLDevice
					 Library</primary><secondary>Operators</secondary></indexterm> 
		  <indexterm><primary>Operators</primary><secondary>SQLDevice</secondary></indexterm>Operators</title>
	 
	 <para>The following sections describe the operators of the
		  SQLDevice.</para> 
	 <bridgehead renderas="sect3">See Also</bridgehead> 
	 <para> 
		  <ulink url="O-System.Operators.html" type="xref">System
				Operators</ulink> | 
		  <ulink url="O-Frontend.Operators.html" type="xref">Frontend
				Operators</ulink> | 
		  <ulink url="O-MSSQLDevice.Operators.html" type="xref">MSSQLDevice
				Operators</ulink></para> 
	 <section id="O-SQLDevice.AvailableReferences"> 
		  <title><indexterm><primary>AvailableReferences - SQLDevice
						  Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>AvailableReferences</secondary></indexterm>SQLDevice.AvailableReferences</title>
		  
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "SQLDevice.AvailableReferences" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para> 
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>AvailableReferences</symbol> returns a table listing the
				available references (foreign keys) from the specified or default SQL device.
				These references would have been created on the device using something other
				than Dataphor. Dataphor offloads tables and views to devices but not
				references. Dataphor stores references in the catalog.</para> 
		  <example> 
				<title>Using SQLDevice.AvailableReferences</title> 
				<programlisting>select AvailableReferences();</programlisting> 
				<programlisting>Name                  StorageName
--------------------- ---------------------
Lib.DetailTable_Table DetailTable_Table</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para> 
				<ulink url="O-SQLDevice.Operators.html" type="xref">SQLDevice
					 Operators</ulink></para> 
	 </section> 
	 <section id="O-SQLDevice.AvailableTables"> 
		  <title><indexterm><primary>AvailableTables - SQLDevice
						  Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>AvailableTables</secondary></indexterm>SQLDevice.AvailableTables</title>
		  
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "SQLDevice.AvailableTables" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para> 
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>AvailableTables</symbol> returns a table listing the
				available tables from the specified or default SQL device.</para> 
		  <example> 
				<title>Using SQLDevice.AvailableTables</title> 
				<programlisting>See example <ulink url="O-SQLDevice.D4ToSQL.html">SQLDevice.D4ToSQL</ulink>.</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para> 
				<ulink url="O-SQLDevice.Operators.html" type="xref">SQLDevice
					 Operators</ulink></para> 
	 </section> 
	 <section id="O-SQLDevice.D4ToSQL"> 
		  <title><indexterm><primary>D4ToSQL - SQLDevice
						  Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>D4ToSQL</secondary></indexterm>SQLDevice.D4ToSQL</title>
		  
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "SimpleDevice.D4ToSQL" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para> 
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>D4ToSQL</symbol> translates D4 code into the SQL dialect
				used by the specified device. This operator returns "Query is unsupported by
				the device" if the query is not supported. This operator returns "Device is not
				an SQL device" if the specified device is not an SQL device (e.g. a memory
				device).</para> 
		  <!--<para> There are no devices that have RealSQL as its language, so this
				operator can not translate to RealSQL. The System.RealSQLToD4 operator does
				translate from RealSQL to D4 and not from another dialect of SQL. They are not
				symmetrical operators. You could translate RealSQL to D4 then to an SQL dialect
				for a device but that would not necessarily return the same code. </para>-->
		  <example> 
				<title>Using SQLDevice.D4ToSQL</title> 
				<programlisting>// assuming Admin is current user		
CreateLibrary
 (
  LibraryDescriptor
  (
   "Lib", VersionNumberUndefined(), "Device",
   list(FileReference) {},
   list(LibraryReference)
   {
    LibraryReference("MSSQLDevice",VersionNumberUndefined())
   }
  )
 );
RegisterLibrary("Lib");
create device Device
 reconciliation { mode = { Command }, master = device }
 class "MSSQLDevice"
		attributes { "ServerName" = ".", "DatabaseName" = "Docs" };
CreateDeviceUser("System", "Device", "sa", "");
CreateDeviceUser("Admin", "Device", "sa", "");
create table Table { ID: Integer, Name : String, key{ID} };
select D4ToSQL("Device", "select Table;");
drop table Table;
select AvailableTables();
drop device Device;
UnregisterLibrary("Lib");
DropLibrary("Lib");</programlisting> 
				<programlisting>select
 "T1"."ID" as "ID", "T1"."Name" as "Name"
 from "Table" as "T1" (fastfirstrow)
order by "ID" asc;</programlisting> 
				<programlisting>Name           StorageName
-------------- ------------
Lib.Table      Table</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-SQLDevice.Operators.html" type="xref">SQLDevice
					 Operators</ulink> | 
				<ulink url="D4LGComparisonWithSQL.html" type="olinka">D4 Comparison
					 with SQL</ulink></para> 
	 </section> 
	 <section id="O-SQLDevice.SQLExecute"> 
		  <title><indexterm><primary>SQLExecute - SQLDevice
						  Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>SQLExecute</secondary></indexterm><indexterm><primary>Pass-through
						  Queries</primary><secondary>Statements</secondary></indexterm>SQLDevice.SQLExecute</title>
		  
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "SQLDevice.SQLExecute" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para> 
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>SQLExecute</symbol> provides statement-level native SQL
				access to the target system for a given device, also known as pass-through
				query execution. The operator executes an SQL statement directly against the
				target system. No translation will be performed, so the statement must be
				issued in the dialect of the target system. Note that parameterization
				processing is still performed based on the connectivity implementation of the
				device being used. If <symbol>ADeviceName</symbol> is not specified, the
				default device is used. In either case the device must be a SQL device.
				<symbol>AInValues</symbol> is optional only if <symbol>AOutValues</symbol> is
				not specified. <symbol>AOutValues</symbol> is optional.</para> 
		  <para>Note that this operator is only capable of executing a single
				statement of SQL in the target dialect. If multiple statements must be
				executed, multiple 
				<phrase role="code">SQLExecute</phrase> invocations are
				required.</para> 
		  <example> 
				<title>Using SQLDevice.SQLExecute</title> 
				<programlisting>// assuming the default device is a T-SQL compatible device
create table Example in Temp { TSum : Integer, key {} };
begin
 var LOutRow := row { 0 Arg2 };
 SQLExecute("set @Arg2 = 2 + @Arg1", row {4 Arg1}, var LOutRow);
 insert table { row { (Arg2 from LOutRow) TSum } } into Example;
end;
select Example;
drop table Example;</programlisting> 
				<programlisting>TSum
----
6</programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-SQLDevice.Operators.html" type="xref">SQLDevice
					 Operators</ulink></para> 
	 </section> 
	 <section id="O-SQLDevice.SQLQuery"> 
		  <title><indexterm><primary>SQLQuery - SQLDevice
						  Operator</primary></indexterm><indexterm><primary>Operators</primary><secondary>SQLQuery</secondary></indexterm><indexterm><primary>Pass-through
						  Queries</primary><secondary>Queries</secondary></indexterm>SQLDevice.SQLQuery</title>
		  
		  <para></para> <?DocLib D4ExpressionBlock programlisting Operators where OperatorName = "SQLDevice.SQLQuery" add { Script(Name) Declaration }?>
		  <formalpara> 
				<title>Declarations</title> 
				<para> 
					 <programlisting><?DocLib D4Field Declaration?></programlisting></para> 
		  </formalpara> 
		  <bridgehead renderas="sect3">Remarks</bridgehead> 
		  <para><symbol>SQLQuery</symbol> provides query-level native SQL access
				to the target system for a given device, also known as pass-through query
				evaluation. The operator evaluates an SQL select statement directly against the
				target system and returns the result set for the query. No translation will be
				performed, so the statement must be issued in the dialect of the target system.
				Note that parameterization processing is still performed based on the
				connectivity implementation of the device being used. If
				<symbol>ADeviceName</symbol> is not specified, the default device is used. In
				either case the device must be a SQL device. <symbol>AInValues</symbol> is
				optional only if <symbol>AOutValues</symbol> is not specified.
				<symbol>AOutValues</symbol> is optional.</para> 
		  <para>If 
				<phrase role="code">ATableType</phrase> and 
				<phrase role="code">AKeyInfo</phrase> are not specified, the
				compiler will attempt to determine the type and key information of the result
				set from the target system. The compiler will attempt to use a prepare-style
				API if it is available on the target system. If this approach fails to retrieve
				the schema, the compiler will issue a warning and attempt to evaluate the
				result set at compile-time in order to determine the type of the result set. If
				both of these approaches fail, a compile-time error is raised and the schema
				definition for the result set must be provided via 
				<phrase role="code">ATableType</phrase> and 
				<phrase role="code">AKeyInfo</phrase>.</para> 
		  <para>Note that 
				<phrase role="code">ADeviceName</phrase>, 
				<phrase role="code">AStatement</phrase>, 
				<phrase role="code">AKeyInfo</phrase>, and 
				<phrase role="code">ATableType</phrase> must be literals (evaluable
				at compile-time) in order for the compiler to determine tye type of the result
				set. Use dynamic D4 execution if the select statement to be evaluated must be
				constructed at run-time.</para> 
		  <para>Note that this operator is only capable of executing a single
				select statement of SQL in the target dialect. If multiple select statements
				must be evaluated, multiple 
				<phrase role="code">SQLQuery</phrase> invocations are required.
				</para>
		  <para>
				<note>
					 <para>While an order by clause is allowed to be specified in
						  the select statement to be evaluated, the result set will always be ordered by
						  the inferred key of the result. This is because of the way that the result set
						  is handled by the internal cursor engine of the Dataphor Server.</para>
				</note></para> 
		  <example> 
				<title>Using SQLDevice.SQLExecute</title> 
				<programlisting>// assuming the default device is a Microsoft SQL Server device
select SQLQuery("select * from sysobjects where name = 'sysobjects'");</programlisting> 
				<programlisting>name       id xtype ...
---------- -- ----- 
sysobjects 1  S     </programlisting> 
		  </example> 
		  <bridgehead renderas="sect3">See Also</bridgehead> 
		  <para><ulink url="O-SQLDevice.Operators.html" type="xref">SQLDevice
					 Operators</ulink></para> 
	 </section> 
</section> 
