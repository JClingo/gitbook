<?xml version="1.0" encoding="utf-16"?>
<interface xmlns:bop="www.alphora.com/schemas/bop" text="Browse GroupRights" mainsource="Main" ondefault="Edit">
  <source expression="(&#xD;&#xA;	(&#xD;&#xA;		Security.Group&#xD;&#xA;			rename Main&#xD;&#xA;	)&#xD;&#xA;)&#xD;&#xA;capabilities {navigable, backwardsnavigable, bookmarkable, searchable, updateable}&#xD;&#xA;isolation browse&#xD;&#xA;type dynamic" isreadonly="True" bop:name="Main" />
  <showformaction sourcelinktype="Detail" sourcelink.masterkeynames="Main.Group_Name, Main.Right_Name" sourcelink.detailkeynames="Main.Group_Name, Main.Right_Name" sourcelink.source="GroupRights" onformclose="AfterEdit" document="Derive('EditGroupRights', 'Edit', 'Main.Group_Name;Main.Right_Name', 'Main.Group_Name;Main.Right_Name', false)" mode="Edit" beforeexecute="BeforeEdit" text="&amp;Edit..." hint="Edit the current row." image="Image('Frontend', 'Image.Edit')" bop:name="Edit" />
  <sourceaction action="First" source="Main" text="&amp;First" image="Image('Frontend', 'Image.First')" bop:name="MoveFirst" />
  <sourceaction action="Prior" source="Main" text="&amp;Prior" image="Image('Frontend', 'Image.Prior')" bop:name="MovePrior" />
  <sourceaction action="Next" source="Main" text="&amp;Next" image="Image('Frontend', 'Image.Next')" bop:name="MoveNext" />
  <sourceaction action="Last" source="Main" text="&amp;Last" image="Image('Frontend', 'Image.Last')" bop:name="MoveLast" />
  <sourceaction action="Refresh" source="Main" text="&amp;Refresh" image="Image('Frontend', 'Image.Refresh')" bop:name="Refresh" />
  <menu text="&amp;Navigation" bop:name="NavigationMenu">
    <menu action="MoveFirst" bop:name="MoveFirstMenu" />
    <menu action="MovePrior" bop:name="MovePriorMenu" />
    <menu action="MoveNext" bop:name="MoveNextMenu" />
    <menu action="MoveLast" bop:name="MoveLastMenu" />
    <menu text="-" bop:name="NavSepMenu1" />
    <menu action="Refresh" bop:name="RefreshMenu" />
  </menu>
  <column bop:name="RootBrowseColumn">
    <search title="Search" document="Derive('Security.GroupRights', 'OrderBrowse', 'Main.Name', 'Main.Group_Name', false)" lookupcolumnname="OrderName" source="GroupRights" hint="Search for a specific row." bop:name="MainSearch">
      <searchcolumn title="Group_Name" columnname="Main.Group_Name" width="20" bop:name="MainSearchColumnMain.Group_Name" />
      <searchcolumn title="Right Name" columnname="Main.Right_Name" width="50" bop:name="MainSearchColumnMain.Right_Name" />
    </search>
    <row bop:name="GridRow">
      <grid source="GroupRights" hint="GroupRights" bop:name="Grid">
        <textcolumn columnname="Main.Right_Name" title="Right Name" width="50" bop:name="MainGridColumnMain.Right_Name" />
        <checkboxcolumn columnname="Main.HasRight" title="Has Right" width="20" bop:name="MainGridColumnMain.HasRight" />
        <checkboxcolumn columnname="Main.HasAssignment" title="Has Assignment" width="20" bop:name="MainGridColumnMain.HasAssignment" />
        <checkboxcolumn columnname="Main.Granted" title="Granted" width="20" bop:name="MainGridColumnMain.Granted" />
        <checkboxcolumn columnname="Main.Inherited" title="Inherited" width="20" bop:name="MainGridColumnMain.Inherited" />
      </grid>
      <column bop:name="GridBar">
        <trigger action="Edit" imagewidth="11" imageheight="13" bop:name="EditTrigger" />
      </column>
    </row>
  </column>
  <source expression="Rights&#xD;&#xA;	over { Name } &#xD;&#xA;	rename { Name Right_Name }&#xD;&#xA;	add { AGroupName Group_Name, GroupHasRight(AGroupName, Right_Name) HasRight }&#xD;&#xA;	left join (GroupRightAssignments where Group_Name = AGroupName)&#xD;&#xA;		include rowexists HasAssignment &#xD;&#xA;	rename Main&#xD;&#xA;&#xD;&#xA;" bop:name="GroupRights">
    <dataargument source="Main" columns="AGroupName=Main.Name" bop:name="GroupRightsArgument" />
  </source>
  <datascriptaction script="create session table EditGroupRights in System.Temp&#xD;&#xA;{&#xD;&#xA;	Group_Name : System.GroupName,&#xD;&#xA;	Right_Name : System.Name,&#xD;&#xA;	HasAssignment : System.Boolean,&#xD;&#xA;	Granted : System.Boolean static tags { Storage.IsNullable = &quot;true&quot; },&#xD;&#xA;	Inherited : System.Boolean static tags { Storage.IsNullable = &quot;true&quot; },&#xD;&#xA;	ApplyRecursively : System.Boolean,&#xD;&#xA;	IncludeUsers : System.Boolean,&#xD;&#xA;	key { Group_Name, Right_Name }&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;insert &#xD;&#xA;	(Groups where Name = AGroupName over { Name } rename { Name Group_Name })&#xD;&#xA;		join (Rights where Name = ARightName over { Name } rename { Name Right_Name })&#xD;&#xA;		left join (GroupRightAssignments where Group_Name = AGroupName and Right_Name = ARightName) &#xD;&#xA;			include rowexists HasAssignment&#xD;&#xA;		add { false ApplyRecursively, false IncludeUsers }&#xD;&#xA;	into EditGroupRights;&#xD;&#xA;&#xD;&#xA;attach operator GroupRights_Update to EditGroupRights on { before update };&#xD;&#xA;&#xD;&#xA;" bop:name="BeforeEdit">
    <dataargument source="GroupRights" columns="AGroupName=Main.Group_Name;ARightName=Main.Right_Name" bop:name="BeforeEditArgument" />
  </datascriptaction>
  <datascriptaction script="detach operator GroupRights_Update from EditGroupRights on { before update };&#xA;drop table EditGroupRights;&#xA;" bop:name="AfterEdit" />
</interface>