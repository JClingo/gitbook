/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/
// Populates Cases


insert table
{
	 row { 'Internal DAE coverage.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "DAE");' Command },
	 row { 'Verifies resource strings for each error code of each exception class.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Exceptions");' Command },
	 row { 'Verifies parser and emitter functionality by parsing and emitting each document in the coverage library.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ParserEmitter");' Command },
	 row { 'Verifies all constructs of the D4 language.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LanguageConstructs");' Command },
	 row { 'Verifies all boolean operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "BooleanLibrary");' Command },
	 row { 'Verifies all byte operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ByteLibrary");' Command },
	 row { 'Verifies all short operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ShortLibrary");' Command },
	 row { 'Verifies all integer operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "IntegerLibrary");' Command },
	 row { 'Verifies all long operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LongLibrary");' Command },
	 row { 'Verifies all decimal operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "DecimalLibrary");' Command },
	 row { 'Verifies all money operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "MoneyLibrary");' Command },
	 row { 'Verifies all guid operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "GuidLibrary");' Command },
	 row { 'Verifies all string operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "StringLibrary");' Command },
	 row { 'Verifies all timespan operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "TimeSpanLibrary");' Command },
	 row { 'Verifies all datetime operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "DateTimeLibrary");' Command },
	 row { 'Verifies all date operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "DateLibrary");' Command },
	 row { 'Verifies all time operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "TimeLibrary");' Command },
	 row { 'Verifies all match operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "MathLibrary");' Command },
	 row { 'Verifies all list operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ListLibrary");' Command },
	 row { 'Verifies all cursor operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "CursorLibrary");' Command },
	 row { 'Verifies cursor operations for cursors using browse.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Browse");' Command },
	 row { 'Verifies type DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Types");' Command },
	 row { 'Verifies operator DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Operators");' Command },
	 row { 'Verifies aggregate operator DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "AggregateOperators");' Command },
	 row { 'Verifies implicit conversions.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ImplicitConversions");' Command },
	 row { 'Verifies all row operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "RowLibrary");' Command },
	 row { 'Verifies that row operators ignore column order.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "RowParameterColumnOrder");' Command },
	 row { 'Verifies all entry operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "EntryLibrary");' Command },
	 row { 'Verifies table DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Tables");' Command },
	 row { 'Verifies session table functionality.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "SessionTables");' Command },
	 row { 'Verifies all table operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "TableLibrary");' Command },
	 row { 'Verifies table operators with pass-by-value semantics.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "TableCallsWithStackReferences");' Command },
	 row { 'Verifies all presentation operators.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "PresentationLibrary");' Command },
	 row { 'Verifies view DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Views");' Command },
	 row { 'Verifies reference DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "References");' Command },
	 row { 'Verifies constraint DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Constraints");' Command },
	 row { 'Verifies device DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Devices");' Command },
	 row { 'Verifies event handler DDL statements.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "EventHandlers");' Command },
	 row { 'Verifies the exists operator with varying inputs.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Exists");' Command },
	 row { 'Verifies all table operators.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "DML"); // TODO: left and right join operators break the TestNavigable operator (nulls!)' Command },
	 row { 'Verifies cursor usage and table algorithm selection.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Cursors"); // TODO: Build this from ScanTable and NodeOptimization' Command },
	 row { 'Verifies the security API.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "SecurityLibrary"); // TODO: Build this coverage' Command },
	 row { 'Verifies view updatability.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ViewUpdatability"); // TODO: Verify this coverage' Command },
	 row { 'Verifies sort DDL statements.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Sorts"); // TODO: Build this coverage' Command },
	 row { 'Verifies transition constraint DDL statements.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "TransitionConstraints"); // TODO: Build this coverage' Command },
	 row { 'Verifies the system catalog.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "SystemCatalog"); // TODO: Verify this coverage' Command },
	 row { 'Verifies serialization of all catalog objects.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Serialization"); // TODO: Build this coverage' Command },
	 row { 'Verifies application transaction functionality.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ApplicationTransactions");' Command },
	 row { 'Verifies the from clause of the create table statement.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "CreateTableFrom");' Command },
	 row { 'Verifies all system data type conversions.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "Conversions");' Command },
	 row { 'Verifies the version number data type.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "VersionNumber");' Command },
	 row { 'Verifies the library specific data types.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LibraryTypes");' Command },
	 row { 'Verifies the library API.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LibraryCoverage");' Command },
	 row { 'Verifies the library rename operator.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LibraryRename");' Command },
	 row { 'Verifies library dependencies and catalog object creation.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LibraryDependencies");' Command },
	 row { 'Verifies library file and registered assembly functionality.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LibraryFilesCoverage.Base"); // TODO: Build this coverage' Command },
	 row { 'Verifies derivation maps.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "DerivationMaps");' Command },
	 row { 'Verifies maximum row count functionality.' Description, true Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "MaximumRowCount");' Command },
	 row { 'Verifies stream allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "StreamAllocation"); // TODO: Build this coverage' Command },
	 row { 'Verifies scalar allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ScalarAllocation"); // TODO: Build this coverage' Command },
	 row { 'Verifies row allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "RowAllocation"); // TODO: Build this coverage' Command },
	 row { 'Verifies list allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "ListAllocation"); // TODO: Build this coverage' Command },
	 row { 'Verifies table allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "TableAllocation"); // TODO: Build this coverage' Command },
	 row { 'Verifies cursor allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "CursorAllocation"); // TODO: Build this coverage' Command },
	 row { 'Verifies lock allocation and deallocation.' Description, false Enabled, 'ExecuteScript("TestFramework.Coverage.Scripts", "LockAllocation"); // TODO: Build this coverage' Command },
	// devices should really be checked last
	 row { 'Verifies perfect functionality of the current device' Description, true Enabled, 'TestDevice("TestFramework.Coverage.Base.CoverageDevice");' Command },
	 row { 'Verifies perfect functionality of the Oracle Device' Description, true Enabled, 'TestDevice("TestFramework.Coverage.Base.OracleTestDevice");' Command }
} into Cases;