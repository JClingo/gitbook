/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/
// Created May 28, 2004
// Adam Stevenson
// This populates the DeviceCase table. This table contains all of the Device Specific test cases, both 'type' and 'operator' type tests.

//table of { ID : System.Integer, Name : System.Name, Sequence : System.Integer, Type : System.String, Enabled : System.Boolean, Description : SQLDevice.SQLText, Table : Coverage.Devices.Script, InsertTableStatement : Coverage.Devices.Script, BeforeScript : Coverage.Devices.Script, Script : Coverage.Devices.Script, AfterScript : Coverage.Devices.Script, DropStatement : Coverage.Devices.Script, User_ID : System.String, DateTimeCreated : System.DateTime }

insert 
	table
	{
		/*1ID, */ row { System.String('MSSQLDevice.iCompare_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Integer" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, 0 Integer3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), -1 }, row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), 1 } } into ListMSSQLBinaryMSSQLBinaryIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryIntegerTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iCompare(MSSQLBinary1, MSSQLBinary2) Integer3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryIntegerTestTable then raise Error("System.iCompare(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*2ID, */ row { System.String('MSSQLDevice.iEqual_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Boolean" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, true Boolean3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), false }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("0bf9b0d7ea0843708a9e24245b19e12e"), false } } into ListMSSQLBinaryMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryBooleanTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iEqual(MSSQLBinary1, MSSQLBinary2) Boolean3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryBooleanTestTable then raise Error("System.iEqual(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*3ID, */ row { System.String('MSSQLDevice.iGreater_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Boolean" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, false Boolean3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), false }, row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), true } } into ListMSSQLBinaryMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryBooleanTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iGreater(MSSQLBinary1, MSSQLBinary2) Boolean3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryBooleanTestTable then raise Error("System.iGreater(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*4ID, */ row { System.String('MSSQLDevice.iInclusiveGreater_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Boolean" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, true Boolean3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), false }, row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), true } } into ListMSSQLBinaryMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryBooleanTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iInclusiveGreater(MSSQLBinary1, MSSQLBinary2) Boolean3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryBooleanTestTable then raise Error("System.iInclusiveGreater(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*5ID, */ row { System.String('MSSQLDevice.iInclusiveLess_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Boolean" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, true Boolean3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), true }, row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), false } } into ListMSSQLBinaryMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryBooleanTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iInclusiveLess(MSSQLBinary1, MSSQLBinary2) Boolean3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryBooleanTestTable then raise Error("System.iInclusiveLess(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*6ID, */ row { System.String('MSSQLDevice.iLess_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Boolean" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, false Boolean3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12f"), true }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), true } } into ListMSSQLBinaryMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryBooleanTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iLess(MSSQLBinary1, MSSQLBinary2) Boolean3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryBooleanTestTable then raise Error("System.iLess(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*7ID, */ row { System.String('MSSQLDevice.iNotEqual_MSSQLDevice_MSSQLBinary_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "MSSQLBinary", "MSSQLBinary", "Boolean" });' Table, 'insert table { row { MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary2, false Boolean3 }, row { MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e"), true }, row { MSSQLBinary("054ac5330b19417a96cdd37cad01cd02"), MSSQLBinary("b7f9b0d7ea0843708a9e24245b19e12e"), true } } into ListMSSQLBinaryMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryMSSQLBinaryBooleanTestTable over { MSSQLBinary1, MSSQLBinary2 } add { iNotEqual(MSSQLBinary1, MSSQLBinary2) Boolean3 }' Script, ') <> ListMSSQLBinaryMSSQLBinaryBooleanTestTable then raise Error("System.iNotEqual(MSSQLBinary,MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*8ID, */ row { System.String('MSSQLDevice.IsSpecial_MSSQLDevice_MSSQLBinary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"MSSQLBinary", "Boolean"});' Table, 'insert table { row {MSSQLBinary("b54ac5330b194111") MSSQLBinary1, false Boolean2 }, row { MSSQLBinary("b54ac5330b194112"), false }, row { MSSQLBinary("b54ac5330b194113"), false } } into ListMSSQLBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMSSQLBinaryBooleanTestTable over { MSSQLBinary1 } add { IsSpecial(MSSQLBinary1) Boolean2 }' Script, ') <> ListMSSQLBinaryBooleanTestTable then raise Error("IsSpecial(MSSQLBinary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*9ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("07f9b0d7ea0843708a9e24245b19e12e") then raise Error("MSSQLDevice.MSSQLBinary value was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*10ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02") then raise Error("MSSQLDevice.MSSQLBinary value was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*11ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("b54ac5330b19417a96cdd37cad01cd02") then raise Error("MSSQLDevice.MSSQLBinary value was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*12ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("0000") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("0000") then raise Error("MSSQLDevice.MSSQLBinary value 0000 was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*13ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("000=") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("000=") then raise Error("MSSQLDevice.MSSQLBinary value 000= was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*14ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("00==") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("00==") then raise Error("MSSQLDevice.MSSQLBinary value 00== was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*15ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("0===") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("0===") then raise Error("MSSQLDevice.MSSQLBinary value 0=== was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*16ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 114 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListMSSQLBinaryTestTable { ID : Integer, MSSQLBinary1 : MSSQLBinary, key { ID } };' Table, 'insert table { row { 1 ID, MSSQLBinary("1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef") MSSQLBinary1 } } into ListMSSQLBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (MSSQLBinary1 from row from ListMSSQLBinaryTestTable) <> MSSQLBinary("1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef") then raise Error("MSSQLDevice.MSSQLBinary value that was ~very large was not retrieved properly.");' Script, '' AfterScript, 'drop table ListMSSQLBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*17ID, */ row { System.String('MSSQLDevice.MSSQLBinary') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"MSSQLBinary"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { MSSQLBinary("6e24f2a44137401c80341334e14d1d64") MSSQLBinary1 } } into ListMSSQLBinaryTestTable; NegativeTest("insert table { row { MSSQLBinary(''6e24f2a44137401c80341334e14d1d64'') MSSQLBinary1 } } into ListMSSQLBinaryTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { MSSQLBinary(''58e556f7b17e4df0a7a5c3cd210cb7d8'') MSSQLBinary1 } } into ListMSSQLBinaryTestTable; NegativeTest("insert table { row { ''58e556f7b17e4df0a7a5c3cd210cb7d8'' MSSQLBinary1 } } into ListMSSQLBinaryTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*18ID, */ row { System.String('SQLDevice.iEqual_SQLDevice_SQLText_SQLDevice_SQLText_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "SQLText", "SQLText", "Boolean" });' Table, 'insert table { row { SQLText("Testing") SQLText1, SQLText("Testing") SQLText2, true Boolean3 }, row { SQLText("NotEqual"), SQLText("notequal"), false }, row { SQLText("interesting"), SQLText("very interesting"), false } } into ListSQLTextSQLTextBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListSQLTextSQLTextBooleanTestTable over { SQLText1, SQLText2 } add { iEqual(SQLText1, SQLText2) Boolean3 }' Script, ') <> ListSQLTextSQLTextBooleanTestTable then raise Error("System.iEqual(SQLText,SQLText) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*19ID, */ row { System.String('SQLDevice.iGreater_SQLDevice_SQLText_SQLDevice_SQLText_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "SQLText", "SQLText", "Boolean" });' Table, 'insert table { row { SQLText("No") SQLText1, SQLText("Not") SQLText2, false SQLText3 }, row { SQLText("Equal"), SQLText("Equal"), false }, row { SQLText("Greater than"), SQLText("bob"), true } } into ListSQLTextSQLTextBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListSQLTextSQLTextBooleanTestTable over { SQLText1, SQLText2 } add { iGreater(SQLText1, SQLText2) Boolean3 }' Script, ') <> ListSQLTextSQLTextBooleanTestTable then raise Error("System.iGreater(SQLText,SQLText) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*20ID, */ row { System.String('SQLDevice.iInclusiveGreater_SQLDevice_SQLText_SQLDevice_SQLText_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "SQLText", "SQLText", "Boolean" });' Table, 'insert table { row { SQLText("Included") SQLText1, SQLText("Included") SQLText2, true Boolean3 }, row { SQLText("Not True"), SQLText("Zebra"), false }, row { SQLText("Zebra"), SQLText("Dog"), true } } into ListSQLTextSQLTextBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListSQLTextSQLTextBooleanTestTable over { SQLText1, SQLText2 } add { iInclusiveGreater(SQLText1, SQLText2) Boolean3 }' Script, ') <> ListSQLTextSQLTextBooleanTestTable then raise Error("System.iInclusiveGreater(SQLText,SQLText) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*21ID, */ row { System.String('SQLDevice.iInclusiveLess_SQLDevice_SQLText_SQLDevice_SQLText_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "SQLText", "SQLText", "Boolean" });' Table, 'insert table { row { SQLText("Equal") SQLText1, SQLText("Equal") SQLText2, true Boolean3 }, row { SQLText("LessThan"), SQLText("Zebra"), true }, row { SQLText("Zebra"), SQLText("adam"), false } } into ListSQLTextSQLTextBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListSQLTextSQLTextBooleanTestTable over { SQLText1, SQLText2 } add { iInclusiveLess(SQLText1, SQLText2) Boolean3 }' Script, ') <> ListSQLTextSQLTextBooleanTestTable then raise Error("System.iInclusiveLess(SQLText,SQLText) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*22ID, */ row { System.String('SQLDevice.iLess_SQLDevice_SQLText_SQLDevice_SQLText_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "SQLText", "SQLText", "Boolean" });' Table, 'insert table { row { SQLText("less") SQLText1, SQLText("Zebra") SQLText2, true Boolean3 }, row { SQLText("Zebra"), SQLText("test"), false }, row { SQLText("Equal"), SQLText("Equal"), true } } into ListSQLTextBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListSQLTextSQLTextBooleanTestTable over { SQLText1, SQLText2 } add { iLess(SQLText1, SQLText2) Boolean3 }' Script, ') <> ListSQLTextSQLTextBooleanTestTable then raise Error("System.iLess(SQLText,SQLText) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*23ID, */ row { System.String('SQLDevice.IsSpecial_SQLDevice_SQLText_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText", "Boolean"});' Table, 'insert table { row {SQLText("Text"), SQLText1, false Boolean2 }, row { SQLText("111"), false }, row { SQLText("b54ac5330b194111"), false } } into ListSQLTextBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListSQLTextBooleanTestTable over { SQLText1 } add { IsSpecial(SQLText1) Boolean2 }' Script, ') <> ListSQLTextBooleanTable then raise Error("IsSpecial(SQLText) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*24ID, */ row { System.String('SQLDevice.SQLIText') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "Test" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "Test" then raise Error("SQLDevice.SQLIText ''Test'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*25ID, */ row { System.String('SQLDevice.SQLIText') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "Alphora" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "Alphora" then raise Error("SQLDevice.SQLIText ''Alphora'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*26ID, */ row { System.String('SQLDevice.SQLIText') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "Dataphor" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "Dataphor" then raise Error("SQLDevice.SQLIText ''Dataphor'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*27ID, */ row { System.String('SQLDevice.SQLIText') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "DAE" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "DAE" then raise Error("SQLDevice.SQLIText ''DAE'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*28ID, */ row { System.String('SQLDevice.SQLIText') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "McKay Salisbury" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "McKay Salisbury" then raise Error("SQLDevice.SQLIText ''McKay Salisbury'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*29ID, */ row { System.String('SQLDevice.SQLIText') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "
		 Whitespace Test" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "
		 Whitespace Test" then raise Error("SQLDevice.SQLIText with whitespace value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*30ID, */ row { System.String('SQLDevice.SQLIText') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "| [0N741n - 5ym|3075" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "| [0N741n - 5ym|3075" then raise Error("SQLDevice.SQLIText in 1337 sp33k (symbols and numbers test) was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*31ID, */ row { System.String('SQLDevice.SQLIText') Name, 107 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "WeIrD CaSe" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) <> "WeIrD CaSe" then raise Error("SQLDevice.SQLIText containing strange mixed case value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*32ID, */ row { System.String('SQLDevice.SQLIText') Name, 108 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "TEST CASE" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) = "test case" then raise Error("SQLDevice.SQLIText compared insensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*33ID, */ row { System.String('SQLDevice.SQLIText') Name, 109 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLIText"});' Table, 'insert table { row { "test case" SQLIText1 } } into ListSQLITextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLIText1 from row from ListSQLITextTestTable) = "TEST CASE" then raise Error("SQLDevice.SQLIText compared insensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*34ID, */ row { System.String('SQLDevice.SQLText') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "Test" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "Test" then raise Error("SQLDevice.SQLText ''Test'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*35ID, */ row { System.String('SQLDevice.SQLText') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "Alphora" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "Alphora" then raise Error("SQLDevice.SQLText ''Alphora'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*36ID, */ row { System.String('SQLDevice.SQLText') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "Dataphor" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "Dataphor" then raise Error("SQLDevice.SQLText ''Dataphor'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*37ID, */ row { System.String('SQLDevice.SQLText') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "DAE" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "DAE" then raise Error("SQLDevice.SQLText ''DAE'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*38ID, */ row { System.String('SQLDevice.SQLText') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "McKay Salisbury" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "McKay Salisbury" then raise Error("SQLDevice.SQLText ''McKay Salisbury'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*39ID, */ row { System.String('SQLDevice.SQLText') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "
		 Whitespace Test" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "
		 Whitespace Test" then raise Error("SQLDevice.SQLText with whitespace value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*40ID, */ row { System.String('SQLDevice.SQLText') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "| [0N741n - 5ym|3075" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "| [0N741n - 5ym|3075" then raise Error("SQLDevice.SQLText in 1337 sp33k (symbols and numbers test) was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*41ID, */ row { System.String('SQLDevice.SQLText') Name, 107 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "WeIrD CaSe" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) <> "WeIrD CaSe" then raise Error("SQLDevice.SQLText containing strange mixed case value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*42ID, */ row { System.String('SQLDevice.SQLText') Name, 108 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "TEST CASE" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) = "test case" then raise Error("SQLDevice.SQLText compared insensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*43ID, */ row { System.String('SQLDevice.SQLText') Name, 109 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"SQLText"});' Table, 'insert table { row { "test case" SQLText1 } } into ListSQLTextTestTable;' InsertTableStatement, '' BeforeScript, 'if (SQLText1 from row from ListSQLTextTestTable) = "TEST CASE" then raise Error("SQLDevice.SQLText compared insensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*44ID, */ row { System.String('System.Abs_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 1.4d Decimal1, 1.4d Decimal2, 1.4d Decimal3 }, row { -1.4d, -1.4d, 1.4d }, row { 0d, 66d, 0d }, row { -0d, 76d, 0d } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { Abs(Decimal1) Decimal3 }' Script, ') <> TripleDecimalTestTable then raise Error("System.Abs(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*45ID, */ row { System.String('System.Abs_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 0 Integer2, 0 Integer3 }, row { 1, 1, 1 }, row { -1, -1, 1 }, row { -65536, -65536, 65536 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Abs(Integer1) Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("System.Abs(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*46ID, */ row { System.String('System.Abs_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { -2147483648 Integer1, 2147483647 Integer2, 2147483647 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Abs(Integer1) Integer3 };' Script, '", "System.Abs(Integer) failed to throw on negating mininum Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*47ID, */ row { System.String('System.AddMonths_System_Date_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Date" });' Table, 'insert table { row { Date(2003,6,17) Date1, 0 Integer2, Date(2003,6,17) Date3 }, row { Date(2003,6,30), 8, Date(2004,2,29) }, row { Date(2003,6,17), -1, Date(2003,5,17) } } into ListDateIntegerDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateIntegerDateTestTable over { Date1, Integer2 } add { AddMonths(Date1, Integer2) Date3 }' Script, ') <> ListDateIntegerDateTestTable then raise Error("System.AddMonths(Date,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*48ID, */ row { System.String('System.AddMonths_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2003,6,17) DateTime1, 0 Integer2, DateTime(2003,6,17) DateTime3 }, row { DateTime(2003,6,30), 8, DateTime(2004,2,29) }, row { DateTime(2003,6,17), -1, DateTime(2003,5,17) } } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { AddMonths(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.AddMonths(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*49ID, */ row { System.String('System.AddYears_System_Date_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Date" });' Table, 'insert table { row { Date(2004,2,29) Date1, 0 Integer2, Date(2004,2,29) Date3 }, row { Date(2004,2,29), 8, Date(2012,2,29) }, row { Date(2004,2,29), 1, Date(2005,2,28) }, row { Date(2004,2,29), -4, Date(2000,2,29) } } into ListDateIntegerDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateIntegerDateTestTable over { Date1, Integer2 } add { AddYears(Date1, Integer2) Date3 }' Script, ') <> ListDateIntegerDateTestTable then raise Error("System.AddYears(Date,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*50ID, */ row { System.String('System.AddYears_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,29) DateTime1, 0 Integer2, DateTime(2004,2,29) DateTime3 }, row { DateTime(2004,2,29), 8, DateTime(2012,2,29) }, row { DateTime(2004,2,29), 1, DateTime(2005,2,28) }, row { DateTime(2004,2,29), -4, DateTime(2000,2,29) } } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { AddYears(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.AddYears(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*51ID, */ row { System.String('System.All_System_Boolean') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { true Boolean1, false Boolean2, false Boolean3 }, row { true, true, true }, row { true, false, false }, row { false, true, false } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleBooleanTestTable over { Boolean1, Boolean2 } add { All(Boolean1, Boolean2) Boolean3 }' Script, ') <> TripleBooleanTestTable then raise Error("All(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*52ID, */ row { System.String('System.All_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { true Boolean1, true Boolean2, true Boolean3 }, row { true, false, true }, row { true, false, false } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.All(Boolean1 from TripleBooleanTestTable) BooleanAggregate1, System.All(Boolean2 from TripleBooleanTestTable) BooleanAggregate2, System.All(Boolean3 from TripleBooleanTestTable) BooleanAggregate3 } }' Script, ') <> table { row { true BooleanAggregate1, false BooleanAggregate2, false BooleanAggregate3 } } then raise Error("System.All(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*53ID, */ row { System.String('System.Any_System_Boolean') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { true Boolean1, false Boolean2, true Boolean3 }, row { true, true, true }, row { true, false, true }, row { false, false, false } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleBooleanTestTable over { Boolean1, Boolean2 } add { Any(Boolean1, Boolean2) Boolean3 }' Script, ') <> TripleBooleanTestTable then raise Error("Any(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*54ID, */ row { System.String('System.Any_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { true Boolean1, false Boolean2, true Boolean3 }, row { false, false, false }, row { false, false, true } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Any(Boolean1 from TripleBooleanTestTable) BooleanAggregate1, System.Any(Boolean2 from TripleBooleanTestTable) BooleanAggregate2, System.Any(Boolean3 from TripleBooleanTestTable) BooleanAggregate3 } }' Script, ') <> table { row { true BooleanAggregate1, false BooleanAggregate2, true BooleanAggregate3 } } then raise Error("System.Any(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*55ID, */ row { System.String('System.Avg_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, 1d Decimal2, 98.6d Decimal3 }, row { 0, 2, 100 }, row { 0, 3, 90.4 }, row { 0, 3, 95.1 }, row { 0, 2, 88.8 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Avg(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Avg(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, 2.2 DecimalAggregate2, 94.58 DecimalAggregate3 } } then raise Error("System.Avg(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*56ID, */ row { System.String('System.Avg_System_Decimal_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, 1d Decimal2, 98.6d Decimal3 }, row { 0, 2, 100 }, row { 0, 3, 90.4 }, row { nil as Integer, nil as Integer, nil as Integer }, row { 0, 3, 95.1 }, row { 0, 2, 88.8 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(Decimal1 from TripleNullDecimalTestTable) DecimalAggregate1, System.Avg(Decimal2 from TripleNullDecimalTestTable) DecimalAggregate2, System.Avg(Decimal3 from TripleNullDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, 2.2 DecimalAggregate2, 94.58 DecimalAggregate3 } } then raise Error("System.Avg(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*57ID, */ row { System.String('System.Avg_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Avg(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Avg(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, 2 IntegerAggregate2, 82 IntegerAggregate3 } } then raise Error("System.Avg(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*58ID, */ row { System.String('System.Avg_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { nil as Integer Integer1, nil as Integer Integer2, nil as Integer Integer3 }, row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(Integer1 from TripleNullIntegerTestTable) IntegerAggregate1, System.Avg(Integer2 from TripleNullIntegerTestTable) IntegerAggregate2, System.Avg(Integer3 from TripleNullIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, 2 IntegerAggregate2, 82 IntegerAggregate3 } } then raise Error("System.Avg(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*59ID, */ row { System.String('System.Avg_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0 Money1, $1 Money2, $0.57 Money3 }, row { $0, $2, $0.68 }, row { $0, $3, $0.87 }, row { $0, $3, $0.99 }, row { $0, $2, $1 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Avg(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Avg(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, $2.2 MoneyAggregate2, $0.822 MoneyAggregate3 } } then raise Error("System.Avg(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*60ID, */ row { System.String('System.Avg_System_Money_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, $1 Money2, $0.57 Money3 }, row { nil as Money, nil as Money, nil as Money }, row { $0, $2, $0.68 }, row { $0, $3, $0.87 }, row { $0, $3, $0.99 }, row { $0, $2, $1 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(Money1 from TripleNullMoneyTestTable) MoneyAggregate1, System.Avg(Money2 from TripleNullMoneyTestTable) MoneyAggregate2, System.Avg(Money3 from TripleNullMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, $2.2 MoneyAggregate2, $0.822 MoneyAggregate3 } } then raise Error("System.Avg(Money) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*61ID, */ row { System.String('System.Avg_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(2), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(2), TimeSpan.Ticks(100) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Avg(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Avg(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(2) TimeSpanAggregate2, TimeSpan.Ticks(82) TimeSpanAggregate3 } } then raise Error("System.Avg(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*62ID, */ row { System.String('System.Avg_System_TimeSpan_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { nil as TimeSpan, nil as TimeSpan, nil as TimeSpan }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(2), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(2), TimeSpan.Ticks(100) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Avg(TimeSpan1 from TripleNullTimeSpanTestTable) TimeSpanAggregate1, System.Avg(TimeSpan2 from TripleNullTimeSpanTestTable) TimeSpanAggregate2, System.Avg(TimeSpan3 from TripleNullTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(2) TimeSpanAggregate2, TimeSpan.Ticks(82) TimeSpanAggregate3 } } then raise Error("System.Avg(TimeSpan) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*63ID, */ row { System.String('System.Binary') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("07f9b0d7ea0843708a9e24245b19e12e") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("07f9b0d7ea0843708a9e24245b19e12e") then raise Error("System.Binary value was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*64ID, */ row { System.String('System.Binary') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("b54ac5330b19417a96cdd37cad01cd02") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("b54ac5330b19417a96cdd37cad01cd02") then raise Error("System.Binary value was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*65ID, */ row { System.String('System.Binary') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("b54ac5330b19417a96cdd37cad01cd02") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("b54ac5330b19417a96cdd37cad01cd02") then raise Error("System.Binary value was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*66ID, */ row { System.String('System.Binary') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("0000") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("0000") then raise Error("System.Binary value 0000 was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*67ID, */ row { System.String('System.Binary') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("000=") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("000=") then raise Error("System.Binary value 000= was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*68ID, */ row { System.String('System.Binary') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("00==") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("00==") then raise Error("System.Binary value 00== was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*69ID, */ row { System.String('System.Binary') Name, 114 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListBinaryTestTable { ID : Integer, Binary1 : Binary, key { ID } };' Table, 'insert table { row { 1 ID, Binary("1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef") Binary1 } } into ListBinaryTestTable;' InsertTableStatement, '' BeforeScript, 'if (Binary1 from row from ListBinaryTestTable) <> Binary("1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef1234567890badcabdeadbeef") then raise Error("System.Binary value that was ~very large was not retrieved properly.");' Script, '' AfterScript, 'drop table ListBinaryTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*70ID, */ row { System.String('System.Binary') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Binary"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { Binary("6e24f2a44137401c80341334e14d1d64") Binary1 } } into ListBinaryTestTable; NegativeTest("insert table { row { Binary(''6e24f2a44137401c80341334e14d1d64'') Binary1 } } into ListBinaryTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { Binary(''58e556f7b17e4df0a7a5c3cd210cb7d8'') Binary1 } } into ListBinaryTestTable; NegativeTest("insert table { row { ''58e556f7b17e4df0a7a5c3cd210cb7d8'' Binary1 } } into ListBinaryTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*71ID, */ row { System.String('System.Binary_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Binary", "String", "Binary"});' Table, 'insert table { row { Binary("97f0b0d7ea0843708a9e24245b19e12e") Binary1, "07f9b0d7ea0843708a9e24245b19e12e" String2, Binary("07f9b0d7ea0843708a9e24245b19e12e") Binary3 }, row { Binary("07f9b0d7ea0843708a9e24245b19e13e"), "07f9b0d7ea0843708a9e24245b19e12e", Binary("07f9b0d7ea0843708a9e24245b19e12e") } } into ListBinaryBinaryBinaryTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBinaryStringBinaryTestTable over { Binary1, String2 } add { Binary(String2) Binary3}' Script, ') <> ListBinaryStringBinaryTestTable then raise Error("System.Binary(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*72ID, */ row { System.String('System.Boolean') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean"});' Table, 'insert table { row { true Boolean1 } } into ListBooleanTestTable;' InsertTableStatement, '' BeforeScript, 'if (Boolean1 from row from ListBooleanTestTable) <> true then raise Error("System.Boolean ''True'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*73ID, */ row { System.String('System.Boolean') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean"});' Table, 'insert table { row { false Boolean1 } } into ListBooleanTestTable;' InsertTableStatement, '' BeforeScript, 'if (Boolean1 from row from ListBooleanTestTable) <> false then raise Error("System.Boolean ''False'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*74ID, */ row { System.String('System.Boolean') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { true Boolean1 } } into ListBooleanTestTable; NegativeTest("insert table { row { true Boolean1 } } into ListBooleanTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { false Boolean1 } } into ListBooleanTestTable; NegativeTest("insert table { row { true Boolean1 } } into ListBooleanTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*75ID, */ row { System.String('System.Boolean') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Boolean1 : Boolean, Boolean2 : Boolean, key { Boolean1 }, order { Boolean2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { false Boolean1, true Boolean2 }, row { true Boolean1, false Boolean2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Boolean2 asc }", "DeviceOrder order by { Boolean2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*76ID, */ row { System.String('System.Boolean') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Boolean1 : Boolean, Boolean2 : Boolean, key { Boolean1 }, order { Boolean2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { false Boolean1, true Boolean2 }, row { true Boolean1, false Boolean2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Boolean2 desc }", "DeviceOrder order by { Boolean2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*77ID, */ row { System.String('System.Boolean.ReadValue_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean" });' Table, 'insert table { row { true Boolean1,  true Boolean2 }, row {false, false } } into ListBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanTestTable over { Boolean1 } add { ReadValue(Boolean1) Boolean2 }' Script, ') <> ListBooleanBooleanTestTable then raise Error("System.Boolean.ReadValue(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*78ID, */ row { System.String('System.Boolean.WriteValue_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { true Boolean1, false Boolean2, false Boolean3 }, row { false, true, true }, row { true, true, true} } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { WriteValue(Boolean1, Boolean2) Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("System.Boolean.WriteValue(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*79ID, */ row { System.String('System.Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "Boolean", "Boolean"});' Table, 'insert table { row { false Boolean1, true Boolean2, false Boolean3 }, row { true, true, true } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean(Boolean1) Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("System.Boolean(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*80ID, */ row { System.String('System.Byte') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 37 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 37 then raise Error("System.Byte normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*81ID, */ row { System.String('System.Byte') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 42 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 42 then raise Error("System.Byte normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*82ID, */ row { System.String('System.Byte') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 128 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 128 then raise Error("System.Byte normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*83ID, */ row { System.String('System.Byte') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 0 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 0 then raise Error("System.Byte boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*84ID, */ row { System.String('System.Byte') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 1 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 1 then raise Error("System.Byte boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*85ID, */ row { System.String('System.Byte') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 254 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 254 then raise Error("System.Byte boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*86ID, */ row { System.String('System.Byte') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, 'insert table { row { 255 Byte1 } } into ListByteTestTable;' InsertTableStatement, '' BeforeScript, 'if (Byte1 from row from ListByteTestTable) <> 255 then raise Error("System.Byte boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*87ID, */ row { System.String('System.Byte') Name, 120 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -1 Byte1 } } into ListByteTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*88ID, */ row { System.String('System.Byte') Name, 121 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -256 Byte1 } } into ListByteTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*89ID, */ row { System.String('System.Byte') Name, 122 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 256 Byte1 } } into ListByteTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*90ID, */ row { System.String('System.Byte') Name, 123 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 1025 Byte1 } } into ListByteTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*91ID, */ row { System.String('System.Byte') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { 5 Byte1 } } into ListByteTestTable; NegativeTest("insert table { row { 5 Byte1 } } into ListByteTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { 42 Byte1 } } into ListByteTestTable; NegativeTest("insert table { row { 42 Byte1 } } into ListByteTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*92ID, */ row { System.String('System.Byte') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Byte1 : Byte, Byte2 : Byte, key { Byte1 }, order { Byte2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Byte1, 42 Byte2 }, row { 116 Byte1, 255 Byte2 }, row { 117 Byte1, 254 Byte2 }, row { 188 Byte1, 42 Byte2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Byte2 asc }", "DeviceOrder order by { Byte2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*93ID, */ row { System.String('System.Byte') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Byte1 : Byte, Byte2 : Byte, key { Byte1 }, order { Byte2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Byte1, 42 Byte2 }, row { 116 Byte1, 255 Byte2 }, row { 117 Byte1, 254 Byte2 }, row { 188 Byte1, 42 Byte2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Byte2 desc }", "DeviceOrder order by { Byte2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*94ID, */ row { System.String('System.Byte.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Byte" });' Table, 'insert table { row { "255" String1, 255 Byte2 }, row { "123", 123 }, row { "1", 1 } } into ListStringByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringByteTestTable over { String1 } add { Byte.AsString(String1) Byte2 }' Script, ') <> ListStringByteTestTable then raise Error("System.Byte.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*95ID, */ row { System.String('System.Byte.ReadAsString_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "String", "String" });' Table, 'insert table { row { 1 Byte1, "0" String2, "1" String3 }, row { 156, "Test", "156" }, row { 255, "0", "255"} } into ListByteStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteStringStringTestTable over { Byte1, String2 } add { ReadAsString(Byte1) String3 }' Script, ') <> ListByteStringStringTestTable then raise Error("System.Byte.ReadAsString(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*96ID, */ row { System.String('System.Byte.ReadValue_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte" });' Table, 'insert table { row {  100 Byte1,  100 Byte2 }, row { 0, 0 }, row { 255, 255 } } into ListByteByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteTestTable over { Byte1 } add { ReadValue(Byte1) Byte2 }' Script, ') <> ListByteByteTestTable then raise Error("System.Byte.ReadValue(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*97ID, */ row { System.String('System.Byte.WriteAsString_System_Byte_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "String", "Byte" });' Table, 'insert table { row { 98 Byte1, "143" String2, 143 Byte3 }, row { 1, "245", 245 }, row { 255, "1", 1} } into ListByteStringByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteStringByteTestTable over { Byte1, String2 } add { WriteAsString(Byte1, String2) Byte3 }' Script, ') <> ListByteStringByteTestTable then raise Error("System.Byte.WriteAsString(Byte,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*98ID, */ row { System.String('System.Byte.WriteValue_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Byte" });' Table, 'insert table { row { 98 Byte1, 100 Byte2, 100 Byte3 }, row { 100, 255, 255 }, row { 1,65, 65} } into ListByteByteByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteByteByteTestTable over { Byte1, Byte2 } add { WriteValue(Byte1, Byte2) Byte3 }' Script, ') <> ListByteByteByteTestTable then raise Error("System.Byte.WriteValue(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*99ID, */ row { System.String('System.Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "Byte", "Byte"});' Table, 'insert table { row { 128 Byte1, 255 Byte2, 128 Byte3 }, row { 1, 64, 1 } } into ListByteByteByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteByteByteTestTable over { Byte1, Byte2 } add { Byte(Byte1) Byte3}' Script, ') <> ListByteByteByteTestTable then raise Error("System.Byte(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*100ID, */ row { System.String('System.Ceiling_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, 0d Decimal2, 0d Decimal3 }, row { 1d, 1d, 1d }, row { 3.14d, 3.14d, 4. }, row { -3.14d, -3.14d, -3d } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { Ceiling(Decimal1) Decimal3 }' Script, ') <> TripleDecimalTestTable then raise Error("System.Ceiling(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*101ID, */ row { System.String('System.CompareText_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Integer" });' Table, 'insert table { row { "" String1, "" String2, 0 Integer3 }, row { "Dataphor", "Dataphor", 0 }, row { "Alphora", "ALPHORA", 0 }, row { "Dataphor", "Alphora", 1 }, row { "Alphora", "Dataphor", -1 } } into ListStringStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringIntegerTestTable over { String1, String2 } add { CompareText(String1, String2) Integer3 }' Script, ') <> ListStringStringIntegerTestTable then raise Error("System.CompareText(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*102ID, */ row { System.String('System.Compatible_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1) VersionNumber1, VersionNumber(1,1,1) VersionNumber2, true Boolean3 }, row { VersionNumber(2,3,4), VersionNumber(2,3,4,5), true }, row { VersionNumber(2,3,4), VersionNumber(2,3,3,5), false} } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { Compatible(VersionNumber1, VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.Compatible(VersionNumber, VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*103ID, */ row { System.String('System.Count__') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(TripleIntegerTestTable) IntegerAggregate1, System.Count(TripleIntegerTestTable) IntegerAggregate2, System.Count(TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 5 IntegerAggregate1, 5 IntegerAggregate2, 5 IntegerAggregate3 } } then raise Error("System.Count() failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*104ID, */ row { System.String('System.Count__') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(TripleIntegerTestTable) IntegerAggregate1, System.Count(TripleIntegerTestTable) IntegerAggregate2, System.Count(TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 1 IntegerAggregate1, 1 IntegerAggregate2, 1 IntegerAggregate3 } } then raise Error("System.Count() failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*105ID, */ row { System.String('System.Count__') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(TripleIntegerTestTable) IntegerAggregate1, System.Count(TripleIntegerTestTable) IntegerAggregate2, System.Count(TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, 0 IntegerAggregate2, 0 IntegerAggregate3 } } then raise Error("System.Count() failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*106ID, */ row { System.String('System.Count__') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { nil as Integer Integer1, nil as Integer Integer2, nil as Integer Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(TripleNullIntegerTestTable) IntegerAggregate1, System.Count(TripleNullIntegerTestTable) IntegerAggregate2, System.Count(TripleNullIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 6 IntegerAggregate1, 6 IntegerAggregate2, 6 IntegerAggregate3 } } then raise Error("System.Count() failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*107ID, */ row { System.String('System.Count_System_Scalar_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Count(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Count(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 5 IntegerAggregate1, 5 IntegerAggregate2, 5 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*108ID, */ row { System.String('System.Count_System_Scalar_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Count(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Count(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 1 IntegerAggregate1, 1 IntegerAggregate2, 1 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*109ID, */ row { System.String('System.Count_System_Scalar_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Count(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Count(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, 0 IntegerAggregate2, 0 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*110ID, */ row { System.String('System.Count_System_Scalar_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { nil as Integer Integer1, nil as Integer Integer2, nil as Integer Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Count(Integer1 from TripleNullIntegerTestTable) IntegerAggregate1, System.Count(Integer2 from TripleNullIntegerTestTable) IntegerAggregate2, System.Count(Integer3 from TripleNullIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 5 IntegerAggregate1, 5 IntegerAggregate2, 5 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*111ID, */ row { System.String('System.Date') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date"});' Table, 'insert table { row { Date() Date1 } } into ListDateTestTable;' InsertTableStatement, '' BeforeScript, 'if (Date1 from row from ListDateTestTable) <> Date() then raise Error("System.Date current time values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*112ID, */ row { System.String('System.Date') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date"});' Table, 'insert table { row { Date(2003, 12, 31) Date1 } } into ListDateTestTable;' InsertTableStatement, '' BeforeScript, 'if (Date1 from row from ListDateTestTable) <> Date(2003, 12, 31) then raise Error("System.Date normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*113ID, */ row { System.String('System.Date') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date"});' Table, 'insert table { row { Date(2003, 9, 4) Date1 } } into ListDateTestTable;' InsertTableStatement, '' BeforeScript, 'if (Date1 from row from ListDateTestTable) <> Date(2003, 9, 4) then raise Error("System.Date normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*114ID, */ row { System.String('System.Date') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date"});' Table, 'insert table { row { Date(2003, 1, 1) Date1 } } into ListDateTestTable;' InsertTableStatement, '' BeforeScript, 'if (Date1 from row from ListDateTestTable) <> Date(2003, 1, 1) then raise Error("System.Date normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*115ID, */ row { System.String('System.Date') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date"});' Table, 'insert table { row { Date(2004, 2, 29) Date1 } } into ListDateTestTable;' InsertTableStatement, '' BeforeScript, 'if (Date1 from row from ListDateTestTable) <> Date(2004, 2, 29) then raise Error("System.Date normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*116ID, */ row { System.String('System.Date') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date"});' Table, 'insert table { row { Date(1900, 1, 1) Date1 } } into ListDateTestTable;' InsertTableStatement, '' BeforeScript, 'if (Date1 from row from ListDateTestTable) <> Date(1900, 1, 1) then raise Error("System.Date boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*117ID, */ row { System.String('System.Date') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Date1 : Date, Date2 : Date, key { Date1 }, order { Date2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { Date(2003, 9, 4) Date1, Date(1980, 10, 3) Date2 }, row { Date(1951, 10, 28) Date1, Date(2003, 4, 9) Date2 }, row { Date(1955, 11, 5) Date1, Date(2015, 10, 21) Date2 }, row { Date(2063, 4, 4) Date1, Date(1969, 7, 9) Date2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Date2 asc }", "DeviceOrder order by { Date2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*118ID, */ row { System.String('System.Date') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Date1 : Date, Date2 : Date, key { Date1 }, order { Date2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { Date(2003, 9, 4) Date1, Date(1980, 10, 3) Date2 }, row { Date(1951, 10, 28) Date1, Date(2003, 4, 9) Date2 }, row { Date(1955, 11, 5) Date1, Date(2015, 10, 21) Date2 }, row { Date(2063, 4, 4) Date1, Date(1969, 7, 9) Date2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Date2 desc }", "DeviceOrder order by { Date2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*119ID, */ row { System.String('System.Date.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Date" });' Table, 'insert table { row { "12/25/2004" String1, "0" String2, Date(2004,12,25) Date3 }, row { "1/1/1901", "Test", Date(1901,1,1) }, row { "2/28/2004", "0", Date(2004,2,28) } } into ListStringStringDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringDateTestTable over { String1, String2 } add { Date.AsString(String1) Date3 }' Script, ') <> ListStringStringDateTestTable then raise Error("System.Date.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*120ID, */ row { System.String('System.Date.ReadAsString_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "String", "String" });' Table, 'insert table { row { Date(2004,2,4) Date1, "" String2, "2/4/2004" String3 } } into ListDateStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateStringStringTestTable over { Date1, String2 } add { ReadAsString(Date1) String3 }' Script, ') <> ListDateStringStringTestTable then raise Error("System.Date.ReadAsString(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*121ID, */ row { System.String('System.Date.ReadDay_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date", "Integer", "Integer"});' Table, 'insert table { row { Date(2004, 2, 3) Date1, 0 Integer2, 3 Integer3 }, row { Date(2004,1,1), 0, 1 } } into ListDateIntegerIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateIntegerIntegerTestTable over { Date1, Integer2 } add { ReadDay(Date1) Integer3 }' Script, ') <> ListDateIntegerIntegerTestTable then raise Error("System.Date.ReadDay(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*122ID, */ row { System.String('System.Date.ReadMonth_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Integer" });' Table, 'insert table { row { Date(2004,2,4) Date1, 0 Integer2, 2 Integer3 }, row { Date(2003,1,1), 0, 1 }, row { Date(2099,11,1), 0, 11 } } into ListDateIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateIntegerIntegerTestTable over { Date1, Integer2 } add { ReadMonth(Date1) Integer3 }' Script, ') <> ListDateIntegerIntegerTestTable then raise Error("System.Date.ReadMonth(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*123ID, */ row { System.String('System.Date.ReadTicks_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Long" });' Table, 'insert table { row { Date(2004,2,4) Date1, 0 Integer2, 632114496000000000 Long3 }, row { Date(2003,1,1), 0, 631769760000000000 }, row { Date(2099,11,1), 0, 662327712000000000 } } into ListDateIntegerLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateIntegerLongTestTable over { Date1, Integer2 } add { ReadTicks(Date1) Long3 }' Script, ') <> ListDateIntegerLongTestTable then raise Error("System.Date.ReadTicks(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*124ID, */ row { System.String('System.Date.ReadYear_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Integer" });' Table, 'insert table { row { Date(2004,6,18) Date1, 1 Integer2, 2004 Integer3 }, row { Date(2003,1,1), 2, 2003 }, row { Date(1999,7,4), 2, 1999 } } into ListDateIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateIntegerIntegerTestTable over { Date1, Integer2 } add { ReadYear(Date1) Integer3 }' Script, ') <> ListDateIntegerIntegerTestTable then raise Error("System.Date.ReadYear(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*125ID, */ row { System.String('System.Date.Ticks_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date", "Long", "Date"});' Table, 'insert table { row { Date(2004, 2, 3) Date1, 632113632000000000 Long2, Date(2004,2,3) Date3 }, row { Date(1900,1,1), 599266080000000000, Date(1900,1,1) } } into ListDateLongDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateLongDateTestTable over { Date1, Long2 } add { Date.Ticks(Long2) Date3 }' Script, ') <> ListDateLongDateTestTable then raise Error("System.Date.Ticks(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*126ID, */ row { System.String('System.Date.WriteAsString_System_Date_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "String", "Date" });' Table, 'insert table { row { Date(2004,2,4) Date1, "1/1/2004" String2, Date(2004,1,1) Date3 }, row { Date(2003,1,1), "1/1/2003", Date(2003,1,1) }, row { Date(1900,1,1), "9/15/1978", Date(1978,9,15)} } into ListDateStringDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateStringDateTestTable over { Date1, String2 } add { WriteAsString(Date1, String2) Date3 }' Script, ') <> ListDateStringDateTestTable then raise Error("System.Date.WriteAsString(Date,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*127ID, */ row { System.String('System.Date.WriteDay_System_Date_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Date" });' Table, 'insert table { row { Date(2004,2,4) Date1, 15 Integer2, Date(2004,2,15) Date3 }, row { Date(2003,1,1), 14, Date(2003,1,14) }, row { Date(1900,1,1), 13, Date(1900,1,13)} } into ListDateIntegerDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateIntegerDateTestTable over { Date1, Integer2 } add { WriteDay(Date1, Integer2) Date3 }' Script, ') <> ListDateIntegerDateTestTable then raise Error("System.Date.WriteDay(Date,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*128ID, */ row { System.String('System.Date.WriteMonth_System_Date_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Date" });' Table, 'insert table { row { Date(2004,2,4) Date1, 1 Integer2, Date(2004,1,4) Date3 }, row { Date(2003,1,1), 2, Date(2003,2,1) }, row { Date(1900,1,1), 12, Date(1900,12,1)} } into ListDateIntegerDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateIntegerDateTestTable over { Date1, Integer2 } add { WriteMonth(Date1, Integer2) Date3 }' Script, ') <> ListDateIntegerDateTestTable then raise Error("System.Date.WriteMonth(Date,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*129ID, */ row { System.String('System.Date.WriteTicks_System_Date_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Long", "Date" });' Table, 'insert table { row { Date(2004,2,4) Date1, 632114496000000000 Long2, Date(2004,2,4) Date3 }, row { Date(2003,1,1), 631769760000000000, Date(2003,1,1) }, row { Date(1900,1,1), 599266080000000000, Date(1900,1,1) } } into ListDateLongDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateLongDateTestTable over { Date1, Long2 } add { WriteTicks(Date1, Long2) Date3 }' Script, ') <> ListDateLongDateTestTable then raise Error("System.Date.WriteTicks(Date,Long,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*130ID, */ row { System.String('System.Date.WriteYear_System_Date_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Integer", "Date" });' Table, 'insert table { row { Date(2004,2,4) Date1, 1999 Integer2, Date(1999,2,4) Date3 }, row { Date(2003,1,1), 1997, Date(1997,1,1) }, row { Date(1900,1,1), 2003, Date(2003,1,1)} } into ListDateIntegerDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateIntegerDateTestTable over { Date1, Integer2 } add { WriteYear(Date1, Integer2) Date3 }' Script, ') <> ListDateIntegerDateTestTable then raise Error("System.Date.WriteYear(Date,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*131ID, */ row { System.String('System.Date_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date", "Date"});' Table, 'insert table { row { Date(2004, 2, 3) Date1, Date(1900,12,23) Date2 }, row { Date(2004,1,1), Date(1988,1,1) } } into ListDateDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateDateTestTable over { Date1, Date2 }' Script, ') <> ListDateDateTestTable then raise Error("System.Date(Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*132ID, */ row { System.String('System.DatePart_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Date" });' Table, 'insert table { row { DateTime(2004,2,4,1,1,1) DateTime1, Date(2004,2,4) Date2 }, row { DateTime(1753,2,28,1,32,45), Date(1753,2,28) }, row { DateTime(1900,1,1,1,1,1), Date(1900,1,1) } } into ListDateTimeDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeDateTestTable over { DateTime1 }add { DatePart(DateTime1) Date2 }' Script, ') <> ListDateTimeDateTestTable then raise Error("System.DatePart(System.DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*133ID, */ row { System.String('System.DateTime') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime() DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime() then raise Error("System.DateTime current time values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*134ID, */ row { System.String('System.DateTime') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(2003, 12, 31) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(2003, 12, 31) then raise Error("System.DateTime normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*135ID, */ row { System.String('System.DateTime') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(2003, 9, 4) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(2003, 9, 4) then raise Error("System.DateTime normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*136ID, */ row { System.String('System.DateTime') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(2003, 1, 1) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(2003, 1, 1) then raise Error("System.DateTime normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*137ID, */ row { System.String('System.DateTime') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(2004, 2, 29) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(2004, 2, 29) then raise Error("System.DateTime normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*138ID, */ row { System.String('System.DateTime') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(2000, 2, 29, 16, 12, 45) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(2000, 2, 29, 16, 12, 45) then raise Error("System.DateTime normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*139ID, */ row { System.String('System.DateTime') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(1980, 10, 3, 7, 30, 0) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(1980, 10, 3, 7, 30, 0) then raise Error("System.DateTime normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*140ID, */ row { System.String('System.DateTime') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(1900, 1, 1) then raise Error("System.DateTime boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*141ID, */ row { System.String('System.DateTime') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, 'insert table { row { DateTime(2099, 12, 31, 23, 59, 59) DateTime1 } } into ListDateTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (DateTime1 from row from ListDateTimeTestTable) <> DateTime(2099, 12, 31, 23, 59, 59) then raise Error("System.DateTime boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*142ID, */ row { System.String('System.DateTime') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { DateTime(2003, 9, 4) DateTime1 } } into ListDateTimeTestTable; NegativeTest("insert table { row { DateTime(2003, 9, 4) DateTime1 } } into ListDateTimeTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { DateTime(2003, 9, 4, 22, 4, 3) DateTime1 } } into ListDateTimeTestTable; NegativeTest("insert table { row { DateTime(2003, 9, 4, 22, 4, 3) DateTime1 } } into ListDateTimeTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*143ID, */ row { System.String('System.DateTime') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { DateTime1 : DateTime, DateTime2 : DateTime, key { DateTime1 }, order { DateTime2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { DateTime(2003, 9, 4) DateTime1, DateTime(1980, 10, 3) DateTime2 }, row { DateTime(1951, 10, 28) DateTime1, DateTime(2003, 4, 9) DateTime2 }, row { DateTime(1955, 11, 5) DateTime1, DateTime(2015, 10, 21) DateTime2 }, row { DateTime(2063, 4, 4) DateTime1, DateTime(1969, 7, 9) DateTime2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { DateTime2 asc }", "DeviceOrder order by { DateTime2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*144ID, */ row { System.String('System.DateTime') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { DateTime1 : DateTime, DateTime2 : DateTime, key { DateTime1 }, order { DateTime2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { DateTime(2003, 9, 4) DateTime1, DateTime(1980, 10, 3) DateTime2 }, row { DateTime(1951, 10, 28) DateTime1, DateTime(2003, 4, 9) DateTime2 }, row { DateTime(1955, 11, 5) DateTime1, DateTime(2015, 10, 21) DateTime2 }, row { DateTime(2063, 4, 4) DateTime1, DateTime(1969, 7, 9) DateTime2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { DateTime2 desc }", "DeviceOrder order by { DateTime2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*145ID, */ row { System.String('System.DateTime.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "DateTime" });' Table, 'insert table { row { "12/25/2004 1:00:00" String1, "0" String2, DateTime(2004,12,25,1,0,0) DateTime3 }, row { "1/1/1901 11:31:12", "Test", DateTime(1901,1,1, 11,31,12) }, row { "2/29/2004 12:32:45", "0", DateTime(2004,2,29,12,32,45) } } into ListStringStringDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringDateTimeTestTable over { String1, String2 } add { DateTime.AsString(String1) DateTime3 }' Script, ') <> ListStringStringDateTimeTestTable then raise Error("System.DateTime.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*146ID, */ row { System.String('System.DateTime.ReadAsString_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "String", "String" });' Table, 'insert table { row { DateTime(2004,2,4,11,1,1) DateTime1, "Test" String2, "2/4/2004 11:01:01" String3 }, row { DateTime(2003,1,1,12,32,32), "Test1", "1/1/2003 12:32:32" }, row { DateTime(1978,9,15, 23,59,59), "Test2", "9/15/1978 23:59:59"}} into ListDateTimeStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeStringStringTestTable over { DateTime1, String2 } add { ReadAsString(DateTime1) String3 }' Script, ') <> ListDateTimeStringStringTestTable then raise Error("System.DateTime.ReadAsString(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*145ID, */ row { System.String('System.DateTime.AsString_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "DateTime" });' Table, 'insert table { row { "2004-12-25 1:00:00" String1, "0" String2, DateTime(2004,12,25,1,0,0) DateTime3 }, row { "1901-1-1 11:31:12", "Test", DateTime(1901,1,1, 11,31,12) }, row { "2004-2-29 12:32:45", "0", DateTime(2004,2,29,12,32,45) } } into ListStringStringDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringDateTimeTestTable over { String1, String2 } add { DateTime.AsString(String1) DateTime3 }' Script, ') <> ListStringStringDateTimeTestTable then raise Error("System.DateTime.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*146ID, */ row { System.String('System.DateTime.ReadAsString_System_DateTime_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "String", "String" });' Table, 'insert table { row { DateTime(2004,2,4,11,1,1) DateTime1, "Test" String2, "2004-2-4 11:01:01" String3 }, row { DateTime(2003,1,1,12,32,32), "Test1", "2003-1-1 12:32:32" }, row { DateTime(1978,9,15, 23,59,59), "Test2", "1978-9-15 23:59:59"}} into ListDateTimeStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeStringStringTestTable over { DateTime1, String2 } add { ReadAsString(DateTime1) String3 }' Script, ') <> ListDateTimeStringStringTestTable then raise Error("System.DateTime.ReadAsString(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		
		/*147ID, */ row { System.String('System.DateTime.ReadDay_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "Integer", "Integer"});' Table, 'insert table { row { DateTime(2004, 2, 3) DateTime1, 0 Integer2, 3 Integer3 }, row { DateTime(2004,1,1), 0, 1 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { ReadDay(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DateTime.ReadDay(DateDateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated},
		/*148ID, */ row { System.String('System.DateTime.ReadHour_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2004,6,18,11,12,13) DateTime1, 0 Integer2, 11 Integer3 }, row { DateTime(2003,1,1,23,59,59), 0, 23 }, row { DateTime(2004,6,18,2,3,4), 0, 2 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { ReadHour(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DateTime.ReadHour(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*149ID, */ row { System.String('System.DateTime.ReadMinute_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2004,6,18,11,12,13) DateTime1, 0 Integer2, 12 Integer3 }, row { DateTime(2003,1,1,23,59,59), 0, 59 }, row { DateTime(2004,6,18,2,3,4), 0, 3 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { ReadMinute(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DateTime.ReadMinute(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*150ID, */ row { System.String('System.DateTime.ReadMonth_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2004,2,4) DateTime1, 0 Integer2, 2 Integer3 }, row { DateTime(2003,1,1), 0, 1 }, row { DateTime(2099,11,1), 0, 11 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { ReadMonth(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DateTime.ReadMonth(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*151ID, */ row { System.String('System.DateTime.ReadSecond_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2004,6,18,11,12,13) DateTime1, 0 Integer2, 13 Integer3 }, row { DateTime(2003,1,1,23,59,59), 0, 59 }, row { DateTime(2004,6,18,2,3,4), 0, 4 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { ReadSecond(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DateTime.ReadSecond(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*152ID, */ row { System.String('System.DateTime.ReadTicks_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Long" });' Table, 'insert table { row { DateTime(2004,2,4,12,1,1) DateTime1, 0 Integer2, 632114928610000000 Long3 }, row { DateTime(2003,1,1,23,59,59), 0, 631770623990000000 }, row { DateTime(2099,11,1,13,23,42), 0, 662328194220000000}, row { DateTime(1900,1,2,1,23,42), 0, 599266994220000000 }, row { DateTime(1900,1,1,11,59,59), 0, 599266511990000000 } } into ListDateTimeIntegerLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerLongTestTable over { DateTime1, Integer2 } add { ReadTicks(DateTime1) Long3 }' Script, ') <> ListDateTimeIntegerLongTestTable then raise Error("System.DateTime.ReadTicks(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*153ID, */ row { System.String('System.DateTime.ReadYear_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2004,6,18) DateTime1, 0 Integer2, 2004 Integer3 }, row { DateTime(2003,1,1), 0, 2003 }, row { DateTime(1901,6,18), 0, 1901 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { ReadYear(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DateTime.ReadYear(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*154ID, */ row { System.String('System.DateTime.Ticks_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "Long", "DateTime"});' Table, 'insert table { row { DateTime(2004,2,3,23,32,32) DateTime1, 632114479520000000 Long2, DateTime(2004,2,3,23,32,32) DateTime3 }, row { DateTime(1900,1,1,12,13,45), 599266520250000000, DateTime(1900,1,1,12,13,45) } } into ListDateTimeLongDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeLongDateTimeTestTable over { DateTime1, Long2 } add { DateTime.Ticks(Long2) DateTime3 }' Script, ') <> ListDateTimeLongDateTimeTestTable then raise Error("System.DateTime.Ticks(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*155ID, */ row { System.String('System.DateTime.WriteAsString_System_DateTime_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "String", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4) DateTime1, "1/1/2004" String2, DateTime(2004,1,1) DateTime3 }, row { DateTime(2003,1,1), "1/1/2003", DateTime(2003,1,1) }, row { DateTime(1900,1,1), "9/15/1978", DateTime(1978,9,15)} } into ListDateTimeStringDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeStringDateTimeTestTable over { DateTime1, String2 } add { WriteAsString(DateTime1, String2) DateTime3 }' Script, ') <> ListDateTimeStringDateTimeTestTable then raise Error("System.DateTime.WriteAsString(DateTime,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*155ID, */ row { System.String('System.DateTime.WriteAsString_System_DateTime_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "String", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4) DateTime1, "2004-1-1" String2, DateTime(2004,1,1) DateTime3 }, row { DateTime(2003,1,1), "2003-1-1", DateTime(2003,1,1) }, row { DateTime(1900,1,1), "1978-9-15", DateTime(1978,9,15)} } into ListDateTimeStringDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeStringDateTimeTestTable over { DateTime1, String2 } add { WriteAsString(DateTime1, String2) DateTime3 }' Script, ') <> ListDateTimeStringDateTimeTestTable then raise Error("System.DateTime.WriteAsString(DateTime,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*156ID, */ row { System.String('System.DateTime.WriteDay_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4) DateTime1, 15 Integer2, DateTime(2004,2,15) DateTime3 }, row { DateTime(2003,1,1), 14, DateTime(2003,1,14) }, row { DateTime(1900,1,1), 13, DateTime(1900,1,13)} } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { WriteDay(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.DateTime.WriteDay(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated},
		/*157ID, */ row { System.String('System.DateTime.WriteHour_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4,1,1,1) DateTime1, 2 Integer2, DateTime(2004,2,4,2,1,1) DateTime3 }, row { DateTime(2003,1,1,13,2,2), 12, DateTime(2003,1,1,12,2,2) }, row { DateTime(1900,1,1,21,59,59), 23, DateTime(1900,1,1,23,59,59)} } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { WriteHour(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.DateTime.WriteHour(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*158ID, */ row { System.String('System.DateTime.WriteMinute_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4,2,2,2) DateTime1, 3 Integer2, DateTime(2004,2,4,2,3,2) DateTime3 }, row { DateTime(2003,1,1,23,57,58), 2, DateTime(2003,1,1,23,2,58) }, row { DateTime(1900,1,1,12,15,19), 12, DateTime(1900,1,1,12,12,19)} } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { WriteMinute(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.DateTime.WriteMinute(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*159ID, */ row { System.String('System.DateTime.WriteMonth_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4,12,45,54) DateTime1, 12 Integer2, DateTime(2004,12,4,12,45,54) DateTime3 }, row { DateTime(2003,1,1,23,57,45), 2, DateTime(2003,2,1,23,57,45) }, row { DateTime(1900,1,1,13,23,24), 12, DateTime(1900,12,1,13,23,24)} } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { WriteMonth(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.DateTime.WriteMonth(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*160ID, */ row { System.String('System.DateTime.WriteSecond_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4,13,43,24) DateTime1, 15 Integer2, DateTime(2004,2,4,13,43,15) DateTime3 }, row { DateTime(2003,1,14,21,43,34), 59, DateTime(2003,1,14,21,43,59) }, row { DateTime(1800,12,31,18,24,56), 13, DateTime(1800,12,31,18,24,13)} } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { WriteSecond(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.DateTime.WriteSecond(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*161ID, */ row { System.String('System.DateTime.WriteTicks_System_DateTime_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Long", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4) DateTime1, 632114496000000000 Long2, DateTime(2004,2,4) DateTime3 }, row { DateTime(2003,1,1), 631769760000000000, DateTime(2003,1,1) }, row { DateTime(1900,1,1), 599266080000000000, DateTime(1900,1,1) } } into ListDateTimeLongDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeLongDateTimeTestTable over { DateTime1, Long2 } add { WriteTicks(DateTime1, Long2) DateTime3 }' Script, ') <> ListDateTimeLongDateTimeTestTable then raise Error("System.DateTime.WriteTicks(DateTime,Long,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*162ID, */ row { System.String('System.DateTime.WriteYear_System_DateTime_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "DateTime" });' Table, 'insert table { row { DateTime(2004,2,4,1,1,1) DateTime1, 1918 Integer2, DateTime(1918,2,4,1,1,1) DateTime3 }, row { DateTime(2003,2,1,23,43,56), 2003, DateTime(2003,2,1,23,43,56) }, row { DateTime(1999,12,1,12,54,23), 1900, DateTime(1900,12,1,12,54,23)} } into ListDateTimeIntegerDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeIntegerDateTimeTestTable over { DateTime1, Integer2 } add { WriteYear(DateTime1, Integer2) DateTime3 }' Script, ') <> ListDateTimeIntegerDateTimeTestTable then raise Error("System.DateTime.WriteYear(DateTime,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*163ID, */ row { System.String('System.DateTime_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "DateTime"});' Table, 'insert table { row { DateTime(2004,2,3,1,1,1) DateTime1, DateTime(1900,12,23,23,59,59) DateTime2 }, row { DateTime(2004,1,1,13,32,32), DateTime(1988,1,1,14,12,32) } } into ListDateTimeDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeDateTimeTestTable over { DateTime1, DateTime2 }' Script, ') <> ListDateTimeDateTimeTestTable then raise Error("System.DateTime(Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*164ID, */ row { System.String('System.DateTime_System_Integer_System_Integer_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "DateTime"});' Table, 'insert table { row { DateTime(2004, 2, 3) DateTime1, DateTime(1900,12,23) DateTime2 }, row { DateTime(2004,1,1), DateTime(1988,1,1) } } into ListDateTimeDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeDateTimeTestTable over { DateTime1, DateTime2 }' Script, ') <> ListDateTimeDateTimeTestTable then raise Error("System.DateTime(Integer,Integer,Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*165ID, */ row { System.String('System.DateTime_System_Integer_System_Integer_System_Integer_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "DateTime"});' Table, 'insert table { row { DateTime(2004, 2, 3) DateTime1, DateTime(1900,12,23) DateTime2 }, row { DateTime(2004,1,1), DateTime(1988,1,1) } } into ListDateTimeDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeDateTimeTestTable over { DateTime1, DateTime2 }' Script, ') <> ListDateTimeDateTimeTestTable then raise Error("System.DateTime(Integer,Integer,Integer,Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*166ID, */ row { System.String('System.DayOfMonth_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2003,6,18) DateTime1, 0 Integer2, 18 Integer3 }, row { DateTime(2003,1,1), 0, 1 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { DayOfMonth(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DayOfMonth(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*167ID, */ row { System.String('System.DayOfWeek_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2003,6,18) DateTime1, 0 Integer2, 4 Integer3 }, row { DateTime(2003,1,1), 0, 4 }, row { DateTime(2099,11,1), 0, 1 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { DayOfWeek(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DayOfWeek(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*168ID, */ row { System.String('System.DayOfYear_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Integer", "Integer" });' Table, 'insert table { row { DateTime(2003,6,18) DateTime1, 0 Integer2, 169 Integer3 }, row { DateTime(2003,1,1), 0, 1 }, row { DateTime(2004,6,18), 0, 170 } } into ListDateTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeIntegerIntegerTestTable over { DateTime1, Integer2 } add { DayOfYear(DateTime1) Integer3 }' Script, ') <> ListDateTimeIntegerIntegerTestTable then raise Error("System.DayOfYear(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*169ID, */ row { System.String('System.DaysInMonth_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 2000 Integer1, 1 Integer2, 31 Integer3 }, row { 2000, 2, 29 }, row { 2002, 2, 28 }, row { 2003, 4, 30 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { DaysInMonth(Integer1, Integer2) Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("System.DaysInMonth(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*170ID, */ row { System.String('System.DaysInMonth_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 2000 Integer1, 0 Integer2, 2000 Integer3 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { DaysInMonth(Integer1, Integer2) Integer3 };' Script, '", "System.DaysInMonth(Integer,Integer) failed to throw on month too small.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*171ID, */ row { System.String('System.DaysInMonth_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 2003 Integer1, 13 Integer2, 2000 Integer3 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { DaysInMonth(Integer1, Integer2) Integer3 };' Script, '", "System.DaysInMonth(Integer,Integer) failed to throw on month too large.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*172ID, */ row { System.String('System.Decimal') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 37 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 37 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*173ID, */ row { System.String('System.Decimal') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 4.2 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 4.2 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*174ID, */ row { System.String('System.Decimal') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 0.128 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 0.128 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*175ID, */ row { System.String('System.Decimal') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 0 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 0 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*176ID, */ row { System.String('System.Decimal') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 1 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 1 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*177ID, */ row { System.String('System.Decimal') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { -1 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> -1 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*178ID, */ row { System.String('System.Decimal') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { -123456.789 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> -123456.789 then raise Error("System.Decimal normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*179ID, */ row { System.String('System.Decimal') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { -10000000000000000000d Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> -10000000000000000000d then raise Error("System.Decimal boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*180ID, */ row { System.String('System.Decimal') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { -9999999999999999999.99999999d Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> -9999999999999999999.99999999d then raise Error("System.Decimal boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*181ID, */ row { System.String('System.Decimal') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { -0.00000001d Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> -0.00000001d then raise Error("System.Decimal boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*182ID, */ row { System.String('System.Decimal') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 10000000000000000000d Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 10000000000000000000d then raise Error("System.Decimal boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*183ID, */ row { System.String('System.Decimal') Name, 114 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 9999999999999999999.99999999d Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 9999999999999999999.99999999d then raise Error("System.Decimal boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*184ID, */ row { System.String('System.Decimal') Name, 115 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 0.00000001d Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, '' BeforeScript, 'if (Decimal1 from row from ListDecimalTestTable) <> 0.00000001d then raise Error("System.Decimal boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*185ID, */ row { System.String('System.Decimal') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { 5.5d Decimal1 } } into ListDecimalTestTable; NegativeTest("insert table { row { 5.5d Decimal1 } } into ListDecimalTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { 42.8009 Decimal1 } } into ListDecimalTestTable; NegativeTest("insert table { row { 42.8009 Decimal1 } } into ListDecimalTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*186ID, */ row { System.String('System.Decimal') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Decimal1 : Decimal, Decimal2 : Decimal, key { Decimal1 }, order { Decimal2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 3.7d Decimal1, 42d Decimal2 }, row { 1.16 Decimal1, 0.255 Decimal2 }, row { 11.7 Decimal1, 254000.01 Decimal2 }, row { 1.88 Decimal1, 4200d Decimal2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Decimal2 asc }", "DeviceOrder order by { Decimal2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*187ID, */ row { System.String('System.Decimal') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Decimal1 : Decimal, Decimal2 : Decimal, key { Decimal1 }, order { Decimal2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 3.7d Decimal1, 42d Decimal2 }, row { 1.16 Decimal1, 0.255 Decimal2 }, row { 11.7 Decimal1, 254000.01 Decimal2 }, row { 1.88 Decimal1, 4200d Decimal2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Decimal2 desc }", "DeviceOrder order by { Decimal2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*188ID, */ row { System.String('System.Decimal.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Decimal" });' Table, 'insert table { row { "98.6" String1, 98.6 Decimal2 }, row { "107.5", 107.5 }, row { "0.98765432", 0.98765432} } into ListStringDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringDecimalTestTable over { String1 } add { Decimal.AsString(String1) Decimal2 }' Script, ') <> ListStringDecimalTestTable then raise Error("System.Decimal.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*189ID, */ row { System.String('System.Decimal.ReadAsString_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "String", "String" });' Table, 'insert table { row { 98.6 Decimal1, "0" String2, "98.60000000" String3 }, row { 107.5, "Test", "107.50000000" }, row { 0.98765432, "0", "0.98765432"} } into ListDecimalStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalStringStringTestTable over { Decimal1, String2 } add { ReadAsString(Decimal1) String3 }' Script, ') <> ListDecimalStringStringTestTable then raise Error("System.Decimal.ReadAsString(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*190ID, */ row { System.String('System.Decimal.ReadValue_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal" });' Table, 'insert table { row {  100.0003 Decimal1,  100.0003 Decimal2 }, row { 0.6789, 0.6789 }, row { 156.78765, 156.78765 } } into ListDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalTestTable over { Decimal1 } add { ReadValue(Decimal1) Decimal2 }' Script, ') <> ListDecimalDecimalTestTable then raise Error("System.Decimal.ReadValue(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*191ID, */ row { System.String('System.Decimal.WriteAsString_System_Decimal_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "String", "Decimal" });' Table, 'insert table { row { 98.6 Decimal1, "100.2" String2, 100.2 Decimal3 }, row { 100.1, "0.01234", 0.01234 }, row { 0.1, "0.5765", 0.5765} } into ListDecimalStringDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalStringDecimalTestTable over { Decimal1, String2 } add { WriteAsString(Decimal1, String2) Decimal3 }' Script, ') <> ListDecimalStringDecimalTestTable then raise Error("System.Decimal.WriteAsString(Decimal,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*192ID, */ row { System.String('System.Decimal.WriteValue_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 98.6 Decimal1, 100.2 Decimal2, 100.2 Decimal3 }, row { 100.1, 0.01234, 0.01234 }, row { 0.1, 0.5765, 0.5765} } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { WriteValue(Decimal1, Decimal2) Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("System.Decimal.WriteValue(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*193ID, */ row { System.String('System.Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "Decimal"});' Table, 'insert table { row { Decimal(12.32) Decimal1, Decimal(1234.12345678) Decimal2 }, row { Decimal(113.912), Decimal(0.000032) } } into ListDecimalDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalDecimalTestTable over { Decimal1, Decimal2 }' Script, ') <> ListDecimalDecimalTestTable then raise Error("System.Decimal(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*194ID, */ row { System.String('System.Duration_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, 1 Integer2, TimeSpan.Ticks(0) TimeSpan3 }, row { TimeSpan.Ticks(-10), 2, TimeSpan.Ticks(10) }, row { TimeSpan.Ticks(1048576), 2, TimeSpan.Ticks(1048576) }, row { TimeSpan.Ticks(-65535), 4, TimeSpan.Ticks(65535) } } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { Duration(TimeSpan1) TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("System.Duration(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*195ID, */ row { System.String('System.EndsWith_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, true Boolean3 }, row { "Dataphoria", "ria", true }, row { "Dataphor", "ora", false }, row { "Softwise", "Soft", false }, row { "Dataphor", "DATAPHORis", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { EndsWith(String1, String2) Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("EndsWith(String,String) failed. Not Working Regardless of String Case.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*196ID, */ row { System.String('System.EndsWith_System_String_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, true Boolean3 }, row { "Dataphoria", "ria", true }, row { "Dataphor", "ora", false }, row { "Softwise", "Soft", false }, row { "Dataphor", "DATAPHOR", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { EndsWith(String1, String2) Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("EndsWith(String,String) failed. Not comparing Case Sensitively");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*197ID, */ row { System.String('System.Floor_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Integer", "Decimal" });' Table, 'insert table { row { 0d Decimal1, 1 Integer2, 0d Decimal3 }, row { 1.2, 2, 1 }, row { 5.3344, 2, 5 }, row { -3.14, 4, -4 } } into ListDecimalIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalIntegerDecimalTestTable over { Decimal1, Integer2 } add { Floor(Decimal1) Decimal3 }' Script, ') <> ListDecimalIntegerDecimalTestTable then raise Error("System.Floor(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*198ID, */ row { System.String('System.Frac_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Integer", "Decimal" });' Table, 'insert table { row { 0d Decimal1, 1 Integer2, 0d Decimal3 }, row { 1.2, 2, 0.2 }, row { 5.3344, 2, 0.3344 }, row { -3.14, 4, -0.14 } } into ListDecimalIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalIntegerDecimalTestTable over { Decimal1, Integer2 } add { Frac(Decimal1) Decimal3 }' Script, ') <> ListDecimalIntegerDecimalTestTable then raise Error("System.Frac(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*199ID, */ row { System.String('System.GroupName') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "Test" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "Test" then raise Error("System.GroupName ''Test'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*200ID, */ row { System.String('System.GroupName') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "Alphora" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "Alphora" then raise Error("System.GroupName ''Alphora'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*201ID, */ row { System.String('System.GroupName') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "Dataphor" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "Dataphor" then raise Error("System.GroupName ''Dataphor'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*202ID, */ row { System.String('System.GroupName') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "DAE" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "DAE" then raise Error("System.GroupName ''DAE'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*203ID, */ row { System.String('System.GroupName') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "McKay Salisbury" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "McKay Salisbury" then raise Error("System.GroupName ''McKay Salisbury'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*204ID, */ row { System.String('System.GroupName') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "
		 Whitespace Test" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "
		 Whitespace Test" then raise Error("System.GroupName with whitespace value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*205ID, */ row { System.String('System.GroupName') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "| [0N741n - 5ym|3075" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "| [0N741n - 5ym|3075" then raise Error("System.GroupName in 1337 sp33k (symbols and numbers test) was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*206ID, */ row { System.String('System.GroupName') Name, 107 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "WeIrD CaSe" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> "WeIrD CaSe" then raise Error("System.GroupName containing strange mixed case value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*207ID, */ row { System.String('System.GroupName') Name, 108 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "TEST CASE" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> GroupName("test case") then raise Error("System.GroupName compared sensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*208ID, */ row { System.String('System.GroupName') Name, 109 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, 'insert table { row { "test case" GroupName1 } } into ListGroupNameTestTable;' InsertTableStatement, '' BeforeScript, 'if (GroupName1 from row from ListGroupNameTestTable) <> GroupName("TEST CASE") then raise Error("System.GroupName compared sensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*209ID, */ row { System.String('System.GroupName') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { "True" GroupName1 } } into ListGroupNameTestTable; NegativeTest("insert table { row { ''True'' GroupName1 } } into ListGroupNameTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { ''False'' GroupName1 } } into ListGroupNameTestTable; NegativeTest("insert table { row { ''False'' GroupName1 } } into ListGroupNameTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*210ID, */ row { System.String('System.GroupName') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { GroupName1 : GroupName, GroupName2 : GroupName, key { GroupName1 }, order { GroupName2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" GroupName1, "This is not" GroupName2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { GroupName2 asc }", "DeviceOrder order by { GroupName2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*211ID, */ row { System.String('System.GroupName') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { GroupName1 : GroupName, GroupName2 : GroupName, key { GroupName1 }, order { GroupName2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" GroupName1, "This is not" GroupName2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { GroupName2 desc }", "DeviceOrder order by { GroupName2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*212ID, */ row { System.String('System.GroupName.ReadValue_System_GroupName_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "GroupName", "GroupName" });' Table, 'insert table { row {  GroupName("Hundred") GroupName1,  GroupName("Hundred") GroupName2 }, row { GroupName("Developer"), GroupName("Developer") }, row { GroupName("Admin"), GroupName("Admin") } } into ListGroupNameGroupNameTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGroupNameGroupNameTestTable over { GroupName1 } add { ReadValue(GroupName1) GroupName2 }' Script, ') <> ListGroupNameGroupNameTestTable then raise Error("System.GroupName.ReadValue(GroupName) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*213ID, */ row { System.String('System.GroupName.WriteValue_System_GroupName_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "GroupName", "GroupName", "GroupName" });' Table, 'insert table { row { GroupName("Developer") GroupName1, GroupName("Tester") GroupName2, GroupName("Tester") GroupName3 }, row { GroupName("Hundred"), GroupName("Twofiftyfive"), GroupName("Twofiftyfive") }, row { GroupName("MyGroup"),GroupName("TheirGroup"), GroupName("TheirGroup")} } into ListGroupNameGroupNameGroupNameTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGroupNameGroupNameGroupNameTestTable over { GroupName1, GroupName2 } add { WriteValue(GroupName1, GroupName2) GroupName3 }' Script, ') <> ListGroupNameGroupNameGroupNameTestTable then raise Error("System.GroupName.WriteValue(GroupName,GroupName) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*214ID, */ row { System.String('System.GroupName_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"GroupName", "String", "GroupName"});' Table, 'insert table { row { GroupName("Rebellion") GroupName1, "Enterprise" String2, GroupName("Enterprise") GroupName3 }, row { GroupName("doesntmatter"), "Tester", GroupName("Tester") } } into ListGroupNameStringGroupNameTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGroupNameStringGroupNameTestTable over { GroupName1, String2 } add { GroupName(String2) GroupName3}' Script, ') <> ListGroupNameStringGroupNameTestTable then raise Error("System.GroupName(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*215ID, */ row { System.String('System.Guid') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Guid"});' Table, 'insert table { row { Guid("07f9b0d7-ea08-4370-8a9e-24245b19e12e") Guid1 } } into ListGuidTestTable;' InsertTableStatement, '' BeforeScript, 'if (Guid1 from row from ListGuidTestTable) <> Guid("07f9b0d7-ea08-4370-8a9e-24245b19e12e") then raise Error("System.Guid value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*216ID, */ row { System.String('System.Guid') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Guid"});' Table, 'insert table { row { Guid("b54ac533-0b19-417a-96cd-d37cad01cd02") Guid1 } } into ListGuidTestTable;' InsertTableStatement, '' BeforeScript, 'if (Guid1 from row from ListGuidTestTable) <> Guid("b54ac533-0b19-417a-96cd-d37cad01cd02") then raise Error("System.Guid value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*217ID, */ row { System.String('System.Guid') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Guid"});' Table, 'insert table { row { Guid("a9089a3d-4b32-4fb9-a60a-cf0aabc7fd45") Guid1 } } into ListGuidTestTable;' InsertTableStatement, '' BeforeScript, 'if (Guid1 from row from ListGuidTestTable) <> Guid("a9089a3d-4b32-4fb9-a60a-cf0aabc7fd45") then raise Error("System.Guid value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*218ID, */ row { System.String('System.Guid') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Guid"});' Table, 'insert table { row { Guid("f4a4d522-350d-466d-b152-6526c514deb3") Guid1 } } into ListGuidTestTable;' InsertTableStatement, '' BeforeScript, 'if (Guid1 from row from ListGuidTestTable) <> Guid("f4a4d522-350d-466d-b152-6526c514deb3") then raise Error("System.Guid value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*219ID, */ row { System.String('System.Guid') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Guid"});' Table, 'insert table { row { Guid("a12d399c-72c3-47a8-bbf8-512127a4a2a7") Guid1 } } into ListGuidTestTable;' InsertTableStatement, '' BeforeScript, 'if (Guid1 from row from ListGuidTestTable) <> Guid("a12d399c-72c3-47a8-bbf8-512127a4a2a7") then raise Error("System.Guid value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*220ID, */ row { System.String('System.Guid') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Guid"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { Guid("6e24f2a4-4137-401c-8034-1334e14d1d64") Guid1 } } into ListGuidTestTable; NegativeTest("insert table { row { Guid(''6e24f2a4-4137-401c-8034-1334e14d1d64'') Guid1 } } into ListGuidTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { Guid(''58e556f7-b17e-4df0-a7a5-c3cd210cb7d8'') Guid1 } } into ListGuidTestTable; NegativeTest("insert table { row { ''58e556f7-b17e-4df0-a7a5-c3cd210cb7d8'' Guid1 } } into ListGuidTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*221ID, */ row { System.String('System.Guid') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Guid1 : Guid, Guid2 : Guid, key { Guid1 }, order { Guid2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { Guid("bed204ea-28d5-453c-8d63-48eca1ca26cc") Guid1, Guid("68def521-70a0-44e7-aafc-1df3365ccbab") Guid2 }, row { Guid("1397a1ed-e463-4930-8551-10e9d413b02a"), Guid("d5fca099-b59f-403b-a163-4a7500f3348a") }, row { Guid("38166b83-bebe-4cc0-b8bc-de2911804e04"), Guid("38166b83-bebe-4cc0-b8bc-de2911804e04") }, row { Guid("94eb224c-9ff3-479b-9d98-6c63d985a0f4"), Guid("1d00f663-9276-42f7-9b83-cde66f1e6c06") } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Guid2 asc }", "DeviceOrder order by { Guid2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*222ID, */ row { System.String('System.Guid') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Guid1 : Guid, Guid2 : Guid, key { Guid1 }, order { Guid2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { Guid("bed204ea-28d5-453c-8d63-48eca1ca26cc") Guid1, Guid("68def521-70a0-44e7-aafc-1df3365ccbab") Guid2 }, row { Guid("1397a1ed-e463-4930-8551-10e9d413b02a"), Guid("d5fca099-b59f-403b-a163-4a7500f3348a") }, row { Guid("38166b83-bebe-4cc0-b8bc-de2911804e04"), Guid("38166b83-bebe-4cc0-b8bc-de2911804e04") }, row { Guid("94eb224c-9ff3-479b-9d98-6c63d985a0f4"), Guid("1d00f663-9276-42f7-9b83-cde66f1e6c06") } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Guid2 desc }", "DeviceOrder order by { Guid2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*223ID, */ row { System.String('System.Guid.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListStringGuidTestTable { String1 : String static tags { Storage.Length = "50" }, Guid2 : Guid };' Table, 'insert table { row { "12345678-90ab-cdef-abcd-0123456789ab" String1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2 }, row { "12345678-90ab-cdef-abcd-0123456789cd", Guid("12345678-90ab-cdef-abcd-0123456789cd") }, row { "12345678-90ab-cdef-abcd-2223456789ab", Guid("12345678-90ab-cdef-abcd-2223456789ab") } } into ListStringGuidTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringGuidTestTable over { String1 } add { Guid.AsString(String1) Guid2 }' Script, ') <> ListStringGuidTestTable then raise Error("System.Guid.AsString(String) failed.");' AfterScript, 'drop table ListStringGuidTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*224ID, */ row { System.String('System.Guid.ReadValue_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringTestTable { Guid1 : Guid, String2 : String tags { Storage.Length = "50" } };' Table, 'insert table { row {  Guid("12345678-91ab-cdef-abcd-0123456789ab") Guid1,  "12345678-91ab-cdef-abcd-0123456789ab" String2 }, row { Guid("12345678-90ab-cdef-bcde-0123456789ab"), "12345678-90ab-cdef-bcde-0123456789ab" }, row { Guid("12345678-90ab-cdef-abcd-012345678921"), "12345678-90ab-cdef-abcd-012345678921" } } into ListGuidStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidStringTestTable over { Guid1 } add { Guid.ReadValue(Guid1) String2 }' Script, ') <> ListGuidStringTestTable then raise Error("System.Guid.ReadValue(Guid) failed.");' AfterScript, 'drop table ListGuidStringTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*225ID, */ row { System.String('System.Guid.WriteValue_System_Guid_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringGuidTestTable {  Guid1 : Guid, String2 : String static tags { Storage.Length = "50" }, Guid3 : Guid };' Table, 'insert table { row { Guid("12345678-90ab-fedc-abcd-0123456789ab") Guid1, "12345678-90ab-cdef-abcd-012345678999" String2, Guid("12345678-90ab-cdef-abcd-012345678999") Guid3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), "12345678-90ab-cdef-abcd-0123456783ac", Guid("12345678-90ab-cdef-abcd-0123456783ac") }, row { Guid("12345678-90ab-cde3-abcd-0123456789ab"), "12345678-90ab-cdef-abcd-0123456789ab", Guid("12345678-90ab-cdef-abcd-0123456789ab")} } into ListGuidStringGuidTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGuidStringGuidTestTable over { Guid1, String2 } add { WriteValue(Guid1, String2) Guid3 }' Script, ') <> ListGuidStringGuidTestTable then raise Error("System.Guid.WriteValue(Guid,String) failed.");' AfterScript, 'drop table ListGuidStringGuidTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*226ID, */ row { System.String('System.Guid_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringGuidTestTable {  Guid1 : Guid, String2 : String static tags { Storage.Length = "50" }, Guid3 : Guid };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, "12345678-90ab-cdef-abcd-0123456789ab" String2, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ef"), "12345678-90ab-cdef-abcd-0123456789bd", Guid("12345678-90ab-cdef-abcd-0123456789bd") } } into ListGuidStringGuidTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGuidStringGuidTestTable over { Guid1, String2 } add { Guid(String2) Guid3}' Script, ') <> ListGuidStringGuidTestTable then raise Error("System.Guid(String) failed.");' AfterScript, 'drop table ListGuidStringGuidTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*227ID, */ row { System.String('System.iAddition_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 1 Byte1, 2 Byte2, 3 Byte3 }, row { 0, 0, 0 }, row {255, 0, 255}, row {127, 128, 255} } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 + Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iAddition(Byte, Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*228ID, */ row { System.String('System.iAddition_System_Byte_System_Byte_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 128 Byte1, 128 Byte2, 128 Byte3 } } into TripleByteTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 + Byte2 Byte3 };' Script, '", "iAddition(Byte, Byte) failed to throw on positive overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*229ID, */ row { System.String('System.iAddition_System_Date_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date","TimeSpan","DateTime"});' Table, 'insert table { row { Date(2003,10,28) Date1, TimeSpan.Ticks(0) TimeSpan2, DateTime(2003, 10, 28) DateTime3 }, row { Date(2003,10,28), TimeSpan(1), DateTime(2003,10,29) }, row { Date(2003, 10, 1), TimeSpan(29), DateTime(2003, 10, 30) } } into ListDateTimeSpanDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeSpanDateTimeTestTable over { Date1, TimeSpan2 } add { Date1 + TimeSpan2 DateTime3 }' Script, ') <> ListDateTimeSpanDateTimeTestTable then raise Error("iAddition(Date,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*230ID, */ row { System.String('System.iAddition_System_DateTime_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime","TimeSpan","DateTime"});' Table, 'insert table { row { DateTime(2004,12,25,12,1,1) DateTime1, TimeSpan(1) TimeSpan2, DateTime(2004,12,26,12,1,1) DateTime3 }, row { DateTime(1901,1,1,0,0,0), TimeSpan(1,1,1), DateTime(1901,1,2,1,1,0) }, row { DateTime(2004,1,1,0,0,0), TimeSpan(25), DateTime(2004,1,26,0,0,0) } } into ListDateTimeTimeSpanDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeTimeSpanDateTimeTestTable over { DateTime1, TimeSpan2 } add { DateTime1 + TimeSpan2 DateTime3 }' Script, ') <> ListDateTimeTimeSpanDateTimeTestTable then raise Error("iAddition(DateTime,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*231ID, */ row { System.String('System.iAddition_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 1.2d Decimal1, 2.1d Decimal2, 3.3d Decimal3 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 + Decimal2 Decimal3 }' Script, ') <> TripleDecimalTestTable then raise Error("System.Windows.Forms.TextBox, Text: iAddition(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*232ID, */ row { System.String('System.iAddition_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 12 Integer1, 21 Integer2, 33 Integer3 }, row { 12, -12, 0 }, row { -32767, -32768, -65535 }, row { 12, -25, -13 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 + Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("System.Windows.Forms.TextBox, Text: iAddition(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*233ID, */ row { System.String('System.iAddition_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 2147483647 Integer1, 2147483647 Integer2, 0 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 + Integer2 Integer3 };' Script, '", "iAddition(Integer,Integer) failed to throw on positive overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*234ID, */ row { System.String('System.iAddition_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { -2147483648 Integer1, -2147483648 Integer2, 0 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 + Integer2 Integer3 };' Script, '", "iAddition(Integer,Integer) failed to throw on negative overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*235ID, */ row { System.String('System.iAddition_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 12 Long1, 21 Long2, 33 Long3 }, row { 12, -12, 0 }, row { -32767, -32768, -65535 }, row { 12, -25, -13 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 + Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("System.Windows.Forms.TextBox, Text: iAddition(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*238ID, */ row { System.String('System.iAddition_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $1.2 Money1, $2.1 Money2, $3.3 Money3 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleMoneyTestTable over { Money1, Money2 } add { Money1 + Money2 Money3 }' Script, ') <> TripleMoneyTestTable then raise Error("System.Windows.Forms.TextBox, Text: iAddition(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*239ID, */ row { System.String('System.iAddition_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "String" });' Table, 'insert table { row { Name("Adam") Name1, Name("Stevenson") Name2, "AdamStevenson" String3 }, row { Name("Haley"), Name("Neath"), "HaleyNeath" }, row { Name("Grant"), Name("Norman"), "GrantNorman" } } into ListNameNameStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameStringTestTable over { Name1, Name2 } add { iAddition(Name1, Name2) String3 }' Script, ') <> ListNameNameStringTestTable then raise Error("System.iAddition(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*240ID, */ row { System.String('System.iAddition_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 12 Short1, 21 Short2, 33 Short3 }, row { 12, -12, 0 }, row { 32767, -32768, -1 }, row { 12, -25, -13 }, row { 0, 0, 0 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 + Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("System.Windows.Forms.TextBox, Text: iAddition(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*241ID, */ row { System.String('System.iAddition_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 32767 Short1, 32767 Short2, 0 Short3 } } into TripleShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 + Short2 Short3 };' Script, '", "iAddition(Short,Short) failed to throw on positive overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*242ID, */ row { System.String('System.iAddition_System_Short_System_Short_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { -32768 Short1, -32768 Short2, 0 Short3 } } into TripleShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 + Short2 Short3 };' Script, '", "iAddition(Short,Short) failed to throw on negative overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*243ID, */ row { System.String('System.iAddition_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("String");' Table, 'insert table { row { "String" String1, "Addition" String2, "StringAddition" String3 }, row { "Concat", "enation", "Concatenation" } } into TripleStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleStringTestTable over { String1, String2 } add { String1 + String2 String3 }' Script, ') <> TripleStringTestTable then raise Error("iAddition(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*244ID, */ row { System.String('System.iAddition_System_Time_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time","TimeSpan","Time"});' Table, 'insert table { row { Time(1,1,1) Time1, TimeSpan(0,1) TimeSpan2, Time(2,1,1) Time3 } } into ListTimeTimeSpanTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeSpanTimeTestTable over { Time1, TimeSpan2 } add { Time1 + TimeSpan2 Time3 }' Script, ') <> ListTimeTimeSpanTimeTestTable then raise Error("iAddition(Time,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*245ID, */ row { System.String('System.iAddition_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(1) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(2) TimeSpan3 }, row { TimeSpan.Ticks(100), TimeSpan.Ticks(200), TimeSpan.Ticks(300) }, row { TimeSpan.Ticks(Long(9223372036854775807)), TimeSpan.Ticks(0), TimeSpan.Ticks(Long(9223372036854775807)) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleTimeSpanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 + TimeSpan2 TimeSpan3 }' Script, ') <> TripleTimeSpanTestTable then raise Error("iAddition(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*246ID, */ row { System.String('System.iAddition_System_TimeSpan_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(Long(9223372036854775807)) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(Long(9223372036854775807)) TimeSpan3 } } into TripleTimeSpanTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleTimeSpanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 + TimeSpan2 TimeSpan3 };' Script, '", "iAddition(TimeSpan,TimeSpan) failed to throw on positive overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*247ID, */ row { System.String('System.iAdorn_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, '' InsertTableStatement, 'create view TestView ' BeforeScript, 'TripleNullIntegerTestTable adorn { Integer3 { default nil as Integer } };' Script, 'try insert table { row { 1 Integer1, 2 Integer2 }, row { 2, 1 } } into TripleNullIntegerTestTable; insert table { row { 1 Integer1, 2 Integer2, 3 Integer3 }, row { 0, 0, 0 } } into TripleNullIntegerTestTable; NegativeTest("insert table { 0 Integer1, 0 Integer2 } into TripleIntegerTestTable", "iAdorn(table) failed to throw on insertion of duplicate rows."); finally drop view TestView; end;' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*248ID, */ row { System.String('System.iAggregate_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, 1d Decimal2, 98.6d Decimal3 }, row { 0, 2, 100 }, row { 0, 3, 90.4 }, row { 0, 3, 95.1 }, row { 0, 2, 88.8 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Avg(Decimal1) DecimalAggregate1, System.Avg(Decimal2) DecimalAggregate2, System.Avg(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0 DecimalAggregate1, 2.2 DecimalAggregate2, 94.58 DecimalAggregate3 } } then raise Error("System.Avg(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*249ID, */ row { System.String('System.iAggregate_table_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Avg(Integer1) IntegerAggregate1, System.Avg(Integer2) IntegerAggregate2, System.Avg(Integer3) IntegerAggregate3 }' Script, ') <> table { row { 0 IntegerAggregate1, 2 IntegerAggregate2, 82 IntegerAggregate3 } } then raise Error("System.Avg(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*250ID, */ row { System.String('System.iAggregate_table_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(2), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(2), TimeSpan.Ticks(100) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Avg(TimeSpan1) TimeSpanAggregate1, System.Avg(TimeSpan2) TimeSpanAggregate2, System.Avg(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(2) TimeSpanAggregate2, TimeSpan.Ticks(82) TimeSpanAggregate3 } } then raise Error("System.Avg(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*251ID, */ row { System.String('System.iAggregate_table_') Name, 7 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, $1 Money2, $0.57 Money3 }, row { $0, $2, $0.68 }, row { $0, $3, $0.87 }, row { $0, $3, $0.99 }, row { $0, $2, $1 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Avg(Money1) MoneyAggregate1, System.Avg(Money2) MoneyAggregate2, System.Avg(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0 MoneyAggregate1, $2.2 MoneyAggregate2, $0.822 MoneyAggregate3 } } then raise Error("System.Avg(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*252ID, */ row { System.String('System.iAggregate_table_') Name, 9 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Count(Integer1) IntegerAggregate1, System.Count(Integer2) IntegerAggregate2, System.Count(Integer3) IntegerAggregate3 }' Script, ') <> table { row { 5 IntegerAggregate1, 5 IntegerAggregate2, 5 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*253ID, */ row { System.String('System.iAggregate_table_') Name, 10 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Count(Integer1) IntegerAggregate1, System.Count(Integer2) IntegerAggregate2, System.Count(Integer3) IntegerAggregate3 }' Script, ') <> table { row { 1 IntegerAggregate1, 1 IntegerAggregate2, 1 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*254ID, */ row { System.String('System.iAggregate_table_') Name, 11 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Count(Integer1) IntegerAggregate1, System.Count(Integer2) IntegerAggregate2, System.Count(Integer3) IntegerAggregate3 }' Script, ') <> table { row { 0 IntegerAggregate1, 0 IntegerAggregate2, 0 IntegerAggregate3 } } then raise Error("System.Count(Scalar) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*255ID, */ row { System.String('System.iAggregate_table_') Name, 12 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 }, row { 0, 2, 68 }, row { 0, 3, 87 }, row { 0, 3, 99 }, row { 0, 2, 100 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Count() IntegerAggregate1, System.Count() IntegerAggregate2, System.Count() IntegerAggregate3 }' Script, ') <> table { row { 5 IntegerAggregate1, 5 IntegerAggregate2, 5 IntegerAggregate3 } } then raise Error("System.Count() failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*256ID, */ row { System.String('System.iAggregate_table_') Name, 13 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 1 Integer2, 57 Integer3 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Count() IntegerAggregate1, System.Count() IntegerAggregate2, System.Count() IntegerAggregate3 }' Script, ') <> table { row { 1 IntegerAggregate1, 1 IntegerAggregate2, 1 IntegerAggregate3 } } then raise Error("System.Count() failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*257ID, */ row { System.String('System.iAggregate_table_') Name, 14 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Count() IntegerAggregate1, System.Count() IntegerAggregate2, System.Count() IntegerAggregate3 }' Script, ') <> table { row { 0 IntegerAggregate1, 0 IntegerAggregate2, 0 IntegerAggregate3 } } then raise Error("System.Count() failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*258ID, */ row { System.String('System.iAggregate_table_') Name, 15 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 }, row { $0, $1, $0.68 }, row { $0, -$3, $0.87 }, row { $0, -$3, $0.99 }, row { $0, -$2, $1 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Max(Money1) MoneyAggregate1, System.Max(Money2) MoneyAggregate2, System.Max(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0 MoneyAggregate1, $1 MoneyAggregate2, $1 MoneyAggregate3 } } then raise Error("System.Max(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*259ID, */ row { System.String('System.iAggregate_table_') Name, 16 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Max(Money1) MoneyAggregate1, System.Max(Money2) MoneyAggregate2, System.Max(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0 MoneyAggregate1, -$1 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Max(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*260ID, */ row { System.String('System.iAggregate_table_') Name, 18 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 }, row { 0, 1, 0.68 }, row { 0, -3, 0.87 }, row { 0, -3, 0.99 }, row { 0, -2, 1 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Max(Decimal1) DecimalAggregate1, System.Max(Decimal2) DecimalAggregate2, System.Max(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0 DecimalAggregate1, 1 DecimalAggregate2, 1 DecimalAggregate3 } } then raise Error("System.Max(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*261ID, */ row { System.String('System.iAggregate_table_') Name, 19 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Max(Decimal1) DecimalAggregate1, System.Max(Decimal2) DecimalAggregate2, System.Max(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0 DecimalAggregate1, -1 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Max(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*262ID, */ row { System.String('System.iAggregate_table_') Name, 21 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-2), TimeSpan.Ticks(100) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Max(TimeSpan1) TimeSpanAggregate1, System.Max(TimeSpan2) TimeSpanAggregate2, System.Max(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(1) TimeSpanAggregate2, TimeSpan.Ticks(100) TimeSpanAggregate3 } } then raise Error("System.Max(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*263ID, */ row { System.String('System.iAggregate_table_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Max(TimeSpan1) TimeSpanAggregate1, System.Max(TimeSpan2) TimeSpanAggregate2, System.Max(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-1) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Max(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*264ID, */ row { System.String('System.iAggregate_table_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("DateTime");' Table, 'insert table { row { DateTime(1900,1,1) DateTime1, DateTime(2000,1,1) DateTime2, DateTime(2100,1,1) DateTime3 }, row {DateTime(1899,12,31,23,59,59), DateTime(1999,12,31,23,59,59), DateTime(2099,12,31,23,59,59)}, row { DateTime(1800,1,1,1,1,1), DateTime(1800,1,1,1,1,1), DateTime(1800,1,1,1,1,1) } } into TripleNullDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDateTimeTestTable group add { System.Max(DateTime1) DateTimeAggregate1, System.Max(DateTime2) DateTimeAggregate2, System.Max(DateTime3) DateTimeAggregate3 }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Max(DateTime) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*265ID, */ row { System.String('System.iAggregate_table_') Name, 27 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 }, row { Integer(0), Integer(1), Integer(68) }, row { Integer(0), Integer(-3), Integer(87) }, row { Integer(0), Integer(-3), Integer(99) }, row { Integer(0), Integer(-2), Integer(100) } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Max(Integer1) IntegerAggregate1, System.Max(Integer2) IntegerAggregate2, System.Max(Integer3) IntegerAggregate3 }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(1) IntegerAggregate2, Integer(100) IntegerAggregate3 } } then raise Error("System.Max(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*266ID, */ row { System.String('System.iAggregate_table_') Name, 28 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Max(Integer1) IntegerAggregate1, System.Max(Integer2) IntegerAggregate2, System.Max(Integer3) IntegerAggregate3 }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-1) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Max(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*267ID, */ row { System.String('System.iAggregate_table_') Name, 30 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("String");' Table, 'insert table { row { "ALPHORA" String1, "DATAPHOR" String2, "I AM YOUR FATHER" String3 }, row { "A", "D", "I" }, row { "ALPHOR", "DATAPHO", "I AM YOUR FATHE" }, row { "ADLPHORA", "DAATAPHOR", "A AM YOUR FATHER " } } into TripleNullStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullStringTestTable group add { System.Max(String1) StringAggregate1, System.Max(String2) StringAggregate2, System.Max(String3) StringAggregate3 }' Script, ') <> table { row { "ALPHORA" StringAggregate1, "DATAPHOR" StringAggregate2, "I AM YOUR FATHER" StringAggregate3 } } then raise Error("System.Max(String) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*268ID, */ row { System.String('System.iAggregate_table_') Name, 31 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 } } into TripleNullStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullStringTestTable group add { System.Max(String1) StringAggregate1, System.Max(String2) StringAggregate2, System.Max(String3) StringAggregate3 }' Script, ') <> table { row { "Alphora" StringAggregate1, "Dataphor" StringAggregate2, "I am your father" StringAggregate3 } } then raise Error("System.Max(String) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*269ID, */ row { System.String('System.iAggregate_table_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 }, row { $0, $1, $0.68 }, row { $0, -$3, $0.87 }, row { $0, -$3, $0.99 }, row { $0, -$2, $1 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Min(Money1) MoneyAggregate1, System.Min(Money2) MoneyAggregate2, System.Min(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0 MoneyAggregate1, -$3 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Min(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*270ID, */ row { System.String('System.iAggregate_table_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Min(Money1) MoneyAggregate1, System.Min(Money2) MoneyAggregate2, System.Min(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0 MoneyAggregate1, -$1 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Min(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*271ID, */ row { System.String('System.iAggregate_table_') Name, 36 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 }, row { 0, 1, 0.68 }, row { 0, -3, 0.87 }, row { 0, -3, 0.99 }, row { 0, -2, 1 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Min(Decimal1) DecimalAggregate1, System.Min(Decimal2) DecimalAggregate2, System.Min(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0 DecimalAggregate1, -3 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Min(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*272ID, */ row { System.String('System.iAggregate_table_') Name, 37 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Min(Decimal1) DecimalAggregate1, System.Min(Decimal2) DecimalAggregate2, System.Min(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0 DecimalAggregate1, -1 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Min(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*273ID, */ row { System.String('System.iAggregate_table_') Name, 39 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-2), TimeSpan.Ticks(100) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Min(TimeSpan1) TimeSpanAggregate1, System.Min(TimeSpan2) TimeSpanAggregate2, System.Min(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-3) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Min(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*274ID, */ row { System.String('System.iAggregate_table_') Name, 40 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Min(TimeSpan1) TimeSpanAggregate1, System.Min(TimeSpan2) TimeSpanAggregate2, System.Min(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-1) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Min(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*275ID, */ row { System.String('System.iAggregate_table_') Name, 42 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("DateTime");' Table, 'insert table { row { DateTime(1900,1,1) DateTime1, DateTime(2000,1,1) DateTime2, DateTime(2100,1,1) DateTime3 }, row { DateTime(1980,12,31), DateTime(2080,12,31), DateTime(2100,12,31) }, row { DateTime(1900,1,2), DateTime(2000,1,2), DateTime(2100,1,2) }, row { DateTime(1999,1,1), DateTime(2063,3,2), DateTime(2100,2,3) }, row { DateTime(1984,1,1), DateTime(2061,1,1), DateTime(2100,1,1) } } into TripleNullDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDateTimeTestTable group add { System.Min(DateTime1) DateTimeAggregate1, System.Min(DateTime2) DateTimeAggregate2, System.Min(DateTime3) DateTimeAggregate3 }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Min(DateTime) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*276ID, */ row { System.String('System.iAggregate_table_') Name, 43 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("DateTime");' Table, 'insert table { row { DateTime(1900,1,1) DateTime1, DateTime(2000,1,1) DateTime2, DateTime(2100,1,1) DateTime3 } } into TripleNullDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDateTimeTestTable group add { System.Min(DateTime1) DateTimeAggregate1, System.Min(DateTime2) DateTimeAggregate2, System.Min(DateTime3) DateTimeAggregate3 }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Min(DateTime) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*277ID, */ row { System.String('System.iAggregate_table_') Name, 45 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 }, row { Integer(0), Integer(1), Integer(68) }, row { Integer(0), Integer(-3), Integer(87) }, row { Integer(0), Integer(-3), Integer(99) }, row { Integer(0), Integer(-2), Integer(100) } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Min(Integer1) IntegerAggregate1, System.Min(Integer2) IntegerAggregate2, System.Min(Integer3) IntegerAggregate3 }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-3) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Min(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*278ID, */ row { System.String('System.iAggregate_table_') Name, 46 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Min(Integer1) IntegerAggregate1, System.Min(Integer2) IntegerAggregate2, System.Min(Integer3) IntegerAggregate3 }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-1) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Min(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*279ID, */ row { System.String('System.iAggregate_table_') Name, 48 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("String");' Table, 'insert table { row { "ALPHORA" String1, "DATAPHOR" String2, "I AM YOUR FATHER" String3 }, row { "alphorab", "dataphorb", "i am your fatherb" }, row { "Zebra", "Zebra", "Zebra" } } into TripleNullStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullStringTestTable group add { System.Min(String1) StringAggregate1, System.Min(String2) StringAggregate2, System.Min(String3) StringAggregate3 }' Script, ') <> table { row { "ALPHORA" StringAggregate1, "DATAPHOR" StringAggregate2, "I AM YOUR FATHER" StringAggregate3 } } then raise Error("System.Min(String) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*280ID, */ row { System.String('System.iAggregate_table_') Name, 49 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 } } into TripleNullStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullStringTestTable group add { System.Min(String1) StringAggregate1, System.Min(String2) StringAggregate2, System.Min(String3) StringAggregate3 }' Script, ') <> table { row { "Alphora" StringAggregate1, "Dataphor" StringAggregate2, "I am your father" StringAggregate3 } } then raise Error("System.Min(String) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*281ID, */ row { System.String('System.iAggregate_table_') Name, 51 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 0 Integer2, 1 Integer3 }, row { 0, 1, 2 }, row { 0, -1, 4 }, row { 0, -65536, 8 }, row { 0, -65536, 16 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Sum(Integer1) IntegerAggregate1, System.Sum(Integer2) IntegerAggregate2, System.Sum(Integer3) IntegerAggregate3 }' Script, ') <> table { row { 0 IntegerAggregate1, -131072 IntegerAggregate2, 31 IntegerAggregate3 } } then raise Error("System.Sum(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*282ID, */ row { System.String('System.iAggregate_table_') Name, 52 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, -65536 Integer2, 1 Integer3 }} into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullIntegerTestTable group add { System.Sum(Integer1) IntegerAggregate1, System.Sum(Integer2) IntegerAggregate2, System.Sum(Integer3) IntegerAggregate3 }' Script, ') <> table { row { 0 IntegerAggregate1, -65536 IntegerAggregate2, 1 IntegerAggregate3 } } then raise Error("System.Sum(Integer) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*283ID, */ row { System.String('System.iAggregate_table_') Name, 54 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan(0) TimeSpan1, TimeSpan(0) TimeSpan2, TimeSpan(1) TimeSpan3 }, row { TimeSpan(0), TimeSpan(1), TimeSpan(2) }, row { TimeSpan(0), TimeSpan(-1), TimeSpan(4) }, row { TimeSpan(0), TimeSpan(-65536), TimeSpan(8) }, row { TimeSpan(0), TimeSpan(-65536), TimeSpan(16) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Sum(TimeSpan1) TimeSpanAggregate1, System.Sum(TimeSpan2) TimeSpanAggregate2, System.Sum(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan(0) TimeSpanAggregate1, TimeSpan(-131072) TimeSpanAggregate2, TimeSpan(31) TimeSpanAggregate3 } } then raise Error("System.Sum(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*284ID, */ row { System.String('System.iAggregate_table_') Name, 55 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan(0) TimeSpan1, TimeSpan(-65536) TimeSpan2, TimeSpan(1) TimeSpan3 }} into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullTimeSpanTestTable group add { System.Sum(TimeSpan1) TimeSpanAggregate1, System.Sum(TimeSpan2) TimeSpanAggregate2, System.Sum(TimeSpan3) TimeSpanAggregate3 }' Script, ') <> table { row { TimeSpan(0) TimeSpanAggregate1, TimeSpan(-65536) TimeSpanAggregate2, TimeSpan(1) TimeSpanAggregate3 } } then raise Error("System.Sum(TimeSpan) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*285ID, */ row { System.String('System.iAggregate_table_') Name, 57 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, 0.01 Decimal3 }, row { 0.0, 0.01, 0.02 }, row { 0.0, -0.01, 0.04 }, row { 0.0, -655.36, 0.08 }, row { 0.0, -655.36, 0.16 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Sum(Decimal1) DecimalAggregate1, System.Sum(Decimal2) DecimalAggregate2, System.Sum(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0.0 DecimalAggregate1, -1310.72 DecimalAggregate2, 0.31 DecimalAggregate3 } } then raise Error("System.Sum(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*286ID, */ row { System.String('System.iAggregate_table_') Name, 58 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0.0 Decimal1, -655.36 Decimal2, 0.01 Decimal3 }} into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullDecimalTestTable group add { System.Sum(Decimal1) DecimalAggregate1, System.Sum(Decimal2) DecimalAggregate2, System.Sum(Decimal3) DecimalAggregate3 }' Script, ') <> table { row { 0.0 DecimalAggregate1, -655.36 DecimalAggregate2, 0.01 DecimalAggregate3 } } then raise Error("System.Sum(Decimal) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*287ID, */ row { System.String('System.iAggregate_table_') Name, 60 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, $0.01 Money3 }, row { $0.0, $0.01, $0.02 }, row { $0.0, -$0.01, $0.04 }, row { $0.0, -$655.36, $0.08 }, row { $0.0, -$655.36, $0.16 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Sum(Money1) MoneyAggregate1, System.Sum(Money2) MoneyAggregate2, System.Sum(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0.0 MoneyAggregate1, -$1310.72 MoneyAggregate2, $0.31 MoneyAggregate3 } } then raise Error("System.Sum(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*288ID, */ row { System.String('System.iAggregate_table_') Name, 61 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0.0 Money1, -$655.36 Money2, $0.01 Money3 }} into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleNullMoneyTestTable group add { System.Sum(Money1) MoneyAggregate1, System.Sum(Money2) MoneyAggregate2, System.Sum(Money3) MoneyAggregate3 }' Script, ') <> table { row { $0.0 MoneyAggregate1, -$655.36 MoneyAggregate2, $0.01 MoneyAggregate3 } } then raise Error("System.Sum(Money) failed in iAggregate.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*289ID, */ row { System.String('System.iAnd_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { false Boolean1, false Boolean2, false Boolean3 }, row { true, true, true }, row { true, false, false }, row { false, true, false } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 and Boolean2 Boolean3 }' Script, ') <> TripleBooleanTestTable then raise Error("iAnd(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*290ID, */ row { System.String('System.iBitwiseAnd_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 1 Byte1, 2 Byte2, 0 Byte3 }, row { 255, 57, 57 }, row { 128, 127, 0 }, row { 3, 126, 2 } } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 & Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iBitwiseAnd(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*291ID, */ row { System.String('System.iBitwiseAnd_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 1 Integer1, 2 Integer2, 0 Integer3 }, row { 255, 57, 57 }, row { 128, 127, 0 }, row { 3, 126, 2 }, row { 65534, 127, 126 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 & Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iBitwiseAnd(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*292ID, */ row { System.String('System.iBitwiseAnd_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 1 Long1, 2 Long2, 0 Long3 }, row { 255, 57, 57 }, row { 128, 127, 0 }, row { 3, 126, 2 }, row { 65534, 127, 126 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 & Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iBitwiseAnd(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*293ID, */ row { System.String('System.iBitwiseAnd_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 1 Short1, 2 Short2, 0 Short3 }, row { 255, 57, 57 }, row { 128, 127, 0 }, row { 3, 126, 2 }, row { 32766, 127, 126 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 & Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iBitwiseAnd(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*294ID, */ row { System.String('System.iBitwiseNot_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 1 Byte1, 1 Byte2, 254 Byte3 }, row { 255, 255, 0 }, row { 128, 128, 127 }, row { 3, 3, 252 } } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { ~Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iBitwiseNot(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*295ID, */ row { System.String('System.iBitwiseNot_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { -1 Integer1, -1 Integer2, 0 Integer3 }, row { 0, 0, -1 }, row { -2147483648, -2147483648, 2147483647 }, row { 16384, 16384, -16385 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { ~Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iBitwiseNot(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*296ID, */ row { System.String('System.iBitwiseNot_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { Long(-1) Long1, Long(-1) Long2, Long(0) Long3 }, row { Long(0), Long(0), Long(-1) }, row { Long(-3344556677889900), Long(-3344556677889900), Long(3344556677889899) } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { ~Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iBitwiseNot(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*297ID, */ row { System.String('System.iBitwiseNot_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { -1 Short1, -1 Short2, 0 Short3 }, row { 0, 0, -1 }, row { -32768, -32768, 32767 }, row { 3855, 3855, -3856 }, row { 4951, 4951, -4952 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { ~Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iBitwiseNot(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*298ID, */ row { System.String('System.iBitwiseOr_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 1 Byte1, 2 Byte2, 3 Byte3 }, row { 0, 1, 1 }, row { 254, 3, 255 }, row { 126, 128, 254 } } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 | Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iBitwiseOr(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*299ID, */ row { System.String('System.iBitwiseOr_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 1 Integer1, 2 Integer2, 3 Integer3 }, row { -1, 31025, -1 }, row { 524299, 1048574, 1048575 }, row { 126, 128, 254 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 | Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iBitwiseOr(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*300ID, */ row { System.String('System.iBitwiseOr_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 1 Long1, 2 Long2, 3 Long3 }, row { -1, 31025, -1 }, row { 524299, 1048574, 1048575 }, row { 126, 128, 254 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 | Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iBitwiseOr(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*301ID, */ row { System.String('System.iBitwiseOr_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 1 Short1, 2 Short2, 3 Short3 }, row { -1, 31025, -1 }, row { 6, 6, 6 }, row { 126, 128, 254 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 | Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iBitwiseOr(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*302ID, */ row { System.String('System.iBitwiseXor_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 1 Byte1, 2 Byte2, 3 Byte3 }, row { 1, 25, 24 }, row { 6, 6, 0 }, row { 126, 128, 254 } } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 ^ Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iBitwiseXor(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*303ID, */ row { System.String('System.iBitwiseXor_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 1 Integer1, 2 Integer2, 3 Integer3 }, row { -1, 31025, -31026 }, row { 6, 6, 0 }, row { 126, 128, 254 }, row { 1048577, 127, 1048702 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 ^ Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iBitwiseXor(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*304ID, */ row { System.String('System.iBitwiseXor_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 1 Long1, 2 Long2, 3 Long3 }, row { -1, 31025, -31026 }, row { 6, 6, 0 }, row { 126, 128, 254 }, row { 1048577, 127, 1048702 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 ^ Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iBitwiseXor(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*305ID, */ row { System.String('System.iBitwiseXor_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 1 Short1, 2 Short2, 3 Short3 }, row { -1, 31025, -31026 }, row { 6, 6, 0 }, row { 126, 128, 254 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 ^ Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iBitwiseXor(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*306ID, */ row { System.String('System.iCompare_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Integer" });' Table, 'insert table { row { false Boolean1, false Boolean2, 0 Integer3 }, row { false, true, -1 }, row { true, false, 1 }, row { true, true, 0 } } into ListBooleanBooleanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanIntegerTestTable over { Boolean1, Boolean2 } add { Boolean1 ?= Boolean2 Integer3 }' Script, ') <> ListBooleanBooleanIntegerTestTable then raise Error("iCompare(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*307ID, */ row { System.String('System.iCompare_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Integer" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, 0 Integer3 }, row { 54, 55, -1 }, row { 57, 56, 1 }, row { 255, 255, 0 } } into ListByteByteIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteIntegerTestTable over { Byte1, Byte2 } add { Byte1 ?= Byte2 Integer3 }' Script, ') <> ListByteByteIntegerTestTable then raise Error("iCompare(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*308ID, */ row { System.String('System.iCompare_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Integer" });' Table, 'insert table { row { Date(2003,6,9) Date1, Date(2003,6,9) Date2, 0 Integer3 }, row { Date(2003,6,9), Date(2003,6,8), 1 }, row { Date(2003,6,9), Date(2004,6,9), -1 } } into ListDateDateIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateIntegerTestTable over { Date1, Date2 } add { Date1 ?= Date2 Integer3 }' Script, ') <> ListDateDateIntegerTestTable then raise Error("iCompare(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*309ID, */ row { System.String('System.iCompare_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Integer" });' Table, 'insert table { row { DateTime(2003,6,9) DateTime1, DateTime(2003,6,9) DateTime2, 0 Integer3 }, row { DateTime(2003,6,9), DateTime(2003,6,8), 1 }, row { DateTime(2003,6,9), DateTime(2004,6,9), -1 }, row { DateTime(2003,10,29,4,20,20), DateTime(2003,10,29,4,19,0), 1 } } into ListDateTimeDateTimeIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeIntegerTestTable over { DateTime1, DateTime2 } add { DateTime1 ?= DateTime2 Integer3 }' Script, ') <> ListDateTimeDateTimeIntegerTestTable then raise Error("iCompare(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*310ID, */ row { System.String('System.iCompare_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Integer" });' Table, 'insert table { row { 0.0d Decimal1, 0d Decimal2, 0 Integer3 }, row { -56d, 55d, -1 }, row { 32768d, 57d, 1 }, row { 0.0554d, 0.055d, 1 } } into ListDecimalDecimalIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalIntegerTestTable over { Decimal1, Decimal2 } add { Decimal1 ?= Decimal2 Integer3 }' Script, ') <> ListDecimalDecimalIntegerTestTable then raise Error("iCompare(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*311ID, */ row { System.String('System.iCompare_System_GroupName_System_GroupName_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "GroupName", "GroupName", "Integer" });' Table, 'insert table { row { GroupName("abcd") GroupName1, GroupName("efghij") GroupName2, -1 Integer3 }, row { Name("Haley"), Name("Haley"), 0 }, row { Name("Grant"), Name("Adam"), 1 } } into ListGroupNameGroupNameIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGroupNameGroupNameIntegerTestTable over { GroupName1, GroupName2 } add { iCompare(GroupName1, GroupName2) Integer3 }' Script, ') <> ListGroupNameGroupNameIntegerTestTable then raise Error("System.iCompare(GroupName,GroupName) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*312ID, */ row { System.String('System.iCompare_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Integer" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, 0 Integer3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), -1 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789aa"), 1 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-a23456789ab0"), -1 } } into ListGuidGuidIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidIntegerTestTable over { Guid1, Guid2 } add { Guid1 ?= Guid2 Integer3 }' Script, ') <> ListGuidGuidIntegerTestTable then raise Error("iCompare(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*313ID, */ row { System.String('System.iCompare_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, 0 Integer3 }, row { -56, 55, -1 }, row { 32768, 57, 1 }, row { 65535, 255, 1 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 ?= Integer2 Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("iCompare(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*314ID, */ row { System.String('System.iCompare_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Integer" });' Table, 'insert table { row { 0 Long1, 0 Long2, 0 Integer3 }, row { -56, 55, -1 }, row { 32768, 57, 1 }, row { 65535, 255, 1 } } into ListLongLongIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongIntegerTestTable over { Long1, Long2 } add { Long1 ?= Long2 Integer3 }' Script, ') <> ListLongLongIntegerTestTable then raise Error("iCompare(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*315ID, */ row { System.String('System.iCompare_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Integer" });' Table, 'insert table { row { $0 Money1, $0 Money2, 0 Integer3 }, row { -$1.22, $1.22, -1 }, row { $5.67, $0.57, 1 }, row { $10, $1, 1 } } into ListMoneyMoneyIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyIntegerTestTable over { Money1, Money2 } add { Money1 ?= Money2 Integer3 }' Script, ') <> ListMoneyMoneyIntegerTestTable then raise Error("iCompare(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*316ID, */ row { System.String('System.iCompare_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Integer" });' Table, 'insert table { row { Name("Adam") Name1, Name("Stevenson") Name2, -1 Integer3 }, row { Name("Haley"), Name("Amber"), 1 }, row { Name("Grant"), Name("Grant"), 0 } } into ListNameNameIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameIntegerTestTable over { Name1, Name2 } add { iCompare(Name1, Name2) Integer3 }' Script, ') <> ListNameNameIntegerTestTable then raise Error("System.iCompare(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*317ID, */ row { System.String('System.iCompare_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Integer" });' Table, 'insert table { row { 0 Short1, 0 Short2, 0 Integer3 }, row { -56, 55, -1 }, row { 32767, 57, 1 }, row { 200, 255, -1 } } into ListShortShortIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortIntegerTestTable over { Short1, Short2 } add { Short1 ?= Short2 Integer3 }' Script, ') <> ListShortShortIntegerTestTable then raise Error("iCompare(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated},
		/*318ID, */ row { System.String('System.iCompare_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Integer" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, 0 Integer3 }, row { "Dataphor", "Alphora", 1 }, row { "Dataphor", "Dataphoria", -1 }, row { "Alphora", "Softwise", -1 } } into ListStringStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringIntegerTestTable over { String1, String2 } add { String1 ?= String2 Integer3 }' Script, ') <> ListStringStringIntegerTestTable then raise Error("iCompare(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*319ID, */ row { System.String('System.iCompare_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Integer" });' Table, 'insert table { row { Time(23,6,9) Time1, Time(23,6,9) Time2, 0 Integer3 }, row { Time(23,6,9), Time(23,6,8), 1 }, row { Time(22,6,9), Time(23,6,9), -1 } } into ListTimeTimeIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeIntegerTestTable over { Time1, Time2 } add { Time1 ?= Time2 Integer3 }' Script, ') <> ListTimeTimeIntegerTestTable then raise Error("iCompare(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*320ID, */ row { System.String('System.iCompare_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, 0 Integer3 }, row { TimeSpan.Ticks(100), TimeSpan.Ticks(120), -1 }, row { TimeSpan.Ticks(34556), TimeSpan.Ticks(32000), 1 }, row { TimeSpan.Ticks(1048576), TimeSpan.Ticks(1048576), 0 } } into ListTimeSpanTimeSpanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanIntegerTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 ?= TimeSpan2 Integer3 }' Script, ') <> ListTimeSpanTimeSpanIntegerTestTable then raise Error("iCompare(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*321ID, */ row { System.String('System.iCompare_System_UserID_System_UserID_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "UserID", "UserID", "Integer" });' Table, 'insert table { row { UserID("Adam") UserID1, UserID("Stevenson") UserID2, -1 Integer3 }, row { UserID("Haley"), UserID("Amber"), 1 }, row { UserID("Grant"), UserID("Grant"), 0 } } into ListUserIDUserIDIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListUserIDUserIDIntegerTestTable over { UserID1, UserID2 } add { iCompare(UserID1, UserID2) Integer3 }' Script, ') <> ListUserIDUserIDIntegerTestTable then raise Error("System.iCompare(UserID,UserID) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*322ID, */ row { System.String('System.iCompare_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Integer" });' Table, 'insert table { row { VersionNumber(2,2) VersionNumber1,  VersionNumber(1,2,3) VersionNumber2, 1 Integer3 }, row { VersionNumber(1,2,2,1), VersionNumber(2,3,4), -1 }, row { VersionNumber(1,2,3), VersionNumber(1,2,3), 0 } } into ListVersionNumberVersionNumberIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberIntegerTestTable over { VersionNumber1, VersionNumber2 } add { iCompare(VersionNumber1, VersionNumber2) Integer3 }' Script, ') <> ListVersionNumberVersionNumberIntegerTestTable then raise Error("System.iCompare(VersionNumber, VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*323ID, */ row { System.String('System.iDiv_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Integer" });' Table, 'insert table { row { 1 Byte1, 1 Byte2, 1 Integer3 }, row { 128, 8, 16 }, row { 15, 4, 3 }, row { 223, 230, 0 } } into ListByteByteIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteIntegerTestTable over { Byte1, Byte2 } add { Byte1 div Byte2 Integer3 }' Script, ') <> ListByteByteIntegerTestTable then raise Error("iDiv(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*324ID, */ row { System.String('System.iDiv_System_Byte_System_Byte_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Integer" });' Table, 'insert table { row { 233 Byte1, 0 Byte2, 0 Integer3 } } into ListByteByteIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListByteByteIntegerTestTable over { Byte1, Byte2 } add { Byte1 div Byte2 Integer3 };' Script, '", "iDiv(Byte,Byte) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*325ID, */ row { System.String('System.iDiv_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1.1d Decimal1, 1d Decimal2, 1d Decimal3 }, row { 50d, 7d, 7d }, row { 1550d, 5d, 310d }, row { 0d, 1d, 0d }, row { 12.84d, 1.99d, 6d } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 div Decimal2 Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("iDiv(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*326ID, */ row { System.String('System.iDiv_System_Decimal_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Integer" });' Table, 'insert table { row { 2.333d Decimal1, 0d Decimal2, 0 Integer3 } } into ListDecimalDecimalIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalDecimalIntegerTestTable over { Decimal1, Decimal2 } add { Decimal1 div Decimal2 Integer3 };' Script, '", "iDiv(Decimal,Decimal) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*327ID, */ row { System.String('System.iDiv_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1 Integer3 }, row { 128, 8, 16 }, row { 15, 4, 3 }, row { 223, 230, 0 }, row { 32767, 64, 511 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 div Integer2 Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("iDiv(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*328ID, */ row { System.String('System.iDiv_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 233 Integer1, 0 Integer2, 0 Integer3 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 div Integer2 Integer3 };' Script, '", "iDiv(Integer,Integer) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*329ID, */ row { System.String('System.iDiv_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Integer" });' Table, 'insert table { row { 1 Long1, 1 Long2, 1 Integer3 }, row { 128, 8, 16 }, row { 15, 4, 3 }, row { 223, 230, 0 }, row { 32767, 64, 511 } } into ListLongLongIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongIntegerTestTable over { Long1, Long2 } add { Long1 div Long2 Integer3 }' Script, ') <> ListLongLongIntegerTestTable then raise Error("iDiv(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*330ID, */ row { System.String('System.iDiv_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Integer" });' Table, 'insert table { row { 233 Long1, 0 Long2, 0 Integer3 } } into ListLongLongIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongLongIntegerTestTable over { Long1, Long2 } add { Long1 div Long2 Integer3 };' Script, '", "iDiv(Long,Long) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*331ID, */ row { System.String('System.iDiv_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Integer" });' Table, 'insert table { row { 1 Short1, 1 Short2, 1 Integer3 }, row { 128, 8, 16 }, row { 15, 4, 3 }, row { 223, 230, 0 }, row { 32767, 64, 511 } } into ListShortShortIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortIntegerTestTable over { Short1, Short2 } add { Short1 div Short2 Integer3 }' Script, ') <> ListShortShortIntegerTestTable then raise Error("iDiv(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*332ID, */ row { System.String('System.iDiv_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Integer" });' Table, 'insert table { row { 233 Short1, 0 Short2, 0 Integer3 } } into ListShortShortIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortShortIntegerTestTable over { Short1, Short2 } add { Short1 div Short2 Integer3 };' Script, '", "iDiv(Short,Short) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*333ID, */ row { System.String('System.iDivision_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Decimal" });' Table, 'insert table { row { 1 Byte1, 1 Byte2, 1d Decimal3 }, row { 128, 8, 16d }, row { 0, 15, 0d }, row { 96, 100, 0.96d }, row { 255, 2, 127.5d } } into ListByteByteDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteDecimalTestTable over { Byte1, Byte2 } add { Byte1 / Byte2 Decimal3 }' Script, ') <> ListByteByteDecimalTestTable then raise Error("iDivision(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*334ID, */ row { System.String('System.iDivision_System_Byte_System_Byte_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Decimal" });' Table, 'insert table { row { 12 Byte1, 0 Byte2, 12 Decimal3 } } into ListByteByteDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListByteByteDecimalTestTable over { Byte1, Byte2 } add { Byte1 / Byte2 Decimal3 };' Script, '", "iDivision(Byte,Byte) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*335ID, */ row { System.String('System.iDivision_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1d Decimal1, 1d Decimal2, 1d Decimal3 }, row { 1.28d, 0.08d, 16d }, row { 0d, 15d, 0d }, row { 9.6d, 10d, 0.96d }, row { 25.5d, 0.2d, 127.5d } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 / Decimal2 Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("iDivision(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*336ID, */ row { System.String('System.iDivision_System_Decimal_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 12 Decimal1, 0 Decimal2, 12 Decimal3 } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 / Decimal2 Decimal3 };' Script, '", "iDivision(Decimal,Decimal) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*337ID, */ row { System.String('System.iDivision_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Decimal" });' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1d Decimal3 }, row { 128, 8, 16d }, row { 0, 15, 0d }, row { 96, 100, 0.96d }, row { 255, 2, 127.5d } } into ListIntegerIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerDecimalTestTable over { Integer1, Integer2 } add { Integer1 / Integer2 Decimal3 }' Script, ') <> ListIntegerIntegerDecimalTestTable then raise Error("iDivision(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*338ID, */ row { System.String('System.iDivision_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Decimal" });' Table, 'insert table { row { 12 Integer1, 0 Integer2, 12 Decimal3 } } into ListIntegerIntegerDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerDecimalTestTable over { Integer1, Integer2 } add { Integer1 / Integer2 Decimal3 };' Script, '", "iDivision(Integer,Integer) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*339ID, */ row { System.String('System.iDivision_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Decimal" });' Table, 'insert table { row { 1 Long1, 1 Long2, 1d Decimal3 }, row { 128, 8, 16d }, row { 0, 15, 0d }, row { 96, 100, 0.96d }, row { 255, 2, 127.5d } } into ListLongLongDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongDecimalTestTable over { Long1, Long2 } add { Long1 / Long2 Decimal3 }' Script, ') <> ListLongLongDecimalTestTable then raise Error("iDivision(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*340ID, */ row { System.String('System.iDivision_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Decimal" });' Table, 'insert table { row { 12 Long1, 0 Long2, 12 Decimal3 } } into ListLongLongDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongLongDecimalTestTable over { Long1, Long2 } add { Long1 / Long2 Decimal3 };' Script, '", "iDivision(Long,Long) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*341ID, */ row { System.String('System.iDivision_System_Money_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Decimal", "Money" });' Table, 'insert table { row { $1 Money1, 1d Decimal2, $1 Money3 }, row { $1.28, 0.08d, $16 }, row { $0, 15d, $0 }, row { $9.6, 10d, $0.96 }, row { $25.5, 0.2d, $127.5 } } into ListMoneyDecimalMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyDecimalMoneyTestTable over { Money1, Decimal2 } add { Money1 / Decimal2 Money3 }' Script, ') <> ListMoneyDecimalMoneyTestTable then raise Error("iDivision(Money,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*342ID, */ row { System.String('System.iDivision_System_Money_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Decimal", "Money" });' Table, 'insert table { row { $12 Money1, 0 Decimal2, $12 Money3 } } into ListMoneyDecimalMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyDecimalMoneyTestTable over { Money1, Decimal2 } add { Money1 / Decimal2 Money3 };' Script, '", "iDivision(Money,Decimal) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*343ID, */ row { System.String('System.iDivision_System_Money_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Integer", "Money" });' Table, 'insert table { row { $1 Money1, 1 Integer2, $1 Money3 }, row { $128, 8, $16 }, row { $0, 15, $0 }, row { $9.6, 10, $0.96 }, row { $255, 2, $127.5 } } into ListMoneyIntegerMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyIntegerMoneyTestTable over { Money1, Integer2 } add { Money1 / Integer2 Money3 }' Script, ') <> ListMoneyIntegerMoneyTestTable then raise Error("iDivision(Money,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*344ID, */ row { System.String('System.iDivision_System_Money_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Integer", "Money" });' Table, 'insert table { row { $12 Money1, 0 Integer2, $12 Money3 } } into ListMoneyIntegerMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyIntegerMoneyTestTable over { Money1, Integer2 } add { Money1 / Integer2 Money3 };' Script, '", "iDivision(Money,Integer) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*345ID, */ row { System.String('System.iDivision_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Decimal" });' Table, 'insert table { row { 1 Short1, 1 Short2, 1d Decimal3 }, row { 128, 8, 16d }, row { 0, 15, 0d }, row { 96, 100, 0.96d }, row { 255, 2, 127.5d } } into ListShortShortDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortDecimalTestTable over { Short1, Short2 } add { Short1 / Short2 Decimal3 }' Script, ') <> ListShortShortDecimalTestTable then raise Error("iDivision(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*346ID, */ row { System.String('System.iDivision_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Decimal" });' Table, 'insert table { row { 12 Short1, 0 Short2, 12 Decimal3 } } into ListShortShortDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortShortDecimalTestTable over { Short1, Short2 } add { Short1 / Short2 Decimal3 };' Script, '", "iDivision(Short,Short) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*347ID, */ row { System.String('System.iDivision_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan.Ticks(1) TimeSpan1, 1d Decimal2, TimeSpan.Ticks(1) TimeSpan3 }, row { TimeSpan.Ticks(128), 0.08d, TimeSpan.Ticks(1600) }, row { TimeSpan(0), 15d, TimeSpan(0) }, row { TimeSpan.Ticks(90), 10d, TimeSpan.Ticks(9) }, row { TimeSpan.Ticks(255), 0.2d, TimeSpan.Ticks(1275) } } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { TimeSpan1 / Decimal2 TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("iDivision(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*348ID, */ row { System.String('System.iDivision_System_TimeSpan_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan.Ticks(12) TimeSpan1, 0 Decimal2, TimeSpan.Ticks(12) TimeSpan3 } } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { TimeSpan1 / Decimal2 TimeSpan3 };' Script, '", "iDivision(TimeSpan,Decimal) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*349ID, */ row { System.String('System.iDivision_System_TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan.Ticks(1) TimeSpan1, 1 Integer2, TimeSpan.Ticks(1) TimeSpan3 }, row { TimeSpan.Ticks(128), 8, TimeSpan.Ticks(16) }, row { TimeSpan.Ticks(0), 15, TimeSpan.Ticks(0) }, row { TimeSpan.Ticks(960), 10, TimeSpan.Ticks(96) }, row { TimeSpan.Ticks(254), 2, TimeSpan.Ticks(127) } } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { TimeSpan1 / Integer2 TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("iDivision(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*350ID, */ row { System.String('System.iDivision_System_TimeSpan_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan.Ticks(12) TimeSpan1, 0 Integer2, TimeSpan.Ticks(12) TimeSpan3 } } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { TimeSpan1 / Integer2 TimeSpan3 };' Script, '", "iDivision(TimeSpan,Integer) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*351ID, */ row { System.String('System.iDivision_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan.Ticks(1) TimeSpan1, 1 Integer3, TimeSpan.Ticks(1) TimeSpan2 }, row { TimeSpan.Ticks(128), 8, TimeSpan.Ticks(16) }, row { TimeSpan.Ticks(0), 0, TimeSpan.Ticks(15) }, row { TimeSpan.Ticks(960), 10, TimeSpan.Ticks(96) }, row { TimeSpan.Ticks(254), 2, TimeSpan.Ticks(127) } } into ListTimeSpanTimeSpanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanIntegerTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 / TimeSpan2 Integer3 }' Script, ') <> ListTimeSpanTimeSpanIntegerTestTable then raise Error("iDivision(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*352ID, */ row { System.String('System.iDivision_System_TimeSpan_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan.Ticks(12) TimeSpan1, 12 Integer3, TimeSpan.Ticks(0) TimeSpan2 } } into ListTimeSpanTimeSpanIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListTimeSpanTimeSpanIntegerTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 / TimeSpan2 Integer3 };' Script, '", "iDivision(TimeSpan,TimeSpan) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*353ID, */ row { System.String('System.iEqual_System_Binary_System_Binary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Binary", "Binary", "Boolean" });' Table, 'insert table { row { Binary("07f9b0d7ea0843708a9e24245b19e12e") Binary1, Binary("07f9b0d7ea0843708a9e24245b19e12e") Binary2, true Boolean3 }, row { Binary("b54ac5330b19417a96cdd37cad01cd02"), Binary("07f9b0d7ea0843708a9e24245b19e12e"), false }, row { Binary("b54ac5330b19417a96cdd37cad01cd02"), Binary("07f9b0d7ea0843708a9e24245b19e12e"), false } } into ListBinaryBinaryBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBinaryBinaryBooleanTestTable over { Binary1, Binary2 } add { iEqual(Binary1, Binary2) Boolean3 }' Script, ') <> ListBinaryBinaryBooleanTestTable then raise Error("System.iEqual(Binary,Binary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*354ID, */ row { System.String('System.iEqual_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { false Boolean1, false Boolean2, true Boolean3 }, row { false, true, false }, row { true, false, false }, row { true, true, true } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 = Boolean2 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iEqual(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*355ID, */ row { System.String('System.iEqual_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Boolean" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, true Boolean3 }, row { 1, 255, false }, row { 23, 24, false }, row { 45, 45, true } } into ListByteByteBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteBooleanTestTable over { Byte1, Byte2 } add { Byte1 = Byte2 Boolean3 }' Script, ') <> ListByteByteBooleanTestTable then raise Error("iEqual(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*356ID, */ row { System.String('System.iEqual_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Boolean" });' Table, 'insert table { row { Date(2003,10,6) Date1, Date(2003,10,6) Date2, true Boolean3 }, row { Date(2003,6,10), Date(2003,10,6), false }, row { Date(2003,10,6), Date(2003,10,16), false }, row { Date(2001,10,6), Date(2003,10,6), false }, row { Date(2000,10,3), Date(2000,10,3), true } } into ListDateDateBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateBooleanTestTable over { Date1, Date2 } add { Date1 = Date2 Boolean3 }' Script, ') <> ListDateDateBooleanTestTable then raise Error("iEqual(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*357ID, */ row { System.String('System.iEqual_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2003,10,6) DateTime1, DateTime(2003,10,6) DateTime2, true Boolean3 }, row { DateTime(2003,6,10), DateTime(2003,10,6), false }, row { DateTime(2003,10,6,13,0,0), DateTime(2003,10,6), false }, row { DateTime(2001,10,6), DateTime(2003,10,6), false }, row { DateTime(2000,10,3), DateTime(2000,10,3), true } } into ListDateTimeDateTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeBooleanTestTable over { DateTime1, DateTime2 } add { DateTime1 = DateTime2 Boolean3 }' Script, ') <> ListDateTimeDateTimeBooleanTestTable then raise Error("iEqual(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*358ID, */ row { System.String('System.iEqual_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Boolean" });' Table, 'insert table { row { 0d Decimal1, 0d Decimal2, true Boolean3 }, row { 1d, 255d, false }, row { 23d, 2.3d, false }, row { 4.5d, 4.5d, true }, row { -34d, 34d, false } } into ListDecimalDecimalBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalBooleanTestTable over { Decimal1, Decimal2 } add { Decimal1 = Decimal2 Boolean3 }' Script, ') <> ListDecimalDecimalBooleanTestTable then raise Error("iEqual(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*359ID, */ row { System.String('System.iEqual_System_Error_System_Error_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Error", "Error", "Boolean" });' Table, 'insert table { row { Error("07f9b0d7ea0843708a9e24245b19e12e") Error1, Error("07f9b0d7ea0843708a9e24245b19e12e") Error2, true Boolean3 }, row { Error("b54ac5330b19417a96cdd37cad01cd02"), Error("07f9b0d7ea0843708a9e24245b19e12e"), false }, row { Error("b54ac5330b19417a96cdd37cad01cd02"), Error("07f9b0d7ea0843708a9e24245b19e12e"), false } } into ListErrorErrorBooleanTable;' InsertTableStatement, 'if(' BeforeScript, 'ListErrorErrorBooleanTestTable over { Error1, Error2 } add { iEqual(Error1, Error2) Boolean3 }' Script, ') <> ListErrorErrorBooleanTestTable then raise Error("System.iEqual(Error,Error) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*360ID, */ row { System.String('System.iEqual_System_GroupName_System_GroupName_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "GroupName", "GroupName", "Boolean" });' Table, 'insert table { row { GroupName("Empire") GroupName1, GroupName("Empire") GroupName2, true Boolean3 }, row { GroupName("Rebellion"), GroupName("Empire"), false }, row { GroupName("File"), GroupName("Test"), false }, row { GroupName("CASETEST"), GroupName("CASETEST"), true } } into ListGroupNameGroupNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGroupNameGroupNameBooleanTestTable over { GroupName1, GroupName2 } add { iEqual(GroupName1,GroupName2) Boolean3 }' Script, ') <> ListGroupNameGroupNameBooleanTestTable then raise Error("System.iEqual(GroupName,GroupName) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*361ID, */ row { System.String('System.iEqual_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Boolean" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, true Boolean3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), false }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ac"), false }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-123456789ab0"), false } } into ListGuidGuidBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidBooleanTestTable over { Guid1, Guid2 } add { Guid1 = Guid2 Boolean3 }' Script, ') <> ListGuidGuidBooleanTestTable then raise Error("iEqual(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*362ID, */ row { System.String('System.iEqual_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, true Boolean3 }, row { 1, 255, false }, row { 23, 24, false }, row { 45, 45, true }, row { -34, 34, false } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { Integer1 = Integer2 Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("iEqual(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*363ID, */ row { System.String('System.iEqual_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Boolean" });' Table, 'insert table { row { 0 Long1, 0 Long2, true Boolean3 }, row { 1, 255, false }, row { 23, 24, false }, row { 45, 45, true }, row { -34, 34, false } } into ListLongLongBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongBooleanTestTable over { Long1, Long2 } add { Long1 = Long2 Boolean3 }' Script, ') <> ListLongLongBooleanTestTable then raise Error("iEqual(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*364ID, */ row { System.String('System.iEqual_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Boolean" });' Table, 'insert table { row { $0 Money1, $0 Money2, true Boolean3 }, row { $1, $255, false }, row { $23, $2.3, false }, row { $4.5, $4.5, true }, row { -$34, $34, false } } into ListMoneyMoneyBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyBooleanTestTable over { Money1, Money2 } add { Money1 = Money2 Boolean3 }' Script, ') <> ListMoneyMoneyBooleanTestTable then raise Error("iEqual(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*365ID, */ row { System.String('System.iEqual_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Empire") Name1, Name("Empire") Name2, true Boolean3 }, row { Name("Rebellion"), Name("Empire"), false }, row { Name("File"), Name("Test"), false }, row { GroupName("CASETEST"), GroupName("CASETEST"), true } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iEqual(Name1,Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iEqual(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*366ID, */ row { System.String('System.iEqual_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Boolean" });' Table, 'insert table { row { 0 Short1, 0 Short2, true Boolean3 }, row { 1, 255, false }, row { 23, 24, false }, row { 45, 45, true }, row { -34, 34, false } } into ListShortShortBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortBooleanTestTable over { Short1, Short2 } add { Short1 = Short2 Boolean3 }' Script, ') <> ListShortShortBooleanTestTable then raise Error("iEqual(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*367ID, */ row { System.String('System.iEqual_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, true Boolean3 }, row { "Dataphor", "Dataphoria", false }, row { "Dataphor", "Alphora", false }, row { "Softwise", "Alphora", false }, row { "Dataphor", "DATAPHOR", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 = String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iEqual(String,String) failed. Did not compare case sensitively.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*368ID, */ row { System.String('System.iEqual_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Boolean" });' Table, 'insert table { row { Time(23,10,6) Time1, Time(23,10,6) Time2, true Boolean3 }, row { Time(23,6,10), Time(23,10,6), false }, row { Time(13,0,0), Time(0,0,0), false }, row { Time(21,10,6), Time(23,10,6), false }, row { Time(20,10,3), Time(20,10,3), true } } into ListTimeTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeBooleanTestTable over { Time1, Time2 } add { Time1 = Time2 Boolean3 }' Script, ') <> ListTimeTimeBooleanTestTable then raise Error("iEqual(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*369ID, */ row { System.String('System.iEqual_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, true Boolean3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(255), false }, row { TimeSpan.Ticks(23), TimeSpan.Ticks(2), false }, row { TimeSpan.Ticks(1048576), TimeSpan.Ticks(1048576), true }, row { TimeSpan.Ticks(34), TimeSpan.Ticks(384), false } } into ListTimeSpanTimeSpanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanBooleanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 = TimeSpan2 Boolean3 }' Script, ') <> ListTimeSpanTimeSpanBooleanTestTable then raise Error("iEqual(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*370ID, */ row { System.String('System.iEqual_System_UserID_System_UserID_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "UserID", "UserID", "Boolean" });' Table, 'insert table { row { UserID("adams") UserID1, UserID("adams") UserID2, true Boolean3 }, row { UserID("Rebellion"), UserID("Empire"), false }, row { UserID("File"), UserID("Test"), false }, row { GroupName("CASETEST"), GroupName("CASETEST"), false } } into ListUserIDUserIDBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListUserIDUserIDBooleanTestTable over { UserID1, UserID2 } add { iEqual(UserID1,UserID2) Boolean3 }' Script, ') <> ListUserIDUserIDBooleanTestTable then raise Error("System.iEqual(UserID,UserID) failed. Did not compare case sensitively.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*371ID, */ row { System.String('System.iEqual_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, VersionNumber(1,1,1,1) VersionNumber2, true Boolean3 }, row { VersionNumber(2,1,3,2), VersionNumber(1,2,3,4), false }, row { VersionNumber(1,2), VersionNumber(2,1), false } } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { iEqual(VersionNumber1,VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.iEqual(VersionNumber,VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*372ID, */ row { System.String('System.iExists_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table NullTestTable { Null1 : Integer static tags { Storage.IsNullable = "true" } };' Table, 'insert table { row { 0 Null1 }, row { 1 }, row { nil as Integer }, row { -1 }, row { -65536 } } into NullTestTable;' InsertTableStatement, 'if (' BeforeScript, 'exists NullTestTable' Script, ') <> true then raise Error("iExists(table) failed with rows.");' AfterScript, 'drop table NullTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*373ID, */ row { System.String('System.iExists_table_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table NullTestTable { Null1 : Integer static tags { Storage.IsNullable = "true" } };' Table, 'insert table { row { 0 Null1 }, row { 1 }, row { -1 }, row { -65536 } } into NullTestTable;' InsertTableStatement, 'if (' BeforeScript, 'exists NullTestTable' Script, ') <> true then raise Error("iExists(table) failed with rows.");' AfterScript, 'drop table NullTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*374ID, */ row { System.String('System.iExists_table_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table NullTestTable { Null1 : Integer static tags { Storage.IsNullable = "true" } };' Table, 'insert table { row { 0 Null1 } } into NullTestTable;' InsertTableStatement, 'if (' BeforeScript, 'exists NullTestTable' Script, ') <> true then raise Error("iExists(table) failed with a null row.");' AfterScript, 'drop table NullTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*375ID, */ row { System.String('System.iExists_table_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table NullTestTable { Null1 : Integer static tags { Storage.IsNullable = "true" } };' Table, '' InsertTableStatement, 'if (' BeforeScript, 'exists NullTestTable' Script, ') <> false then raise Error("iExists(table) failed with no rows.");' AfterScript, 'drop table NullTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*376ID, */ row { System.String('System.iExtend_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"}, true);' Table, 'insert table { row { 0 Integer1 }, row { 1 }, row { 2 }, row { 3 }, row { nil as Integer } } into ListIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTestTable add { 1 Integer2 }' Script, ') <> table { row { 0 Integer1, 1 Integer2 }, row { 1, 1 }, row { 2, 1 }, row { 3, 1 }, row { nil as Integer, 1 } } then raise Error("iExtend(table) failed."); NegativeTest("ListIntegerTestTable add { 1 Integer1 };", "iExtend(presentaion) failed to throw on adding existing column.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*377ID, */ row { System.String('System.IfNil_System_Generic_System_Generic_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table NullTestTable { Null1 : Integer { nil }, Integer2 : Integer };' Table, 'insert table { row { 0 Null1, 0 Integer2 }, row { 1, 1 }, row { nil as Integer, 0 }, row { -1, -1 }, row { -65536, -65536 } } into NullTestTable;' InsertTableStatement, 'if (' BeforeScript, 'NullTestTable over { Null1 } add { IfNil(Null1, 0) Integer2 }' Script, ') <> NullTestTable then raise Error("System.IfNil(Generic, Generic) failed.");' AfterScript, 'drop table NullTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*378ID, */ row { System.String('System.iGreater_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { false Boolean1, false Boolean2, false Boolean3 }, row { false, true, false }, row { true, false, true }, row { true, true, false } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 > Boolean2 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iGreater(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*379ID, */ row { System.String('System.iGreater_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Boolean" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, false Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, false }, row { 255, 254, true } } into ListByteByteBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteBooleanTestTable over { Byte1, Byte2 } add { Byte1 > Byte2 Boolean3 }' Script, ') <> ListByteByteBooleanTestTable then raise Error("iGreater(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*380ID, */ row { System.String('System.iGreater_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Boolean" });' Table, 'insert table { row { Date(2003,7,17) Date1, Date(2003,7,17) Date2, false Boolean3 }, row { Date(1901,7,17), Date(1902,7,17), false }, row { Date(2003,1,1), Date(2002,1,1), true }, row { Date(1901,7,19), Date(1901,7,18), true } } into ListDateDateBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateBooleanTestTable over { Date1, Date2 } add { Date1 > Date2 Boolean3 }' Script, ') <> ListDateDateBooleanTestTable then raise Error("iGreater(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*381ID, */ row { System.String('System.iGreater_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2003,7,17) DateTime1, DateTime(2003,7,17) DateTime2, false Boolean3 }, row { DateTime(2003,7,17), DateTime(2003,7,17,12,0,0), false }, row { DateTime(2003,1,1), DateTime(2002,1,1), true }, row { DateTime(2003,7,17), DateTime(2003,7,18), false } } into ListDateTimeDateTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeBooleanTestTable over { DateTime1, DateTime2 } add { DateTime1 > DateTime2 Boolean3 }' Script, ') <> ListDateTimeDateTimeBooleanTestTable then raise Error("iGreater(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*382ID, */ row { System.String('System.iGreater_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Boolean" });' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, false Boolean3 }, row { 0, 1, false }, row { 1.1, 0.9, true }, row { 123.45, 123.45, false }, row { 0.255, 0.254, true } } into ListDecimalDecimalBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalBooleanTestTable over { Decimal1, Decimal2 } add { Decimal1 > Decimal2 Boolean3 }' Script, ') <> ListDecimalDecimalBooleanTestTable then raise Error("iGreater(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*383ID, */ row { System.String('System.iGreater_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Boolean" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, false Boolean3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), false }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789aa"), true }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-a23456789ab0"), false } } into ListGuidGuidBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidBooleanTestTable over { Guid1, Guid2 } add { Guid1 > Guid2 Boolean3 }' Script, ') <> ListGuidGuidBooleanTestTable then raise Error("iCompare(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*384ID, */ row { System.String('System.iGreater_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, false Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, false }, row { 255, 254, true } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { Integer1 > Integer2 Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("iGreater(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*385ID, */ row { System.String('System.iGreater_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Boolean" });' Table, 'insert table { row { 0 Long1, 0 Long2, false Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, false }, row { 255, 254, true } } into ListLongLongBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongBooleanTestTable over { Long1, Long2 } add { iGreater(Long1, Long2) Boolean3 }' Script, ') <> ListLongLongBooleanTestTable then raise Error("iGreater(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*386ID, */ row { System.String('System.iGreater_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Boolean" });' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, false Boolean3 }, row { $0, $1, false }, row { $1.1, $0.9, true }, row { $123.45, $123.45, false }, row { $0.255, $0.254, true } } into ListMoneyMoneyBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyBooleanTestTable over { Money1, Money2 } add { Money1 > Money2 Boolean3 }' Script, ') <> ListMoneyMoneyBooleanTestTable then raise Error("iGreater(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*387ID, */ row { System.String('System.iGreater_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Zebra") Name1, Name("Zebra") Name2, false Boolean3 }, row { Name("Zebra"), Name("adam"), false }, row { Name("Adam"), Name("ADAM"), true } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iGreater(Name1, Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iGreater(Name,Name) failed. Did not compare case sensitively.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1179ID, */ row { System.String('System.iGreater_System_Name_System_Name_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Zebra") Name1, Name("Zebra") Name2, false Boolean3 }, row { Name("zebra"), Name("adam"), true }, row { Name("Adam"), Name("Adam"), false } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iGreater(Name1, Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iGreater(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*388ID, */ row { System.String('System.iGreater_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Boolean" });' Table, 'insert table { row { 0 Short1, 0 Short2, false Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, false }, row { 255, 254, true } } into ListShortShortBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortBooleanTestTable over { Short1, Short2 } add { iGreater(Short1, Short2) Boolean3 }' Script, ') <> ListShortShortBooleanTestTable then raise Error("iGreater(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated},
		/*389ID, */ row { System.String('System.iGreater_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "" String1, "" String2, false Boolean3 }, row { "Alphora", "Alphora", false }, row { "Dataphor", "Alphora", true }, row { "Alphora", "Alphor", true }, row { "SOFTWISE", "Softwise", true } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 > String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iGreater(String,String) failed. Did not compare case sensitively.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*390ID, */ row { System.String('System.iGreater_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Boolean" });' Table, 'insert table { row { Time(23,7,17) Time1, Time(23,7,17) Time2, false Boolean3 }, row { Time(23,59,58), Time(23,59,59), false }, row { Time(0,0,2), Time(0,0,1), true }, row { Time(12,7,17), Time(12,6,18), true } } into ListTimeTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeBooleanTestTable over { Time1, Time2 } add { Time1 > Time2 Boolean3 }' Script, ') <> ListTimeTimeBooleanTestTable then raise Error("iGreater(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*391ID, */ row { System.String('System.iGreater_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, false Boolean3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), false }, row { TimeSpan.Ticks(11), TimeSpan.Ticks(9), true }, row { TimeSpan.Ticks(12345), TimeSpan.Ticks(12345), false }, row { TimeSpan.Ticks(255), TimeSpan.Ticks(254), true } } into ListTimeSpanTimeSpanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanBooleanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 > TimeSpan2 Boolean3 }' Script, ') <> ListTimeSpanTimeSpanBooleanTestTable then raise Error("iGreater(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*392ID, */ row { System.String('System.iGreater_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(2,2,2,2) VersionNumber1, VersionNumber(1,1,1,1) VersionNumber2, true Boolean3 }, row { VersionNumber(1,2), VersionNumber(3), false }, row { VersionNumber(1,1,1,1), VersionNumber(1,1,1,1), false } } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { iGreater(VersionNumber1, VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.iGreater(VersionNumber,VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*393ID, */ row { System.String('System.iIn_System_Generic_list_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 1 Integer1 }, row { 2 }, row { 3 }, row { 5 }, row { 8 }, row { 13 }, row { 21 } } into ListIntegerTestTable;' InsertTableStatement, 'if {' BeforeScript, 'ListIntegerTestTable where Integer1 in { 2, 3, 5, 7, 11, 13, 17, 19, 23 }' Script, ' <> table { row { 1 Integer1 }, row { 2 }, row { 3 }, row { 5 }, row { 7 }, row { 13 } } then raise Error("iIn(Generic) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*394ID, */ row { System.String('System.iIn_System_Scalar_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1 Integer3 }, row { 1, 2, 2}, row { 1, 2, 3} } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'row { 1 Integer1, 2 Integer2, 3 Integer3 } in TripleNullIntegerTestTable' Script, ') and not (row { 3 Integer1, 2 Integer2, 1 Integer3 } in TripleNullIntegerTestTable) then raise Error("iIn(Scalar,table) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*395ID, */ row { System.String('System.iInclusiveGreater_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { false Boolean1, false Boolean2, true  Boolean3 }, row { false, true, false }, row { true, false, true }, row { true, true, true } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 >= Boolean2 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iInclusiveGreater(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*396ID, */ row { System.String('System.iInclusiveGreater_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Boolean" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, true Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, true }, row { 255, 254, true } } into ListByteByteBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteBooleanTestTable over { Byte1, Byte2 } add { Byte1 >= Byte2 Boolean3 }' Script, ') <> ListByteByteBooleanTestTable then raise Error("iInclusiveGreater(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*397ID, */ row { System.String('System.iInclusiveGreater_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Boolean" });' Table, 'insert table { row { Date(2003,7,17) Date1, Date(2003,7,17) Date2, true Boolean3 }, row { Date(2004,7,17), Date(2003,7,17), true }, row { Date(1983,1,1), Date(1913,1,1), true }, row { Date(1903,7,17), Date(1903,7,18), false } } into ListDateDateBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateBooleanTestTable over { Date1, Date2 } add { Date1 >= Date2 Boolean3 }' Script, ') <> ListDateDateBooleanTestTable then raise Error("iInclusiveGreater(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*398ID, */ row { System.String('System.iInclusiveGreater_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2003,7,17) DateTime1, DateTime(2003,7,17) DateTime2, true Boolean3 }, row { DateTime(2003,7,17,0,0,0), DateTime(2003,7,17,12,0,0), false }, row { DateTime(2003,1,1), DateTime(2002,1,1), true }, row { DateTime(2003,7,17), DateTime(2003,7,18), false } } into ListDateTimeDateTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeBooleanTestTable over { DateTime1, DateTime2 } add { DateTime1 >= DateTime2 Boolean3 }' Script, ') <> ListDateTimeDateTimeBooleanTestTable then raise Error("iInclusiveGreater(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*399ID, */ row { System.String('System.iInclusiveGreater_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Boolean" });' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, true Boolean3 }, row { 0, 1, false }, row { 1.1, 0.9, true }, row { 123.45, 123.45, true }, row { 0.255, 0.254, true } } into ListDecimalDecimalBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalBooleanTestTable over { Decimal1, Decimal2 } add { Decimal1 >= Decimal2 Boolean3 }' Script, ') <> ListDecimalDecimalBooleanTestTable then raise Error("iInclusiveGreater(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*400ID, */ row { System.String('System.iInclusiveGreater_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Boolean" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, true Boolean3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), false }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789aa"), true }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-a23456789ab0"), false } } into ListGuidGuidBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidBooleanTestTable over { Guid1, Guid2 } add { Guid1 >= Guid2 Boolean3 }' Script, ') <> ListGuidGuidBooleanTestTable then raise Error("iCompare(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*401ID, */ row { System.String('System.iInclusiveGreater_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, true Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, true }, row { 255, 254, true } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { Integer1 >= Integer2 Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("iInclusiveGreater(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*402ID, */ row { System.String('System.iInclusiveGreater_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Boolean" });' Table, 'insert table { row { 0 Long1, 0 Long2, true Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 255, 255, true }, row { 255, 254, true } } into ListLongLongBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongBooleanTestTable over { Long1, Long2 } add { iInclusiveGreater(Long1, Long2) Boolean3 }' Script, ') <> ListLongLongBooleanTestTable then raise Error("iInclusiveGreater(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*403ID, */ row { System.String('System.iInclusiveGreater_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Boolean" });' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, true Boolean3 }, row { $0, $1, false }, row { $1.1, $0.9, true }, row { $123.45, $123.45, true }, row { $0.255, $0.254, true } } into ListMoneyMoneyBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyBooleanTestTable over { Money1, Money2 } add { Money1 >= Money2 Boolean3 }' Script, ') <> ListMoneyMoneyBooleanTestTable then raise Error("iInclusiveGreater(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*404ID, */ row { System.String('System.iInclusiveGreater_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Included") Name1, Name("Included") Name2, true Boolean3 }, row { Name("NotTrue"), Name("Zebra"), false }, row { Name("Zebra"), Name("Dog"), true } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iInclusiveGreater(Name1, Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iInclusiveGreater(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*405ID, */ row { System.String('System.iInclusiveGreater_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Boolean" });' Table, 'insert table { row { 0 Short1, 0 Short2, true Boolean3 }, row { 0, 1, false }, row { 1, 0, true }, row { 252, 255, false }, row { 255, 254, true } } into ListShortShortBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortBooleanTestTable over { Short1, Short2 } add { iInclusiveGreater(Short1, Short2) Boolean3 }' Script, ') <> ListShortShortBooleanTestTable then raise Error("iInclusiveGreater(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*406ID, */ row { System.String('System.iInclusiveGreater_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "" String1, "" String2, true Boolean3 }, row { "Alphora", "Alphora", true }, row { "Dataphor", "Alphora", true }, row { "Alphora", "Alphor", true }, row { "SOFTWISE", "Softwise", true } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 >= String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iInclusiveGreater(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*407ID, */ row { System.String('System.iInclusiveGreater_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Boolean" });' Table, 'insert table { row { Time(21,7,17) Time1, Time(19,7,17) Time2, true Boolean3 }, row { Time(23,7,19), Time(23,7,17), true }, row { Time(23,1,1), Time(22,1,1), true }, row { Time(23,7,17), Time(23,7,18), false } } into ListTimeTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeBooleanTestTable over { Time1, Time2 } add { Time1 >= Time2 Boolean3 }' Script, ') <> ListTimeTimeBooleanTestTable then raise Error("iInclusiveGreater(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*408ID, */ row { System.String('System.iInclusiveGreater_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, true Boolean3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), false }, row { TimeSpan.Ticks(11), TimeSpan.Ticks(9), true }, row { TimeSpan.Ticks(12345), TimeSpan.Ticks(12345), true }, row { TimeSpan.Ticks(255), TimeSpan.Ticks(254), true } } into ListTimeSpanTimeSpanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanBooleanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 >= TimeSpan2 Boolean3 }' Script, ') <> ListTimeSpanTimeSpanBooleanTestTable then raise Error("iInclusiveGreater(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*409ID, */ row { System.String('System.iInclusiveGreater_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, VersionNumber(1,1,1,1) VersionNumber2, true Boolean3 }, row { VersionNumber(1,2,3,4), VersionNumber(1,2,3), true }, row { VersionNumber(2,1,1), VersionNumber(1), true } } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { iInclusiveGreater(VersionNumber1, VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.iInclusiveGreater(VersionNumber,VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*410ID, */ row { System.String('System.iInclusiveLess_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { true Boolean1, true Boolean2, true Boolean3 }, row { true, false, false }, row { false, true, true }, row { false, false, true } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 <= Boolean2 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iInclusiveLess(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*411ID, */ row { System.String('System.iInclusiveLess_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Boolean" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, true Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, true }, row { 255, 254, false } } into ListByteByteBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteBooleanTestTable over { Byte1, Byte2 } add { Byte1 <= Byte2 Boolean3 }' Script, ') <> ListByteByteBooleanTestTable then raise Error("iInclusiveLess(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*412ID, */ row { System.String('System.iInclusiveLess_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Boolean" });' Table, 'insert table { row { Date(2003,7,17) Date1, Date(2003,7,17) Date2, true Boolean3 }, row { Date(2003,8,17), Date(2003,8,17), true }, row { Date(2003,1,1), Date(2002,1,1), false }, row { Date(2003,7,17), Date(2003,7,18), true } } into ListDateDateBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateBooleanTestTable over { Date1, Date2 } add { Date1 <= Date2 Boolean3 }' Script, ') <> ListDateDateBooleanTestTable then raise Error("iInclusiveLess(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*413ID, */ row { System.String('System.iInclusiveLess_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2003,7,17) DateTime1, DateTime(2003,7,17) DateTime2, true Boolean3 }, row { DateTime(2003,7,17), DateTime(2003,7,17,12,0,0), true }, row { DateTime(2003,1,1), DateTime(2002,1,1), false }, row { DateTime(2003,7,17), DateTime(2003,7,18), true } } into ListDateTimeDateTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeBooleanTestTable over { DateTime1, DateTime2 } add { DateTime1 <= DateTime2 Boolean3 }' Script, ') <> ListDateTimeDateTimeBooleanTestTable then raise Error("iInclusiveLess(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*414ID, */ row { System.String('System.iInclusiveLess_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Boolean" });' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, true Boolean3 }, row { 0, 1, true }, row { 1.1, 0.9, false }, row { 123.45, 123.45, true }, row { 0.255, 0.254, false } } into ListDecimalDecimalBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalBooleanTestTable over { Decimal1, Decimal2 } add { Decimal1 <= Decimal2 Boolean3 }' Script, ') <> ListDecimalDecimalBooleanTestTable then raise Error("iInclusiveLess(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*415ID, */ row { System.String('System.iInclusiveLess_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Boolean" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, true Boolean3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), true }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789aa"), false }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-a23456789ab0"), true } } into ListGuidGuidBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidBooleanTestTable over { Guid1, Guid2 } add { Guid1 <= Guid2 Boolean3 }' Script, ') <> ListGuidGuidBooleanTestTable then raise Error("iCompare(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*416ID, */ row { System.String('System.iInclusiveLess_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, true Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, true }, row { 255, 254, false } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { Integer1 <= Integer2 Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("iInclusiveLess(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*417ID, */ row { System.String('System.iInclusiveLess_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Boolean" });' Table, 'insert table { row { 0 Long1, 0 Long2, true Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, true }, row { 255, 254, false } } into ListLongLongBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongBooleanTestTable over { Long1, Long2 } add { iInclusiveLess(Long1, Long2) Boolean3 }' Script, ') <> ListLongLongBooleanTestTable then raise Error("iInclusiveLess(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*418ID, */ row { System.String('System.iInclusiveLess_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Boolean" });' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, true Boolean3 }, row { $0, $1, true }, row { $1.1, $0.9, false }, row { $123.45, $123.45, true }, row { $0.255, $0.254, false } } into ListMoneyMoneyBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyBooleanTestTable over { Money1, Money2 } add { Money1 <= Money2 Boolean3 }' Script, ') <> ListMoneyMoneyBooleanTestTable then raise Error("iInclusiveLess(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*419ID, */ row { System.String('System.iInclusiveLess_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Included") Name1, Name("Included") Name2, true Boolean3 }, row { Name("NotTrue"), Name("Zebra"), true }, row { Name("Zebra"), Name("Dog"), false } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iInclusiveLess(Name1, Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iInclusiveLess(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*420ID, */ row { System.String('System.iInclusiveLess_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Boolean" });' Table, 'insert table { row { 0 Short1, 0 Short2, true Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, true }, row { 255, 254, false } } into ListShortShortBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortBooleanTestTable over { Short1, Short2 } add { iInclusiveLess(Short1, Short2) Boolean3 }' Script, ') <> ListShortShortBooleanTestTable then raise Error("iInclusiveLess(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*421ID, */ row { System.String('System.iInclusiveLess_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "" String1, "" String2, true Boolean3 }, row { "Alphora", "Alphora", true }, row { "Dataphor", "Alphora", false }, row { "Alphora", "Alphor", false }, row { "CASETEST", "Casetest", true } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 <= String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iInclusiveLess(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*422ID, */ row { System.String('System.iInclusiveLess_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Boolean" });' Table, 'insert table { row { Time(23,7,17) Time1, Time(23,7,17) Time2, true Boolean3 }, row { Time(23,8,17), Time(23,8,17), true }, row { Time(23,1,1), Time(22,1,1), false }, row { Time(23,7,17), Time(23,7,18), true } } into ListTimeTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeBooleanTestTable over { Time1, Time2 } add { Time1 <= Time2 Boolean3 }' Script, ') <> ListTimeTimeBooleanTestTable then raise Error("iInclusiveLess(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*423ID, */ row { System.String('System.iInclusiveLess_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, true Boolean3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), true }, row { TimeSpan.Ticks(11), TimeSpan.Ticks(9), false }, row { TimeSpan.Ticks(12345), TimeSpan.Ticks(12345), true }, row { TimeSpan.Ticks(255), TimeSpan.Ticks(254), false } } into ListTimeSpanTimeSpanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanBooleanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 <= TimeSpan2 Boolean3 }' Script, ') <> ListTimeSpanTimeSpanBooleanTestTable then raise Error("iInclusiveLess(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*424ID, */ row { System.String('System.iInclusiveLess_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, VersionNumber(1,1,1,1) VersionNumber2, true Boolean3 }, row { VersionNumber(1,2,3,4), VersionNumber(1,2,3), false }, row { VersionNumber(2,1,1), VersionNumber(2,3,4), true } } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { iInclusiveLess(VersionNumber1, VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.iInclusiveLess(VersionNumber,VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*425ID, */ row { System.String('System.iIndexer_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String" });' Table, 'insert table { row { "Testing" String1, 2 Integer2, "s" String3 }, row { "thestring", 8, "g" }, row { "TheTest", 0, "T" } } into ListStringIntegerStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerStringTestTable over { String1, Integer2 } add { iIndexer(String1, Integer2) String3 }' Script, ') <> ListStringIntegerStringTestTable then raise Error("System.iIndexer(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*426ID, */ row { System.String('System.iJoin_table_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Integer", "String", "Integer"}, true);CreateListTable({"Integer", "Decimal", "Integer"}, true);' Table, 'insert table { row { 0 Integer1 , "good" String2, 0 Integer3 }, row { 1, "good", 2 }, row { 1, "bad", 0 }, row { 3, "bad", 3 }, row { 1, "also good", 2 } } into ListIntegerStringIntegerTestTable; insert table { row { 0 Integer1 , 0.0 Decimal2, 0 Integer3 }, row { 1, 1.1, 2 }, row { 0, 2.2, 2 }, row { 6, 3.3, 6 }, row { 1, 4.4, 2 } } into ListIntegerDecimalIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerDecimalIntegerTestTable join ListIntegerStringIntegerTestTable' Script, ') <> table { row { 0 Integer1, 0 Integer3, "good" String2, 0.0 Decimal2 }, row { 1, 2, "good", 1.1 }, row { 1, 2, "good", 4.4 }, row { 1, 2, "also good", 1.1 }, row { 1, 2, "also good", 4.4 } } then raise Error("Natural iJoin(table,table) failed.");' AfterScript, 'DropListTable({"Integer", "String", "Integer"}, true);DropListTable({"Integer", "Decimal", "Integer"}, true);' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*427ID, */ row { System.String('System.iJoin_table_table_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"String", "String", "Integer"}, true);CreateListTable({"Integer", "Decimal", "Decimal"}, true);' Table, 'insert table { row { "good" String1 , "good" String2, 0 Integer3 }, row { "good", "good", 2 }, row { "bad", "bad", 1 }, row { "bad", "bad", 3 }, row { "also good", "also good", 2 } } into ListStringStringIntegerTestTable; insert table { row { 0 Integer1 , 0.0 Decimal2, 0.0 Decimal3 }, row { 4, 1.1, 1.1 }, row { 2, 2.2, 2.2 }, row { 6, 3.3, 3.3 }, row { 2, 4.4, 4.4 } } into ListIntegerDecimalDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerDecimalDecimalTestTable join ListStringStringIntegerTestTable by Integer1 = Integer3' Script, ') <> table { row { 0 Integer1, 0 Integer3, "good" String1, "good" String2, 0.0 Decimal2, 0.0 Decimal3 }, row { 2, 2, "good", "good", 4.4, 4.4 }, row { 2, 2, "also good", "also good", 4.4, 4.4 }, row { 2, 2, "good", "good", 2.2, 2.2 }, row { 2, 2, "also good", "also good", 2.2, 2.2 } } then raise Error("Specified iJoin(table,table) failed.");' AfterScript, 'DropListTable({"String", "String", "Integer"}, true);DropListTable({"Integer", "Decimal", "Decimal"}, true);' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*428ID, */ row { System.String('System.iLeftJoin_table_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Integer", "String", "Integer"}, true); CreateListTable({"Integer", "Decimal", "Integer"}, true);' Table, 'insert table { row { 0 Integer1 , "good" String2, 0 Integer3 }, row { 1, "good", 2 }, row { 1, "bad", 0 }, row { 3, "bad", 3 }, row { 1, "also good", 2 } } into ListIntegerStringIntegerTestTable; insert table { row { 0 Integer1 , 0.0 Decimal2, 0 Integer3 }, row { 1, 1.1, 2 }, row { 0, 2.2, 2 }, row { 6, 3.3, 6 }, row { 1, 4.4, 2 } } into ListIntegerDecimalIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerStringIntegerTestTable left join ListIntegerDecimalIntegerTestTable include rowexists' Script, ') <> table { row { 0 Integer1, 0 Integer3, "good" String2, 0.0 Decimal2, true rowexists }, row { 1, 2, "good", 1.1, true }, row { 1, 2, "good", 4.4, true }, row { 1, 2, "also good", 1.1, true }, row { 1, 2, "also good", 4.4, true }, row { 1, 0, "bad", nil as Decimal, false }, row { 3, 3, "bad", nil as Decimal, false } } then raise Error("Natural iLeftJoin(table,table) failed.");' AfterScript, 'DropListTable({"Integer", "String", "Integer"}, true);DropListTable({"Integer", "Decimal", "Integer"}, true);' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*429ID, */ row { System.String('System.iLeftJoin_table_table_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"String", "String", "Integer"}, true);CreateListTable({"Integer", "Decimal", "Decimal"}, true);' Table, 'insert table { row { "good" String1 , "good" String2, 0 Integer3 }, row { "good", "good", 2 }, row { "bad", "bad", 1 }, row { "bad", "bad", 3 }, row { "also good", "also good", 2 } } into ListStringStringIntegerTestTable; insert table { row { 0 Integer1 , 0.0 Decimal2, 0.0 Decimal3 }, row { 4, 1.1, 1.1 }, row { 2, 2.2, 2.2 }, row { 6, 3.3, 3.3 }, row { 2, 4.4, 4.4 } } into ListIntegerDecimalDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringIntegerTestTable left join ListIntegerDecimalDecimalTestTable by Integer1 = Integer3 include rowexists' Script, ') <> table { row { 0 Integer1, 0 Integer3, "good" String1, "good" String2, 0.0 Decimal2, 0.0 Decimal3, true rowexists }, row { 2, 2, "good", "good", 4.4, 4.4, true }, row { 2, 2, "also good", "also good", 4.4, 4.4, true }, row { 2, 2, "good", "good", 2.2, 2.2, true }, row { 2, 2, "also good", "also good", 2.2, 2.2, true }, row { 1, 1, "bad", "bad", nil as Decimal, nil as Decimal, false }, row { 3, 3, "bad", "bad", nil as Decimal, nil as Decimal, false } } then raise Error("Specified iLeftJoin(table,table) failed.");' AfterScript, 'DropListTable({"String", "String", "Integer"}, true);DropListTable({"Integer", "Decimal", "Decimal"}, true);' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*430ID, */ row { System.String('System.iLess_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { true Boolean1, true Boolean2, false  Boolean3 }, row { true, false, false }, row { false, true, true }, row { false, false, false } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 < Boolean2 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iLess(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*431ID, */ row { System.String('System.iLess_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Boolean" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, false Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, false }, row { 255, 254, false } } into ListByteByteBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteBooleanTestTable over { Byte1, Byte2 } add { Byte1 < Byte2 Boolean3 }' Script, ') <> ListByteByteBooleanTestTable then raise Error("iLess(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*432ID, */ row { System.String('System.iLess_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Boolean" });' Table, 'insert table { row { Date(2003,7,17) Date1, Date(2003,7,17) Date2, false Boolean3 }, row { Date(2004,7,17), Date(2003,7,17), false }, row { Date(2003,1,1), Date(2002,1,1), false }, row { Date(2003,7,17), Date(2003,7,18), true } } into ListDateDateBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateBooleanTestTable over { Date1, Date2 } add { Date1 < Date2 Boolean3 }' Script, ') <> ListDateDateBooleanTestTable then raise Error("iLess(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*433ID, */ row { System.String('System.iLess_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2003,7,17) DateTime1, DateTime(2003,7,17) DateTime2, false Boolean3 }, row { DateTime(2003,7,17), DateTime(2003,7,17,12,0,0), true }, row { DateTime(2003,1,1), DateTime(2002,1,1), false }, row { DateTime(2003,7,17), DateTime(2003,7,18), true } } into ListDateTimeDateTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeBooleanTestTable over { DateTime1, DateTime2 } add { DateTime1 < DateTime2 Boolean3 }' Script, ') <> ListDateTimeDateTimeBooleanTestTable then raise Error("iLess(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*434ID, */ row { System.String('System.iLess_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Boolean" });' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, false Boolean3 }, row { 0, 1, true }, row { 1.1, 0.9, false }, row { 123.45, 123.45, false }, row { 0.255, 0.254, false } } into ListDecimalDecimalBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalBooleanTestTable over { Decimal1, Decimal2 } add { Decimal1 < Decimal2 Boolean3 }' Script, ') <> ListDecimalDecimalBooleanTestTable then raise Error("iLess(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*435ID, */ row { System.String('System.iLess_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Boolean" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, false Boolean3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), true }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789aa"), false }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-a23456789ab0"), true } } into ListGuidGuidBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidBooleanTestTable over { Guid1, Guid2 } add { Guid1 < Guid2 Boolean3 }' Script, ') <> ListGuidGuidBooleanTestTable then raise Error("iCompare(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*436ID, */ row { System.String('System.iLess_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, false Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, false }, row { 123456255, 123456254, false } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { Integer1 < Integer2 Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("iLess(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*437ID, */ row { System.String('System.iLess_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Boolean" });' Table, 'insert table { row { 0 Long1, 0 Long2, false Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, false }, row { 255, 254, false } } into ListLongLongBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongBooleanTestTable over { Long1, Long2 } add { iLess(Long1, Long2) Boolean3 }' Script, ') <> ListLongLongBooleanTestTable then raise Error("iLess(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*438ID, */ row { System.String('System.iLess_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Boolean" });' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, false Boolean3 }, row { $0, $1, true }, row { $1.1, $0.9, false }, row { $123.45, $123.45, false }, row { $0.255, $0.254, false } } into ListMoneyMoneyBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyBooleanTestTable over { Money1, Money2 } add { Money1 < Money2 Boolean3 }' Script, ') <> ListMoneyMoneyBooleanTestTable then raise Error("iLess(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*439ID, */ row { System.String('System.iLess_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Included") Name1, Name("Included") Name2, false Boolean3 }, row { Name("NotTrue"), Name("Zebra"), true }, row { Name("Zebra"), Name("Dog"), false } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iLess(Name1, Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iLess(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*440ID, */ row { System.String('System.iLess_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Boolean" });' Table, 'insert table { row { 0 Short1, 0 Short2, false Boolean3 }, row { 0, 1, true }, row { 1, 0, false }, row { 255, 255, false }, row { 255, 254, false } } into ListShortShortBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortBooleanTestTable over { Short1, Short2 } add { iLess(Short1, Short2) Boolean3 }' Script, ') <> ListShortShortBooleanTestTable then raise Error("iLess(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*441ID, */ row { System.String('System.iLess_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "" String1, "" String2, false Boolean3 }, row { "Alphora", "Alphora", false }, row { "Dataphor", "Alphora", false }, row { "Alphora", "Alphor", false }, row { "CASETEST", "casetest", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 < String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iLess(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*442ID, */ row { System.String('System.iLess_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Boolean" });' Table, 'insert table { row { Time(0,7,17) Time1, Time(0,7,17) Time2, false Boolean3 }, row { Time(23,7,17), Time(23,7,17), false }, row { Time(23,1,1), Time(22,1,1), false }, row { Time(23,7,17), Time(23,7,18), true } } into ListTimeTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeBooleanTestTable over { Time1, Time2 } add { Time1 < Time2 Boolean3 }' Script, ') <> ListTimeTimeBooleanTestTable then raise Error("iLess(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*443ID, */ row { System.String('System.iLess_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, false Boolean3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), true }, row { TimeSpan.Ticks(11), TimeSpan.Ticks(9), false }, row { TimeSpan.Ticks(12345), TimeSpan.Ticks(12345), false }, row { TimeSpan.Ticks(2550000000000), TimeSpan.Ticks(254000000000), false } } into ListTimeSpanTimeSpanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanBooleanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 < TimeSpan2 Boolean3 }' Script, ') <> ListTimeSpanTimeSpanBooleanTestTable then raise Error("iLess(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*444ID, */ row { System.String('System.iLess_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, VersionNumber(1,1,1,1) VersionNumber2, false Boolean3 }, row { VersionNumber(1,2,3,4), VersionNumber(1,2,3), false }, row { VersionNumber(2,1,1), VersionNumber(2,3,4), true } } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { iLess(VersionNumber1, VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.iLess(VersionNumber,VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*445ID, */ row { System.String('System.iLike_System_Name_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Name", "String", "Boolean"});' Table, 'insert table { row {"Stevenson" Name1, "%eve%" String2, true Boolean3 }, row { "True", "True", true }, row { "True", "_rue", true } } into ListNameStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameStringBooleanTestTable over { Name1, String2} add { iLike(Name1, String2) Boolean3 }' Script, ') <> ListNameStringBooleanTestTable then raise Error("iLike(Name, String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*446ID, */ row { System.String('System.iLike_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "" String1, "" String2, true Boolean3 }, row { "Alphora", "Al_hor_", true }, row { "Alphora", "Dataphor", false }, row { "Alphora", "Al%", true }, row { "Alphora", "Alphor__", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 like String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iLike(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*447ID, */ row { System.String('System.iMatches_System_Name__System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Name", "String", "Boolean"});' Table, 'insert table { row {"Stevenson" Name1, "eve" String2, true Boolean3 }, row { "True", "True", true }, row { "True", "true", false } } into ListNameStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameStringBooleanTestTable over { Name1 String2} add { iMatches(Name1, String2) Boolean3 }' Script, ') <> ListNameStringBooleanTestTable then raise Error("iMatches(Name, String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*448ID, */ row { System.String('System.iMatches_System_String__System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "String", "Boolean"});' Table, 'insert table { row {"Stevenson" Name1, "eve" String2, true Boolean3 }, row { "True", "True", true }, row { "True", "true", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringBooleanTestTable over { String1 String2} add { iMatches(String1, String2) Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iMatches(String, String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*449ID, */ row { System.String('System.iMod_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Byte" });' Table, 'insert table { row { 1 Byte1, 1 Byte2, 0 Byte3 }, row { 0, 37, 0 }, row { 34, 5, 4 }, row { 127, 2, 1 } } into ListByteByteByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteByteTestTable over { Byte1, Byte2 } add { Byte1 mod Byte2 Byte3 }' Script, ') <> ListByteByteByteTestTable then raise Error("iMod(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*450ID, */ row { System.String('System.iMod_System_Byte_System_Byte_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Byte" });' Table, 'insert table { row { 1 Byte1, 0 Byte2, 1 Byte3 } } into ListByteByteByteTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListByteByteByteTestTable over { Byte1, Byte2 } add { Byte1 mod Byte2 Byte3 };' Script, '", "iMod(Byte,Byte) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*451ID, */ row { System.String('System.iMod_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1.0 Decimal1, 1.0 Decimal2, 0.0 Decimal3 }, row { 0.0, 3.7, 0.0 }, row { 3.4, 0.5, 0.4 }, row { 1.27, 0.02, 0.01 } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 mod Decimal2 Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("iMod(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*452ID, */ row { System.String('System.iMod_System_Decimal_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1.0 Decimal1, 0.0 Decimal2, 1.0 Decimal3 } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 mod Decimal2 Decimal3 };' Script, '", "iMod(Decimal,Decimal) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*453ID, */ row { System.String('System.iMod_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 1 Integer1, 1 Integer2, 0 Integer3 }, row { 0, 37, 0 }, row { 34, 5, 4 }, row { 127, 2, 1 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 mod Integer2 Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("iMod(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*454ID, */ row { System.String('System.iMod_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 1 Integer1, 0 Integer2, 1 Integer3 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 mod Integer2 Integer3 };' Script, '", "iMod(Integer,Integer) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*455ID, */ row { System.String('System.iMod_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Long" });' Table, 'insert table { row { 1 Long1, 1 Long2, 0 Long3 }, row { 0, 37, 0 }, row { 34, 5, 4 }, row { 127, 2, 1 } } into ListLongLongLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { Long1 mod Long2 Long3 }' Script, ') <> ListLongLongLongTestTable then raise Error("iMod(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*456ID, */ row { System.String('System.iMod_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Long" });' Table, 'insert table { row { 1 Long1, 0 Long2, 1 Long3 } } into ListLongLongLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { Long1 mod Long2 Long3 };' Script, '", "iMod(Long,Long) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*457ID, */ row { System.String('System.iMod_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Short" });' Table, 'insert table { row { 1 Short1, 1 Short2, 0 Short3 }, row { 0, 37, 0 }, row { 34, 5, 4 }, row { 127, 2, 1 } } into ListShortShortShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { Short1 mod Short2 Short3 }' Script, ') <> ListShortShortShortTestTable then raise Error("iMod(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*458ID, */ row { System.String('System.iMod_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Short" });' Table, 'insert table { row { 1 Short1, 0 Short2, 1 Short3 } } into ListShortShortShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { Short1 mod Short2 Short3 };' Script, '", "iMod(Short,Short) failed to throw on divide by zero.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*459ID, */ row { System.String('System.iMultiplication_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Byte" });' Table, 'insert table { row { 1 Byte1, 1 Byte2, 1 Byte3 }, row { 0, 37, 0 }, row { 12, 12, 144 }, row { 127, 2, 254 } } into ListByteByteByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteByteTestTable over { Byte1, Byte2 } add { Byte1 * Byte2 Byte3 }' Script, ') <> ListByteByteByteTestTable then raise Error("iMultiplication(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*460ID, */ row { System.String('System.iMultiplication_System_Byte_System_Byte_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Byte" });' Table, 'insert table { row { 128 Byte1, 2 Byte2, 128 Byte3 } } into ListByteByteByteTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListByteByteByteTestTable over { Byte1, Byte2 } add { Byte1 * Byte2 Byte3 };' Script, '", "iMultiplication(Byte,Byte) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*461ID, */ row { System.String('System.iMultiplication_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1d Decimal1, 1d Decimal2, 1d Decimal3 }, row { 0d, 37.45d, 0d }, row { 1.2d, 1.2d, 1.44d }, row { 3.14d, 2.72d, 8.5408d }, row { 1e18d, 10d, 1e19d } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 * Decimal2 Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("iMultiplication(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*462ID, */ row { System.String('System.iMultiplication_System_Decimal_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Money", "Money" });' Table, 'insert table { row { 1d Decimal1, $1 Money2, $1 Money3 }, row { 0d, $37.45, $0 }, row { 1.2d, $1.2, $1.44 }, row { 3.14d, $2.72, $8.5408 }, row { 10000000d, $10, $100000000 } } into ListDecimalMoneyMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalMoneyMoneyTestTable over { Decimal1, Money2 } add { Decimal1 * Money2 Money3 }' Script, ') <> ListDecimalMoneyMoneyTestTable then raise Error("iMultiplication(Decimal,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*463ID, */ row { System.String('System.iMultiplication_System_Decimal_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "TimeSpan", "TimeSpan" });' Table, 'insert table { row { 1.0 Decimal1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(1) TimeSpan3 }, row { 0, TimeSpan.Ticks(456128), TimeSpan.Ticks(0) }, row { 1.2, TimeSpan.Ticks(15), TimeSpan.Ticks(18) }, row { 31.4, TimeSpan.Ticks(5), TimeSpan.Ticks(157) } } into ListDecimalTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalTimeSpanTimeSpanTestTable over { Decimal1, TimeSpan2 } add { Decimal1 * TimeSpan2 TimeSpan3 }' Script, ') <> ListDecimalTimeSpanTimeSpanTestTable then raise Error("iMultiplication(Decimal,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*464ID, */ row { System.String('System.iMultiplication_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1 Integer3 }, row { 0, 37, 0 }, row { 12, 12, 144 }, row { 127, 2, 254 }, row { 16384, 2, 32768 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 * Integer2 Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("iMultiplication(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*465ID, */ row { System.String('System.iMultiplication_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 1073741824 Integer1, 2 Integer2, 2147483647 Integer3 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 * Integer2 Integer3 };' Script, '", "iMultiplication(Integer,Integer) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*466ID, */ row { System.String('System.iMultiplication_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { -1073741825 Integer1, 2 Integer2, -2147483648 Integer3 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 * Integer2 Integer3 };' Script, '", "iMultiplication(Integer,Integer) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*467ID, */ row { System.String('System.iMultiplication_System_Integer_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Money", "Money" });' Table, 'insert table { row { $1 Money2, 1 Integer1, $1 Money3 }, row { $0, 37, $0 }, row { $1.2, 12, $14.4 }, row { $3.14, 4, $12.56 } } into ListIntegerMoneyMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerMoneyMoneyTestTable over { Money2, Integer1 } add { Integer1 * Money2 Money3 }' Script, ') <> ListIntegerMoneyMoneyTestTable then raise Error("iMultiplication(Integer,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*468ID, */ row { System.String('System.iMultiplication_System_Integer_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "TimeSpan", "TimeSpan" });' Table, 'insert table { row { 1 Integer1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(1) TimeSpan3 }, row { 0, TimeSpan.Ticks(456128), TimeSpan.Ticks(0) }, row { 12, TimeSpan.Ticks(12), TimeSpan.Ticks(144) }, row { 314, TimeSpan.Ticks(4), TimeSpan.Ticks(1256) } } into ListIntegerTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTimeSpanTimeSpanTestTable over { Integer1, TimeSpan2 } add { Integer1 * TimeSpan2 TimeSpan3 }' Script, ') <> ListIntegerTimeSpanTimeSpanTestTable then raise Error("iMultiplication(Integer,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*469ID, */ row { System.String('System.iMultiplication_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Long" });' Table, 'insert table { row { Long(1) Long1, Long(1) Long2, Long(1) Long3 }, row { 0, 37, 0 }, row { 12, 12, 144 }, row { 127, 2, 254 }, row { 1073741824, 2, 2147483648 } } into ListLongLongLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { Long1 * Long2 Long3 }' Script, ') <> ListLongLongLongTestTable then raise Error("iMultiplication(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*470ID, */ row { System.String('System.iMultiplication_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Long" });' Table, 'insert table { row { 4611686018427387904 Long1, 2 Long2, 9223372036854775807 Long3 } } into ListLongLongLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { Long1 * Long2 Long3 };' Script, '", "iMultiplication(Long,Long) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*471ID, */ row { System.String('System.iMultiplication_System_Long_System_Long_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Long" });' Table, 'insert table { row { -4611686018427387905 Long1, 2 Long2, -9223372036854775807 - 1 Long3 } } into ListLongLongLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { Long1 * Long2 Long3 };' Script, '", "iMultiplication(Long,Long) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*472ID, */ row { System.String('System.iMultiplication_System_Money_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Decimal", "Money" });' Table, 'insert table { row { 1d Decimal2, $1 Money1, $1 Money3 }, row { 0d, $37.45, $0 }, row { 1.2d, $1.2, $1.44 }, row { 3.14d, $2.72, $8.5408 }, row { 10000000d, $10, $100000000 } } into ListMoneyDecimalMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyDecimalMoneyTestTable over { Decimal2, Money1 } add { Money1 * Decimal2 Money3 }' Script, ') <> ListMoneyDecimalMoneyTestTable then raise Error("iMultiplication(Money,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*473ID, */ row { System.String('System.iMultiplication_System_Money_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Integer", "Money" });' Table, 'insert table { row { $1 Money1, 1 Integer2, $1 Money3 }, row { $0, 37, $0 }, row { $1.2, 12, $14.4 }, row { $3.14, 4, $12.56 } } into ListMoneyIntegerMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyIntegerMoneyTestTable over { Money1, Integer2 } add { Money1 * Integer2 Money3 }' Script, ') <> ListMoneyIntegerMoneyTestTable then raise Error("iMultiplication(Money,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*474ID, */ row { System.String('System.iMultiplication_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Short" });' Table, 'insert table { row { 1 Short1, 1 Short2, 1 Short3 }, row { 0, 37, 0 }, row { 12, 12, 144 }, row { 127, 2, 254 }, row { 128, 2, 256 } } into ListShortShortShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { Short1 * Short2 Short3 }' Script, ') <> ListShortShortShortTestTable then raise Error("iMultiplication(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*475ID, */ row { System.String('System.iMultiplication_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Short" });' Table, 'insert table { row { 16384 Short1, 2 Short2, 32767 Short3 } } into ListShortShortShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { Short1 * Short2 Short3 };' Script, '", "iMultiplication(Short,Short) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*476ID, */ row { System.String('System.iMultiplication_System_Short_System_Short_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Short" });' Table, 'insert table { row { -16385 Short1, 2 Short2, -32768 Short3 } } into ListShortShortShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { Short1 * Short2 Short3 };' Script, '", "iMultiplication(Short,Short) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*477ID, */ row { System.String('System.iMultiplication_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { 1.0 Decimal2, TimeSpan.Ticks(1) TimeSpan1, TimeSpan.Ticks(1) TimeSpan3 }, row { 0, TimeSpan.Ticks(456128), TimeSpan.Ticks(0) }, row { 1.2, TimeSpan.Ticks(15), TimeSpan.Ticks(18) }, row { 31.4, TimeSpan.Ticks(10), TimeSpan.Ticks(314) } } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { Decimal2, TimeSpan1 } add { TimeSpan1 * Decimal2 TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("iMultiplication(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*478ID, */ row { System.String('System.iMultiplication_System_TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { 1 Integer2, TimeSpan.Ticks(1) TimeSpan1, TimeSpan.Ticks(1) TimeSpan3 }, row { 0, TimeSpan.Ticks(456128), TimeSpan.Ticks(0) }, row { 12, TimeSpan.Ticks(12), TimeSpan.Ticks(144) }, row { 314, TimeSpan.Ticks(4), TimeSpan.Ticks(1256) } } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { Integer2, TimeSpan1 } add { TimeSpan1 * Integer2 TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("iMultiplication(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*479ID, */ row { System.String('System.IndexOf_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Integer" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, 0 Integer3 }, row { "Alphora", "Dataphor", -1 }, row { "Alphora", "ora", 4 } } into ListStringStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringIntegerTestTable over { String1, String2 } add { IndexOf(String1, String2) Integer3 }' Script, ') <> ListStringStringIntegerTestTable then raise Error("System.IndexOf(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*480ID, */ row { System.String('System.iNegate_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { ToDecimal(1) Decimal1, ToDecimal(1) Decimal2, ToDecimal(-1) Decimal3 }, row { 0, 0, 0 }, row { 1.2, 1.2, -1.2 }, row { -1, -1, 1 }, row { -92233720368.54775807, -92233720368.54775807, 92233720368.54775807 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { -Decimal2 Decimal3 }' Script, ') <> TripleDecimalTestTable then raise Error("iNegate(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*481ID, */ row { System.String('System.iNegate_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 1 Integer1, 1 Integer2, -1 Integer3 }, row { 0, 0, 0 }, row { 12, 12, -12 }, row { -1, -1, 1 }, row { 2147483647, 2147483647, -2147483647 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { -Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iNegate(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*482ID, */ row { System.String('System.iNegate_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { -2147483648 Integer1, -2147483648 Integer2, -2147483648 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { -Integer2 Integer3 };' Script, '", "iNegate(Integer) failed to throw on negating the minimum Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*483ID, */ row { System.String('System.iNegate_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { ToLong(1) Long1, ToLong(1) Long2, ToLong(-1) Long3 }, row { 0, 0, 0 }, row { 12, 12, -12 }, row { -1, -1, 1 }, row { -9223372036854775807, -9223372036854775807, 9223372036854775807 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { -Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iNegate(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*484ID, */ row { System.String('System.iNegate_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { -9223372036854775807 - 1 Long1, -9223372036854775807 - 1 Long2, -9223372036854775807 - 1 Long3 } } into TripleLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { -Long2 Long3 };' Script, '", "iNegate(Long) failed to throw on negating the minimum Long.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*485ID, */ row { System.String('System.iNegate_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $1 Money1, $1 Money2, -$1 Money3 }, row { $0, $0, $0 }, row { $1.2, $1.2, -$1.2 }, row { -$1, -$1, $1 }, row { -$92233720368.54775807, -$92233720368.54775807, $92233720368.54775807 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleMoneyTestTable over { Money1, Money2 } add { -Money2 Money3 }' Script, ') <> TripleMoneyTestTable then raise Error("iNegate(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*486ID, */ row { System.String('System.iNegate_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 1 Short1, 1 Short2, -1 Short3 }, row { 0, 0, 0 }, row { 12, 12, -12 }, row { -1, -1, 1 }, row { -32767, -32767, 32767 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { -Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iNegate(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*487ID, */ row { System.String('System.iNegate_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { -32768 Short1, -32768 Short2, -32768 Short3 } } into TripleShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { -Short2 Short3 };' Script, '", "iNegate(Short) failed to throw on negating the minimum Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*488ID, */ row { System.String('System.iNegate_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(1) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(-1) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(0), TimeSpan.Ticks(0) }, row { TimeSpan.Ticks(12), TimeSpan.Ticks(12), TimeSpan.Ticks(-12) }, row { TimeSpan.Ticks(-1), TimeSpan.Ticks(-1), TimeSpan.Ticks(1) }, row { TimeSpan.Ticks(-9223372036854775807), TimeSpan.Ticks(-9223372036854775807), TimeSpan.Ticks(9223372036854775807) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleTimeSpanTestTable over { TimeSpan1, TimeSpan2 } add { -TimeSpan2 TimeSpan3 }' Script, ') <> TripleTimeSpanTestTable then raise Error("iNegate(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*489ID, */ row { System.String('System.iNegate_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(-9223372036854775807 - 1) TimeSpan1, TimeSpan.Ticks(-9223372036854775807 - 1) TimeSpan2, TimeSpan.Ticks(-9223372036854775807 - 1) TimeSpan3 } } into TripleTimeSpanTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleTimeSpanTestTable over { TimeSpan1, TimeSpan2 } add { -TimeSpan2 TimeSpan3 };' Script, '", "iNegate(TimeSpan) failed to throw on negating the minimum TimeSpan.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*490ID, */ row { System.String('System.iNot_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { false Boolean1, false Boolean2, true Boolean3 }, row { true, true, false } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { not Boolean1 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iNot(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*491ID, */ row { System.String('System.iNotEqual_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean", "Boolean" });' Table, 'insert table { row { true Boolean1, true Boolean2, false Boolean3 }, row { true, false, true }, row { false, true, true }, row { false, false, false } } into ListBooleanBooleanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListBooleanBooleanBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 <> Boolean2 Boolean3 }' Script, ') <> ListBooleanBooleanBooleanTestTable then raise Error("iNotEqual(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*492ID, */ row { System.String('System.iNotEqual_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Byte", "Boolean" });' Table, 'insert table { row { 0 Byte1, 0 Byte2, false Boolean3 }, row { 1, 255, true }, row { 23, 24, true }, row { 45, 45, false } } into ListByteByteBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteByteBooleanTestTable over { Byte1, Byte2 } add { Byte1 <> Byte2 Boolean3 }' Script, ') <> ListByteByteBooleanTestTable then raise Error("iNotEqual(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*493ID, */ row { System.String('System.iNotEqual_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Date", "Boolean" });' Table, 'insert table { row { Date(2003,10,6) Date1, Date(2003,10,6) Date2, false Boolean3 }, row { Date(2003,6,10), Date(2003,10,6), true }, row { Date(2003,10,6), Date(2003,10,16), true }, row { Date(2001,10,6), Date(2003,10,6), true }, row { Date(2000,10,3), Date(2000,10,3), false } } into ListDateDateBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateDateBooleanTestTable over { Date1, Date2 } add { Date1 <> Date2 Boolean3 }' Script, ') <> ListDateDateBooleanTestTable then raise Error("iNotEqual(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*494ID, */ row { System.String('System.iNotEqual_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2003,10,6) DateTime1, DateTime(2003,10,6) DateTime2, false Boolean3 }, row { DateTime(2003,6,10), DateTime(2003,10,6), true }, row { DateTime(2003,10,6,13,0,0), DateTime(2003,10,6), true }, row { DateTime(2001,10,6), DateTime(2003,10,6), true }, row { DateTime(2000,10,3), DateTime(2000,10,3), false } } into ListDateTimeDateTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeBooleanTestTable over { DateTime1, DateTime2 } add { DateTime1 <> DateTime2 Boolean3 }' Script, ') <> ListDateTimeDateTimeBooleanTestTable then raise Error("iNotEqual(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*495ID, */ row { System.String('System.iNotEqual_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Boolean" });' Table, 'insert table { row { 0d Decimal1, 0d Decimal2, false Boolean3 }, row { 1d, 255d, true }, row { 23d, 2.3d, true }, row { 4.5d, 4.5d, false }, row { -34d, 34d, true } } into ListDecimalDecimalBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalBooleanTestTable over { Decimal1, Decimal2 } add { Decimal1 <> Decimal2 Boolean3 }' Script, ') <> ListDecimalDecimalBooleanTestTable then raise Error("iNotEqual(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*496ID, */ row { System.String('System.iNotEqual_System_Guid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Guid", "Boolean" });' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid1, Guid("12345678-90ab-cdef-abcd-0123456789ab") Guid2, false Boolean3 }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ad"), true }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-0123456789ac"), true }, row { Guid("12345678-90ab-cdef-abcd-0123456789ab"), Guid("12345678-90ab-cdef-abcd-123456789ab0"), true } } into ListGuidGuidBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidGuidBooleanTestTable over { Guid1, Guid2 } add { Guid1 <> Guid2 Boolean3 }' Script, ') <> ListGuidGuidBooleanTestTable then raise Error("iNotEqual(Guid,Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*497ID, */ row { System.String('System.iNotEqual_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, false Boolean3 }, row { 1, 255, true }, row { 23, 24, true }, row { 45, 45, false }, row { -34, 34, true } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { Integer1 <> Integer2 Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("iNotEqual(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*498ID, */ row { System.String('System.iNotEqual_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Boolean" });' Table, 'insert table { row { 0 Long1, 0 Long2, false Boolean3 }, row { 1, 255, true }, row { 23, 24, true }, row { 45, 45, false }, row { -34, 34, true } } into ListLongLongBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongBooleanTestTable over { Long1, Long2 } add { Long1 <> Long2 Boolean3 }' Script, ') <> ListLongLongBooleanTestTable then raise Error("iNotEqual(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*499ID, */ row { System.String('System.iNotEqual_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Money", "Boolean" });' Table, 'insert table { row { $0 Money1, $0 Money2, false Boolean3 }, row { $1, $255, true }, row { $23, $2.3, true }, row { $4.5, $4.5, false }, row { -$34, $34, true } } into ListMoneyMoneyBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyMoneyBooleanTestTable over { Money1, Money2 } add { Money1 <> Money2 Boolean3 }' Script, ') <> ListMoneyMoneyBooleanTestTable then raise Error("iNotEqual(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*500ID, */ row { System.String('System.iNotEqual_System_Name_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Boolean" });' Table, 'insert table { row { Name("Empire") Name1, Name("Empire") Name2, false Boolean3 }, row { Name("Rebellion"), Name("Empire"), true }, row { Name("File"), Name("Test"), true } } into ListNameNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameBooleanTestTable over { Name1, Name2 } add { iNotEqual(Name1,Name2) Boolean3 }' Script, ') <> ListNameNameBooleanTestTable then raise Error("System.iNotEqual(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*501ID, */ row { System.String('System.iNotEqual_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Boolean" });' Table, 'insert table { row { 0 Short1, 0 Short2, false Boolean3 }, row { 1, 255, true }, row { 23, 24, true }, row { 45, 45, false }, row { -34, 34, true } } into ListShortShortBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortBooleanTestTable over { Short1, Short2 } add { Short1 <> Short2 Boolean3 }' Script, ') <> ListShortShortBooleanTestTable then raise Error("iNotEqual(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*502ID, */ row { System.String('System.iNotEqual_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, false Boolean3 }, row { "Dataphor", "Dataphoria", true }, row { "Dataphor", "Alphora", true }, row { "Softwise", "Alphora", true }, row { "Dataphor", "Dataphor", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { String1 <> String2 Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("iNotEqual(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*503ID, */ row { System.String('System.iNotEqual_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "Boolean" });' Table, 'insert table { row { Time(23,10,6) Time1, Time(23,10,6) Time2, false Boolean3 }, row { Time(23,6,10), Time(23,10,6), true }, row { Time(13,0,0), Time(0,0,0), true }, row { Time(21,10,6), Time(23,10,6), true }, row { Time(20,10,3), Time(20,10,3), false } } into ListTimeTimeBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeBooleanTestTable over { Time1, Time2 } add { Time1 <> Time2 Boolean3 }' Script, ') <> ListTimeTimeBooleanTestTable then raise Error("iNotEqual(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*504ID, */ row { System.String('System.iNotEqual_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, false Boolean3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(255), true }, row { TimeSpan.Ticks(23), TimeSpan.Ticks(2), true }, row { TimeSpan.Ticks(1048576), TimeSpan.Ticks(1048576), false }, row { TimeSpan.Ticks(34), TimeSpan.Ticks(384), true } } into ListTimeSpanTimeSpanBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanTimeSpanBooleanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 <> TimeSpan2 Boolean3 }' Script, ') <> ListTimeSpanTimeSpanBooleanTestTable then raise Error("iNotEqual(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*505ID, */ row { System.String('System.iNotEqual_System_VersionNumber_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, VersionNumber(1,1,1,1) VersionNumber2, false Boolean3 }, row { VersionNumber(2,1,3,2), VersionNumber(1,2,3,4), true }, row { VersionNumber(1,2), VersionNumber(2,1), true } } into ListVersionNumberVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberBooleanTestTable over { VersionNumber1, VersionNumber2 } add { iNotEqual(VersionNumber1,VersionNumber2) Boolean3 }' Script, ') <> ListVersionNumberVersionNumberBooleanTestTable then raise Error("System.iNotEqual(VersionNumber,VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*506ID, */ row { System.String('System.Insert_System_String_System_Integer_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String", "String" });' Table, 'insert table { row { "him" String1, 2 Integer2, "her" String3, "hiherm" String4 }, row { "Alphora", 2, "Data", "AlDataphora" }, row { "Alphora", 6, "Rocks", "AlphorRocksa" }, row { "Alphora", 2, "e", "Alephora"  } } into ListStringIntegerStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringStringTestTable over { String1, Integer2, String3 } add { System.Insert(String1, Integer2, String3) String4 }' Script, ') <> ListStringIntegerStringStringTestTable then raise Error("System.Insert(String,Integer,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*507ID, */ row { System.String('System.Insert_System_String_System_Integer_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String", "String" });' Table, 'insert table { row { "Alphora" String1, 8 Integer2, "" String3, "Alphora" String4 } } into ListStringIntegerStringStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringIntegerStringStringTestTable over { String1, Integer2, String3 } add { System.Insert(String1, Integer2, String3) String4 };' Script, '", "System.Insert(String,Integer,String) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*508ID, */ row { System.String('System.Integer') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 37 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 37 then raise Error("System.Integer normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*509ID, */ row { System.String('System.Integer') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 42 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 42 then raise Error("System.Integer normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*510ID, */ row { System.String('System.Integer') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 128 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 128 then raise Error("System.Integer normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*511ID, */ row { System.String('System.Integer') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 0 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 0 then raise Error("System.Integer normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*512ID, */ row { System.String('System.Integer') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 1 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 1 then raise Error("System.Integer normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*513ID, */ row { System.String('System.Integer') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -1 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> -1 then raise Error("System.Integer normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*514ID, */ row { System.String('System.Integer') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -2147483648 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> -2147483648 then raise Error("System.Integer boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*515ID, */ row { System.String('System.Integer') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -2147483647 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> -2147483647 then raise Error("System.Integer boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*516ID, */ row { System.String('System.Integer') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 2147483647 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 2147483647 then raise Error("System.Integer boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*517ID, */ row { System.String('System.Integer') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 2147483646 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, '' BeforeScript, 'if (Integer1 from row from ListIntegerTestTable) <> 2147483646 then raise Error("System.Integer boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*518ID, */ row { System.String('System.Integer') Name, 120 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -2147483650 Integer1 } } into ListIntegerTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*519ID, */ row { System.String('System.Integer') Name, 121 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -2147483649 Integer1 } } into ListIntegerTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*520ID, */ row { System.String('System.Integer') Name, 122 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 2147483649 Integer1 } } into ListIntegerTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*521ID, */ row { System.String('System.Integer') Name, 123 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 2147483648 Integer1 } } into ListIntegerTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*522ID, */ row { System.String('System.Integer') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { 5 Integer1 } } into ListIntegerTestTable; NegativeTest("insert table { row { 5 Integer1 } } into ListIntegerTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { 42 Integer1 } } into ListIntegerTestTable; NegativeTest("insert table { row { 42 Integer1 } } into ListIntegerTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*523ID, */ row { System.String('System.Integer') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Integer1 : Integer, Integer2 : Integer, key { Integer1 }, order { Integer2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Integer1, 42 Integer2 }, row { 116 Integer1, 255 Integer2 }, row { 117 Integer1, 254 Integer2 }, row { 188 Integer1, 42 Integer2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Integer2 asc }", "DeviceOrder order by { Integer2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*524ID, */ row { System.String('System.Integer') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Integer1 : Integer, Integer2 : Integer, key { Integer1 }, order { Integer2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Integer1, 42 Integer2 }, row { 116 Integer1, 255 Integer2 }, row { 117 Integer1, 254 Integer2 }, row { 188 Integer1, 42 Integer2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Integer2 desc }", "DeviceOrder order by { Integer2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*525ID, */ row { System.String('System.Integer.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer" });' Table, 'insert table { row { "255" String1, 255 Integer2 }, row { "2147483647", 2147483647 }, row { "1", 1 } } into ListStringIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerTestTable over { String1 } add { Integer.AsString(String1) Integer2 }' Script, ') <> ListStringIntegerTestTable then raise Error("System.Integer.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*526ID, */ row { System.String('System.Integer.ReadAsString_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "String", "String" });' Table, 'insert table { row { 2147483647 Integer1, "0" String2, "2147483647" String3 }, row { 156, "Test", "156" }, row { 255, "0", "255"} } into ListIntegerStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerStringStringTestTable over { Integer1, String2 } add { ReadAsString(Integer1) String3 }' Script, ') <> ListIntegerStringStringTestTable then raise Error("System.Integer.ReadAsString(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*527ID, */ row { System.String('System.Integer.ReadValue_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer" });' Table, 'insert table { row {  100 Integer1,  100 Integer2 }, row { 0, 0 }, row { 2147483647, 2147483647 } } into ListIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerTestTable over { Integer1 } add { ReadValue(Integer1) Integer2 }' Script, ') <> ListIntegerIntegerTestTable then raise Error("System.Integer.ReadValue(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*528ID, */ row { System.String('System.Integer.WriteAsString_System_Integer_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "String", "Integer" });' Table, 'insert table { row { 98 Integer1, "2147483647" String2, 2147483647 Integer3 }, row { 1, "245", 245 }, row { 255, "1", 1} } into ListIntegerStringIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerStringIntegerTestTable over { Integer1, String2 } add { WriteAsString(Integer1, String2) Integer3 }' Script, ') <> ListIntegerStringIntegerTestTable then raise Error("System.Integer.WriteAsString(Integer,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*529ID, */ row { System.String('System.Integer.WriteValue_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 98 Integer1, 2147483647 Integer2, 2147483647 Integer3 }, row { 100, 255, 255 }, row { 1,65, 65} } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { WriteValue(Integer1, Integer2) Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("System.Integer.WriteValue(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*530ID, */ row { System.String('System.Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Integer", "Integer"});' Table, 'insert table { row { 128 Integer1, 255 Integer2, 128 Integer3 }, row { 2147483647, 64, 2147483647 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer(Integer1) Integer3}' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("System.Integer(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*531ID, */ row { System.String('System.iOr_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { false Boolean1, false Boolean2, false Boolean3 }, row { false, true, true }, row { true, false, true }, row { true, true, true } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleBooleanTestTable over { Boolean1, Boolean2 } add { Boolean1 or Boolean2 Boolean3 }' Script, ') <> TripleBooleanTestTable then raise Error("iOr(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*532ID, */ row { System.String('System.iOrder_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 10 Integer2, 0 Integer3 }, row { -1, 9, 1 }, row { -6, 4, 6 }, row { -7, 3, 7}, row { -8, 2, 8}, row { -12355, 78343, 314169}, row { -2, 8, 2 }, row { -5, 5, 5 }, row { -3, 7, 3 }, row { -4, 6, 4 } } into TripleNullIntegerTestTable;' InsertTableStatement, '/*' BeforeScript, 'TripleNullIntegerTestTable order by Integer3;' Script, '*/ begin var LString1 : String := "begin var LCursor : cursor (typeof(TripleNullIntegerTestTable)); var LInteger : Integer := "; var LString2 : String := "; LCursor := cursor(TripleNullIntegerTestTable order by {"; var LString3 : String := "sc} ); while (LCursor.Next()) do begin var LTempInteger : Integer := "; var LString4 : String := " from LCursor.Select(); if LTempInteger "; var LString5 : String := " LInteger then raise Error(""iOrder(table) failed.""); LInteger := LTempInteger; end; end;"; for LDirection : Integer := 1 to 2 do begin var LNumber : String := "-2147483648"; var LOrder : String := "a"; var LComparer : String := "<"; if LDirection = 2 then begin LNumber := "2147483647"; LOrder := "de"; LComparer := ">"; end; for LCount : Integer := 1 to 3 do begin var LColumn : String := "Integer" + LCount.ToString();var LExecute : String := LString1 + LNumber + LString2 + LColumn + " " + LOrder + LString3 + LColumn + LString4 + LComparer + LString5; Execute(LExecute); end; end; end;' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*533ID, */ row { System.String('System.iPower_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 1 Byte1, 1 Byte2, 1 Byte3 }, row { 57, 0, 1 }, row { 3, 4, 81 }, row { 1, 55, 1 } } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 ** Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iPower(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*534ID, */ row { System.String('System.iPower_System_Byte_System_Byte_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 2 Byte1, 8 Byte2, 255 Byte3 } } into TripleByteTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 ** Byte2 Byte3 };' Script, '", "iPower(Byte,Byte) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*535ID, */ row { System.String('System.iPower_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 1d Decimal1, 1d Decimal2, 1d Decimal3 }, row { 57d, 0d, 1d }, row { -3d, 4d, 81d }, row { -1d, 55d, -1d }, row { 2.25d, 1.5d, 3.375d } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 ** Decimal2 Decimal3 }' Script, ') <> TripleDecimalTestTable then raise Error("iPower(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*536ID, */ row { System.String('System.iPower_System_Decimal_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 2 Decimal1, 96 Decimal2, 0 Decimal3 } } into TripleDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 ** Decimal2 Decimal3 };' Script, '", "iPower(Decimal,Decimal) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*537ID, */ row { System.String('System.iPower_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1 Integer3 }, row { 57, 0, 1 }, row { -3, 4, 81 }, row { -1, 55, -1 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 ** Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iPower(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*538ID, */ row { System.String('System.iPower_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 2 Integer1, 31 Integer2, 0 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 ** Integer2 Integer3 };' Script, '", "iPower(Integer,Integer) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*539ID, */ row { System.String('System.iPower_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 1 Long1, 1 Long2, 1 Long3 }, row { 57, 0, 1 }, row { -3, 4, 81 }, row { -1, 55, -1 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 ** Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iPower(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*540ID, */ row { System.String('System.iPower_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 2 Long1, 63 Long2, 0 Long3 } } into TripleLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 ** Long2 Long3 };' Script, '", "iPower(Long,Long) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*541ID, */ row { System.String('System.iPower_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 1 Short1, 1 Short2, 1 Short3 }, row { 57, 0, 1 }, row { -3, 4, 81 }, row { -1, 55, -1 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 ** Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iPower(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*542ID, */ row { System.String('System.iPower_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 2 Short1, 15 Short2, 32767 Short3 } } into TripleShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 ** Short2 Short3 };' Script, '", "iPower(Short,Short) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*543ID, */ row { System.String('System.iProject_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1 Integer3 }, row { 0, 0, 0 }, row { 1, 2, 3 }, row { 6, 76, 2345 }, row { 0, -1, -2 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if ((' BeforeScript, 'TripleNullIntegerTestTable over { Integer1, Integer2, Integer3 }' Script, ') <> TripleNullIntegerTestTable) or ((TripleNullIntegerTestTable over { Integer1 }) <> table { row { 0 Integer1 }, row { 1 }, row { 6 } }) or ((TripleNullIntegerTestTable over { Integer2 }) <> table { row { -1 Integer2 }, row { 0 }, row { 1 }, row { 2 }, row { 76 } }) or (TripleNullIntegerTestTable over {}) <> table { row { } } then raise Error("iProject(table) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*544ID, */ row { System.String('System.iRedefine_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"}, true);' Table, 'insert table { row { 0 Integer1 }, row { 1 }, row { 3 }, row { 4 } } into ListIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTestTable redefine { Integer1 := Integer1 * 2 }' Script, ') <> table { row { 0 Integer1 }, row { 2 }, row { 6 }, row { 8 } } then raise Error("iRedefine(table) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*545ID, */ row { System.String('System.iRemove_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 1 Integer1, 1 Integer2, 1 Integer3 }, row { 0, 0, 0 }, row { 1, 2, 3 }, row { 6, 76, 2345 }, row { 0, -1, -2 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if ((' BeforeScript, 'TripleNullIntegerTestTable remove { }' Script, ') <> TripleNullIntegerTestTable) or ((TripleNullIntegerTestTable remove { Integer2, Integer3 }) <> table { row { 0 Integer1 }, row { 1 }, row { 6 } }) or ((TripleNullIntegerTestTable remove { Integer1, Integer3 }) <> table { row { -1 Integer2 }, row { 0 }, row { 1 }, row { 2 }, row { 76 } }) or (TripleNullIntegerTestTable remove { Integer1, Integer2, Integer3 }) <> table { row { } } then raise Error("iProject(table) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*546ID, */ row { System.String('System.iRename_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "String", "Decimal"}, true);' Table, 'insert table { row { 0 Integer1, "" String2, 0.0 Decimal3 } } into ListIntegerStringDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerStringDecimalTestTable rename { Integer1 IntegerNumber1, String2 StringNumber2, Decimal3 DecimalNumber3 }' Script, ') <> table { row { 0 IntegerNumber1, "" StringNumber2, 0.0 DecimalNumber3 } } then raise Error("iRename(table) failed."); NegativeTest("ListIntegerStringDecimalTable rename { Integer1 String2 };", "iRename(table) failed to throw on renaming to existing column.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*547ID, */ row { System.String('System.iRestrict_table_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"}, true);' Table, 'insert table { row { 1 Integer1 }, row { 2 }, row { 5 }, row { -6 }, row { 6 }, row { 12 }, row { 18 }, row { 24 } } into ListIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTestTable where Integer1 > 5' Script, ') <> table { row { 6 Integer1 }, row { 12 }, row { 18 }, row { 24 } } then raise Error("iRestrict(table,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*548ID, */ row { System.String('System.iRetrieve__') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -1 Integer1 }, row { 1 }, row { 0 }, row { 3141 } } into ListIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTestTable' Script, ') <> table { row { -1 Integer1 }, row { 1 }, row { 0 }, row { 3141 } } then raise Error ("iRetrieve() failed."); NegativeTest("ThereIsNotReallyATableByThisName;", "iRetrieve() failed to throw on lack of actual table.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*549ID, */ row { System.String('System.iRightJoin_table_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Integer", "String", "Integer"}, true);CreateListTable({"Integer", "Decimal", "Integer"}, true);' Table, 'insert table { row { 0 Integer1 , "good" String2, 0 Integer3 }, row { 1, "good", 2 }, row { 1, "bad", 0 }, row { 3, "bad", 3 }, row { 1, "also good", 2 } } into ListIntegerStringIntegerTestTable; insert table { row { 0 Integer1 , 0.0 Decimal2, 0 Integer3 }, row { 1, 1.1, 2 }, row { 0, 2.2, 2 }, row { 6, 3.3, 6 }, row { 1, 4.4, 2 } } into ListIntegerDecimalIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerDecimalIntegerTestTable right join ListIntegerStringIntegerTestTable include rowexists' Script, ') <> table { row { 0 Integer1, 0 Integer3, "good" String2, 0.0 Decimal2, true rowexists }, row { 1, 2, "good", 1.1, true }, row { 1, 2, "good", 4.4, true }, row { 1, 2, "also good", 1.1, true }, row { 1, 2, "also good", 4.4, true }, row { 1, 0, "bad", nil as Decimal, false }, row { 3, 3, "bad", nil as Decimal, false } } then raise Error("Natural iRightJoin(table,table) failed.");' AfterScript, 'DropListTable({"Integer", "String", "Integer"}, true);DropListTable({"Integer", "Decimal", "Integer"}, true);' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*550ID, */ row { System.String('System.iRightJoin_table_table_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"String", "String", "Integer"}, true);CreateListTable({"Integer", "Decimal", "Decimal"}, true);' Table, 'insert table { row { "good" String1 , "good" String2, 0 Integer3 }, row { "good", "good", 2 }, row { "bad", "bad", 1 }, row { "bad", "bad", 3 }, row { "also good", "also good", 2 } } into ListStringStringIntegerTestTable; insert table { row { 0 Integer1 , 0.0 Decimal2, 0.0 Decimal3 }, row { 4, 1.1, 1.1 }, row { 2, 2.2, 2.2 }, row { 6, 3.3, 3.3 }, row { 2, 4.4, 4.4 } } into ListIntegerDecimalDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerDecimalDecimalTestTable right join ListStringStringIntegerTestTable by Integer1 = Integer3 include rowexists' Script, ') <> table { row { 0 Integer1, 0 Integer3, "good" String1, "good" String2, 0.0 Decimal2, 0.0 Decimal3, true rowexists }, row { 2, 2, "good", "good", 4.4, 4.4, true }, row { 2, 2, "also good", "also good", 4.4, 4.4, true }, row { 2, 2, "good", "good", 2.2, 2.2, true }, row { 2, 2, "also good", "also good", 2.2, 2.2, true }, row { 1, 1, "bad", "bad", nil as Decimal, nil as Decimal, false }, row { 3, 3, "bad", "bad", nil as Decimal, nil as Decimal, false } } then raise Error("Specified iRightJoin(table,table) failed.");' AfterScript, 'DropListTable({"String", "String", "Integer"}, true);DropListTable({"Integer", "Decimal", "Decimal"}, true);' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*551ID, */ row { System.String('System.IsDigit_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Integer", "Boolean"});' Table, 'insert table { row {"False" String1, 2 Integer2, false Boolean3 }, row { "TheyallWentTOthe1", 16, true }, row { "Tr3ue", 1, false } } into ListStringIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerBooleanTestTable over { String1, Integer2 } add { IsDigit(String1, Integer2) Boolean3 }' Script, ') <> ListStringIntegerBooleanTestTable then raise Error("IsDigit(String, Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*552ID, */ row { System.String('System.iShiftLeft_System_Byte_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Integer", "Byte" });' Table, 'insert table { row { 0 Byte1, 0 Integer2, 0 Byte3 }, row { 1, 5, 32 }, row { 10, 3, 80 } } into ListByteIntegerByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteIntegerByteTestTable over { Byte1, Integer2 } add { Byte1 << Integer2 Byte3 }' Script, ') <> ListByteIntegerByteTestTable then raise Error("iShiftLeft(Byte,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*553ID, */ row { System.String('System.iShiftLeft_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, 0 Integer3 }, row { 1, 5, 32 }, row { 10, 3, 80 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 << Integer2 Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("iShiftLeft(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*554ID, */ row { System.String('System.iShiftLeft_System_Long_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Integer", "Long" });' Table, 'insert table { row { 0 Long1, 0 Integer2, 0 Long3 }, row { 1, 5, 32 }, row { 10, 3, 80 } } into ListLongIntegerLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongIntegerLongTestTable over { Long1, Integer2 } add { Long1 << Integer2 Long3 }' Script, ') <> ListLongIntegerLongTestTable then raise Error("iShiftLeft(Long,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*555ID, */ row { System.String('System.iShiftLeft_System_Short_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Integer", "Short" });' Table, 'insert table { row { 0 Short1, 0 Integer2, 0 Short3 }, row { 1, 5, 32 }, row { 10, 3, 80 } } into ListShortIntegerShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortIntegerShortTestTable over { Short1, Integer2 } add { Short1 << Integer2 Short3 }' Script, ') <> ListShortIntegerShortTestTable then raise Error("iShiftLeft(Short,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*556ID, */ row { System.String('System.iShiftRight_System_Byte_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Integer", "Byte" });' Table, 'insert table { row { 0 Byte1, 0 Integer2, 0 Byte3 }, row { 255, 3, 32 }, row { 7, 5, 0 } } into ListByteIntegerByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListByteIntegerByteTestTable over { Byte1, Integer2 } add { Byte1 >> Integer2 Byte3 }' Script, ') <> ListByteIntegerByteTestTable then raise Error("iShiftRight(Byte,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*557ID, */ row { System.String('System.iShiftRight_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, 0 Integer3 }, row { 255, 3, 32 }, row { 7, 5, 0 }, row { -1, 11, -1 }, row { -2147483648, 30, -2 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { Integer1 >> Integer2 Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("iShiftRight(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*558ID, */ row { System.String('System.iShiftRight_System_Long_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Integer", "Long" });' Table, 'insert table { row { ToLong(0) Long1, 0 Integer2, ToLong(0) Long3 }, row { 255, 3, 32 }, row { 7, 5, 0 }, row { -1, 11, -1 }, row { -9223372036854775807 - 1, 62, -2 } } into ListLongIntegerLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongIntegerLongTestTable over { Long1, Integer2 } add { Long1 >> Integer2 Long3 }' Script, ') <> ListLongIntegerLongTestTable then raise Error("iShiftRight(Long,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*559ID, */ row { System.String('System.iShiftRight_System_Short_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Integer", "Short" });' Table, 'insert table { row { 0 Short1, 0 Integer2, 0 Short3 }, row { 255, 3, 32 }, row { 7, 5, 0 }, row { -1, 11, -1 }, row { -32768, 14, -2 } } into ListShortIntegerShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortIntegerShortTestTable over { Short1, Integer2 } add { Short1 >> Integer2 Short3 }' Script, ') <> ListShortIntegerShortTestTable then raise Error("iShiftRight(Short,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*560ID, */ row { System.String('System.IsLeapYear_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Boolean" });' Table, 'insert table { row { 2003 Integer1, 2003 Integer2, false Boolean3 }, row { 2000, 2000, true }, row { 2100, 2100, false }, row { 2004, 2004, true }, row { 2005, 2005, false } } into ListIntegerIntegerBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerBooleanTestTable over { Integer1, Integer2 } add { IsLeapYear(Integer1) Boolean3 }' Script, ') <> ListIntegerIntegerBooleanTestTable then raise Error("System.IsLeapYear(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*561ID, */ row { System.String('System.IsLetter_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Integer", "Boolean"});' Table, 'insert table { row {"False" String1, 2 Integer2, true Boolean3 }, row { "TheyallWentTOthe1", 16, false }, row { "Tr3ue", 1, true } } into ListStringIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerBooleanTestTable over { String1, Integer2 } add { IsLetter(String1, Integer2) Boolean3 }' Script, ') <> ListStringIntegerBooleanTestTable then raise Error("IsDigit(String, Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*562ID, */ row { System.String('System.IsLower_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Boolean"});' Table, 'insert table { row {"False" String1, false Boolean2 }, row { "TRUE", false }, row { "true", true } } into ListStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringBooleanTestTable over { String1 } add { IsLower(String1) Boolean2 }' Script, ') <> ListStringBooleanTestTable then raise Error("IsLower(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*563ID, */ row { System.String('System.IsLower_System_String__System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Integer", "Boolean"});' Table, 'insert table { row {"False" String1, 2 Integer2, true Boolean3 }, row { "TRUE", 3, false }, row { "True", 1, true } } into ListStringIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerBooleanTestTable over { String1 Integer2} add { IsLower(String1, Integer2) Boolean3 }' Script, ') <> ListStringIntegerBooleanTestTable then raise Error("IsLower(String, Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*564ID, */ row { System.String('System.IsLower_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Integer", "Boolean"});' Table, 'insert table { row {"False" String1, 2 Integer2, true Boolean3 }, row { "TRUE", 3, false }, row { "True", 2, true } } into ListStringIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerBooleanTestTable over { String1, Integer2 } add { IsLower(String1, Integer2) Boolean3 }' Script, ') <> ListStringIntegerBooleanTestTable then raise Error("IsLower(String, Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*565ID, */ row { System.String('System.IsNil_System_Generic_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table NullTestTable { Null1 : Integer { nil }, Boolean2 : Boolean };' Table, 'insert table { row { 0 Null1, false Boolean2 }, row { 1, false}, row { nil as Integer, true }, row { -1, false }, row { -65536, false } } into NullTestTable;' InsertTableStatement, 'if (' BeforeScript, 'NullTestTable over { Null1 } add { IsNil(Null1) Boolean2 }' Script, ') <> NullTestTable then raise Error("System.IsNil(Generic) failed.");' AfterScript, 'drop table NullTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*566ID, */ row { System.String('System.IsSpecial_System_Binary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Binary", "Boolean" });' Table, 'insert table { row { Binary("07f9b0d7ea0843708a9e24245b19e12e") Binary1, false Boolean3 }, row { Binary("b54ac5330b19417a96cdd37cad01cd02"), false }, row { Binary("b54ac5330b19417a96cdd37cad01cd02"), false } } into ListBinaryBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBinaryBooleanTestTable over { Binary1 } add { IsSpecial(Binary1) Boolean2 }' Script, ') <> ListBinaryBooleanTestTable then raise Error("System.IsSpecial(Binary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*567ID, */ row { System.String('System.IsSpecial_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Boolean", "Boolean" });' Table, 'insert table { row { false Boolean1, false Boolean2 }, row { true, false } } into ListBooleanBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanBooleanTestTable over { Boolean1 } add { IsSpecial(Boolean1) Boolean2 }' Script, ') <> ListBooleanBooleanTestTable then raise Error("System.IsSpecial(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*568ID, */ row { System.String('System.IsSpecial_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Byte", "Boolean" });' Table, 'insert table { row { 1 Byte1, false Boolean2 }, row { 255, false }, row { 128, false } } into ListByteBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteBooleanTestTable over { Byte1 } add { IsSpecial(Byte1) Boolean2 }' Script, ') <> ListByteBooleanTestTable then raise Error("System.IsSpecial(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*569ID, */ row { System.String('System.IsSpecial_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "Boolean" });' Table, 'insert table { row { Date(2004,1,1) Date1, false Boolean2 }, row { Date(1999,12,12), false }, row { Date(1900,2,1), false } } into ListDateBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateBooleanTestTable over { Date1 } add { IsSpecial(Date1) Boolean2 }' Script, ') <> ListDateBooleanTestTable then raise Error("System.IsSpecial(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*570ID, */ row { System.String('System.IsSpecial_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Boolean" });' Table, 'insert table { row { DateTime(2004,1,1,12,54,45) DateTime1, false Boolean2 }, row { DateTime(1900,2,1,12,32,44), false }, row { DateTime(1889,12,30,23,43,23), false } } into ListDateTimeBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeBooleanTestTable over { DateTime1 } add { IsSpecial(DateTime1) Boolean2 }' Script, ') <> ListDateTimeBooleanTestTable then raise Error("System.IsSpecial(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*571ID, */ row { System.String('System.IsSpecial_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Boolean" });' Table, 'insert table { row { 0.46d Decimal1, false Boolean2 }, row { 0.999d, false }, row { 12.4d, false } } into ListDecimalBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalBooleanTestTable over { Decimal1 } add { IsSpecial(Decimal1) Boolean2 }' Script, ') <> ListDecimalBooleanTestTable then raise Error("System.IsSpecial(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*572ID, */ row { System.String('System.IsSpecial_System_GroupName_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "GroupName", "Boolean" });' Table, 'insert table { row { GroupName("Error") GroupName1, false Boolean2 }, row { GroupName("Again"), false }, row { GroupName("Testing"), false } } into ListGroupNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGroupNameBooleanTestTable over { GroupName1 } add { IsSpecial(GroupName1) Boolean2 }' Script, ') <> ListGroupNameBooleanTestTable then raise Error("System.IsSpecial(GroupName) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*573ID, */ row { System.String('System.IsSpecial_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Guid", "Boolean" });' Table, 'insert table { row { Guid("a12bcef2-1234-5678-9101-abcdef123436") Guid1, false Boolean2 }, row { Guid("a12bcef2-1234-5678-9101-abcdef123456"), false }, row { Guid("a12bcef2-1234-5678-9102-abcdef123456"), false } } into ListGuidBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGuidBooleanTestTable over { Guid1 } add { IsSpecial(Guid1) Boolean2 }' Script, ') <> ListGuidBooleanTestTable then raise Error("System.IsSpecial(Guid) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*574ID, */ row { System.String('System.IsSpecial_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Boolean" });' Table, 'insert table { row { 23 Integer1, false Boolean2 }, row { 432, false }, row { 27675, false } } into ListIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerBooleanTestTable over { Integer1 } add { IsSpecial(Integer1) Boolean2 }' Script, ') <> ListIntegerBooleanTestTable then raise Error("System.IsSpecial(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*575ID, */ row { System.String('System.IsSpecial_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Boolean" });' Table, 'insert table { row { 2323452 Long1, false Boolean2 }, row { 432, false }, row { 23, false } } into ListLongBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongBooleanTestTable over { Long1 } add { IsSpecial(Long1) Boolean2 }' Script, ') <> ListLongBooleanTestTable then raise Error("System.IsSpecial(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*576ID, */ row { System.String('System.IsSpecial_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Boolean" });' Table, 'insert table { row { $23234.52 Money1, false Boolean2 }, row { $432.00, false }, row { $23.98, false } } into ListMoneyBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyBooleanTestTable over { Money1 } add { IsSpecial(Money1) Boolean2 }' Script, ') <> ListMoneyBooleanTestTable then raise Error("System.IsSpecial(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*577ID, */ row { System.String('System.IsSpecial_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Boolean" });' Table, 'insert table { row { "Adam" Name1, false Boolean2 }, row { "Bryn", false }, row { "Robr", false } } into ListNameBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameBooleanTestTable over { Name1 } add { IsSpecial(Name1) Boolean2 }' Script, ') <> ListNameBooleanTestTable then raise Error("System.IsSpecial(Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*578ID, */ row { System.String('System.IsSpecial_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Boolean" });' Table, 'insert table { row { 23 Short1, false Boolean2 }, row { 2, false }, row { 1, false } } into ListShortBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortBooleanTestTable over { Short1 } add { IsSpecial(Short1) Boolean2 }' Script, ') <> ListShortBooleanTestTable then raise Error("System.IsSpecial(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*579ID, */ row { System.String('System.IsSpecial_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Boolean" });' Table, 'insert table { row { "Adam" String1, false Boolean2 }, row { "Bryn", false }, row { "Robr", false } } into ListStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringBooleanTestTable over { String1 } add { IsSpecial(String1) Boolean2 }' Script, ') <> ListStringBooleanTestTable then raise Error("System.IsSpecial(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*580ID, */ row { System.String('System.IsSpecial_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Boolean" });' Table, 'insert table { row { Time(1,22,32) Time1, false Boolean2 }, row { Time(1,23,23), false }, row { Time(12,23,43), false } } into ListTimeBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeBooleanTestTable over { Time1 } add { IsSpecial(Time1) Boolean2 }' Script, ') <> ListTimeBooleanTestTable then raise Error("System.IsSpecial(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*581ID, */ row { System.String('System.IsSpecial_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Boolean" });' Table, 'insert table { row { TimeSpan(1,22,32,2,434) TimeSpan1, false Boolean2 }, row { TimeSpan(1,23,23,2,3), false }, row { TimeSpan(12,23,43,23,4), false } } into ListTimeSpanBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanBooleanTestTable over { TimeSpan1 } add { IsSpecial(TimeSpan1) Boolean2 }' Script, ') <> ListTimeSpanBooleanTestTable then raise Error("System.IsSpecial(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*582ID, */ row { System.String('System.IsSpecial_System_UserID_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "UserID", "Boolean" });' Table, 'insert table { row { UserID("Adam") UserID1, false Boolean2 }, row { UserID("Bryn"), false }, row { UserID("Robr"), false } } into ListUserIDBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListUserIDBooleanTestTable over { UserID1 } add { IsSpecial(UserID1) Boolean2 }' Script, ') <> ListUserIDBooleanTestTable then raise Error("System.IsSpecial(UserID) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*583ID, */ row { System.String('System.IsSpecial_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "Boolean" });' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, false Boolean2 }, row { VersionNumber(2,2,2,2), false }, row { VersionNumber(-1,-1,-1,-1), true } } into ListVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberBooleanTestTable over { VersionNumber1 } add { IsSpecial(VersionNumber1) Boolean2 }' Script, ') <> ListVersionNumberBooleanTestTable then raise Error("System.IsSpecial(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*584ID, */ row { System.String('System.iSubtraction_System_Byte_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 0 Byte1, 0 Byte2, 0 Byte3 }, row { 255, 3, 252 }, row { 7, 7, 0 } } into TripleByteTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 - Byte2 Byte3 }' Script, ') <> TripleByteTestTable then raise Error("iSubtraction(Byte,Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*585ID, */ row { System.String('System.iSubtraction_System_Byte_System_Byte_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Byte");' Table, 'insert table { row { 55 Byte1, 56 Byte2, 255 Byte3 } } into TripleByteTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleByteTestTable over { Byte1, Byte2 } add { Byte1 - Byte2 Byte3 };' Script, '", "iSubtraction(Byte,Byte) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*586ID, */ row { System.String('System.iSubtraction_System_Date_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "TimeSpan", "Date" });' Table, 'insert table { row { Date(2003,10,31) Date1, TimeSpan(1) TimeSpan2, Date(2003,10,30) Date3 }, row { Date(2001,10,30), TimeSpan(1,0,0), Date(2001,10,29) }, row { Date(2003,10,31), TimeSpan(365), Date(2002,10,31) }, row { Date(2099,10,3), TimeSpan(72319), Date(1901,10,3) }, row { Date(2063,4,4), TimeSpan(34237), Date(1969,7,9) } } into ListDateTimeSpanDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeSpanDateTestTable over { Date1, Date3 } add { Date1 - Date3 TimeSpan2 }' Script, ') <> ListDateTimeSpanDateTestTable then raise Error("System.iSubtraction(Date,Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*587ID, */ row { System.String('System.iSubtraction_System_Date_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Date", "TimeSpan", "Date" });' Table, 'insert table { row { Date(2003,10,31) Date1, TimeSpan(1) TimeSpan2, Date(2003,10,30) Date3 }, row { Date(2001,10,30), TimeSpan(2), Date(2001,10,28) }, row { Date(1901,10,31), TimeSpan(30), Date(1901,10,1) }, row { Date(2099,10,3), TimeSpan(72319), Date(1901,10,3) }, row {  Date(2063,4,4), TimeSpan(34237), Date(1969,7,9)} } into ListDateTimeSpanDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeSpanDateTestTable over { Date1, TimeSpan2 } add { Date1 - TimeSpan2 Date3 }' Script, ') <> ListDateTimeSpanDateTestTable then raise Error("System.iSubtraction(Date,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*588ID, */ row { System.String('System.iSubtraction_System_DateTime_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "DateTime", "TimeSpan" });' Table, 'insert table { row { DateTime(2003,10,31) DateTime1, DateTime(2003,10,30) DateTime2, TimeSpan(1) TimeSpan3 }, row { DateTime(2001,10,30), DateTime(2001,10,31), TimeSpan(-1) }, row { DateTime(2003,10,31), DateTime(2002,10,31), TimeSpan(365) }, row { DateTime(2099,10,3), DateTime(1901,10,3), TimeSpan(72319) }, row { DateTime(2063,4,4), DateTime(1969,7,9), TimeSpan(34237) } } into ListDateTimeDateTimeTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeDateTimeTimeSpanTestTable over { DateTime1, DateTime2 } add { DateTime1 - DateTime2 TimeSpan3 }' Script, ') <> ListDateTimeDateTimeTimeSpanTestTable then raise Error("System.iSubtraction(DateTime,DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*589ID, */ row { System.String('System.iSubtraction_System_DateTime_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "TimeSpan", "DateTime" });' Table, 'insert table { row { DateTime(2003,10,31) DateTime1, TimeSpan(1) TimeSpan2, DateTime(2003,10,30) DateTime3 }, row { DateTime(2001,10,30), TimeSpan(-1), DateTime(2001,10,31) }, row { DateTime(1999,10,31), TimeSpan(30), DateTime(1999,10,1) }, row { DateTime(2099,10,3), TimeSpan(72319), DateTime(1901,10,3) }, row { DateTime(2063,4,4), TimeSpan(34237), DateTime(1969,7,9) } } into ListDateTimeTimeSpanDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDateTimeTimeSpanDateTimeTestTable over { DateTime1, TimeSpan2 } add { DateTime1 - TimeSpan2 DateTime3 }' Script, ') <> ListDateTimeTimeSpanDateTimeTestTable then raise Error("System.iSubtraction(DateTime,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*590ID, */ row { System.String('System.iSubtraction_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, 0d Decimal2, 0d Decimal3 }, row { 3.14d, 2.72d, 0.42d }, row { 2.72d, 3.14d, -0.42d } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 - Decimal2 Decimal3 }' Script, ') <> TripleDecimalTestTable then raise Error("iSubtraction(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*591ID, */ row { System.String('System.iSubtraction_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 0 Integer2, 0 Integer3 }, row { 314, 272, 42 }, row { 272, 314, -42 }, row { 32768, -32768, 65536 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 - Integer2 Integer3 }' Script, ') <> TripleIntegerTestTable then raise Error("iSubtraction(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*592ID, */ row { System.String('System.iSubtraction_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 2147483647 Integer1, -1 Integer2, 2147483647 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 - Integer2 Integer3 };' Script, '", "iSubtraction(Integer,Integer) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*593ID, */ row { System.String('System.iSubtraction_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { -2147483648 Integer1, 1 Integer2, -2147483648 Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleIntegerTestTable over { Integer1, Integer2 } add { Integer1 - Integer2 Integer3 };' Script, '", "iSubtraction(Integer,Integer) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*594ID, */ row { System.String('System.iSubtraction_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { ToLong(0) Long1, ToLong(0) Long2, ToLong(0) Long3 }, row { 314, 272, 42 }, row { 272, 314, -42 }, row { 32768, -32768, 65536 }, row { 2147483648, -2147483648, 4294967296 } } into TripleLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 - Long2 Long3 }' Script, ') <> TripleLongTestTable then raise Error("iSubtraction(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*595ID, */ row { System.String('System.iSubtraction_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 9223372036854775807 Long1, -1 Long2, 9223372036854775807 Long3 } } into TripleLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 - Long2 Long3 };' Script, '", "iSubtraction(Long,Long) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*596ID, */ row { System.String('System.iSubtraction_System_Long_System_Long_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { -9223372036854775807 - 1 Long1, 1 Long2, -9223372036854775807 - 1 Long3 } } into TripleLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 - Long2 Long3 };' Script, '", "iSubtraction(Long,Long) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*597ID, */ row { System.String('System.iSubtraction_System_Money_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $1 Money1, $0 Money2, $1 Money3 }, row { $3.14, $2.72, $0.42 }, row { $2.72, $3.14, -$0.42 }, row { $32768, -$32768, $65536 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleMoneyTestTable over { Money1, Money2 } add { Money1 - Money2 Money3 }' Script, ') <> TripleMoneyTestTable then raise Error("iSubtraction(Money,Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*598ID, */ row { System.String('System.iSubtraction_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 0 Short1, 0 Short2, 0 Short3 }, row { 3, 2, 1 }, row { 272, 314, -42 } } into TripleShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 - Short2 Short3 }' Script, ') <> TripleShortTestTable then raise Error("iSubtraction(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*599ID, */ row { System.String('System.iSubtraction_System_Short_System_Short_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { 32767 Short1, -1 Short2, 32767 Short3 } } into TripleShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 - Short2 Short3 };' Script, '", "iSubtraction(Short,Short) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*600ID, */ row { System.String('System.iSubtraction_System_Short_System_Short_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Short");' Table, 'insert table { row { -32768 Short1, 1 Short2, -32768 Short3 } } into TripleShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleShortTestTable over { Short1, Short2 } add { Short1 - Short2 Short3 };' Script, '", "iSubtraction(Short,Short) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*601ID, */ row { System.String('System.iSubtraction_System_Time_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Time", "TimeSpan" });' Table, 'insert table { row { Time(23,10,31) Time1, Time(23,10,31) Time2, TimeSpan(0) TimeSpan3 }, row { Time(21,10,30), Time(21,10,31), TimeSpan(0,0,0,-1) }, row { Time(23,10,31), Time(22,10,31), TimeSpan(0,1) }, row { Time(19,7,9), Time(19,7,9), TimeSpan(0) }, row { Time(23,59,59), Time(0,0,1), TimeSpan.Ticks(863980000000) } } into ListTimeTimeTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeTimeSpanTestTable over { Time1, Time2 } add { Time1 - Time2 TimeSpan3 }' Script, ') <> ListTimeTimeTimeSpanTestTable then raise Error("System.iSubtraction(Time,Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*602ID, */ row { System.String('System.iSubtraction_System_Time_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "TimeSpan", "Time" });' Table, 'insert table { row { Time(23,10,31) Time1, TimeSpan(0) TimeSpan2, Time(23,10,31) Time3 }, row { Time(11,1,1), TimeSpan(0,1), Time(10,1,1) } } into ListTimeTimeSpanTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeTimeSpanTimeTestTable over { Time1, TimeSpan2 } add { Time1 - TimeSpan2 Time3 }' Script, ') <> ListTimeTimeSpanTimeTestTable then raise Error("System.iSubtraction(Time,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*603ID, */ row { System.String('System.iSubtraction_System_TimeSpan_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(0) TimeSpan2, TimeSpan.Ticks(0) TimeSpan3 }, row { TimeSpan.Ticks(3), TimeSpan.Ticks(2), TimeSpan.Ticks(1) }, row { TimeSpan.Ticks(272144), TimeSpan.Ticks(144), TimeSpan.Ticks(272000) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleTimeSpanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 - TimeSpan2 TimeSpan3 }' Script, ') <> TripleTimeSpanTestTable then raise Error("iSubtraction(TimeSpan,TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*604ID, */ row { System.String('System.IsUndefined_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "Boolean"});' Table, 'insert table { row {VersionNumber(1,1,1,1) VersionNumber1, false Boolean2 }, row { VersionNumber(-1,-1,-1,-1), true }, row { VersionNumber(2,1,2,4), false } } into ListVersionNumberBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberBooleanTestTable over { VersionNumber1 } add { IsUndefined(VersionNumber1) Boolean2 }' Script, ') <> ListVersionNumberBooleanTestTable then raise Error("IsUndefined(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*605ID, */ row { System.String('System.IsUpper_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Boolean"});' Table, 'insert table { row {"False" String1, false Boolean2 }, row { "TRUE", true }, row { "True", false } } into ListStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringBooleanTable over { String1 } add { IsUpper(String1) Boolean2 }' Script, ') <> ListStringBooleanTable then raise Error("IsUpper(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*606ID, */ row { System.String('System.IsUpper_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Integer", "Boolean"});' Table, 'insert table { row {"False" String1, 2 Integer2, false Boolean3 }, row { "TRUE", 3, true }, row { "True", 1, false } } into ListStringIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringIntegerBooleanTestTable over { String1, Integer2 } add { IsUpper(String1, Integer2) Boolean3 }' Script, ') <> ListStringIntegerBooleanTestTable then raise Error("IsUpper(String, Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*607ID, */ row { System.String('System.iUnion_table_table_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Integer"}, true); create table TempTable { Integer1 : Integer } static tags { Storage.IsNullable = "true" };' Table, 'insert table { row { 1 Integer1 }, row { 2 }, row { 3 }, row { 5 }, row { 7 }, row { 11 }, row { 13 } } into ListIntegerTestTable; insert table { row { 1 Integer1 }, row { 2 }, row { 4 }, row { 8 }, row { 16 } } into TempTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTestTable union TempTable' Script, ') <> table { row { 3 Integer1 }, row { 5 }, row { 4 }, row { 1 }, row { 2 }, row { 8 }, row { 16 }, row { 7 }, row { 11 }, row { 13 } } then raise Error("iUnion(table,table) failed.");' AfterScript, 'DropListTable({"Integer"}); drop table TempTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*608ID, */ row { System.String('System.iXor_System_Boolean_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Boolean");' Table, 'insert table { row { false Boolean1, false Boolean2, false Boolean3 }, row { false, true, true }, row { true, false, true }, row { true, true, false } } into TripleBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleBooleanTestTable over { Boolean1, Boolean2 } add { iXor(Boolean1, Boolean2) Boolean3 }' Script, ') <> TripleBooleanTestTable then raise Error("iXor(Boolean,Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*609ID, */ row { System.String('System.LastIndexOf_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "String", "Integer});' Table, 'insert table { row { "California" String1, "lif" String2, 2 integer3 }, row { "Mississippi", "ippi", 7 }, row { "East Carbon", " Carbon", 4 }, row { "Testing", "sting", 2 } } into ListStringStringIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringIntegerTestTable over { String1, String2 } add { LastIndexOf(String1, String2) Integer3 }' Script, ') <> ListStringStringIntegerTable then raise Error("LastIndexOf(String, String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*610ID, */ row { System.String('System.LastPos_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "String", "Integer});' Table, 'insert table { row { "California" String1, "lif" String2, 2 integer3 }, row { "Mississippi", "ippi", 7 }, row { "East Carbon", " Carbon", 5 }, row { "Testing", "sting", 2 } } into ListStringStringIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringIntegerTestTable over { String1, String2 } add { LastPos(String2, String1) Integer3 }' Script, ') <> ListStringStringIntegerTable then raise Error("LastPos(String, String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*611ID, */ row { System.String('System.Length_System_Binary_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Binary", "Integer"});' Table, 'insert table { row { Binary(b54ac5330b194111) Binary1, 12 Integer2 }, row { Binary("07f9b0d7ea0843708a9e24245b19e12e"), 24 }, row { Binary("b54ac5330b19"), 9 }, row { Binary("b54ac5330b19"), 6 } } into ListBinaryIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBinaryIntegerTestTable over { Binary1 } add { Length(Binary1) Integer2 }' Script, ') <> ListBinaryIntegerTestTable then raise Error("Length(Binary) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*612ID, */ row { System.String('System.Length_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer" });' Table, 'insert table { row { "" String1, 2003 Integer2, 0 Integer3 }, row { "Alphora", 2000, 7 }, row { "Dataphor", 2100, 8 }, row { "I am your father", 2004, 16 }, row { "DAE", 2005, 3 } } into ListStringIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerIntegerTestTable over { String1, Integer2 } add { Length(String1) Integer3 }' Script, ') <> ListStringIntegerIntegerTestTable then raise Error("System.Length(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*613ID, */ row { System.String('System.Long') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 37 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 37 then raise Error("System.Long normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*614ID, */ row { System.String('System.Long') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 42 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 42 then raise Error("System.Long normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*615ID, */ row { System.String('System.Long') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 128 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 128 then raise Error("System.Long normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*616ID, */ row { System.String('System.Long') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 0 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 0 then raise Error("System.Long normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*617ID, */ row { System.String('System.Long') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 1 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 1 then raise Error("System.Long normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*618ID, */ row { System.String('System.Long') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -1 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> -1 then raise Error("System.Long normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*619ID, */ row { System.String('System.Long') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -9223372036854775807 - 1 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> -9223372036854775807 - 1 then raise Error("System.Long boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*620ID, */ row { System.String('System.Long') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> -9223372036854775807 then raise Error("System.Long boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*621ID, */ row { System.String('System.Long') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 9223372036854775807 then raise Error("System.Long boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*622ID, */ row { System.String('System.Long') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 9223372036854775806 Long1 } } into ListLongTestTable;' InsertTableStatement, '' BeforeScript, 'if (Long1 from row from ListLongTestTable) <> 9223372036854775806 then raise Error("System.Long boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*623ID, */ row { System.String('System.Long') Name, 120 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -9223372036854775807 - 3 Long1 } } into ListLongTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*624ID, */ row { System.String('System.Long') Name, 121 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -9223372036854775807 - 2 Long1 } } into ListLongTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*625ID, */ row { System.String('System.Long') Name, 122 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 9223372036854775807 + 1 Long1 } } into ListLongTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*626ID, */ row { System.String('System.Long') Name, 123 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 9223372036854775807 + 2 Long1 } } into ListLongTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*627ID, */ row { System.String('System.Long') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { 5 Long1 } } into ListLongTestTable; NegativeTest("insert table { row { 5 Long1 } } into ListLongTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { 42 Long1 } } into ListLongTestTable; NegativeTest("insert table { row { 42 Long1 } } into ListLongTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*628ID, */ row { System.String('System.Long') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Long1 : Long, Long2 : Long, key { Long1 }, order { Long2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Long1, 42 Long2 }, row { 116 Long1, 255 Long2 }, row { 117 Long1, 254 Long2 }, row { 188 Long1, 42 Long2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Long2 asc }", "DeviceOrder order by { Long2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*629ID, */ row { System.String('System.Long') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Long1 : Long, Long2 : Long, key { Long1 }, order { Long2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Long1, 42 Long2 }, row { 116 Long1, 255 Long2 }, row { 117 Long1, 254 Long2 }, row { 188 Long1, 42 Long2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Long2 desc }", "DeviceOrder order by { Long2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*630ID, */ row { System.String('System.Long.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Long" });' Table, 'insert table { row { "255123456789" String1, Long(255123456789) Long2 }, row { "2147483647", Long(2147483647) }, row { "1", Long(1) } } into ListStringLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringLongTestTable over { String1 } add { Long.AsString(String1) Long2 }' Script, ') <> ListStringLongTestTable then raise Error("System.Long.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*631ID, */ row { System.String('System.Long.ReadAsString_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "String", "String" });' Table, 'insert table { row { Long(2147483647) Long1, "0" String2, "2147483647" String3 }, row { Long(156), "Test", "156" }, row { Long(255123456789), "0", "255123456789"} } into ListLongStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongStringStringTestTable over { Long1, String2 } add { ReadAsString(Long1) String3 }' Script, ') <> ListLongStringStringTestTable then raise Error("System.Long.ReadAsString(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*632ID, */ row { System.String('System.Long.ReadValue_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long" });' Table, 'insert table { row {  Long(100) Long1,  Long(100) Long2 }, row { Long(0), Long(0) }, row { Long(2147483647123), Long(2147483647123) } } into ListLongLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListLongLongTestTable over { Long1 } add { ReadValue(Long1) Long2 }' Script, ') <> ListLongLongTestTable then raise Error("System.Long.ReadValue(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*633ID, */ row { System.String('System.Long.WriteAsString_System_Long_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "String", "Long" });' Table, 'insert table { row { Long(98) Long1, "2147483647" String2,Long(2147483647) Long3 }, row { Long(1), "245", Long(245) }, row { 255, "1", Long(1)} } into ListLongStringLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongStringLongTestTable over { Long1, String2 } add { WriteAsString(Long1, String2) Long3 }' Script, ') <> ListLongStringLongTestTable then raise Error("System.Long.WriteAsString(Long,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*634ID, */ row { System.String('System.Long.WriteValue_System_Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "Long", "Long" });' Table, 'insert table { row { Long(98) Long1, Long(2147483647) Long2, Long(2147483647) Long3 }, row { Long(100), Long(255), Long(255) }, row { Long(1),Long(6512345678910), Long(6512345678910)} } into ListLongLongLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { WriteValue(Long1, Long2) Long3 }' Script, ') <> ListLongLongLongTestTable then raise Error("System.Long.WriteValue(Long,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*635ID, */ row { System.String('System.Long_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Long", "Long"});' Table, 'insert table { row { Long(128) Long1, Long(255) Long2, Long(128) Long3 }, row { Long(4322147483647), Long(64), Long(4322147483647) } } into ListLongLongLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongLongLongTestTable over { Long1, Long2 } add { Long(Long1) Long3}' Script, ') <> ListLongLongLongTestTable then raise Error("System.Long(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*636ID, */ row { System.String('System.Lower_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String" });' Table, 'insert table { row { "" String1, 2003 Integer2, "" String3 }, row { "Alphora", 2000, "alphora" }, row { "Dataphor", 2100, "dataphor" }, row { "I am your father", 2004, "i am your father" }, row { "DAE", 2005, "dae" } } into ListStringIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringTestTable over { String1, Integer2 } add { Lower(String1) String3 }' Script, ') <> ListStringIntegerStringTestTable then raise Error("System.Lower(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*637ID, */ row { System.String('System.Math.Factorial_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer", "Integer", "Integer" });' Table, 'insert table { row { 0 Integer1, 0 Integer2, 1 Integer3 }, row { 1, 1, 1 }, row { 2, 2, 2 }, row { 5, 5, 120 }, row { 10, 10, 3628800 } } into ListIntegerIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerIntegerIntegerTestTable over { Integer1, Integer2 } add { System.Math.Factorial(Integer1) Integer3 }' Script, ') <> ListIntegerIntegerIntegerTestTable then raise Error("System.Math.Factorial(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*638ID, */ row { System.String('System.Math.Log_System_Decimal_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1d Decimal1, 2d Decimal2, 0d Decimal3 }, row { 27d, 3d, 3d }, row { 2.25d, 1.5d, 2d } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { System.Math.Log(Decimal1, Decimal2) Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("System.Math.Log(Decimal,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*639ID, */ row { System.String('System.Math.Random__') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Integer" });' Table, 'insert table { row { 1 Integer1 }, row { 2 }, row { 3 } } into ListIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIntegerTestTable add {Random() Rand1, Random() Rand2 }' Script, ' add { Rand1 = Rand2 RandSame } where RandSame group add { Count() Count } ) <> table { row { 0 Count } } then raise Error("System.Random() failed to produce different results on subsequent calls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*640ID, */ row { System.String('System.Max_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Date");' Table, 'insert table { row { Date(1900, 1, 1) Date1, Date(2000, 1, 1) Date2, Date(2100, 1, 1) Date3 }, row { Date(1980, 1, 1), Date(2080, 1, 1), Date(2100, 1, 1) }, row { Date(1930, 1, 1), Date(2099, 1, 1), Date(2100, 1, 1) }, row { Date(1999, 1, 1), Date(2063, 1, 1), Date(2100, 1, 1) }, row { Date(1984, 1, 1), Date(2061, 1, 1), Date(2100, 1, 1) } } into TripleDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Date1 from TripleDateTestTable) DateAggregate1, System.Max(Date2 from TripleDateTestTable) DateAggregate2, System.Max(Date3 from TripleDateTestTable) DateAggregate3 } }' Script, ') <> table { row { Date(1999, 1, 1) DateAggregate1, Date(2099, 1, 1) DateAggregate2, Date(2100, 1, 1) DateAggregate3 } } then raise Error("System.Max(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*641ID, */ row { System.String('System.Max_System_Date_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Date");' Table, 'insert table { row { Date(1900, 1, 1) Date1, Date(2000, 1, 1) Date2, Date(2100, 1, 1) Date3 } } into TripleDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Date1 from TripleDateTestTable) DateAggregate1, System.Max(Date2 from TripleDateTestTable) DateAggregate2, System.Max(Date3 from TripleDateTestTable) DateAggregate3 } }' Script, ') <> table { row { Date(1900, 1, 1) DateAggregate1, Date(2000, 1, 1) DateAggregate2, Date(2100, 1, 1) DateAggregate3 } } then raise Error("System.Max(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*642ID, */ row { System.String('System.Max_System_Date_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Date");' Table, 'insert table { row { Date(1900, 1, 1) Date1, Date(2000, 1, 1) Date2, Date(2100, 1, 1) Date3 }, row { nil as Date, nil as Date, nil as Date }, row { Date(1980, 1, 1), Date(2080, 1, 1), Date(2100, 1, 1) }, row { Date(1930, 1, 1), Date(2099, 1, 1), Date(2100, 1, 1) }, row { Date(1999, 1, 1), Date(2063, 1, 1), Date(2100, 1, 1) }, row { Date(1984, 1, 1), Date(2061, 1, 1), Date(2100, 1, 1) } } into TripleNullDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Date1 from TripleNullDateTestTable) DateAggregate1, System.Max(Date2 from TripleNullDateTestTable) DateAggregate2, System.Max(Date3 from TripleNullDateTestTable) DateAggregate3 } }' Script, ') <> table { row { Date(1999, 1, 1) DateAggregate1, Date(2099, 1, 1) DateAggregate2, Date(2100, 1, 1) DateAggregate3 } } then raise Error("System.Max(Date) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*643ID, */ row { System.String('System.Max_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("DateTime");' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1, DateTime(2000, 1, 1) DateTime2, DateTime(2100, 1, 1) DateTime3 }, row { DateTime(1980, 1, 1), DateTime(2080, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1930, 1, 1), DateTime(2099, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1999, 1, 1), DateTime(2063, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1984, 1, 1), DateTime(2061, 1, 1), DateTime(2100, 1, 1) } } into TripleDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(DateTime1 from TripleDateTimeTestTable) DateTimeAggregate1, System.Max(DateTime2 from TripleDateTimeTestTable) DateTimeAggregate2, System.Max(DateTime3 from TripleDateTimeTestTable) DateTimeAggregate3 } }' Script, ') <> table { row { DateTime(1999, 1, 1) DateTimeAggregate1, DateTime(2099, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Max(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*644ID, */ row { System.String('System.Max_System_DateTime_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("DateTime");' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1, DateTime(2000, 1, 1) DateTime2, DateTime(2100, 1, 1) DateTime3 } } into TripleDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(DateTime1 from TripleDateTimeTestTable) DateTimeAggregate1, System.Max(DateTime2 from TripleDateTimeTestTable) DateTimeAggregate2, System.Max(DateTime3 from TripleDateTimeTestTable) DateTimeAggregate3 } }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Max(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*645ID, */ row { System.String('System.Max_System_DateTime_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("DateTime");' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1, DateTime(2000, 1, 1) DateTime2, DateTime(2100, 1, 1) DateTime3 }, row { nil as DateTime, nil as DateTime, nil as DateTime }, row { DateTime(1980, 1, 1), DateTime(2080, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1930, 1, 1), DateTime(2099, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1999, 1, 1), DateTime(2063, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1984, 1, 1), DateTime(2061, 1, 1), DateTime(2100, 1, 1) } } into TripleNullDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(DateTime1 from TripleNullDateTimeTestTable) DateTimeAggregate1, System.Max(DateTime2 from TripleNullDateTimeTestTable) DateTimeAggregate2, System.Max(DateTime3 from TripleNullDateTimeTestTable) DateTimeAggregate3 } }' Script, ') <> table { row { DateTime(1999, 1, 1) DateTimeAggregate1, DateTime(2099, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Max(DateTime) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*646ID, */ row { System.String('System.Max_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 }, row { 0, 1, 0.68 }, row { 0, -3, 0.87 }, row { 0, -3, 0.99 }, row { 0, -2, 1 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Max(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Max(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, 1 DecimalAggregate2, 1 DecimalAggregate3 } } then raise Error("System.Max(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*647ID, */ row { System.String('System.Max_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Max(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Max(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, -1 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Max(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*648ID, */ row { System.String('System.Max_System_Decimal_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 }, row { nil as Decimal Decimal1, nil as Decimal Decimal2, nil as Decimal Decimal3 }, row { 0, 1, 0.68 }, row { 0, -3, 0.87 }, row { 0, -3, 0.99 }, row { 0, -2, 1 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Decimal1 from TripleNullDecimalTestTable) DecimalAggregate1, System.Max(Decimal2 from TripleNullDecimalTestTable) DecimalAggregate2, System.Max(Decimal3 from TripleNullDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, 1 DecimalAggregate2, 1 DecimalAggregate3 } } then raise Error("System.Max(Decimal) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*649ID, */ row { System.String('System.Max_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 }, row { Integer(0), Integer(1), Integer(68) }, row { Integer(0), Integer(-3), Integer(87) }, row { Integer(0), Integer(-3), Integer(99) }, row { Integer(0), Integer(-2), Integer(100) } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Max(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Max(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(1) IntegerAggregate2, Integer(100) IntegerAggregate3 } } then raise Error("System.Max(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*650ID, */ row { System.String('System.Max_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Max(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Max(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-1) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Max(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*651ID, */ row { System.String('System.Max_System_Integer_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 }, row { nil as Integer, nil as Integer, nil as Integer }, row { Integer(0), Integer(1), Integer(68) }, row { Integer(0), Integer(-3), Integer(87) }, row { Integer(0), Integer(-3), Integer(99) }, row { Integer(0), Integer(-2), Integer(100) } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Integer1 from TripleNullIntegerTestTable) IntegerAggregate1, System.Max(Integer2 from TripleNullIntegerTestTable) IntegerAggregate2, System.Max(Integer3 from TripleNullIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(1) IntegerAggregate2, Integer(100) IntegerAggregate3 } } then raise Error("System.Max(Integer) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*652ID, */ row { System.String('System.Max_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 }, row { $0, $1, $0.68 }, row { $0, -$3, $0.87 }, row { $0, -$3, $0.99 }, row { $0, -$2, $1 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Max(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Max(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, $1 MoneyAggregate2, $1 MoneyAggregate3 } } then raise Error("System.Max(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*653ID, */ row { System.String('System.Max_System_Money_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Max(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Max(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, -$1 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Max(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*654ID, */ row { System.String('System.Max_System_Money_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 }, row { nil as Money, nil as Money, nil as Money }, row { $0, $1, $0.68 }, row { $0, -$3, $0.87 }, row { $0, -$3, $0.99 }, row { $0, -$2, $1 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Money1 from TripleNullMoneyTestTable) MoneyAggregate1, System.Max(Money2 from TripleNullMoneyTestTable) MoneyAggregate2, System.Max(Money3 from TripleNullMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, $1 MoneyAggregate2, $1 MoneyAggregate3 } } then raise Error("System.Max(Money) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*655ID, */ row { System.String('System.Max_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 }, row { "alphor", "dataphor", "i am your father" }, row { "ALPHO", "DATAPHOR", "I AM YOUR FATHER" }, row { "AAlphora", "ADataphor", "I am you father" } } into TripleStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(String1 from TripleStringTestTable) StringAggregate1, System.Max(String2 from TripleStringTestTable) StringAggregate2, System.Max(String3 from TripleStringTestTable) StringAggregate3 } }' Script, ') <> table { row { "Alphora" StringAggregate1, "DATAPHOR" StringAggregate2, "I AM YOUR FATHER" StringAggregate3 } } then raise Error("System.Max(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*656ID, */ row { System.String('System.Max_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 } } into TripleStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(String1 from TripleStringTestTable) StringAggregate1, System.Max(String2 from TripleStringTestTable) StringAggregate2, System.Max(String3 from TripleStringTestTable) StringAggregate3 } }' Script, ') <> table { row { "Alphora" StringAggregate1, "Dataphor" StringAggregate2, "I am your father" StringAggregate3 } } then raise Error("System.Max(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*657ID, */ row { System.String('System.Max_System_String_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 }, row { nil as String, nil as String, nil as String }, row { "alphora2", "dataphor", "i am your father" }, row { "ALPHORA3", "DATAPHOR", "I AM YOUR FATHER" }, row { "AAlphora", "ADataphor", "I am not your father" } } into TripleNullStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(String1 from TripleNullStringTestTable) StringAggregate1, System.Max(String2 from TripleNullStringTestTable) StringAggregate2, System.Max(String3 from TripleNullStringTestTable) StringAggregate3 } }' Script, ') <> table { row { "ALPHORA3" StringAggregate1, "Dataphor" StringAggregate2, "I am your father" StringAggregate3 } } then raise Error("System.Max(String) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*658ID, */ row { System.String('System.Max_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Time");' Table, 'insert table { row { Time(19, 1, 1) Time1, Time(20, 1, 1) Time2, Time(21, 1, 1) Time3 }, row { Time(19, 8, 0), Time(20, 8, 0), Time(21, 1, 1) }, row { Time(19, 3, 0), Time(20, 9, 9), Time(21, 1, 1) }, row { Time(19, 9, 9), Time(20, 6, 3), Time(21, 1, 1) }, row { Time(19, 8, 4), Time(20, 6, 1), Time(21, 1, 1) } } into TripleTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Time1 from TripleTimeTestTable) TimeAggregate1, System.Max(Time2 from TripleTimeTestTable) TimeAggregate2, System.Max(Time3 from TripleTimeTestTable) TimeAggregate3 } }' Script, ') <> table { row { Time(19, 9, 9) TimeAggregate1, Time(20, 9, 9) TimeAggregate2, Time(21, 1, 1) TimeAggregate3 } } then raise Error("System.Max(Time) failed1.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*659ID, */ row { System.String('System.Max_System_Time_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Time");' Table, 'insert table { row { Time(19, 1, 1) Time1, Time(20, 1, 1) Time2, Time(21, 1, 1) Time3 } } into TripleTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Time1 from TripleTimeTestTable) TimeAggregate1, System.Max(Time2 from TripleTimeTestTable) TimeAggregate2, System.Max(Time3 from TripleTimeTestTable) TimeAggregate3 } }' Script, ') <> table { row { Time(19, 1, 1) TimeAggregate1, Time(20, 1, 1) TimeAggregate2, Time(21, 1, 1) TimeAggregate3 } } then raise Error("System.Max(Time) failed3.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*660ID, */ row { System.String('System.Max_System_Time_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Time");' Table, 'insert table { row { Time(19, 1, 1) Time1, Time(20, 1, 1) Time2, Time(21, 1, 1) Time3 }, row { nil as Time, nil as Time, nil as Time }, row { Time(19, 8, 0), Time(20, 8, 0), Time(21, 1, 1) }, row { Time(19, 3, 0), Time(20, 9, 9), Time(21, 1, 1) }, row { Time(19, 9, 9), Time(20, 6, 3), Time(21, 1, 1) }, row { Time(19, 8, 4), Time(20, 6, 1), Time(21, 1, 1) } } into TripleNullTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Time1 from TripleNullTimeTestTable) TimeAggregate1, System.Max(Time2 from TripleNullTimeTestTable) TimeAggregate2, System.Max(Time3 from TripleNullTimeTestTable) TimeAggregate3 } }' Script, ') <> table { row { Time(19, 9, 9) TimeAggregate1, Time(20, 9, 9) TimeAggregate2, Time(21, 1, 1) TimeAggregate3 } } then raise Error("System.Max(Time) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*661ID, */ row { System.String('System.Max_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-2), TimeSpan.Ticks(100) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Max(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Max(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(1) TimeSpanAggregate2, TimeSpan.Ticks(100) TimeSpanAggregate3 } } then raise Error("System.Max(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*662ID, */ row { System.String('System.Max_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Max(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Max(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-1) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Max(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*663ID, */ row { System.String('System.Max_System_TimeSpan_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { nil as TimeSpan, nil as TimeSpan, nil as TimeSpan }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-2), TimeSpan.Ticks(100) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(TimeSpan1 from TripleNullTimeSpanTestTable) TimeSpanAggregate1, System.Max(TimeSpan2 from TripleNullTimeSpanTestTable) TimeSpanAggregate2, System.Max(TimeSpan3 from TripleNullTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(1) TimeSpanAggregate2, TimeSpan.Ticks(100) TimeSpanAggregate3 } } then raise Error("System.Max(TimeSpan) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*664ID, */ row { System.String('System.Max_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("VersionNumber");' Table, 'insert table { row { VersionNumber(65655, 0, 1, 1) VersionNumber1, VersionNumber(0, 0, 5279,98) VersionNumber2, VersionNumber(0, 0, 0, 9699) VersionNumber3 }, row { VersionNumber(65655, 0, 0, 66000), VersionNumber(0, 0, 0, 6000), VersionNumber(0, 0, 0,0) }, row { VersionNumber(0, 0, 0,1), VersionNumber(0,0,0,1), VersionNumber(0, 0, 0, 1) }, row { VersionNumber(65656, 0, 0, 0), VersionNumber(0, 0, 5280, 0), VersionNumber(0, 0, 0,9700) } } into TripleVersionNumberTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(VersionNumber1 from TripleVersionNumberTestTable) VersionNumberAggregate1, System.Max(VersionNumber2 from TripleVersionNumberTestTable) VersionNumberAggregate2, System.Max(VersionNumber3 from TripleVersionNumberTestTable) VersionNumberAggregate3 } }' Script, ') <> table { row { VersionNumber(65656, 0, 0, 0) VersionNumberAggregate1, VersionNumber(0, 0, 5280, 0) VersionNumberAggregate2, VersionNumber(0, 0, 0, 9700) VersionNumberAggregate3 } } then raise Error("System.Max(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*665ID, */ row { System.String('System.Min_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Date");' Table, 'insert table { row { Date(1900, 1, 1) Date1, Date(2000, 1, 1) Date2, Date(2100, 1, 1) Date3 }, row { Date(1980, 1, 1), Date(2080, 1, 1), Date(2100, 1, 1) }, row { Date(1930, 1, 1), Date(2099, 1, 1), Date(2100, 1, 1) }, row { Date(1999, 1, 1), Date(2063, 1, 1), Date(2100, 1, 1) }, row { Date(1984, 1, 1), Date(2061, 1, 1), Date(2100, 1, 1) } } into TripleDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Date1 from TripleDateTestTable) DateAggregate1, System.Min(Date2 from TripleDateTestTable) DateAggregate2, System.Min(Date3 from TripleDateTestTable) DateAggregate3 } }' Script, ') <> table { row { Date(1900, 1, 1) DateAggregate1, Date(2000, 1, 1) DateAggregate2, Date(2100, 1, 1) DateAggregate3 } } then raise Error("System.Min(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*666ID, */ row { System.String('System.Min_System_Date_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Date");' Table, 'insert table { row { Date(1900, 1, 1) Date1, Date(2000, 1, 1) Date2, Date(2100, 1, 1) Date3 } } into TripleDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Date1 from TripleDateTestTable) DateAggregate1, System.Min(Date2 from TripleDateTestTable) DateAggregate2, System.Min(Date3 from TripleDateTestTable) DateAggregate3 } }' Script, ') <> table { row { Date(1900, 1, 1) DateAggregate1, Date(2000, 1, 1) DateAggregate2, Date(2100, 1, 1) DateAggregate3 } } then raise Error("System.Min(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*667ID, */ row { System.String('System.Min_System_Date_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Date");' Table, 'insert table { row { Date(1900, 1, 1) Date1, Date(2000, 1, 1) Date2, Date(2100, 1, 1) Date3 }, row { nil as Date, nil as Date, nil as Date }, row { Date(1980, 1, 1), Date(2080, 1, 1), Date(2100, 1, 1) }, row { Date(1930, 1, 1), Date(2099, 1, 1), Date(2100, 1, 1) }, row { Date(1999, 1, 1), Date(2063, 1, 1), Date(2100, 1, 1) }, row { Date(1984, 1, 1), Date(2061, 1, 1), Date(2100, 1, 1) } } into TripleNullDateTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Date1 from TripleNullDateTestTable) DateAggregate1, System.Min(Date2 from TripleNullDateTestTable) DateAggregate2, System.Min(Date3 from TripleNullDateTestTable) DateAggregate3 } }' Script, ') <> table { row { Date(1900, 1, 1) DateAggregate1, Date(2000, 1, 1) DateAggregate2, Date(2100, 1, 1) DateAggregate3 } } then raise Error("System.Min(Date) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*668ID, */ row { System.String('System.Min_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("DateTime");' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1, DateTime(2000, 1, 1) DateTime2, DateTime(2100, 1, 1) DateTime3 }, row { DateTime(1980, 1, 1), DateTime(2080, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1930, 1, 1), DateTime(2099, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1999, 1, 1), DateTime(2063, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1984, 1, 1), DateTime(2061, 1, 1), DateTime(2100, 1, 1) } } into TripleDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(DateTime1 from TripleDateTimeTestTable) DateTimeAggregate1, System.Min(DateTime2 from TripleDateTimeTestTable) DateTimeAggregate2, System.Min(DateTime3 from TripleDateTimeTestTable) DateTimeAggregate3 } }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Min(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*669ID, */ row { System.String('System.Min_System_DateTime_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("DateTime");' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1, DateTime(2000, 1, 1) DateTime2, DateTime(2100, 1, 1) DateTime3 } } into TripleDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(DateTime1 from TripleDateTimeTestTable) DateTimeAggregate1, System.Min(DateTime2 from TripleDateTimeTestTable) DateTimeAggregate2, System.Min(DateTime3 from TripleDateTimeTestTable) DateTimeAggregate3 } }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Min(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*670ID, */ row { System.String('System.Min_System_DateTime_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("DateTime");' Table, 'insert table { row { DateTime(1900, 1, 1) DateTime1, DateTime(2000, 1, 1) DateTime2, DateTime(2100, 1, 1) DateTime3 }, row { nil as DateTime, nil as DateTime, nil as DateTime }, row { DateTime(1980, 1, 1), DateTime(2080, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1930, 1, 1), DateTime(2099, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1999, 1, 1), DateTime(2063, 1, 1), DateTime(2100, 1, 1) }, row { DateTime(1984, 1, 1), DateTime(2061, 1, 1), DateTime(2100, 1, 1) } } into TripleNullDateTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(DateTime1 from TripleNullDateTimeTestTable) DateTimeAggregate1, System.Min(DateTime2 from TripleNullDateTimeTestTable) DateTimeAggregate2, System.Min(DateTime3 from TripleNullDateTimeTestTable) DateTimeAggregate3 } }' Script, ') <> table { row { DateTime(1900, 1, 1) DateTimeAggregate1, DateTime(2000, 1, 1) DateTimeAggregate2, DateTime(2100, 1, 1) DateTimeAggregate3 } } then raise Error("System.Min(DateTime) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*671ID, */ row { System.String('System.Min_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 }, row { 0, 1, 0.68 }, row { 0, -3, 0.87 }, row { 0, -3, 0.99 }, row { 0, -2, 1 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Min(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Min(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, -3 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Min(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*672ID, */ row { System.String('System.Min_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Min(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Min(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, -1 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Min(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*673ID, */ row { System.String('System.Min_System_Decimal_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0d Decimal1, -1d Decimal2, 0.57d Decimal3 }, row { nil as Decimal, nil as Decimal, nil as Decimal }, row { 0, 1, 0.68 }, row { 0, -3, 0.87 }, row { 0, -3, 0.99 }, row { 0, -2, 1 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Decimal1 from TripleNullDecimalTestTable) DecimalAggregate1, System.Min(Decimal2 from TripleNullDecimalTestTable) DecimalAggregate2, System.Min(Decimal3 from TripleNullDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0 DecimalAggregate1, -3 DecimalAggregate2, 0.57 DecimalAggregate3 } } then raise Error("System.Min(Decimal) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*674ID, */ row { System.String('System.Min_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 }, row { Integer(0), Integer(1), Integer(68) }, row { Integer(0), Integer(-3), Integer(87) }, row { Integer(0), Integer(-3), Integer(99) }, row { Integer(0), Integer(-2), Integer(100) } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Min(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Min(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-3) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Min(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*675ID, */ row { System.String('System.Min_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Min(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Min(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-1) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Min(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*676ID, */ row { System.String('System.Min_System_Integer_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { Integer(0) Integer1, Integer(-1) Integer2, Integer(57) Integer3 }, row { nil as Integer, nil as Integer, nil as Integer }, row { Integer(0), Integer(1), Integer(68) }, row { Integer(0), Integer(-3), Integer(87) }, row { Integer(0), Integer(-3), Integer(99) }, row { Integer(0), Integer(-2), Integer(100) } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Integer1 from TripleNullIntegerTestTable) IntegerAggregate1, System.Min(Integer2 from TripleNullIntegerTestTable) IntegerAggregate2, System.Min(Integer3 from TripleNullIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(0) IntegerAggregate1, Integer(-3) IntegerAggregate2, Integer(57) IntegerAggregate3 } } then raise Error("System.Min(Integer) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*677ID, */ row { System.String('System.Min_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 }, row { $0, $1, $0.68 }, row { $0, -$3, $0.87 }, row { $0, -$3, $0.99 }, row { $0, -$2, $1 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Min(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Min(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, -$3 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Min(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*678ID, */ row { System.String('System.Min_System_Money_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Min(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Min(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, -$1 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Min(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*679ID, */ row { System.String('System.Min_System_Money_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0 Money1, -$1 Money2, $0.57 Money3 }, row { nil as Money, nil as Money, nil as Money }, row { $0, $1, $0.68 }, row { $0, -$3, $0.87 }, row { $0, -$3, $0.99 }, row { $0, -$2, $1 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Money1 from TripleNullMoneyTestTable) MoneyAggregate1, System.Min(Money2 from TripleNullMoneyTestTable) MoneyAggregate2, System.Min(Money3 from TripleNullMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0 MoneyAggregate1, -$3 MoneyAggregate2, $0.57 MoneyAggregate3 } } then raise Error("System.Min(Money) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*680ID, */ row { System.String('System.Min_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 }, row { "alphorab", "dataphorb", "i am your fatherb" }, row { "ALPHORAc", "DATAPHORc", "I AM YOUR FATHERc" }, row { "Alphora", "Dataphor", "I am ze father" } } into TripleStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(String1 from TripleStringTestTable) StringAggregate1, System.Min(String2 from TripleStringTestTable) StringAggregate2, System.Min(String3 from TripleStringTestTable) StringAggregate3 } }' Script, ') <> table { row { "Alphora" StringAggregate1, "Dataphor" StringAggregate2, "I am your father" StringAggregate3 } } then raise Error("System.Min(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*681ID, */ row { System.String('System.Min_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 } } into TripleStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(String1 from TripleStringTestTable) StringAggregate1, System.Min(String2 from TripleStringTestTable) StringAggregate2, System.Min(String3 from TripleStringTestTable) StringAggregate3 } }' Script, ') <> table { row { "Alphora" StringAggregate1, "Dataphor" StringAggregate2, "I am your father" StringAggregate3 } } then raise Error("System.Min(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*682ID, */ row { System.String('System.Min_System_String_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("String");' Table, 'insert table { row { "Alphora" String1, "Dataphor" String2, "I am your father" String3 }, row { nil as String, nil as String, nil as String }, row { "balphora", "bdataphor", "bi am your father" }, row { "cALPHORA", "cDATAPHOR", "cI AM YOUR FATHER" }, row { "Alphora", "Dataphor", "zI am ze father" } } into TripleNullStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(String1 from TripleNullStringTestTable) StringAggregate1, System.Min(String2 from TripleNullStringTestTable) StringAggregate2, System.Min(String3 from TripleNullStringTestTable) StringAggregate3 } }' Script, ') <> table { row { "Alphora" StringAggregate1, "bdataphor" StringAggregate2, "bi am your father" StringAggregate3 } } then raise Error("System.Min(String) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*683ID, */ row { System.String('System.Min_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Time");' Table, 'insert table { row { Time(19, 1, 1) Time1, Time(20, 1, 1) Time2, Time(21, 1, 1) Time3 }, row { Time(19, 8, 0), Time(20, 8, 0), Time(21, 1, 1) }, row { Time(19, 3, 0), Time(20, 9, 9), Time(21, 1, 1) }, row { Time(19, 9, 9), Time(20, 6, 3), Time(21, 1, 1) }, row { Time(19, 8, 4), Time(20, 6, 1), Time(21, 1, 1) } } into TripleTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Time1 from TripleTimeTestTable) TimeAggregate1, System.Min(Time2 from TripleTimeTestTable) TimeAggregate2, System.Min(Time3 from TripleTimeTestTable) TimeAggregate3 } }' Script, ') <> table { row { Time(19, 1, 1) TimeAggregate1, Time(20, 1, 1) TimeAggregate2, Time(21, 1, 1) TimeAggregate3 } } then raise Error("System.Min(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*684ID, */ row { System.String('System.Min_System_Time_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Time");' Table, 'insert table { row { Time(19, 1, 1) Time1, Time(20, 1, 1) Time2, Time(21, 1, 1) Time3 } } into TripleTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Time1 from TripleTimeTestTable) TimeAggregate1, System.Min(Time2 from TripleTimeTestTable) TimeAggregate2, System.Min(Time3 from TripleTimeTestTable) TimeAggregate3 } }' Script, ') <> table { row { Time(19, 1, 1) TimeAggregate1, Time(20, 1, 1) TimeAggregate2, Time(21, 1, 1) TimeAggregate3 } } then raise Error("System.Min(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*685ID, */ row { System.String('System.Min_System_Time_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Time");' Table, 'insert table { row { Time(19, 1, 1) Time1, Time(20, 1, 1) Time2, Time(21, 1, 1) Time3 }, row { nil as Time, nil as Time, nil as Time }, row { Time(19, 8, 0), Time(20, 8, 0), Time(21, 1, 1) }, row { Time(19, 3, 0), Time(20, 9, 9), Time(21, 1, 1) }, row { Time(19, 9, 9), Time(20, 6, 3), Time(21, 1, 1) }, row { Time(19, 8, 4), Time(20, 6, 1), Time(21, 1, 1) } } into TripleNullTimeTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(Time1 from TripleNullTimeTestTable) TimeAggregate1, System.Min(Time2 from TripleNullTimeTestTable) TimeAggregate2, System.Min(Time3 from TripleNullTimeTestTable) TimeAggregate3 } }' Script, ') <> table { row { Time(19, 1, 1) TimeAggregate1, Time(20, 1, 1) TimeAggregate2, Time(21, 1, 1) TimeAggregate3 } } then raise Error("System.Min(Time) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*686ID, */ row { System.String('System.Min_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-2), TimeSpan.Ticks(100) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Min(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Min(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-3) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Min(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*687ID, */ row { System.String('System.Min_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Min(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Min(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-1) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Min(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*688ID, */ row { System.String('System.Min_System_TimeSpan_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(-1) TimeSpan2, TimeSpan.Ticks(57) TimeSpan3 }, row { nil as TimeSpan, nil as TimeSpan, nil as TimeSpan }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(1), TimeSpan.Ticks(68) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(87) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-3), TimeSpan.Ticks(99) }, row { TimeSpan.Ticks(0), TimeSpan.Ticks(-2), TimeSpan.Ticks(100) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(TimeSpan1 from TripleNullTimeSpanTestTable) TimeSpanAggregate1, System.Min(TimeSpan2 from TripleNullTimeSpanTestTable) TimeSpanAggregate2, System.Min(TimeSpan3 from TripleNullTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(0) TimeSpanAggregate1, TimeSpan.Ticks(-3) TimeSpanAggregate2, TimeSpan.Ticks(57) TimeSpanAggregate3 } } then raise Error("System.Min(TimeSpan) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*689ID, */ row { System.String('System.Min_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("VersionNumber");' Table, 'insert table { row { VersionNumber(0,0,0,1) VersionNumber1, VersionNumber(0,0,1,1) VersionNumber2, VersionNumber(1,0,1,1) VersionNumber3 }, row { VersionNumber(0, 0, 0, 2 ), VersionNumber(0, 0,2, 1), VersionNumber(2, 0, 0, 0) }, row { VersionNumber(0,0,1,0), VersionNumber(0,0,1,2), VersionNumber(2,1,0,0) }, row { VersionNumber(1, 0, 0, 0), VersionNumber(0, 1, 0, 0), VersionNumber(2,0,0,1) }, row { VersionNumber(1984, 1, 1,0), VersionNumber(2061, 1, 1,0), VersionNumber(2100, 0, 1, 1) } } into TripleVersionNumberTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Min(VersionNumber1 from TripleVersionNumberTestTable) VersionNumberAggregate1, System.Min(VersionNumber2 from TripleVersionNumberTestTable) VersionNumberAggregate2, System.Min(VersionNumber3 from TripleVersionNumberTestTable) VersionNumberAggregate3 } }' Script, ') <> table { row { VersionNumber(0,0,0,1) VersionNumberAggregate1, VersionNumber(0,0,1,1) VersionNumberAggregate2, VersionNumber(1,0,1,1) VersionNumberAggregate3 } } then raise Error("System.Min(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*690ID, */ row { System.String('System.Money') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $37 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $37 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*691ID, */ row { System.String('System.Money') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $4.2 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $4.2 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*692ID, */ row { System.String('System.Money') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $0.128 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $0.128 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*693ID, */ row { System.String('System.Money') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $0 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $0 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*694ID, */ row { System.String('System.Money') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $1 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $1 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*695ID, */ row { System.String('System.Money') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { -$1 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> -$1 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*696ID, */ row { System.String('System.Money') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { -$123456.789 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> -$123456.789 then raise Error("System.Money normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*697ID, */ row { System.String('System.Money') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { -$100000000000000 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> -$100000000000000 then raise Error("System.Money boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*698ID, */ row { System.String('System.Money') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { -$99999999999999.99 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> -$99999999999999.99 then raise Error("System.Money boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*699ID, */ row { System.String('System.Money') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { -$0.01 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> -$0.01 then raise Error("System.Money boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*700ID, */ row { System.String('System.Money') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $10000000000000 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $10000000000000 then raise Error("System.Money boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*701ID, */ row { System.String('System.Money') Name, 114 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $9999999999999.99 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $9999999999999.99 then raise Error("System.Money boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*702ID, */ row { System.String('System.Money') Name, 115 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $0.01 Money1 } } into ListMoneyTestTable;' InsertTableStatement, '' BeforeScript, 'if (Money1 from row from ListMoneyTestTable) <> $0.01 then raise Error("System.Money boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*703ID, */ row { System.String('System.Money') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { $5.5 Money1 } } into ListMoneyTestTable; NegativeTest("insert table { row { $5.5 Money1 } } into ListMoneyTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { $42.89 Money1 } } into ListMoneyTestTable; NegativeTest("insert table { row { $42.89 Money1 } } into ListMoneyTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*704ID, */ row { System.String('System.Money') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Money1 : Money, Money2 : Money, key { Money1 }, order { Money2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { $3.7 Money1, $42 Money2 }, row { $1.16 Money1, $0.255 Money2 }, row { $11.7 Money1, $254000.01 Money2 }, row { $1.88 Money1, $4200 Money2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Money2 asc }", "DeviceOrder order by { Money2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*705ID, */ row { System.String('System.Money') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Money1 : Money, Money2 : Money, key { Money1 }, order { Money2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { $3.7 Money1, $42 Money2 }, row { $1.16 Money1, $0.255 Money2 }, row { $11.7 Money1, $254000.01 Money2 }, row { $1.88 Money1, $4200 Money2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Money2 desc }", "DeviceOrder order by { Money2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*706ID, */ row { System.String('System.Money.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Money" });' Table, 'insert table { row { "98.6" String1, $98.60 Money2 }, row { "107.5", $107.50 }, row { "0.98", $0.98} } into ListStringMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringMoneyTestTable over { String1 } add { Money.AsString(String1) Money2 }' Script, ') <> ListStringMoneyTestTable then raise Error("System.Money.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*707ID, */ row { System.String('System.Money.ReadAsString_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "String", "String" });' Table, 'insert table { row { $98.6 Money1, "0" String2, "98.60" String3 }, row { $107.5, "Test", "107.50" }, row { $0.98, "0", "0.98"} } into ListMoneyStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyStringStringTestTable over { Money1, String2 } add { ReadAsString(Money1) String3 }' Script, ') <> ListMoneyStringStringTestTable then raise Error("System.Money.ReadAsString(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*708ID, */ row { System.String('System.Money.ReadValue_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Decimal" });' Table, 'insert table { row {  $100.03 Money1,  100.03 Decimal2 }, row { $0.67, 0.67 }, row { $156.78, 156.78 } } into ListMoneyDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListMoneyDecimalTestTable over { Money1 } add { Money.ReadValue(Money1) Decimal2 }' Script, ') <> ListMoneyDecimalTestTable then raise Error("System.Money.ReadValue(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*709ID, */ row { System.String('System.Money.WriteAsString_System_Money_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "String", "Money" });' Table, 'insert table { row { $98.6 Money1, "100.2" String2, $100.2 Money3 }, row { $100.1, "0.01", $0.01 }, row { $0.1, "0.57", $0.57} } into ListMoneyStringMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyStringMoneyTestTable over { Money1, String2 } add { WriteAsString(Money1, String2) Money3 }' Script, ') <> ListMoneyStringMoneyTestTable then raise Error("System.Money.WriteAsString(Money,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*710ID, */ row { System.String('System.Money.WriteValue_System_Money_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Money", "Decimal", "Money" });' Table, 'insert table { row { $98.6 Money1, 100.2 Decimal2, $100.2 Money3 }, row { $100.1, 0.01, $0.01 }, row { $0.1, 0.57, $0.57} } into ListMoneyDecimalMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyDecimalMoneyTestTable over { Money1, Decimal2 } add { WriteValue(Money1, Decimal2) Money3 }' Script, ') <> ListMoneyDecimalMoneyTestTable then raise Error("System.Money.WriteValue(Money,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*711ID, */ row { System.String('System.Money_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "Money"});' Table, 'insert table { row { 12.32 Decimal1, $12.32 Money2 }, row { 113.91, $113.91 }, row { 11312321312.91, $11312321312.91 } } into ListDecimalMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalMoneyTestTable over { Decimal1 } add { Money(Decimal1) Money2 }' Script, ') <> ListDecimalMoneyTestTable then raise Error("System.Money(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*712ID, */ row { System.String('System.Name.ReadValue_System_Name_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name" });' Table, 'insert table { row {  Name("Adam") Name1,  Name("Adam") Name2 }, row { Name("Developer"), Name("Developer") }, row { Name("Admin"), Name("Admin") } } into ListNameNameTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListNameNameTestTable over { Name1 } add { ReadValue(Name1) Name2 }' Script, ') <> ListNameNameTestTable then raise Error("System.Name.ReadValue(Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*713ID, */ row { System.String('System.Name.WriteValue_System_Name_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Name", "Name", "Name" });' Table, 'insert table { row { Name("Developer") Name1, Name("Tester") Name2, Name("Tester") Name3 }, row { Name("hundred"), Name("twofiftyfive"), Name("twofiftyfive") }, row { Name("MyGroup"),Name("TheirGroup"), Name("TheirGroup")} } into ListNameNameNameTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameNameNameTestTable over { Name1, Name2 } add { WriteValue(Name1, Name2) Name3 }' Script, ') <> ListNameNameNameTestTable then raise Error("System.Name.WriteValue(Name,Name) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*714ID, */ row { System.String('System.Name_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Name", "String", "Name"});' Table, 'insert table { row { Name("Rebellion") Name1, "Enterprise" String2, Name("Enterprise") Name3 }, row { Name("Tis"), "Tester", Name("Tester") } } into ListNameStringNameTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListNameStringNameTestTable over { Name1, String2 } add { Name(String2) Name3}' Script, ') <> ListNameStringNameTestTable then raise Error("System.Name(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*715ID, */ row { System.String('System.NameFromGuid_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringTestTable { Guid1 : Guid, String2 : String static tags { Storage.Length = "50" } };' Table, 'insert table { row { Guid("12345678-91ab-cdef-abcd-0123456789ab") Guid1, "12345678_91ab_cdef_abcd_0123456789ab" String2 } } into ListGuidStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListGuidStringTestTable over { Guid1 } add { NameFromGuid(Guid1) String2 }' Script, ') <> ListGuidStringTestTable then raise Error("System.NameFromGuid(Guid) failed.");' AfterScript, 'drop table ListGuidStringTestTable' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*716ID, */ row { System.String('System.PadLeft_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String" });' Table, 'insert table { row { "" String1, 0 Integer2, "" String3 }, row { "", 5, "     " }, row { "1", 2, " 1" }, row { "Four", 10, "      Four" }, row { "TooLong", 2, "TooLong" } } into ListStringIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringTestTable over { String1, Integer2 } add { System.PadLeft(String1, Integer2) String3 }' Script, ') <> ListStringIntegerStringTestTable then raise Error("System.PadLeft(String,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*717ID, */ row { System.String('System.PadLeft_System_String_System_Integer_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String", "String" });' Table, 'insert table { row { "" String1, 0 Integer2, "" String3, "" String4 }, row { "1", 2, "a1", "a1" }, row { "Four", 10, "a", "aaaaaaFour" }, row { "TooLong", 2, "TooLong", "TooLong" } } into ListStringIntegerStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringStringTestTable over { String1, Integer2, String3 } add { System.PadLeft(String1, Integer2, String3) String4 }' Script, ') <> ListStringIntegerStringStringTestTable then raise Error("System.PadLeft(String,Integer,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*718ID, */ row { System.String('System.PadRight_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String" });' Table, 'insert table { row { "" String1, 0 Integer2, "" String3 }, row { "", 5, "     " }, row { "1", 2, "1 " }, row { "Four", 10, "Four      " }, row { "TooLong", 2, "TooLong" } } into ListStringIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringTestTable over { String1, Integer2 } add { System.PadRight(String1, Integer2) String3 }' Script, ') <> ListStringIntegerStringTestTable then raise Error("System.PadRight(String,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*719ID, */ row { System.String('System.PadRight_System_String_System_Integer_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String", "String" });' Table, 'insert table { row { "adam" String1, 5 Integer2, "s" String3, "adams" String4 }, row { "redride", 8, "r", "redrider"}, row { "1", 2, "1a", "11" }, row { "Four", 10, "a", "Fouraaaaaa" }, row { "TooLong", 2, "TooLong", "TooLong" } } into ListStringIntegerStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringStringTestTable over { String1, Integer2, String3 } add { System.PadRight(String1, Integer2, String3) String4 }' Script, ') <> ListStringIntegerStringStringTestTable then raise Error("System.PadRight(String,Integer,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*720ID, */ row { System.String('System.Pos_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Integer" });' Table, 'insert table { row { "ora" String1, "Alphora" String2, 4 Integer3 }, row { "Dataphor", "Dataphor", 0 }, row { "", "", 0 }, row { "Alphora", "Dataphor", -1 } } into ListStringStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringIntegerTestTable over { String1, String2 } add { System.Pos(String1, String2) Integer3 }' Script, ') <> ListStringStringIntegerTestTable then raise Error("System.Pos(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*721ID, */ row { System.String('System.Remove_System_String_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "me" String1, 0 Integer2, 0 Integer3, "me" String4 }, row { "Alphora", 3, 0, "Alphora" }, row { "Alphora", 0, 3, "hora" }, row { "Alphora", 3, 4, "Alp"  } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.Remove(String1, Integer2, Integer3) String4 }' Script, ') <> ListStringIntegerIntegerStringTestTable then raise Error("System.Remove(String,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*722ID, */ row { System.String('System.Remove_System_String_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "Alphora" String1, 0 Integer2, 8 Integer3, "Alphora" String4 } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.Remove(String1, Integer2, Integer3) String4 };' Script, '", "System.Remove(String,Integer,Integer) failed to throw on length out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*723ID, */ row { System.String('System.Remove_System_String_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "Alphora" String1, 7 Integer2, 0 Integer3, "Alphora" String4 } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.Remove(String1, Integer2, Integer3) String4 };' Script, '", "System.Remove(String,Integer,Integer) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*724ID, */ row { System.String('System.Replace_System_String_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "String", "String" });' Table, 'insert table { row { "Adam" String1, "d" String2, "a" String3, "Aaam" String4 }, row { "Alphora", "ph", "f", "Alfora" }, row { "Softwise", "is", "iz", "Softwize" }, row { "Him", "Him", "Her", "Her"  } } into ListStringStringStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringStringStringTestTable over { String1, String2, String3 } add { System.Replace(String1, String2, String3) String4 }' Script, ') <> ListStringStringStringStringTestTable then raise Error("System.Replace(String,String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*725ID, */ row { System.String('System.Round_System_Decimal_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Integer", "Decimal" });' Table, 'insert table { row { 0d Decimal1, 0 Integer2, 0d Decimal3 }, row { 3.14159, 2, 3.14 }, row { 314159, -2, 314200 }, row { 3.14159, 0, 3 } } into ListDecimalIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalIntegerDecimalTestTable over { Decimal1, Integer2 } add { System.Round(Decimal1, Integer2) Decimal3 }' Script, ') <> ListDecimalIntegerDecimalTestTable then raise Error("System.Round(Decimal,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*726ID, */ row { System.String('System.Short') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 37 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 37 then raise Error("System.Short normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*727ID, */ row { System.String('System.Short') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 42 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 42 then raise Error("System.Short normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*728ID, */ row { System.String('System.Short') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 128 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 128 then raise Error("System.Short normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*729ID, */ row { System.String('System.Short') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 0 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 0 then raise Error("System.Short normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*730ID, */ row { System.String('System.Short') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 1 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 1 then raise Error("System.Short normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*731ID, */ row { System.String('System.Short') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { -1 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> -1 then raise Error("System.Short normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*732ID, */ row { System.String('System.Short') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { -32767 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> -32767 then raise Error("System.Short boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*733ID, */ row { System.String('System.Short') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { -32768 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> -32768 then raise Error("System.Short boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*734ID, */ row { System.String('System.Short') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 32766 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 32766 then raise Error("System.Short boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*735ID, */ row { System.String('System.Short') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 32767 Short1 } } into ListShortTestTable;' InsertTableStatement, '' BeforeScript, 'if (Short1 from row from ListShortTestTable) <> 32767 then raise Error("System.Short boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*736ID, */ row { System.String('System.Short') Name, 120 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -32769 Short1 } } into ListShortTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*737ID, */ row { System.String('System.Short') Name, 121 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { -32770 Short1 } } into ListShortTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*738ID, */ row { System.String('System.Short') Name, 122 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 32768 Short1 } } into ListShortTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*739ID, */ row { System.String('System.Short') Name, 123 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { 32769 Short1 } } into ListShortTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*740ID, */ row { System.String('System.Short') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { 5 Short1 } } into ListShortTestTable; NegativeTest("insert table { row { 5 Short1 } } into ListShortTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { 42 Short1 } } into ListShortTestTable; NegativeTest("insert table { row { 42 Short1 } } into ListShortTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*741ID, */ row { System.String('System.Short') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Short1 : Short, Short2 : Short, key { Short1 }, order { Short2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Short1, 42 Short2 }, row { 116 Short1, 255 Short2 }, row { 117 Short1, 254 Short2 }, row { 188 Short1, 42 Short2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Short2 asc }", "DeviceOrder order by { Short2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*742ID, */ row { System.String('System.Short') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Short1 : Short, Short2 : Short, key { Short1 }, order { Short2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { 37 Short1, 42 Short2 }, row { 116 Short1, 255 Short2 }, row { 117 Short1, 254 Short2 }, row { 188 Short1, 42 Short2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Short2 desc }", "DeviceOrder order by { Short2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*743ID, */ row { System.String('System.Short.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Short" });' Table, 'insert table { row { "255" String1, 255 Short2 }, row { "123", 123 }, row { "1", 1 } } into ListStringShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringShortTestTable over { String1 } add { Short.AsString(String1) Short2 }' Script, ') <> ListStringShortTestTable then raise Error("System.Short.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*744ID, */ row { System.String('System.Short.ReadAsString_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "String", "String" });' Table, 'insert table { row { 1 Short1, "0" String2, "1" String3 }, row { 156, "Test", "156" }, row { 255, "0", "255"} } into ListShortStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortStringStringTestTable over { Short1, String2 } add { ReadAsString(Short1) String3 }' Script, ') <> ListShortStringStringTestTable then raise Error("System.Short.ReadAsString(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*745ID, */ row { System.String('System.Short.ReadValue_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short" });' Table, 'insert table { row {  100 Short1,  100 Short2 }, row { 0, 0 }, row { 255, 255 } } into ListShortShortTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListShortShortTestTable over { Short1 } add { ReadValue(Short1) Short2 }' Script, ') <> ListShortShortTestTable then raise Error("System.Short.ReadValue(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*746ID, */ row { System.String('System.Short.WriteAsString_System_Short_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "String", "Short" });' Table, 'insert table { row { 98 Short1, "143" String2, 143 Short3 }, row { 1, "245", 245 }, row { 255, "1", 1} } into ListShortStringShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortStringShortTestTable over { Short1, String2 } add { WriteAsString(Short1, String2) Short3 }' Script, ') <> ListShortStringShortTestTable then raise Error("System.Short.WriteAsString(Short,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*747ID, */ row { System.String('System.Short.WriteValue_System_Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Short", "Short", "Short" });' Table, 'insert table { row { 98 Short1, 100 Short2, 100 Short3 }, row { 100, 255, 255 }, row { 1,65, 65} } into ListShortShortShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { WriteValue(Short1, Short2) Short3 }' Script, ') <> ListShortShortShortTestTable then raise Error("System.Short.WriteValue(Short,Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*748ID, */ row { System.String('System.Short_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "Short", "Short"});' Table, 'insert table { row { 128 Short1, 255 Short2, 128 Short3 }, row { 1, 64, 1 } } into ListShortShortShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortShortShortTestTable over { Short1, Short2 } add { Short(Short1) Short3}' Script, ') <> ListShortShortShortTestTable then raise Error("System.Short(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*749ID, */ row { System.String('System.StartsWith_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, true Boolean3 }, row { "Dataphoria", "ria", false }, row { "Dataphor", "ora", false }, row { "Softwise", "Soft", true }, row { "Dataphor", "DATAPHOR", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { StartsWith(String1, String2) Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("StartsWith(String,String) failed. Not working regardless of string case.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*750ID, */ row { System.String('System.StartsWith_System_String_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Boolean" });' Table, 'insert table { row { "Alphora" String1, "Alphora" String2, true Boolean3 }, row { "Dataphoria", "ria", false }, row { "Dataphor", "ora", false }, row { "Softwise", "Soft", true }, row { "Dataphor", "DATAPHOR", false } } into ListStringStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringBooleanTestTable over { String1, String2 } add { StartsWith(String1, String2) Boolean3 }' Script, ') <> ListStringStringBooleanTestTable then raise Error("StartsWith(String,String) failed. Did not compare case sensitively.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*751ID, */ row { System.String('System.String') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Test" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "Test" then raise Error("System.String ''Test'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*752ID, */ row { System.String('System.String') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "Alphora" then raise Error("System.String ''Alphora'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*753ID, */ row { System.String('System.String') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Dataphor" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "Dataphor" then raise Error("System.String ''Dataphor'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*754ID, */ row { System.String('System.String') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "DAE" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "DAE" then raise Error("System.String ''DAE'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*755ID, */ row { System.String('System.String') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "McKay Salisbury" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "McKay Salisbury" then raise Error("System.String ''McKay Salisbury'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*756ID, */ row { System.String('System.String') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "
		 Whitespace Test" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "
		 Whitespace Test" then raise Error("System.String with whitespace value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*757ID, */ row { System.String('System.String') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "| [0N741n - 5ym|3075" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "| [0N741n - 5ym|3075" then raise Error("System.String in 1337 sp33k (symbols and numbers test) was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*758ID, */ row { System.String('System.String') Name, 107 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "WeIrD CaSe" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) <> "WeIrD CaSe" then raise Error("System.String containing strange mixed case value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*759ID, */ row { System.String('System.String') Name, 108 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "TEST CASE" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) = "test case" then raise Error("System.String compared insensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*760ID, */ row { System.String('System.String') Name, 109 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "test case" String1 } } into ListStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (String1 from row from ListStringTestTable) = "TEST CASE" then raise Error("System.String compared insensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*761ID, */ row { System.String('System.String') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { "True" String1 } } into ListStringTestTable; NegativeTest("insert table { row { ''True'' String1 } } into ListStringTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { ''False'' String1 } } into ListStringTestTable; NegativeTest("insert table { row { ''False'' String1 } } into ListStringTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*762ID, */ row { System.String('System.String') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { String1 : String, String2 : String, key { String1 }, order { String2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" String1, "This is not" String2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { String2 asc }", "DeviceOrder order by { String2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*763ID, */ row { System.String('System.String') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { String1 : String, String2 : String, key { String1 }, order { String2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" String1, "This is not" String2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { String2 desc }", "DeviceOrder order by { String2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*764ID, */ row { System.String('System.String.ReadValue_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String" });' Table, 'insert table { row {  String("100") String1,  String("100") String2 }, row { String("Developer"), String("Developer") }, row { String("Admin"), String("Admin") } } into ListStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringTestTable over { String1 } add { ReadValue(String1) String2 }' Script, ') <> ListStringStringTestTable then raise Error("System.String.ReadValue(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*765ID, */ row { System.String('System.String.WriteValue_System_String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "String" });' Table, 'insert table { row { String("Developer") String1, String("Tester") String2, String("Tester") String3 }, row { String("100"), String("255"), String("255") }, row { String("MyGroup"),String("TheirGroup"), String("TheirGroup")} } into ListStringStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringStringTestTable over { String1, String2 } add { WriteValue(String1, String2) String3 }' Script, ') <> ListStringStringStringTestTable then raise Error("System.String.WriteValue(String,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*766ID, */ row { System.String('System.String_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "String", "String"});' Table, 'insert table { row { "Rebellion" String1, "Enterprise" String2, "Enterprise" String3 }, row { "07f9b0d7ea0843708a9e", "Tester", "Tester" } } into ListStringStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringStringTestTable over { String1, String2 } add { String(String2) String3}' Script, ') <> ListStringStringStringTestTable then raise Error("System.String(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*767ID, */ row { System.String('System.SubString_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "" String1, 0 Integer2, 0 Integer3, "" String4 }, row { "Alphora", 3, 0, "hora" }, row { "Alphora", 0, 3, "Alphora" }, row { "Alphora", 4, 4, "ora"  } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.SubString(String1, Integer2) String4 }' Script, ') <> ListStringIntegerIntegerStringTestTable then raise Error("System.SubString(String,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*768ID, */ row { System.String('System.SubString_System_String_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "Alphora" String1, 7 Integer2, 0 Integer3, "Alphora" String4 } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.SubString(String1, Integer2) String4 };' Script, '", "System.SubString(String,Integer) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*769ID, */ row { System.String('System.SubString_System_String_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "Me" String1, 0 Integer2, 1 Integer3, "M" String4 }, row { "Alphora", 3, 1, "h" }, row { "Alphora", 0, 3, "Alp" }, row { "Alphora", 3, 4, "hora"  } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.SubString(String1, Integer2, Integer3) String4 }' Script, ') <> ListStringIntegerIntegerStringTestTable then raise Error("System.SubString(String,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*770ID, */ row { System.String('System.SubString_System_String_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "Alphora" String1, 0 Integer2, 8 Integer3, "Alphora" String4 } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.SubString(String1, Integer2, Integer3) String4 };' Script, '", "System.SubString(String,Integer,Integer) failed to throw on length out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*771ID, */ row { System.String('System.SubString_System_String_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "Integer", "String" });' Table, 'insert table { row { "Alphora" String1, 7 Integer2, 0 Integer3, "Alphora" String4 } } into ListStringIntegerIntegerStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringIntegerIntegerStringTestTable over { String1, Integer2, Integer3 } add { System.SubString(String1, Integer2, Integer3) String4 };' Script, '", "System.SubString(String,Integer,Integer) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*772ID, */ row { System.String('System.Sum_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, 0.01 Decimal3 }, row { 0.0, 0.01, 0.02 }, row { 0.0, -0.01, 0.04 }, row { 0.0, -655.36, 0.08 }, row { 0.0, -655.36, 0.16 } } into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Sum(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Sum(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0.0 DecimalAggregate1, -1310.72 DecimalAggregate2, 0.31 DecimalAggregate3 } } then raise Error("System.Sum(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*773ID, */ row { System.String('System.Sum_System_Decimal_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, 'insert table { row { 0.0 Decimal1, -655.36 Decimal2, 0.01 Decimal3 }} into TripleDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Sum(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Sum(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0.0 DecimalAggregate1, -655.36 DecimalAggregate2, 0.01 DecimalAggregate3 } } then raise Error("System.Sum(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*774ID, */ row { System.String('System.Sum_System_Decimal_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Decimal");' Table, 'insert table { row { 0.0 Decimal1, 0.0 Decimal2, 0.01 Decimal3 }, row { nil as Decimal, nil as Decimal, nil as Decimal }, row { 0.0, 0.01, 0.02 }, row { 0.0, -0.01, 0.04 }, row { 0.0, -655.36, 0.08 }, row { 0.0, -655.36, 0.16 } } into TripleNullDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Decimal1 from TripleNullDecimalTestTable) DecimalAggregate1, System.Sum(Decimal2 from TripleNullDecimalTestTable) DecimalAggregate2, System.Sum(Decimal3 from TripleNullDecimalTestTable) DecimalAggregate3 } }' Script, ') <> table { row { 0.0 DecimalAggregate1, -1310.72 DecimalAggregate2, 0.31 DecimalAggregate3 } } then raise Error("System.Sum(Decimal) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*775ID, */ row { System.String('System.Sum_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, 0 Integer2, 1 Integer3 }, row { 0, 1, 2 }, row { 0, -1, 4 }, row { 0, -65536, 8 }, row { 0, -65536, 16 } } into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Sum(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Sum(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, -131072 IntegerAggregate2, 31 IntegerAggregate3 } } then raise Error("System.Sum(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*776ID, */ row { System.String('System.Sum_System_Integer_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, 'insert table { row { 0 Integer1, -65536 Integer2, 1 Integer3 }} into TripleIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Sum(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Sum(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, -65536 IntegerAggregate2, 1 IntegerAggregate3 } } then raise Error("System.Sum(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*777ID, */ row { System.String('System.Sum_System_Integer_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Integer");' Table, 'insert table { row { 0 Integer1, 0 Integer2, 1 Integer3 }, row { nil as Integer, nil as Integer, nil as Integer }, row { 0, 1, 2 }, row { 0, -1, 4 }, row { 0, -65536, 8 }, row { 0, -65536, 16 } } into TripleNullIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Integer1 from TripleNullIntegerTestTable) IntegerAggregate1, System.Sum(Integer2 from TripleNullIntegerTestTable) IntegerAggregate2, System.Sum(Integer3 from TripleNullIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { 0 IntegerAggregate1, -131072 IntegerAggregate2, 31 IntegerAggregate3 } } then raise Error("System.Sum(Integer) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*778ID, */ row { System.String('System.Sum_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, $0.01 Money3 }, row { $0.0, $0.01, $0.02 }, row { $0.0, -$0.01, $0.04 }, row { $0.0, -$655.36, $0.08 }, row { $0.0, -$655.36, $0.16 } } into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Sum(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Sum(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0.0 MoneyAggregate1, -$1310.72 MoneyAggregate2, $0.31 MoneyAggregate3 } } then raise Error("System.Sum(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*779ID, */ row { System.String('System.Sum_System_Money_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, 'insert table { row { $0.0 Money1, -$655.36 Money2, $0.01 Money3 }} into TripleMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Sum(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Sum(Money3 from TripleMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0.0 MoneyAggregate1, -$655.36 MoneyAggregate2, $0.01 MoneyAggregate3 } } then raise Error("System.Sum(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*780ID, */ row { System.String('System.Sum_System_Money_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("Money");' Table, 'insert table { row { $0.0 Money1, $0.0 Money2, $0.01 Money3 }, row { nil as Money, nil as Money, nil as Money }, row { $0.0, $0.01, $0.02 }, row { $0.0, -$0.01, $0.04 }, row { $0.0, -$655.36, $0.08 }, row { $0.0, -$655.36, $0.16 } } into TripleNullMoneyTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(Money1 from TripleNullMoneyTestTable) MoneyAggregate1, System.Sum(Money2 from TripleNullMoneyTestTable) MoneyAggregate2, System.Sum(Money3 from TripleNullMoneyTestTable) MoneyAggregate3 } }' Script, ') <> table { row { $0.0 MoneyAggregate1, -$1310.72 MoneyAggregate2, $0.31 MoneyAggregate3 } } then raise Error("System.Sum(Money) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*781ID, */ row { System.String('System.Sum_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan(0) TimeSpan1, TimeSpan(0) TimeSpan2, TimeSpan(1) TimeSpan3 }, row { TimeSpan(0), TimeSpan(1), TimeSpan(2) }, row { TimeSpan(0), TimeSpan(-1), TimeSpan(4) }, row { TimeSpan(0), TimeSpan(-65536), TimeSpan(8) }, row { TimeSpan(0), TimeSpan(-65536), TimeSpan(16) } } into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Sum(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Sum(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan(0) TimeSpanAggregate1, TimeSpan(-131072) TimeSpanAggregate2, TimeSpan(31) TimeSpanAggregate3 } } then raise Error("System.Sum(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*782ID, */ row { System.String('System.Sum_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan(0) TimeSpan1, TimeSpan(-65536) TimeSpan2, TimeSpan(1) TimeSpan3 }} into TripleTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Sum(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Sum(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan(0) TimeSpanAggregate1, TimeSpan(-65536) TimeSpanAggregate2, TimeSpan(1) TimeSpanAggregate3 } } then raise Error("System.Sum(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*783ID, */ row { System.String('System.Sum_System_TimeSpan_') Name, 4 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&TripleNullTable("TimeSpan");' Table, 'insert table { row { TimeSpan(0) TimeSpan1, TimeSpan(0) TimeSpan2, TimeSpan(1) TimeSpan3 }, row { nil as TimeSpan, nil as TimeSpan, nil as TimeSpan }, row { TimeSpan(0), TimeSpan(1), TimeSpan(2) }, row { TimeSpan(0), TimeSpan(-1), TimeSpan(4) }, row { TimeSpan(0), TimeSpan(-65536), TimeSpan(8) }, row { TimeSpan(0), TimeSpan(-65536), TimeSpan(16) } } into TripleNullTimeSpanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Sum(TimeSpan1 from TripleNullTimeSpanTestTable) TimeSpanAggregate1, System.Sum(TimeSpan2 from TripleNullTimeSpanTestTable) TimeSpanAggregate2, System.Sum(TimeSpan3 from TripleNullTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan(0) TimeSpanAggregate1, TimeSpan(-131072) TimeSpanAggregate2, TimeSpan(31) TimeSpanAggregate3 } } then raise Error("System.Sum(TimeSpan) failed with nulls.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*784ID, */ row { System.String('System.Time') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(0,0,0) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(0,0,0) then raise Error("System.Time normal values were not retrieved properly1.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*785ID, */ row { System.String('System.Time') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(2, 59, 4) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(2, 59, 4) then raise Error("System.Time normal values were not retrieved properly2.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*786ID, */ row { System.String('System.Time') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(11, 2, 1) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(11, 2, 1) then raise Error("System.Time normal values were not retrieved properly3.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*787ID, */ row { System.String('System.Time') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(13, 32, 29) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(13, 32, 29) then raise Error("System.Time normal values were not retrieved properly4.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*788ID, */ row { System.String('System.Time') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(22, 13, 56) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(22, 13, 56) then raise Error("System.Time normal values were not retrieved properly5.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*789ID, */ row { System.String('System.Time') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(7, 30, 1) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(7, 30, 1) then raise Error("System.Time normal values were not retrieved properly6.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*790ID, */ row { System.String('System.Time') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(0, 0, 0) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(0, 0, 0) then raise Error("System.Time boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*791ID, */ row { System.String('System.Time') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time(23, 59, 59) Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time(23, 59, 59) then raise Error("System.Time boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*792ID, */ row { System.String('System.Time') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { Time(23, 9, 4) Time1 } } into ListTimeTestTable; NegativeTest("insert table { row { Time(23, 9, 4) Time1 } } into ListTimeTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { Time(22, 4, 3) Time1 } } into ListTimeTestTable; NegativeTest("insert table { row { Time(22, 4, 3) Time1 } } into ListTimeTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*793ID, */ row { System.String('System.Time') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Time1 : Time, Time2 : Time, key { Time1 }, order { Time2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { Time(23, 9, 4) Time1, Time(19, 10, 3) Time2 }, row { Time(1, 10, 28) Time1, Time(20, 4, 9) Time2 }, row { Time(1, 11, 5) Time1, Time(2, 10, 21) Time2 }, row { Time(6, 4, 4) Time1, Time(6, 7, 9) Time2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Time2 asc }", "DeviceOrder order by { Time2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*794ID, */ row { System.String('System.Time') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { Time1 : Time, Time2 : Time, key { Time1 }, order { Time2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { Time(23, 9, 4) Time1, Time(19, 10, 3) Time2 }, row { Time(1, 10, 28) Time1, Time(20, 4, 9) Time2 }, row { Time(1, 11, 5) Time1, Time(2, 10, 21) Time2 }, row { Time(6, 4, 4) Time1, Time(6, 7, 9) Time2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { Time2 desc }", "DeviceOrder order by { Time2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*795ID, */ row { System.String('System.Time.AsString_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "Time" });' Table, 'insert table { row { "1-1-1900 1:00:00" String1, "0" String2, Time(1,0,0) Time3 } } into ListStringStringTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringStringTimeTestTable over { String1, String2 } add { Time.AsString(String1) Time3 }' Script, ') <> ListStringStringTimeTestTable then raise Error("System.Time.AsString(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*796ID, */ row { System.String('System.Time.ReadAsString_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "String", "String" });' Table, 'insert table { row { Time(11,1,1) Time1, "Test" String2, "11:01:00" String3 }, row { Time(12,32,32), "Test1", "12:32:32" }, row { Time(23,59,59), "Test2", "23:59:59"}} into ListTimeStringStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeStringStringTestTable over { Time1, String2 } add { ReadAsString(Time1) String3 }' Script, ') <> ListTimeStringStringTestTable then raise Error("System.Time.ReadAsString(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*797ID, */ row { System.String('System.Time.ReadHour_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Integer" });' Table, 'insert table { row { Time(11,12,13) Time1, 0 Integer2, 11 Integer3 }, row { Time(23,59,59), 0, 23 }, row { Time(2,3,4), 0, 2 } } into ListTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeIntegerIntegerTestTable over { Time1, Integer2 } add { ReadHour(Time1) Integer3 }' Script, ') <> ListTimeIntegerIntegerTestTable then raise Error("System.Time.ReadHour(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*798ID, */ row { System.String('System.Time.ReadMinute_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Integer" });' Table, 'insert table { row { Time(11,12,13) Time1, 0 Integer2, 12 Integer3 }, row { Time(23,59,59), 0, 59 }, row { Time(2,3,4), 0, 3 } } into ListTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeIntegerIntegerTestTable over { Time1, Integer2 } add { ReadMinute(Time1) Integer3 }' Script, ') <> ListTimeIntegerIntegerTestTable then raise Error("System.Time.ReadMinute(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*799ID, */ row { System.String('System.Time.ReadSecond_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Integer" });' Table, 'insert table { row { Time(11,12,13) Time1, 0 Integer2, 13 Integer3 }, row { Time(23,59,59), 0, 59 }, row { Time(2,3,4), 0, 4 } } into ListTimeIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeIntegerIntegerTestTable over { Time1, Integer2 } add { ReadSecond(Time1) Integer3 }' Script, ') <> ListTimeIntegerIntegerTestTable then raise Error("System.Time.ReadSecond(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*800ID, */ row { System.String('System.Time.ReadTicks_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Long" });' Table, 'insert table { row { Time(12,1,1) Time1, 0 Integer2, 432610000000 Long3 }, row { Time(23,59,59), 0, 863990000000 }, row { Time(13,23,42), 0, 482220000000}, row { Time(1,23,42), 0, 50220000000 }, row { Time(11,59,59), 0, 431990000000 } } into ListTimeIntegerLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeIntegerLongTestTable over { Time1, Integer2 } add { ReadTicks(Time1) Long3 }' Script, ') <> ListTimeIntegerLongTestTable then raise Error("System.Time.ReadTicks(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*801ID, */ row { System.String('System.Time.Ticks_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time", "Long", "Time"});' Table, 'insert table { row { Time(23,32,32) Time1, Long(864000000000)Long2, Time(0,0,0) Time3 }, row { Time(1,1,1), Long(863990000000), Time(23,59,59) }, row { Time(2,3,43), Long(431990000000), Time(11,59,59) }, row { Time(0,0,1), Long(10000000), Time(0,0,1) }  } into ListTimeLongTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeLongTimeTestTable over { Time1, Long2 } add { Time.Ticks(Long2) Time3 }' Script, ') <> ListTimeLongTimeTestTable then raise Error("System.Time.Ticks(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*802ID, */ row { System.String('System.Time.WriteAsString_System_Time_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "String", "Time" });' Table, 'insert table { row { Time(1,1,1) Time1, "1:1:1" String2, Time(1,1,1) Time3 }, row { Time(2,1,1), "2:1:1", Time(2,1,1) }, row { Time(23,13,41), "23:13:41", Time(23,13,41)} } into ListTimeStringTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeStringTimeTestTable over { Time1, String2 } add { WriteAsString(Time1, String2) Time3 }' Script, ') <> ListTimeStringTimeTestTable then raise Error("System.Time.WriteAsString(Time,String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*803ID, */ row { System.String('System.Time.WriteHour_System_Time_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Time" });' Table, 'insert table { row { Time(1,1,1) Time1, 2 Integer2, Time(2,1,1) Time3 }, row { Time(13,2,2), 12, Time(12,2,2) }, row { Time(21,59,59), 23, Time(23,59,59)} } into ListTimeIntegerTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeIntegerTimeTestTable over { Time1, Integer2 } add { WriteHour(Time1, Integer2) Time3 }' Script, ') <> ListTimeIntegerTimeTestTable then raise Error("System.Time.WriteHour(Time,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*804ID, */ row { System.String('System.Time.WriteMinute_System_Time_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Time" });' Table, 'insert table { row { Time(2,2,2) Time1, 3 Integer2, Time(2,3,2) Time3 }, row { Time(23,57,58), 2, Time(23,2,58) }, row { Time(12,15,19), 12, Time(12,12,19)} } into ListTimeIntegerTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeIntegerTimeTestTable over { Time1, Integer2 } add { WriteMinute(Time1, Integer2) Time3 }' Script, ') <> ListTimeIntegerTimeTestTable then raise Error("System.Time.WriteMinute(Time,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*805ID, */ row { System.String('System.Time.WriteSecond_System_Time_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Time" });' Table, 'insert table { row { Time(13,43,24) Time1, 15 Integer2, Time(13,43,15) Time3 }, row { Time(21,43,34), 59, Time(21,43,59) }, row { Time(18,24,56), 13, Time(18,24,13)} } into ListTimeIntegerTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeIntegerTimeTestTable over { Time1, Integer2 } add { WriteSecond(Time1, Integer2) Time3 }' Script, ') <> ListTimeIntegerTimeTestTable then raise Error("System.Time.WriteSecond(Time,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*806ID, */ row { System.String('System.Time.WriteTicks_System_Time_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Long", "Time" });' Table, 'insert table { row { Time(0,0,5) Time1, Long(50000000) Long2, Time(0,0,5) Time3 }, row { Time(1,1,1), Long(36610000000), Time(1,1,1) }, row { Time(23,1,1), Long(828610000000), Time(23,1,1) } } into ListTimeLongTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeLongTimeTestTable over { Time1, Long2 } add { WriteTicks(Time1, Long2) Time3 }' Script, ') <> ListTimeLongTimeTestTable then raise Error("System.Time.WriteTicks(Time,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*807ID, */ row { System.String('System.Time.WriteYear_System_Time_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Time", "Integer", "Time" });' Table, 'insert table { row { Time(1,1,1) Time1, 1918 Integer2, Time(1,1,1) Time3 }, row { Time(23,43,56), 2003, Time(23,43,56) }, row { Time(12,54,23), 1900, Time(12,54,23)} } into ListTimeIntegerTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeIntegerTimeTestTable over { Time1, Integer2 } add { WriteYear(Time1, Integer2) Time3 }' Script, ') <> ListTimeIntegerTimeTestTable then raise Error("System.Time.WriteYear(Time,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*808ID, */ row { System.String('System.Time_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time", "Time"});' Table, 'insert table { row { Time(1, 2, 3) Time1, Time(23,12,23) Time2 }, row { Time(4,13,1), Time(19,1,1) } } into ListTimeTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeTimeTestTable over { Time1, Time2 }' Script, ') <> ListTimeTimeTestTable then raise Error("System.Time(Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*809ID, */ row { System.String('System.Time_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time", "Time"});' Table, 'insert table { row { Time(2, 2, 2) Time1, Time(12,12,23) Time2 }, row { Time(20,1,1), Time(8,1,1) } } into ListTimeTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeTimeTestTable over { Time1, Time2 }' Script, ') <> ListTimeTimeTestTable then raise Error("System.Time(Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*810ID, */ row { System.String('System.TimePart_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "DateTime", "Time" });' Table, 'insert table { row { DateTime(2004,2,4,1,1,1) DateTime1, Time(1,1,1) Time2 }, row { DateTime(1753,2,28,1,32,45), Time(1,32,45) }, row { DateTime(1900,1,1,1,1,1), Time(1,1,1) } } into ListDateTimeTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeTimeTestTable over { DateTime1 }add { TimePart(DateTime1) Time2 }' Script, ') <> ListDateTimeTimeTestTable then raise Error("System.TimePart(System.DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*811ID, */ row { System.String('System.TimeSpan') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan(2003, 12, 31) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan(2003, 12, 31) then raise Error("System.TimeSpan normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*812ID, */ row { System.String('System.TimeSpan') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan(2003, 9, 4) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan(2003, 9, 4) then raise Error("System.TimeSpan normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*813ID, */ row { System.String('System.TimeSpan') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan(2003, 1, 1) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan(2003, 1, 1) then raise Error("System.TimeSpan normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*814ID, */ row { System.String('System.TimeSpan') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan(2004, 2, 29) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan(2004, 2, 29) then raise Error("System.TimeSpan normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*815ID, */ row { System.String('System.TimeSpan') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan( 2, 29, 16, 12, 45) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan( 2, 29, 16, 12, 45) then raise Error("System.TimeSpan normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*816ID, */ row { System.String('System.TimeSpan') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan( 10, 3, 7, 30, 0) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan( 10, 3, 7, 30, 0) then raise Error("System.TimeSpan normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*817ID, */ row { System.String('System.TimeSpan') Name, 110 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan(10675198, 23, 59, 59,999d) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan.Ticks(9223371935999990000) then raise Error("System.TimeSpan boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*818ID, */ row { System.String('System.TimeSpan') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan(1, 1, 1, 1, 1) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan.Ticks(900610010000) then raise Error("System.TimeSpan boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*819ID, */ row { System.String('System.TimeSpan') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan( -10675198, -23, -59, -59,-999d) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan.Ticks(-9223371935999990000) then raise Error("System.TimeSpan boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*820ID, */ row { System.String('System.TimeSpan') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, 'insert table { row { TimeSpan( -10675197 -1, -23, -59, -59,-999d) TimeSpan1 } } into ListTimeSpanTestTable;' InsertTableStatement, '' BeforeScript, 'if (TimeSpan1 from row from ListTimeSpanTestTable) <> TimeSpan.Ticks(-9223371935999989999 - 1) then raise Error("System.TimeSpan boundary values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*821ID, */ row { System.String('System.TimeSpan') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { TimeSpan(23, 9, 4) TimeSpan1 } } into ListTimeSpanTestTable; NegativeTest("insert table { row { TimeSpan(23, 9, 4) TimeSpan1 } } into ListTimeSpanTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { TimeSpan(9, 4, 22, 4, 3d) TimeSpan1 } } into ListTimeSpanTestTable; NegativeTest("insert table { row { TimeSpan(9, 4, 22, 4, 3d) TimeSpan1 } } into ListTimeSpanTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*822ID, */ row { System.String('System.TimeSpan') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { TimeSpan1 : TimeSpan, TimeSpan2 : TimeSpan, key { TimeSpan1 }, order { TimeSpan2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { TimeSpan(2003, 9, 4) TimeSpan1, TimeSpan(1980, 10, 3) TimeSpan2 }, row { TimeSpan(1951, 10, 28) TimeSpan1, TimeSpan(2003, 4, 9) TimeSpan2 }, row { TimeSpan(1955, 11, 5) TimeSpan1, TimeSpan(2015, 10, 21) TimeSpan2 }, row { TimeSpan(2063, 4, 4) TimeSpan1, TimeSpan(1969, 7, 9) TimeSpan2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { TimeSpan2 asc }", "DeviceOrder order by { TimeSpan2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*823ID, */ row { System.String('System.TimeSpan') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { TimeSpan1 : TimeSpan, TimeSpan2 : TimeSpan, key { TimeSpan1 }, order { TimeSpan2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { TimeSpan(2003, 9, 4) TimeSpan1, TimeSpan(1980, 10, 3) TimeSpan2 }, row { TimeSpan(1951, 10, 28) TimeSpan1, TimeSpan(2003, 4, 9) TimeSpan2 }, row { TimeSpan(1955, 11, 5) TimeSpan1, TimeSpan(2015, 10, 21) TimeSpan2 }, row { TimeSpan(2063, 4, 4) TimeSpan1, TimeSpan(1969, 7, 9) TimeSpan2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { TimeSpan2 desc }", "DeviceOrder order by { TimeSpan2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*824ID, */ row { System.String('System.TimeSpan.Days_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "TimeSpan" });' Table, 'insert table { row { 15d Decimal1, TimeSpan(15) TimeSpan2 }, row { 14d, TimeSpan(14) }, row { 13d, TimeSpan(13)} } into ListDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalTimeSpanTestTable over { Decimal1 } add { TimeSpan.Days(Decimal1) TimeSpan2 }' Script, ') <> ListDecimalTimeSpanTestTable then raise Error("System.TimeSpan.Days(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*825ID, */ row { System.String('System.TimeSpan.Hours_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({  "Decimal", "TimeSpan" });' Table, 'insert table { row { 23d Decimal1, TimeSpan(0,23) TimeSpan2 }, row { 12d, TimeSpan(0,12) }, row {  1d, TimeSpan(0,1)} } into ListDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalTimeSpanTestTable over { Decimal1 } add { TimeSpan.Hours(Decimal1) TimeSpan2 }' Script, ') <> ListDecimalTimeSpanTestTable then raise Error("System.TimeSpan.Hours(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*826ID, */ row { System.String('System.TimeSpan.Milliseconds_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "TimeSpan" });' Table, 'insert table { row { 12d Decimal1, TimeSpan(0,0,0,0,12) TimeSpan2 }, row { 2d, TimeSpan(0,0,0,0,2) }, row { 99d, TimeSpan(0,0,0,0,99)} } into ListDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalTimeSpanTestTable over { Decimal1 } add { TimeSpan.Milliseconds(Decimal1) TimeSpan2 }' Script, ') <> ListDecimalTimeSpanTestTable then raise Error("System.TimeSpan.Milliseconds(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*827ID, */ row { System.String('System.TimeSpan.Minutes_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "TimeSpan" });' Table, 'insert table { row { 3d Decimal1, TimeSpan(0,0,3) TimeSpan2 }, row { 2d, TimeSpan(0,0,2) }, row { 12d, TimeSpan(0,0,12)} } into ListDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalTimeSpanTestTable over { Decimal1 } add { TimeSpan.Minutes(Decimal1) TimeSpan2 }' Script, ') <> ListDecimalTimeSpanTestTable then raise Error("System.TimeSpan.Minutes(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*828ID, */ row { System.String('System.TimeSpan.ReadDay_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "Integer"});' Table, 'insert table { row { TimeSpan(4, 2, 3) TimeSpan1, 4 Integer2 }, row { TimeSpan(5678,1,1), 5678 } } into ListTimeSpanIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanIntegerTestTable over { TimeSpan1 } add { ReadDay(TimeSpan1) Integer2 }' Script, ') <> ListTimeSpanIntegerTestTable then raise Error("System.TimeSpan.ReadDay(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*829ID, */ row { System.String('System.TimeSpan.ReadDays_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "Decimal"});' Table, 'insert table { row { TimeSpan(4,6) TimeSpan1, 4.25 Decimal2 }, row { TimeSpan(8,12), 8.5 } } into ListTimeSpanDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanDecimalTestTable over { TimeSpan1 } add { ReadDays(TimeSpan1) Decimal2 }' Script, ') <> ListTimeSpanDecimalTestTable then raise Error("System.TimeSpan.ReadDays(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*830ID, */ row { System.String('System.TimeSpan.ReadHour_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan(2004,6,18,11,12) TimeSpan1, 6 Integer2 }, row { TimeSpan(2003,1,1,23,59), 1 }, row { TimeSpan(2004,6,18,2,3), 6 } } into ListTimeSpanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTestTable over { TimeSpan1 } add { ReadHour(TimeSpan1) Integer2 }' Script, ') <> ListTimeSpanIntegerTestTable then raise Error("System.TimeSpan.ReadHour(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*831ID, */ row { System.String('System.TimeSpan.ReadHours_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal" });' Table, 'insert table { row { TimeSpan(0,6,0,0,0) TimeSpan1, 6d Decimal2 }, row { TimeSpan(3,1,0,0,0), 73d }, row { TimeSpan(0,6,30,0,0), 6.5d } } into ListTimeSpanDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanDecimalTestTable over { TimeSpan1 } add { ReadHours(TimeSpan1) Decimal2 }' Script, ') <> ListTimeSpanDecimalTestTable then raise Error("System.TimeSpan.ReadHours(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*832ID, */ row { System.String('System.TimeSpan.ReadMillisecond_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan(2004,2,4,32,14) TimeSpan1, 14 Integer2 }, row { TimeSpan(2003,1,1,423,2), 2 }, row { TimeSpan(2099,11,1,43,24), 24 } } into ListTimeSpanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTestTable over { TimeSpan1 } add { ReadMillisecond(TimeSpan1) Integer2 }' Script, ') <> ListTimeSpanIntegerTestTable then raise Error("System.TimeSpan.ReadMillisecond(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*833ID, */ row { System.String('System.TimeSpan.ReadMilliseconds_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal" });' Table, 'insert table { row { TimeSpan(0,0,0,0,14) TimeSpan1, 14d Decimal2 }, row { TimeSpan(0,0,0,0,2), 2d }, row { TimeSpan(0,0,0,0,24), 24d } } into ListTimeSpanDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanDecimalTestTable over { TimeSpan1 } add { ReadMilliseconds(TimeSpan1) Decimal2 }' Script, ') <> ListTimeSpanDecimalTestTable then raise Error("System.TimeSpan.ReadMilliseconds(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*834ID, */ row { System.String('System.TimeSpan.ReadMinute_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan(2004,6,18,11,12) TimeSpan1, 18 Integer2 }, row { TimeSpan(2003,1,1,23,59), 1 }, row { TimeSpan(2004,6,18,2,3), 18 } } into ListTimeSpanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTestTable over { TimeSpan1 } add { ReadMinute(TimeSpan1) Integer2 }' Script, ') <> ListTimeSpanIntegerTestTable then raise Error("System.TimeSpan.ReadMinute(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*835ID, */ row { System.String('System.TimeSpan.ReadMinutes_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal" });' Table, 'insert table { row { TimeSpan(0,0,59,0,0) TimeSpan1, 59d Decimal2 }, row { TimeSpan(0,0,1,30,0), 1.5 } } into ListTimeSpanDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanDecimalTestTable over { TimeSpan1 } add { ReadMinutes(TimeSpan1) Decimal2 }' Script, ') <> ListTimeSpanDecimalTestTable then raise Error("System.TimeSpan.ReadMinutes(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*836ID, */ row { System.String('System.TimeSpan.ReadSecond_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer" });' Table, 'insert table { row { TimeSpan(2004,6,18,11,12) TimeSpan1, 11 Integer2 }, row { TimeSpan(2003,1,1,23,59), 23 }, row { TimeSpan(2004,6,18,2,3), 2 } } into ListTimeSpanIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanIntegerTestTable over { TimeSpan1 } add { ReadSecond(TimeSpan1) Integer2 }' Script, ') <> ListTimeSpanIntegerTestTable then raise Error("System.TimeSpan.ReadSecond(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*837ID, */ row { System.String('System.TimeSpan.ReadSeconds_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal" });' Table, 'insert table { row { TimeSpan(0,6,0,11,0) TimeSpan1, 21611d Decimal2 }, row { TimeSpan(0,0,0,23,0), 23d }, row { TimeSpan(1,0,0,0,0), 86400d } } into ListTimeSpanDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanDecimalTestTable over { TimeSpan1 } add { ReadSeconds(TimeSpan1) Decimal2 }' Script, ') <> ListTimeSpanDecimalTestTable then raise Error("System.TimeSpan.ReadSeconds(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*838ID, */ row { System.String('System.TimeSpan.ReadTicks_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Long" });' Table, 'insert table { row { TimeSpan(0,12,1,1) TimeSpan1, 432610000000 Long2 }, row { TimeSpan(0,23,59,59), 863990000000 }, row { TimeSpan(0,13,23,42), 482220000000}, row { TimeSpan(0,1,23,42), 50220000000 }, row { TimeSpan(0,11,59,59), 431990000000 } } into ListTimeSpanLongTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListTimeSpanLongTestTable over { TimeSpan1 } add { ReadTicks(TimeSpan1) Long2 }' Script, ') <> ListTimeSpanLongTestTable then raise Error("System.TimeSpan.ReadTicks(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*839ID, */ row { System.String('System.TimeSpan.Seconds_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "TimeSpan" });' Table, 'insert table { row { 15d Decimal1, TimeSpan(0,0,0,15) TimeSpan2 }, row { 59d, TimeSpan(0,0,0,59) }, row { 13d, TimeSpan(0,0,0,13)} } into ListDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalTimeSpanTestTable over { Decimal1 } add { TimeSpan.Seconds(Decimal1) TimeSpan2 }' Script, ') <> ListDecimalTimeSpanTestTable then raise Error("System.TimeSpan.Seconds(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*840ID, */ row { System.String('System.TimeSpan.Ticks_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Long", "TimeSpan"});' Table, 'insert table { row { Long(864000000000) Long1, TimeSpan(1) TimeSpan2 }, row { Long(900610010000), TimeSpan(1,1,1,1,1) } } into ListLongTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongTimeSpanTestTable over { Long1 } add { TimeSpan.Ticks(Long1) TimeSpan2 }' Script, ') <> ListLongTimeSpanTestTable then raise Error("System.TimeSpan.Ticks(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*841ID, */ row { System.String('System.TimeSpan.WriteDay_System_TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18 Integer2, TimeSpan(18,1,1,1,1) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 3, TimeSpan(3,3,56,23,4) }, row { TimeSpan(12,5,23,34,23), 123, TimeSpan(123,5,23,34,23)} } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { WriteDay(TimeSpan1, Integer2) TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("System.TimeSpan.WriteDay(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*842ID, */ row { System.String('System.TimeSpan.WriteDays_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 20d Decimal2, TimeSpan(20,0,0,0,0) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 3d, TimeSpan(3,0,0,0,0) }, row { TimeSpan(12,5,23,34,23), 123.25d, TimeSpan(123,6,0,0,0)} } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { WriteDays(TimeSpan1, Decimal2) TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("System.TimeSpan.WriteDays(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*843ID, */ row { System.String('System.TimeSpan.WriteHour_System_TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18 Integer2, TimeSpan(1,18,1,1,1) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 13, TimeSpan(23,13,56,23,4) }, row { TimeSpan(12,5,23,34,23), 23, TimeSpan(12,23,23,34,23)} } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { WriteHour(TimeSpan1, Integer2) TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("System.TimeSpan.WriteHour(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*844ID, */ row { System.String('System.TimeSpan.WriteHours_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18d Decimal2, TimeSpan(0,18,0,0,0) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 1.25d, TimeSpan(0,1,15,0,0) }, row { TimeSpan(12,5,23,34,23), 47d, TimeSpan(1,23,0,0,0)} } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { WriteHours(TimeSpan1, Decimal2) TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("System.TimeSpan.WriteHours(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*845ID, */ row { System.String('System.TimeSpan.WriteMillisecond_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18 Integer2, TimeSpan(1,1,1,1,18) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 3, TimeSpan(23,3,56,23,3) }, row { TimeSpan(12,5,23,34,23), 123, TimeSpan(12,5,23,34,123)} } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { WriteMillisecond(TimeSpan1, Integer2) TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("System.TimeSpan.WriteMillisecond(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*846ID, */ row { System.String('System.TimeSpan.WriteMilliseconds_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18d Decimal2, TimeSpan(0,0,0,0,18) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 200d, TimeSpan(0,0,0,0,200) }, row { TimeSpan(12,5,23,34,23), 123d, TimeSpan(0,0,0,0,123)} } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { WriteMilliseconds(TimeSpan1, Decimal2) TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("System.TimeSpan.WriteMilliseconds(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*847ID, */ row { System.String('System.TimeSpan.WriteMinute_System_TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18 Integer2, TimeSpan(1,1,18,1,1) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 3, TimeSpan(23,3,3,23,4) }, row { TimeSpan(12,5,23,34,23), 32, TimeSpan(12,5,32,34,23)} } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { WriteMinute(TimeSpan1, Integer2) TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("System.TimeSpan.WriteMinute(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*848ID, */ row { System.String('System.TimeSpan.WriteMinutes_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18d Decimal2, TimeSpan(0,0,18,0,0) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 3003d, TimeSpan(2,2,3,0,0) }, row { TimeSpan(12,5,23,34,23), 1440d, TimeSpan(1,0,0,0,0)} } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { WriteMinutes(TimeSpan1, Decimal2) TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("System.TimeSpan.WriteMinutes(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*849ID, */ row { System.String('System.TimeSpan.WriteSecond_System_TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Integer", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18 Integer2, TimeSpan(1,1,1,18,1) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 3, TimeSpan(23,3,56,3,4) }, row { TimeSpan(12,5,23,34,23), 53, TimeSpan(12,5,23,53,23)} } into ListTimeSpanIntegerTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanIntegerTimeSpanTestTable over { TimeSpan1, Integer2 } add { WriteSecond(TimeSpan1, Integer2) TimeSpan3 }' Script, ') <> ListTimeSpanIntegerTimeSpanTestTable then raise Error("System.TimeSpan.WriteSecond(TimeSpan,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*850ID, */ row { System.String('System.TimeSpan.WriteSeconds_System_TimeSpan_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan(1,1,1,1,1) TimeSpan1, 18d Decimal2, TimeSpan(0,0,0,18,0) TimeSpan3 }, row { TimeSpan(23,3,56,23,4), 86400d, TimeSpan(1,0,0,0,0) }, row { TimeSpan(12,5,23,34,23), 3713d, TimeSpan(0,1,1,53,0)} } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { WriteSeconds(TimeSpan1, Decimal2) TimeSpan3 }' Script, ') <> ListTimeSpanDecimalTimeSpanTestTable then raise Error("System.TimeSpan.WriteSeconds(TimeSpan,Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*851ID, */ row { System.String('System.TimeSpan.WriteTicks_System_TimeSpan_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Long", "TimeSpan" });' Table, 'insert table { row { TimeSpan(0,0,5) TimeSpan1, Long(50000000) Long2, TimeSpan(0,0,0,5) TimeSpan3 }, row { TimeSpan(1,1,1), Long(36610000000), TimeSpan(0,1,1,1) }, row { TimeSpan(23,1,1), Long(828610000000), TimeSpan(0,23,1,1) } } into ListTimeSpanLongTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanLongTimeSpanTestTable over { TimeSpan1, Long2 } add { WriteTicks(TimeSpan1, Long2) TimeSpan3 }' Script, ') <> ListTimeSpanLongTimeSpanTestTable then raise Error("System.TimeSpan.WriteTicks(TimeSpan,Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*852ID, */ row { System.String('System.TimeSpan_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "TimeSpan"});' Table, 'insert table { row { TimeSpan(0) TimeSpan1, TimeSpan(0) TimeSpan2 }, row { TimeSpan(21), TimeSpan(13) } } into ListTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanTimeSpanTestTable over { TimeSpan1, TimeSpan2 }' Script, ') <> ListTimeSpanTimeSpanTestTable then raise Error("System.TimeSpan(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*853ID, */ row { System.String('System.TimeSpan_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "TimeSpan"});' Table, 'insert table { row { TimeSpan(204, 2) TimeSpan1, TimeSpan(190,12) TimeSpan2 }, row { TimeSpan(20,31), TimeSpan(1,1) } } into ListTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanTimeSpanTestTable over { TimeSpan1, TimeSpan2 }' Script, ') <> ListTimeSpanTimeSpanTestTable then raise Error("System.TimeSpan(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*854ID, */ row { System.String('System.TimeSpan_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "TimeSpan"});' Table, 'insert table { row { TimeSpan(204, 23, 32) TimeSpan1, TimeSpan(94,12,23) TimeSpan2 }, row { TimeSpan(64,1,1), TimeSpan(188,1,1) } } into ListTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanTimeSpanTestTable over { TimeSpan1, TimeSpan2 }' Script, ') <> ListTimeSpanTimeSpanTestTable then raise Error("System.TimeSpan(Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*855ID, */ row { System.String('System.TimeSpan_System_Integer_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "TimeSpan"});' Table, 'insert table { row { TimeSpan(24,2,3,1) TimeSpan1, TimeSpan(100,12,23,23) TimeSpan2 }, row { TimeSpan(304,1,1,13), TimeSpan(188,1,1,14) } } into ListTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanTimeSpanTestTable over { TimeSpan1, TimeSpan2 }' Script, ') <> ListTimeSpanTimeSpanTestTable then raise Error("System.TimeSpan(Integer,Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*856ID, */ row { System.String('System.TimeSpan_System_Integer_System_Integer_System_Integer_System_Integer_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "TimeSpan"});' Table, 'insert table { row { TimeSpan(34, 2, 3, 3, 4.3) TimeSpan1, TimeSpan(1941,2,23,34,23.4) TimeSpan2 }, row { TimeSpan(143,1,4,3,423.4), TimeSpan(19,1,1,3,432.45) } } into ListTimeSpanTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanTimeSpanTestTable over { TimeSpan1, TimeSpan2 }' Script, ') <> ListTimeSpanTimeSpanTestTable then raise Error("System.TimeSpan(Integer,Integer,Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*857ID, */ row { System.String('System.ToBoolean_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Byte", "Boolean"});' Table, 'insert table { row { 0 Byte1, false Boolean2 }, row { 1, true }, row { 2, true}, row { 10, true }, row { 100, true}, row { 255, true } } into ListByteBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteBooleanTestTable over { Byte1 } add { ToBoolean(Byte1) Boolean2 }' Script, ') <> ListByteBooleanTestTable then raise Error("System.ToBoolean(Byte) failed");' AfterScript, 'DropListTable({"Byte", "Boolean"});' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*858ID, */ row { System.String('System.ToBoolean_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Integer", "Boolean"});' Table, 'insert table { row { 0 Integer1, false Boolean2 }, row { 1, true }, row { 2, true}, row { 10, true }, row { 100, true}, row { 255, true }, row { -1, true }, row { -10, true }, row { 32000, true}, row {-32768, true }, row { -65536, true }, row { 1048576, true } } into ListIntegerBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerBooleanTestTable over { Integer1 } add { ToBoolean(Integer1) Boolean2 }' Script, ') <> ListIntegerBooleanTestTable then raise Error("System.ToBoolean(Integer) failed");' AfterScript, 'DropListTable({"Integer", "Boolean"});' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*859ID, */ row { System.String('System.ToBoolean_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Long", "Boolean"});' Table, 'insert table { row { Long(0) Long1, false Boolean2 }, row { 1, true }, row { 2, true}, row { 10, true }, row { 100, true}, row { 255, true }, row { -1, true }, row { -10, true }, row { 32000, true}, row {-32768, true }, row { -65536, true }, row { 1048576, true }, row { 1234567890, true}, row { -12345466778, true } } into ListLongBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongBooleanTestTable over { Long1 } add { ToBoolean(Long1) Boolean2 }' Script, ') <> ListLongBooleanTestTable then raise Error("System.ToBoolean(Long) failed");' AfterScript, 'DropListTable({"Long", "Boolean"});' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*860ID, */ row { System.String('System.ToBoolean_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'CreateListTable({"Short", "Boolean"});' Table, 'insert table { row { 0 Short1, false Boolean2 }, row { 1, true }, row { 2, true}, row { 10, true }, row { 100, true}, row { 255, true }, row { -1, true }, row { -10, true }, row { 32000, true}, row {-32768, true } } into ListShortBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortBooleanTestTable over { Short1 } add { ToBoolean(Short1) Boolean2 }' Script, ') <> ListShortBooleanTestTable then raise Error("System.ToBoolean(Short) failed");' AfterScript, 'DropListTable({"Short", "Boolean"});' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*861ID, */ row { System.String('System.ToBoolean_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Boolean"});' Table, 'insert table { row {"false" String1, false Boolean2 }, row { "true", true } } into ListStringBooleanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringBooleanTestTable over { String1 } add { ToBoolean(String1) Boolean2 }' Script, ') <> ListStringBooleanTestTable then raise Error("ToBoolean(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*862ID, */ row { System.String('System.ToByte_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "Byte"});' Table, 'insert table { row { false Boolean1, 0 Byte2 }, row { true, 1 } } into ListBooleanByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanByteTestTable over { Boolean1 } add { ToByte(Boolean1) Byte2 }' Script, ') <> ListBooleanByteTestTable then raise Error("ToByte(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*863ID, */ row { System.String('System.ToByte_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Byte"});' Table, 'insert table { row { 1 Integer1, 1 Byte2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListIntegerByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerByteTestTable over { Integer1 } add { ToByte(Integer1) Byte2 }' Script, ') <> ListIntegerByteTestTable then raise Error("ToByte(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*864ID, */ row { System.String('System.ToByte_System_Integer_') Name, 12 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -1 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*865ID, */ row { System.String('System.ToByte_System_Integer_') Name, 13 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 256 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*866ID, */ row { System.String('System.ToByte_System_Integer_') Name, 14 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -255 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*867ID, */ row { System.String('System.ToByte_System_Integer_') Name, 15 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 32767 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*868ID, */ row { System.String('System.ToByte_System_Integer_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -32769 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*869ID, */ row { System.String('System.ToByte_System_Integer_') Name, 23 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -2147483647 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*870ID, */ row { System.String('System.ToByte_System_Integer_') Name, 24 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 1048576 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*871ID, */ row { System.String('System.ToByte_System_Integer_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 32768 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToByte(Integer1) Byte2 };' Script, '", "ToByte(Integer) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*872ID, */ row { System.String('System.ToByte_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Byte"});' Table, 'insert table { row { 1 Long1, 1 Byte2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListLongByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongByteTestTable over { Long1 } add { ToByte(Long1) Byte2 }' Script, ') <> ListLongByteTestTable then raise Error("ToByte(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*873ID, */ row { System.String('System.ToByte_System_Long_') Name, 12 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -1 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*874ID, */ row { System.String('System.ToByte_System_Long_') Name, 13 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 256 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*875ID, */ row { System.String('System.ToByte_System_Long_') Name, 14 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -255 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*876ID, */ row { System.String('System.ToByte_System_Long_') Name, 15 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 32767 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*877ID, */ row { System.String('System.ToByte_System_Long_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -32769 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*878ID, */ row { System.String('System.ToByte_System_Long_') Name, 23 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -2147483647 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*879ID, */ row { System.String('System.ToByte_System_Long_') Name, 24 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 1048576 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*880ID, */ row { System.String('System.ToByte_System_Long_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 32768 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*881ID, */ row { System.String('System.ToByte_System_Long_') Name, 32 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 2147483648 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*882ID, */ row { System.String('System.ToByte_System_Long_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -2147483649 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*883ID, */ row { System.String('System.ToByte_System_Long_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*884ID, */ row { System.String('System.ToByte_System_Long_') Name, 35 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToByte(Long1) Byte2 };' Script, '", "ToByte(Long) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*885ID, */ row { System.String('System.ToByte_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "Byte"});' Table, 'insert table { row { 1 Short1, 1 Byte2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListShortByteTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortByteTestTable over { Short1 } add { ToByte(Short1) Byte2 }' Script, ') <> ListShortByteTestTable then raise Error("ToByte(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*886ID, */ row { System.String('System.ToByte_System_Short_') Name, 12 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { -1 Short1 } } into ListShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortTestTable add {ToByte(Short1) Byte2 };' Script, '", "ToByte(Short) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*887ID, */ row { System.String('System.ToByte_System_Short_') Name, 13 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 256 Short1 } } into ListShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortTestTable add {ToByte(Short1) Byte2 };' Script, '", "ToByte(Short) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*888ID, */ row { System.String('System.ToByte_System_Short_') Name, 14 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { -255 Short1 } } into ListShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortTestTable add {ToByte(Short1) Byte2 };' Script, '", "ToByte(Short) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*889ID, */ row { System.String('System.ToByte_System_Short_') Name, 15 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short"});' Table, 'insert table { row { 32767 Short1 } } into ListShortTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListShortTestTable add {ToByte(Short1) Byte2 };' Script, '", "ToByte(Short) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*890ID, */ row { System.String('System.ToByte_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "String"});' Table, 'insert table { row { 0 Byte1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" } } into ListByteStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteStringTestTable over { String2 } add { ToByte(String2) Byte1 }' Script, ') <> ListByteStringTestTable then raise Error("ToString(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*891ID, */ row { System.String('System.ToByte_System_String_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, 'drop table ListStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*892ID, */ row { System.String('System.ToByte_System_String_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "12Test" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*893ID, */ row { System.String('System.ToByte_System_String_') Name, 12 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-1" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*894ID, */ row { System.String('System.ToByte_System_String_') Name, 13 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "256" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*895ID, */ row { System.String('System.ToByte_System_String_') Name, 14 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-255" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*896ID, */ row { System.String('System.ToByte_System_String_') Name, 15 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "32767" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*897ID, */ row { System.String('System.ToByte_System_String_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-32769" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*898ID, */ row { System.String('System.ToByte_System_String_') Name, 23 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-2147483647" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*899ID, */ row { System.String('System.ToByte_System_String_') Name, 24 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "1048576" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*900ID, */ row { System.String('System.ToByte_System_String_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "32768" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*901ID, */ row { System.String('System.ToByte_System_String_') Name, 32 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "2147483648" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*902ID, */ row { System.String('System.ToByte_System_String_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-2147483649" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*903ID, */ row { System.String('System.ToByte_System_String_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "9223372036854775807" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*904ID, */ row { System.String('System.ToByte_System_String_') Name, 35 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-9223372036854775808" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToByte(String1) Byte2 };' Script, '", "ToByte(String) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*905ID, */ row { System.String('System.ToDate_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "Date"});' Table, 'insert table { row { DateTime(2004,12,25,23,4,1) DateTime1, Date(2004,12,25) Date2 }, row { DateTime(1978,9,15,1,1,1), Date(1978,9,15) }, row { DateTime(2004,1,1,1,0,0), Date(2004,1,1) }, row { DateTime(1951,1,1,23,0,0), Date(1951,1,1) } } into ListDateTimeDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeDateTestTable over { DateTime1 } add { ToDate(DateTime1) Date2 }' Script, ') <> ListDateTimeDateTestTable then raise Error("ToDate(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*906ID, */ row { System.String('System.ToDate_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Date"});' Table, 'insert table { row { "12/25/2004" String1, Date(2004,12,25) Date2}, row { "9/15/1978", Date(1978,9,15)}, row { "1/1/2004", Date(2004,1,1)}, row { "1/1/1951", Date(1951,1,1)} } into ListStringDateTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringDateTestTable over { String1 } add { ToDate(String1) Date2 }' Script, ') <> ListStringDateTestTable then raise Error("ToDate(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*907ID, */ row { System.String('System.ToDateTime_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date", "DateTime"});' Table, 'insert table { row { Date(2004,12,25) Date1, DateTime(2004,12,25) DateTime2 }, row { Date(1978,9,15), DateTime(1978,9,15) }, row { Date(2004,1,1), DateTime(2004,1,1) }, row { Date(1951,1,1), DateTime(1951,1,1) } } into ListDateDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateDateTimeTestTable over { Date1 } add { ToDateTime(Date1) DateTime2 }' Script, ') <> ListDateDateTimeTestTable then raise Error("ToDateTime(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*908ID, */ row { System.String('System.ToDateTime_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "DateTime"});' Table, 'insert table { row { "12/25/2004 12:1:1" String1, DateTime(2004,12,25,12,1,1) DateTime2 }, row { "9/15/1978 23:14:12", DateTime(1978,9,15,23,14,12) }, row { "1/1/2004 12:32:23", DateTime(2004,1,1,12,32,23) }, row { "1/1/1951 11:33:23", DateTime(1951,1,1,11,33,23) } } into ListStringDateTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringDateTimeTestTable over { String1 } add { ToDateTime(String1) DateTime2 }' Script, ') <> ListStringDateTimeTestTable then raise Error("ToDateTime(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*909ID, */ row { System.String('System.ToDecimal_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Decimal"});' Table, 'insert table { row { Integer(0) Integer1, 0.0 Decimal2 }, row { -1, -1.0 }, row { 1048576, 1048576.0 }, row { 2147483647, 2147483647.0 } } into ListIntegerDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerDecimalTestTable over { Integer1 } add { ToDecimal(Integer1) Decimal2 }' Script, ') <> ListIntegerDecimalTestTable then raise Error("ToDecimal(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*910ID, */ row { System.String('System.ToDecimal_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Decimal"});' Table, 'insert table { row { Long(0) Long1, 0.0 Decimal2 }, row { -1, -1.0 }, row { 1048576, 1048576.0 }, row { 9223372036854775807, 9223372036854775807.0 } } into ListLongDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongDecimalTestTable over { Long1 } add { ToDecimal(Long1) Decimal2 }' Script, ') <> ListLongDecimalTestTable then raise Error("ToDecimal(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*911ID, */ row { System.String('System.ToDecimal_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money", "Decimal"});' Table, 'insert table { row { $0.0 Money1, 0.0 Decimal2 }, row { $1.0, 1.0 }, row { $128, 128.0 }, row { $254.0, 254.0 }, row { $255.0, 255.0 }, row { $256.0, 256.0 }, row { -$1.0, -1.0 }, row { -$255.0, -255.0 }, row { -$32.77, -32.77 }, row { $32767.0, 32767.0 }, row { $3.28, 3.28 }, row { -$0.38, -0.38 }, row { $214748364.7, 214748364.7 }, row { -$2147483648.0, -2147483648.0 }, row { $2147483648.0, 2147483648.0 }, row { -$2147.48, -2147.48 }, row { -$92233720368.54, -92233720368.54 }, row { $922337203685477.58, 922337203685477.58 } } into ListMoneyDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyDecimalTestTable over { Money1 } add { ToDecimal(Money1) Decimal2 }' Script, ') <> ListMoneyDecimalTestTable then raise Error("ToDecimal(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*912ID, */ row { System.String('System.ToDecimal_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "String"});' Table, 'insert table { row { 0.0 Decimal1, "0.0" String2 }, row { 1.0, "1.0" }, row { 128d, "128.0" }, row { 254.0, "254.0" }, row { 255.0, "255.0" }, row { 256.0, "256.0" }, row { -1.0, "-1.0" }, row { -255.0, "-255.0" }, row { -32.768, "-32.768" }, row { 32767.0, "32767.0" }, row { 3.2768, "3.2768" }, row { -0.32769, "-0.32769" }, row { 214748364.7, "214748364.7" }, row { -2147483648.0, "-2147483648.0" }, row { 2147483648.0, "2147483648.0" }, row { -2147.483649, "-2147.483649" }, row { -92233720368.545808, "-92233720368.545808" }, row { 9223372036854.5807, "9223372036854.5807" } } into ListDecimalStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalStringTestTable over { String2 } add { ToDecimal(String2) Decimal1 }' Script, ') <> ListDecimalStringTestTable then raise Error("ToDecimal(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*913ID, */ row { System.String('System.ToDecimal_System_String_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToDecimal(String1) Decimal2 };' Script, '", "ToDecimal(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*914ID, */ row { System.String('System.ToDecimal_System_String_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "1.2Test" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToDecimal(String1) Decimal2 };' Script, '", "ToDecimal(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*915ID, */ row { System.String('System.ToGuid_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringTestTable { Guid1 : Guid, String2 : String static tags { Storage.Length = "50" } };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-a23456789ab0") Guid1, "12345678-90ab-cdef-abcd-a23456789ab0" String2 }, row { Guid("12345678-90ab-cdef-abcd-0123456789aa"), "12345678-90ab-cdef-abcd-0123456789aa" } } into ListGuidStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidStringTestTable over { String2 } add { ToGuid(String2) Guid1 }' Script, ') <> ListGuidStringTestTable then raise Error("ToGuid(String) failed.");' AfterScript, 'drop table ListGuidStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*916ID, */ row { System.String('System.ToGuid_System_String_') Name, 2 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringTestTable { Guid1 : Guid, String2 : String static tags { Storage.Length = "50" } };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-a23456789ab0") Guid1, "12345678-90ab-cdef-abcd-a23456789ab0" String2 }, row { Guid("12345678-90ab-cdef-abcd-0123456789aa"), "12345678-90ab-cdef-abcd-0123456789aa" } } into ListGuidStringTestTable;' InsertTableStatement, 'NegativeTest(' BeforeScript, 'ListGuidStringTestTable over { String2 } add { ToGuid(String2) Guid1 };' Script, '", "ToGuid(String) failed to throw on non-Guid values.");' AfterScript, 'drop table ListGuidStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*917ID, */ row { System.String('System.ToInteger_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "Integer"});' Table, 'insert table { row { false Boolean1, 0 Integer2 }, row { true, 1 } } into ListBooleanIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanIntegerTestTable over { Boolean1 } add { ToInteger(Boolean1) Integer2 }' Script, ') <> ListBooleanIntegerTestTable then raise Error("ToInteger(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*918ID, */ row { System.String('System.ToInteger_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "Integer"});' Table, 'insert table { row { 1 Byte1, 1 Integer2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListByteIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteIntegerTestTable over { Byte1 } add { ToInteger(Byte1) Integer2 }' Script, ') <> ListByteIntegerTestTable then raise Error("ToInteger(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*919ID, */ row { System.String('System.ToInteger_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Decimal"});' Table, 'insert table { row { Integer(0) Integer1, 0.0 Decimal2 }, row { -1, -1.0 }, row { 1048576, 1048576.0 }, row { 2147483647, 2147483647.0 } } into ListIntegerDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerDecimalTestTable over { Decimal2 } add { ToInteger(Decimal2) Integer1 }' Script, ') <> ListIntegerDecimalTestTable then raise Error("ToInteger(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*920ID, */ row { System.String('System.ToInteger_System_Decimal_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 0.56 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalTestTable add { ToInteger(Decimal1) Integer2 };' Script, '", "ToInteger(Decimal) failed to throw on Decimals unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*921ID, */ row { System.String('System.ToInteger_System_Decimal_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 10.000001 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalTestTable add { ToInteger(Decimal1) Integer2 };' Script, '", "ToInteger(Decimal) failed to throw on Decimals unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*922ID, */ row { System.String('System.ToInteger_System_Decimal_') Name, 7 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 2147483648.0 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalTestTable add { ToInteger(Decimal1) Integer2 };' Script, '", "ToInteger(Decimal) failed to throw on Decimals unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*923ID, */ row { System.String('System.ToInteger_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Integer"});' Table, 'insert table { row { 1 Long1, 1 Integer2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListLongIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongIntegerTestTable over { Long1 } add { ToInteger(Long1) Integer2 }' Script, ') <> ListLongIntegerTestTable then raise Error("ToInteger(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*924ID, */ row { System.String('System.ToInteger_System_Long_') Name, 32 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 2147483648 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToInteger(Long1) Integer2 };' Script, '", "ToInteger(Long) failed to throw on numbers outside of the range of an Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*925ID, */ row { System.String('System.ToInteger_System_Long_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -2147483649 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToInteger(Long1) Integer2 };' Script, '", "ToInteger(Long) failed to throw on numbers outside of the range of an Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*926ID, */ row { System.String('System.ToInteger_System_Long_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToInteger(Long1) Integer2 };' Script, '", "ToInteger(Long) failed to throw on numbers outside of the range of an Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*927ID, */ row { System.String('System.ToInteger_System_Long_') Name, 35 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToInteger(Long1) Integer2 };' Script, '", "ToInteger(Long) failed to throw on numbers outside of the range of an Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*928ID, */ row { System.String('System.ToInteger_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Money"});' Table, 'insert table { row { Integer(0) Integer1, $0 Money2 }, row { -1, -$1 }, row { 1048576, $1048576 }, row { 2147483647, $2147483647 } } into ListIntegerMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerMoneyTestTable over { Money2 } add  { ToInteger(Money2) Integer1 }' Script, ') <> ListIntegerMoneyTestTable then raise Error("ToInteger(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*929ID, */ row { System.String('System.ToInteger_System_Money_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $0.56 Money1 } } into ListMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyTestTable add { ToInteger(Money1) Integer2 };' Script, '", "ToInteger(Money) failed to throw on Moneys unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*930ID, */ row { System.String('System.ToInteger_System_Money_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $10.000001 Money1 } } into ListMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyTestTable add { ToInteger(Money1) Integer2 };' Script, '", "ToInteger(Money) failed to throw on Moneys unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*931ID, */ row { System.String('System.ToInteger_System_Money_') Name, 7 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $2147483648 Money1 } } into ListMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyTestTable add { ToInteger(Money1) Integer2 };' Script, '", "ToInteger(Money) failed to throw on Moneys unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*932ID, */ row { System.String('System.ToInteger_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "Integer"});' Table, 'insert table { row { 1 Short1, 1 Integer2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListShortIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortIntegerTestTable over { Short1 } add { ToInteger(Short1) Integer2 }' Script, ') <> ListShortIntegerTestTable then raise Error("ToInteger(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*933ID, */ row { System.String('System.ToInteger_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "String"});' Table, 'insert table { row { 0 Integer1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" } } into ListIntegerStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerStringTestTable over { String2 } add { ToInteger(String2) Integer1 }' Script, ') <> ListIntegerStringTestTable then raise Error("ToString(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*934ID, */ row { System.String('System.ToInteger_System_String_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToInteger(String1) Integer2 };' Script, '", "ToInteger(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*935ID, */ row { System.String('System.ToInteger_System_String_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "12Test" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToInteger(String1) Integer2 };' Script, '", "ToInteger(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*936ID, */ row { System.String('System.ToInteger_System_String_') Name, 32 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "2147483648" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToInteger(String1) Integer2 };' Script, '", "ToInteger(String) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*937ID, */ row { System.String('System.ToInteger_System_String_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-2147483649" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToInteger(String1) Integer2 };' Script, '", "ToInteger(String) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*938ID, */ row { System.String('System.ToInteger_System_String_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "9223372036854775807" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToInteger(String1) Integer2 };' Script, '", "ToInteger(String) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*939ID, */ row { System.String('System.ToInteger_System_String_') Name, 35 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-9223372036854775808" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToInteger(String1) Integer2 };' Script, '", "ToInteger(String) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*940ID, */ row { System.String('System.ToLong_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "Long"});' Table, 'insert table { row { false Boolean1, 0 Long2 }, row { true, 1 } } into ListBooleanLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanLongTestTable over { Boolean1 } add { ToLong(Boolean1) Long2 }' Script, ') <> ListBooleanLongTestTable then raise Error("ToLong(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*941ID, */ row { System.String('System.ToLong_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "Long"});' Table, 'insert table { row { 1 Byte1, 1 Long2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListByteLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteLongTestTable over { Byte1 } add { ToLong(Byte1) Long2 }' Script, ') <> ListByteLongTestTable then raise Error("ToLong(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*942ID, */ row { System.String('System.ToLong_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Decimal"});' Table, 'insert table { row { Long(0) Long1, 0.0 Decimal2 }, row { -1, -1.0 }, row { 1048576, 1048576.0 }, row { 9223372036854775807, 9223372036854775807.0 } } into ListLongDecimalTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongDecimalTestTable over { Decimal2 } add { ToLong(Decimal2) Long1 }' Script, ') <> ListLongDecimalTestTable then raise Error("ToLong(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*943ID, */ row { System.String('System.ToLong_System_Decimal_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 0.56 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalTestTable add { ToLong(Decimal1) Long2 };' Script, '", "ToLong(Decimal) failed to throw on Decimals unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*944ID, */ row { System.String('System.ToLong_System_Decimal_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal"});' Table, 'insert table { row { 10.000001 Decimal1 } } into ListDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalTestTable add { ToLong(Decimal1) Long2 };' Script, '", "ToLong(Decimal) failed to throw on Decimals unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*945ID, */ row { System.String('System.ToLong_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Long"});' Table, 'insert table { row { 1 Integer1, 1 Long2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListIntegerLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerLongTestTable over { Integer1 } add { ToLong(Integer1) Long2 }' Script, ') <> ListIntegerLongTestTable then raise Error("ToLong(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*946ID, */ row { System.String('System.ToLong_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Money"});' Table, 'insert table { row { Long(0) Long1, $0 Money2 }, row { -1, -$1 }, row { 1048576, $1048576 }, row { 922337203, $922337203 } } into ListLongMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongMoneyTestTable over { Money2 } add { ToLong(Money2) Long1 }' Script, ') <> ListLongMoneyTestTable then raise Error("ToLong(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*947ID, */ row { System.String('System.ToLong_System_Money_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $0.56 Money1 } } into ListMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyTestTable add { ToLong(Money1) Long2 };' Script, '", "ToLong(Money) failed to throw on Moneys unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*948ID, */ row { System.String('System.ToLong_System_Money_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money"});' Table, 'insert table { row { $10.000001 Money1 } } into ListMoneyTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListMoneyTestTable add { ToLong(Money1) Long2 };' Script, '", "ToLong(Money) failed to throw on Moneys unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*949ID, */ row { System.String('System.ToLong_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "Long"});' Table, 'insert table { row { 1 Short1, 1 Long2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListShortLongTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortLongTestTable over { Short1 } add { ToLong(Short1) Long2 }' Script, ') <> ListShortLongTestTable then raise Error("ToLong(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*950ID, */ row { System.String('System.ToLong_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "String"});' Table, 'insert table { row { Long(0) Long1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" }, row { 2147483648, "2147483648" }, row { -2147483649, "-2147483649" }, row { -9223372036854775807 - 1, "-9223372036854775808" }, row { 9223372036854775807, "9223372036854775807" } } into ListLongStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongStringTestTable over { String2 } add { ToLong(String2) Long1 }' Script, ') <> ListLongStringTestTable then raise Error("ToString(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*951ID, */ row { System.String('System.ToLong_System_String_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToLong(String1) Long2 };' Script, '", "ToLong(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*952ID, */ row { System.String('System.ToLong_System_String_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "12Test" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToLong(String1) Long2 };' Script, '", "ToLong(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*953ID, */ row { System.String('System.ToMoney_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "Money"});' Table, 'insert table { row { 0.01 Decimal1, $0.01 Money2 }, row { 1.0, $1.00 }, row { 128.0, $128.00 }, row { 254.0, $254.00 }, row { 255.0, $255.00 }, row { 256.0, $256.00 }, row { -1.0, -$1.00 }, row { -255.0, -$255.00 }, row { -32.768, -$32.77 }, row { 32767.0, $32767.00 }, row { 3.2768, $3.28 }, row { -0.32769, -$0.33 }, row { 214748364.7, $214748364.70 }, row { -2147483648.0, -$2147483,648.00 }, row { 2147483648.0, $2147483648.00 }, row { -21474.83649, -$21474.84 }, row { -92233720368.55, -$92233720368.55 }, row { 937203685477.58, $937203685477.58 } } into ListDecimalMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalMoneyTestTable over { Decimal1 } add { ToMoney(Decimal1) Money2 }' Script, ') <> ListDecimalMoneyTestTable then raise Error("ToMoney(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*954ID, */ row { System.String('System.ToMoney_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Money"});' Table, 'insert table { row { Integer(0) Integer1, $0 Money2 }, row { -1, -$1 }, row { 1048576, $1048576 }, row { 2147483647, $2147483647 } } into ListIntegerMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerMoneyTestTable over { Integer1 } add { ToMoney(Integer1) Money2 }' Script, ') <> ListIntegerMoneyTestTable then raise Error("ToMoney(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*955ID, */ row { System.String('System.ToMoney_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Money"});' Table, 'insert table { row { Long(0) Long1, $0 Money2 }, row { -1, -$1 }, row { 1048576, $1048576 }, row { 92233720368547, $92233720368547 } } into ListLongMoneyTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongMoneyTestTable over { Long1 } add { ToMoney(Long1) Money2 }' Script, ') <> ListLongMoneyTestTable then raise Error("ToMoney(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*956ID, */ row { System.String('System.ToMoney_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money", "String"});' Table, 'insert table { row { $0.00 Money1, "$0.0" String2 } } into ListMoneyStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyStringTestTable over { String2 } add { ToMoney(String2) Money1 }' Script, ') <> ListMoneyStringTestTable then raise Error("ToMoney(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*957ID, */ row { System.String('System.ToMoney_System_String_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToMoney(String1) Money2 };' Script, '", "ToMoney(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*958ID, */ row { System.String('System.ToMoney_System_String_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "1.2Test" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToMoney(String1) Money2 };' Script, '", "ToMoney(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*959ID, */ row { System.String('System.ToShort_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "Short"});' Table, 'insert table { row { false Boolean1, 0 Short2 }, row { true, 1 } } into ListBooleanShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanShortTestTable over { Boolean1 } add { ToShort(Boolean1) Short2 }' Script, ') <> ListBooleanShortTestTable then raise Error("ToShort(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*960ID, */ row { System.String('System.ToShort_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "Short"});' Table, 'insert table { row { 1 Byte1, 1 Short2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListByteShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteShortTestTable over { Byte1 } add { ToShort(Byte1) Short2 }' Script, ') <> ListByteShortTestTable then raise Error("ToShort(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*961ID, */ row { System.String('System.ToShort_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "Short"});' Table, 'insert table { row { 1 Integer1, 1 Short2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListIntegerShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerShortTestTable over { Integer1 } add { ToShort(Integer1) Short2 }' Script, ') <> ListIntegerShortTestTable then raise Error("ToShort(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*962ID, */ row { System.String('System.ToShort_System_Integer_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -32769 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToShort(Integer1) Short2 };' Script, '", "ToShort(Integer) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*963ID, */ row { System.String('System.ToShort_System_Integer_') Name, 23 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { -2147483647 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToShort(Integer1) Short2 };' Script, '", "ToShort(Integer) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*964ID, */ row { System.String('System.ToShort_System_Integer_') Name, 24 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 1048576 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToShort(Integer1) Short2 };' Script, '", "ToShort(Integer) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*965ID, */ row { System.String('System.ToShort_System_Integer_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer"});' Table, 'insert table { row { 32768 Integer1 } } into ListIntegerTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIntegerTestTable add {ToShort(Integer1) Short2 };' Script, '", "ToShort(Integer) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*966ID, */ row { System.String('System.ToShort_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "Short"});' Table, 'insert table { row { 1 Long1, 1 Short2 }, row { 5, 5 }, row { 0, 0 }, row { 255, 255 }, row { 128, 128 } } into ListLongShortTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongShortTestTable over { Long1 } add { ToShort(Long1) Short2 }' Script, ') <> ListLongShortTestTable then raise Error("ToShort(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*967ID, */ row { System.String('System.ToShort_System_Long_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -32769 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*968ID, */ row { System.String('System.ToShort_System_Long_') Name, 23 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -2147483647 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*969ID, */ row { System.String('System.ToShort_System_Long_') Name, 24 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 1048576 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*970ID, */ row { System.String('System.ToShort_System_Long_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 32768 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*971ID, */ row { System.String('System.ToShort_System_Long_') Name, 32 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 2147483648 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*972ID, */ row { System.String('System.ToShort_System_Long_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -2147483649 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*973ID, */ row { System.String('System.ToShort_System_Long_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { 9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*974ID, */ row { System.String('System.ToShort_System_Long_') Name, 35 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long"});' Table, 'insert table { row { -9223372036854775807 Long1 } } into ListLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListLongTestTable add {ToShort(Long1) Short2 };' Script, '", "ToShort(Long) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*975ID, */ row { System.String('System.ToShort_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "String"});' Table, 'insert table { row { 0 Short1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" } } into ListShortStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortStringTestTable over { String2 } add { ToShort(String2) Short1 }' Script, ') <> ListShortStringTestTable then raise Error("ToString(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*976ID, */ row { System.String('System.ToShort_System_String_') Name, 5 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "Alphora" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*977ID, */ row { System.String('System.ToShort_System_String_') Name, 6 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "12Test" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*978ID, */ row { System.String('System.ToShort_System_String_') Name, 22 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-32769" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*979ID, */ row { System.String('System.ToShort_System_String_') Name, 23 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-2147483647" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*980ID, */ row { System.String('System.ToShort_System_String_') Name, 24 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "1048576" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*981ID, */ row { System.String('System.ToShort_System_String_') Name, 25 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "32768" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*982ID, */ row { System.String('System.ToShort_System_String_') Name, 32 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "2147483648" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*983ID, */ row { System.String('System.ToShort_System_String_') Name, 33 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-2147483649" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*984ID, */ row { System.String('System.ToShort_System_String_') Name, 34 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "9223372036854775807" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*985ID, */ row { System.String('System.ToShort_System_String_') Name, 35 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String"});' Table, 'insert table { row { "-9223372036854775808" String1 } } into ListStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListStringTestTable add {ToShort(String1) Short2 };' Script, '", "ToShort(String) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*986ID, */ row { System.String('System.ToString_System_Boolean_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "String"});' Table, 'insert table { row { false Boolean1, "False" String2 }, row { true, "True" } } into ListBooleanStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanStringTestTable over { Boolean1 } add { ToString(Boolean1) String2 }' Script, ') <> ListBooleanStringTestTable then raise Error("ToString(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*987ID, */ row { System.String('System.ToString_System_Byte_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "String"});' Table, 'insert table { row { 0 Byte1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" } } into ListByteStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteStringTestTable over { Byte1 } add { ToString(Byte1) String2 }' Script, ') <> ListByteStringTestTable then raise Error("ToString(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*988ID, */ row { System.String('System.ToString_System_Date_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Date", "String"});' Table, 'insert table { row {Date(2004,12,25) Date1, "12/25/2004" String2 }, row {Date(1978,9,15), "9/15/1978" }, row { Date(2004,1,1), "1/1/2004" }, row { Date(1951,1,1), "1/1/1951" } } into ListDateStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateStringTestTable over { Date1 } add { ToString(Date1) String2 }' Script, ') <> ListDateStringTestTable then raise Error("ToString(Date) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*989ID, */ row { System.String('System.ToString_System_DateTime_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"DateTime", "String"});' Table, 'insert table { row {DateTime(2004,1,2,2,1,1) DateTime1, "1/2/2004 2:01:01 AM" String2 } } into ListDateTimeStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDateTimeStringTestTable over { DateTime1 } add { ToString(DateTime1) String2 }' Script, ') <> ListDateTimeStringTestTable then raise Error("ToString(DateTime) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*990ID, */ row { System.String('System.ToString_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "String"});' Table, 'insert table { row { Decimal(0.0) Decimal1, "0.00000000" String2 }, row { 1.0, "1.00000000" }, row { 128, "128.00000000" }, row { 254.0, "254.00000000" }, row { 255.0, "255.00000000" }, row { 256.0, "256.00000000" }, row { -1.0, "-1.00000000" }, row { -255.0, "-255.00000000" }, row { -32.768, "-32.76800000" }, row { 32767.0, "32767.00000000" }, row { 3.2768, "3.27680000" }, row { -0.32769, "-0.32769000" }, row { 214748364.7, "214748364.70000000" }, row { -2147483648.0, "-2147483648.00000000" }, row { 2147483648.0, "2147483648.00000000" }, row { -2147.483649, "-2147.48364900" }, row { -2233720368.545807, "-2233720368.54580700" }, row { 93372036854.5807, "93372036854.58070000" } } into ListDecimalStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalStringTestTable over { Decimal1 } add { ToString(Decimal1) String2 }' Script, ') <> ListDecimalStringTestTable then raise Error("ToString(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*991ID, */ row { System.String('System.ToString_System_Guid_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidStringTestTable { Guid1 : Guid, String2 : String static tags { Storage.Length = "50" } };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-a23456789ab0") Guid1, "12345678-90ab-cdef-abcd-a23456789ab0" String2 }, row { Guid("12345678-90ab-cdef-abcd-0123456789aa"), "12345678-90ab-cdef-abcd-0123456789aa" } } into ListGuidStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidStringTestTable over { Guid1 } add { ToString(Guid1) String2 }' Script, ') <> ListGuidStringTestTable then raise Error("ToString(Guid) failed.");' AfterScript, 'drop table ListGuidStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*992ID, */ row { System.String('System.ToString_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "String"});' Table, 'insert table { row { 0 Integer1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" } } into ListIntegerStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerStringTestTable over { Integer1 } add { ToString(Integer1) String2 }' Script, ') <> ListIntegerStringTestTable then raise Error("ToString(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*993ID, */ row { System.String('System.ToString_System_Long_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "String"});' Table, 'insert table { row { Long(0) Long1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" }, row { 2147483648, "2147483648" }, row { -2147483649, "-2147483649" }, row { -9223372036854775807 - 1, "-9223372036854775808" }, row { 9223372036854775807, "9223372036854775807" } } into ListLongStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongStringTestTable over { Long1 } add { ToString(Long1) String2 }' Script, ') <> ListLongStringTestTable then raise Error("ToString(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*994ID, */ row { System.String('System.ToString_System_Money_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money", "String"});' Table, 'insert table { row { $0.01 Money1, "0.01" String2 }, row { $1.0, "1.00" }, row { $128, "128.00" }, row { $254.0, "254.00" }, row { -$1.0, "-1.00" }, row { -$255.0, "-255.00" }, row { -$32.76, "-32.76" }, row { $32767.0, "32767.00" }, row { $3.27, "3.27" }, row { -$0.32, "-0.32" }, row { $214748364.7, "214748364.70" }, row { -$2147483648.0, "-2147483648.00" }, row { $2147483648.0, "2147483648.00" }, row { -$2147.48, "-2147.48" }, row { -$92233720368.54, "-92233720368.54" }, row { $9223372036854.58, "9223372036854.58" } } into ListMoneyStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyStringTestTable over { Money1 } add { ToString(Money1) String2 }' Script, ') <> ListMoneyStringTestTable then raise Error("ToString(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*995ID, */ row { System.String('System.ToString_System_Short_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "String"});' Table, 'insert table { row { 0 Short1, "0" String2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" } } into ListShortStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortStringTestTable over { Short1 } add { ToString(Short1) String2 }' Script, ') <> ListShortStringTestTable then raise Error("ToString(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*996ID, */ row { System.String('System.ToString_System_Time_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time", "String"});' Table, 'insert table { row { Time(12,21,32) Time1, "12:21:32 PM" String2 }, row { Time(23,12,56), "11:12:56 PM" }, row { Time(1,56,21), "1:56:21 AM" }, row { Time(4,30,00), "4:30:00 AM" } } into ListTimeStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeStringTestTable over { Time1 } add { ToString(Time1) String2 }' Script, ') <> ListTimeStringTestTable then raise Error("ToString(Time) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*997ID, */ row { System.String('System.ToString_System_TimeSpan_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"TimeSpan", "String"});' Table, 'insert table { row { TimeSpan(60,23,14,23,680) TimeSpan1, "60days 23hrs 14min 23sec 680mil" String2 }, row { TimeSpan(24,12,56,43,999), "24days 12hrs 56min 43sec 999mil" }, row { TimeSpan(200,21,56,43,2), "200days 21hrs 56min 43sec 2mil" }, row { TimeSpan(132,1,2,3,2), "132days 1hrs 2min 3sec 2mil" } } into ListTimeSpanTestStringTable;' InsertTableStatement, 'if(' BeforeScript, 'ListTimeSpanStringTestTable over { TimeSpan1 } add { ToString(TimeSpan1) String2 }' Script, ') <> ListTimeSpanStringTestTable then raise Error("ToString(TimeSpan) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*998ID, */ row { System.String('System.ToString_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "String"});' Table, 'insert table { row { VersionNumber(1,1,1,1) VersionNumber1, "1.1.1.1" String2 }, row { VersionNumber(2,1,3), "2.1.3.*" }, row { VersionNumber(3,4,2,5), "3.4.2.5" }, row { VersionNumber(1), "1.*" }, row { VersionNumber(4,2), "4.2.*" }, row { VersionNumber(1,2,3), "1.2.3.*" }, row { VersionNumber(3,2,4,3), "3.2.4.3" }, row { VersionNumber(1,2,14), "1.2.14.*" } } into ListVersionNumberStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberStringTestTable over { VersionNumber1 } add { ToString(VersionNumber1) String2 }' Script, ') <> ListVersionNumberStringTestTable then raise Error("ToString(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*999ID, */ row { System.String('System.ToTime_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "Time"});' Table, 'insert table { row {"12:21:32" String1, Time(12,21,32) Time2 }, row { "23,12,56", Time(23,12,56) }, row { "1:56:21", Time(1,56,21) }, row { "4:30:00", Time(4,30,00) } } into ListStringTimeTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringTimeTestTable over { String1 } add { ToTime(String1) Time2 }' Script, ') <> ListStringTimeTestTable then raise Error("ToTime(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1000ID, */ row { System.String('System.ToTimeSpan_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "TimeSpan"});' Table, 'insert table { row {"60days 23hrs 14min 23sec 680mil" String1, TimeSpan(60,23,14,23,680) TimeSpan2 }, row { "24days 12hrs 56min 43sec 999mil", TimeSpan(24,12,56,43,999) }, row { "200days 21hrs 56min 43sec 2mil", TimeSpan(200,21,56,43,2) }, row { "132days 1hrs 2min 3sec 2mil", TimeSpan(132,1,2,3,2) } } into ListStringTimeSpanTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringTimeSpanTestTable over { String1 } add { ToTimeSpan(String1) TimeSpan2 }' Script, ') <> ListStringTimeSpanTestTable then raise Error("ToTimeSpan(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1001ID, */ row { System.String('System.ToVersionNumber_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"String", "VersionNumber"});' Table, 'insert table { row { "1.1.1.1" String1, VersionNumber(1,1,1,1) VersionNumber2  }, row { "2.1.3", VersionNumber(2,1,3) }, row { "3.4.2.5", VersionNumber(3,4,2,5) }, row { "1", VersionNumber(1) }, row { "4.2", VersionNumber(4,2) }, row { "1,2,3", VersionNumber(1,2,3) }, row { "3.2.4.3", VersionNumber(3,2,4,3) }, row { "1,2,14", VersionNumber(1,2,14) } } into ListStringVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListStringVersionNumberTestTable over { String1 } add { ToVersionNumber(String1) VersionNumber2 }' Script, ') <> ListStringVersionNumberTestTable then raise Error("ToVersionNumber(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1002ID, */ row { System.String('System.Trim_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "String" });' Table, 'insert table { row { "" String1, "" String2, "" String3 }, row { " Left Spaces", "", "Left Spaces" }, row { "Right Spaces  ", "", "Right Spaces" }, row { "   Both Spaces   ", "", "Both Spaces" } } into ListStringStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringStringTestTable over { String1, String2 } add { System.Trim(String1) String3 }' Script, ') <> ListStringStringStringTestTable then raise Error("System.Trim(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1003ID, */ row { System.String('System.TrimLeft_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "String" });' Table, 'insert table { row { "" String1, "" String2, "" String3 }, row { " Left Spaces", "", "Left Spaces" }, row { "Right Spaces     ", "", "Right Spaces     " }, row { "   Both Spaces    ", "", "Both Spaces    " } } into ListStringStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringStringTestTable over { String1, String2 } add { System.TrimLeft(String1) String3 }' Script, ') <> ListStringStringStringTestTable then raise Error("System.TrimLeft(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1004ID, */ row { System.String('System.TrimRight_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "String", "String" });' Table, 'insert table { row { "" String1, "" String2, "" String3 }, row { " Left Spaces", "", " Left Spaces" }, row { "Right Spaces     ", "", "Right Spaces" }, row { "   Both Spaces   ", "", "   Both Spaces" } } into ListStringStringStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringStringStringTestTable over { String1, String2 } add { System.TrimRight(String1) String3 }' Script, ') <> ListStringStringStringTestTable then raise Error("System.TrimRight(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1005ID, */ row { System.String('System.Truncate_System_Decimal_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Integer", "Decimal" });' Table, 'insert table { row { 0d Decimal1, 0 Integer2, 0d Decimal3 }, row { 1, 0, 1 }, row { -1.5, 0, -1 }, row { 1.1, 0, 1 }, row { -32767.999, 0, -32767 } } into ListDecimalIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalIntegerDecimalTestTable over { Decimal1, Integer2 } add { System.Truncate(Decimal1) Decimal3 }' Script, ') <> ListDecimalIntegerDecimalTestTable then raise Error("System.Truncate(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1006ID, */ row { System.String('System.Upper_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "String", "Integer", "String" });' Table, 'insert table { row { "" String1, 2003 Integer2, "" String3 }, row { "Alphora", 2000, "ALPHORA" }, row { "Dataphor", 2100, "DATAPHOR" }, row { "I am your father.", 2004, "I AM YOUR FATHER." }, row { "DAE", 2005, "DAE" } } into ListStringIntegerStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListStringIntegerStringTestTable over { String1, Integer2 } add { Upper(String1) String3 }' Script, ') <> ListStringIntegerStringTestTable then raise Error("System.Upper(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1007ID, */ row { System.String('System.UserID') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "Test" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "Test" then raise Error("System.UserID ''Test'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1008ID, */ row { System.String('System.UserID') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "Alphora" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "Alphora" then raise Error("System.UserID ''Alphora'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1009ID, */ row { System.String('System.UserID') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "Dataphor" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "Dataphor" then raise Error("System.UserID ''Dataphor'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1010ID, */ row { System.String('System.UserID') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "DAE" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "DAE" then raise Error("System.UserID ''DAE'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1011ID, */ row { System.String('System.UserID') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "McKay Salisbury" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "McKay Salisbury" then raise Error("System.UserID ''McKay Salisbury'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1012ID, */ row { System.String('System.UserID') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "
		 Whitespace Test" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "
		 Whitespace Test" then raise Error("System.UserID with whitespace value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1013ID, */ row { System.String('System.UserID') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "| [0N741n - 5ym|3075" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "| [0N741n - 5ym|3075" then raise Error("System.UserID in 1337 sp33k (symbols and numbers test) was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1014ID, */ row { System.String('System.UserID') Name, 107 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "WeIrD CaSe" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "WeIrD CaSe" then raise Error("System.UserID containing strange mixed case value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1015ID, */ row { System.String('System.UserID') Name, 108 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "TEST CASE" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "test case" then raise Error("System.UserID compared sensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1016ID, */ row { System.String('System.UserID') Name, 109 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, 'insert table { row { "test case" UserID1 } } into ListUserIDTestTable;' InsertTableStatement, '' BeforeScript, 'if (UserID1 from row from ListUserIDTestTable) <> "TEST CASE" then raise Error("System.UserID compared sensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1017ID, */ row { System.String('System.UserID') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { "True" UserID1 } } into ListUserIDTestTable; NegativeTest("insert table { row { ''True'' UserID1 } } into ListUserIDTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { ''False'' UserID1 } } into ListUserIDTestTable; NegativeTest("insert table { row { ''False'' UserID1 } } into ListUserIDTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1018ID, */ row { System.String('System.UserID') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { UserID1 : UserID, UserID2 : UserID, key { UserID1 }, order { UserID2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" UserID1, "This is not" UserID2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { UserID2 asc }", "DeviceOrder order by { UserID2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1019ID, */ row { System.String('System.UserID') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { UserID1 : UserID, UserID2 : UserID, key { UserID1 }, order { UserID2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" UserID1, "This is not" UserID2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { UserID2 desc }", "DeviceOrder order by { UserID2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1020ID, */ row { System.String('System.UserID.ReadValue_System_UserID_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "UserID", "UserID" });' Table, 'insert table { row {  UserID("Adam") UserID1,  UserID("Adam") UserID2 }, row { UserID("Developer"), UserID("Developer") }, row { UserID("Admin"), UserID("Admin") } } into ListUserIDUserIDTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListUserIDUserIDTestTable over { UserID1 } add { ReadValue(UserID1) UserID2 }' Script, ') <> ListUserIDUserIDTestTable then raise Error("System.UserID.ReadValue(UserID) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1021ID, */ row { System.String('System.UserID.WriteValue_System_UserID_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "UserID", "UserID", "UserID" });' Table, 'insert table { row { UserID("Developer") UserID1, UserID("Tester") UserID2, UserID("Tester") UserID3 }, row { UserID("hundred"), UserID("twofiftyfive"), UserID("twofiftyfive") }, row { UserID("MyGroup"),UserID("TheirGroup"), UserID("TheirGroup")} } into ListUserIDUserIDUserIDTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListUserIDUserIDUserIDTestTable over { UserID1, UserID2 } add { WriteValue(UserID1, UserID2) UserID3 }' Script, ') <> ListUserIDUserIDUserIDTestTable then raise Error("System.UserID.WriteValue(UserID,UserID) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1022ID, */ row { System.String('System.UserID_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"UserID", "String", "UserID"});' Table, 'insert table { row { UserID("Rebellion") UserID1, "Enterprise" String2, UserID("Enterprise") UserID3 }, row { UserID("Tis"), "Tester", UserID("Tester") } } into ListUserIDStringUserIDTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListUserIDStringUserIDTestTable over { UserID1, String2 } add { UserID(String2) UserID3}' Script, ') <> ListUserIDStringUserIDTestTable then raise Error("System.UserID(String) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1023ID, */ row { System.String('System.VersionNumber') Name, 100 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, 2, 3, 4) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1, 2, 3, 4) then raise Error("System.VersionNumber normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1024ID, */ row { System.String('System.VersionNumber') Name, 101 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1231, 2345, 3, 0) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1231, 2345, 3, 0) then raise Error("System.VersionNumber normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1025ID, */ row { System.String('System.VersionNumber') Name, 102 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(9, 9, 9, 9) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(9, 9, 9, 9) then raise Error("System.VersionNumber normal values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1026ID, */ row { System.String('System.VersionNumber') Name, 103 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, 2, 3) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1, 2, 3) then raise Error("System.VersionNumber incomplete (3) values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1027ID, */ row { System.String('System.VersionNumber') Name, 104 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1048576, 524288, 131072) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1048576, 524288, 131072) then raise Error("System.VersionNumber incomplete (3) values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1028ID, */ row { System.String('System.VersionNumber') Name, 105 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, 2) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1, 2) then raise Error("System.VersionNumber incomplete (2) values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1029ID, */ row { System.String('System.VersionNumber') Name, 106 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1048576, 262144) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1048576, 262144) then raise Error("System.VersionNumber incomplete (2) values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1030ID, */ row { System.String('System.VersionNumber') Name, 107 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1048576) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1048576) then raise Error("System.VersionNumber incomplete (1) values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1031ID, */ row { System.String('System.VersionNumber') Name, 108 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(0) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(0) then raise Error("System.VersionNumber incomplete (1) values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1032ID, */ row { System.String('System.VersionNumber') Name, 111 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, -1 , -1) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1, -1) then raise Error("System.VersionNumber compared incorrectly with -1 values.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1033ID, */ row { System.String('System.VersionNumber') Name, 112 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, 1, -1 , -1) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1, 1, -1) then raise Error("System.VersionNumber compared incorrectly with -1 values.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1034ID, */ row { System.String('System.VersionNumber') Name, 113 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, -1, -1 , -1) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1) then raise Error("System.VersionNumber compared incorrectly with -1 values.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1035ID, */ row { System.String('System.VersionNumber') Name, 114 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber(1, 3, 4) VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(1, 3, 4, -1) then raise Error("System.VersionNumber compared incorrectly with -1 values.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1036ID, */ row { System.String('System.VersionNumber') Name, 120 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { VersionNumber(-2) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to have a negative number in the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1037ID, */ row { System.String('System.VersionNumber') Name, 121 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { VersionNumber(0, 1, -2) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1038ID, */ row { System.String('System.VersionNumber') Name, 122 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { VersionNumber(-1, 0) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1039ID, */ row { System.String('System.VersionNumber') Name, 123 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { VersionNumber(-1, -1, 0) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1040ID, */ row { System.String('System.VersionNumber') Name, 124 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { VersionNumber(-1, -1, -1, 0) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1041ID, */ row { System.String('System.VersionNumber') Name, 125 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'NegativeTest("insert table { row { VersionNumber(-1, 0, -1, 0) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert out of range values into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1042ID, */ row { System.String('System.VersionNumber') Name, 200 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { VersionNumber(5) VersionNumber1 } } into ListVersionNumberTestTable; NegativeTest("insert table { row { VersionNumber(5) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { VersionNumber(42) VersionNumber1 } } into ListVersionNumberTestTable; NegativeTest("insert table { row { VersionNumber(42) VersionNumber1 } } into ListVersionNumberTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1043ID, */ row { System.String('System.VersionNumber') Name, 300 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { VersionNumber1 : VersionNumber, VersionNumber2 : VersionNumber, key { VersionNumber1 }, order { VersionNumber2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { VersionNumber(37) VersionNumber1, VersionNumber(42) VersionNumber2 }, row { VersionNumber(116), VersionNumber(42, 1)}, row { VersionNumber(117) VersionNumber1, VersionNumber(254) VersionNumber2 }, row { VersionNumber(188) VersionNumber1, VersionNumber(42,2) VersionNumber2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { VersionNumber2 asc }", "DeviceOrder order by { VersionNumber2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1044ID, */ row { System.String('System.VersionNumber') Name, 301 Sequence, 'Type' Type, true Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { VersionNumber1 : VersionNumber, VersionNumber2 : VersionNumber, key { VersionNumber1 }, order { VersionNumber2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { VersionNumber(37) VersionNumber1, VersionNumber(42) VersionNumber2 }, row { VersionNumber(116), VersionNumber(42, 1) }, row { VersionNumber(117) VersionNumber1, VersionNumber(254) VersionNumber2 }, row { VersionNumber(188) VersionNumber1, VersionNumber(42,2) VersionNumber2 } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { VersionNumber2 desc }", "DeviceOrder order by { VersionNumber2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1045ID, */ row { System.String('System.VersionNumber.ReadBuild_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "Integer", "Integer"});' Table, 'insert table { row { VersionNumber(1, 1, 1, 1) VersionNumber1, 0 Integer2, 1 Integer3 }, row { VersionNumber(7,257,1,23), 0, 23 } } into ListVersionNumberIntegerIntegerTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberIntegerIntegerTestTable over { VersionNumber1, Integer2 } add { ReadBuild(VersionNumber1) Integer3 }' Script, ') <> ListVersionNumberIntegerIntegerTestTable then raise Error("VersionNumber.ReadBuild(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1046ID, */ row { System.String('System.VersionNumber.ReadMajor_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "Integer", "Integer"});' Table, 'insert table { row { VersionNumber(1, 1, 1, 1) VersionNumber1, 0 Integer2, 1 Integer3 }, row { VersionNumber(2,356,1,1), 0, 2 } } into ListVersionNumberIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListVersionNumberIntegerIntegerTestTable over { VersionNumber1, Integer2 } add { ReadMajor(VersionNumber1) Integer3 }' Script, ') <> ListVersionNumberIntegerIntegerTestTable then raise Error("VersionNumber.ReadMajor(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1047ID, */ row { System.String('System.VersionNumber.ReadMinor_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "Integer", "Integer"});' Table, 'insert table { row { VersionNumber(1, 1, 1, 1) VersionNumber1, 0 Integer2, 1 Integer3 }, row { VersionNumber(257,21,2,1), 0, 21 } } into ListVersionNumberIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListVersionNumberIntegerIntegerTestTable over { VersionNumber1, Integer2 } add { ReadMinor(VersionNumber1) Integer3 }' Script, ') <> ListVersionNumberIntegerIntegerTestTable then raise Error("VersionNumber.ReadMinor(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1048ID, */ row { System.String('System.VersionNumber.ReadRevision_System_VersionNumber_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "Integer", "Integer"});' Table, 'insert table { row { VersionNumber(1, 1, 1, 1) VersionNumber1, 0 Integer2, 1 Integer3 }, row { VersionNumber(257,1,23,26), 0, 23 } } into ListVersionNumberIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListVersionNumberIntegerIntegerTestTable over { VersionNumber1, Integer2 } add { ReadRevision(VersionNumber1) Integer3 }' Script, ') <> ListVersionNumberIntegerIntegerTestTable then raise Error("VersionNumber.ReadRevision(VersionNumber) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1049ID, */ row { System.String('System.VersionNumber.WriteBuild_System_VersionNumber_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "Integer", "VersionNumber" });' Table, 'insert table { row { VersionNumber(1,2,3,4) VersionNumber1, 15 Integer2, VersionNumber(1, 2, 3, 15) VersionNumber3 }, row { VersionNumber(3,1,1,1), 14, VersionNumber(3,1,1,14) }, row { VersionNumber(1,1,2,3), 13, VersionNumber(1,1,2,13)} } into ListVersionNumberIntegerVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberIntegerVersionNumberTestTable over { VersionNumber1, Integer2 } add { WriteBuild(VersionNumber1, Integer2) VersionNumber3 }' Script, ') <> ListVersionNumberIntegerVersionNumberTestTable then raise Error("System.VersionNumber.WriteBuild(VersionNumber,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1050ID, */ row { System.String('System.VersionNumber.WriteMajor_System_VersionNumber_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "Integer", "VersionNumber" });' Table, 'insert table { row { VersionNumber(4,1,1,1) VersionNumber1, 2 Integer2, VersionNumber(2,1,1,1) VersionNumber3 }, row { VersionNumber(1,13,2,2), 12, VersionNumber(12,13,2,2) }, row { VersionNumber(1,1,21,59), 23, VersionNumber(23,1,21,59)} } into ListVersionNumberIntegerVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberIntegerVersionNumberTestTable over { VersionNumber1, Integer2 } add { WriteMajor(VersionNumber1, Integer2) VersionNumber3 }' Script, ') <> ListVersionNumberIntegerVersionNumberTestTable then raise Error("System.VersionNumber.WriteMajor(VersionNumber,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1051ID, */ row { System.String('System.VersionNumber.WriteMinor_System_VersionNumber_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "Integer", "VersionNumber" });' Table, 'insert table { row { VersionNumber(4,2,2,2) VersionNumber1, 3 Integer2, VersionNumber(4,3,2,2) VersionNumber3 }, row { VersionNumber(1,23,57,58), 2, VersionNumber(1,2,57,58) }, row { VersionNumber(1,1,12,15), 12, VersionNumber(1,12,12,15)} } into ListVersionNumberIntegerVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberIntegerVersionNumberTestTable over { VersionNumber1, Integer2 } add { WriteMinor(VersionNumber1, Integer2) VersionNumber3 }' Script, ') <> ListVersionNumberIntegerVersionNumberTestTable then raise Error("System.VersionNumber.WriteMinor(VersionNumber,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1052ID, */ row { System.String('System.VersionNumber.WriteRevision_System_VersionNumber_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "VersionNumber", "Integer", "VersionNumber" });' Table, 'insert table { row { VersionNumber(4,12,45,54) VersionNumber1, 12 Integer2, VersionNumber(4,12,12,54) VersionNumber3 }, row { VersionNumber(1,23,57,45), 2, VersionNumber(1,23,2,45) }, row { VersionNumber(1,1,13,23), 12, VersionNumber(1,1,12,23)} } into ListVersionNumberIntegerVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberIntegerVersionNumberTestTable over { VersionNumber1, Integer2 } add { WriteRevision(VersionNumber1, Integer2) VersionNumber3 }' Script, ') <> ListVersionNumberIntegerVersionNumberTestTable then raise Error("System.VersionNumber.WriteRevision(VersionNumber,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1053ID, */ row { System.String('System.VersionNumber_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "VersionNumber"});' Table, 'insert table { row { VersionNumber(0) VersionNumber1, VersionNumber(0) VersionNumber2 }, row { VersionNumber(21), VersionNumber(13) } } into ListVersionNumberVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberTestTable over { VersionNumber1, VersionNumber2 }' Script, ') <> ListVersionNumberVersionNumberTestTable then raise Error("System.VersionNumber(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1054ID, */ row { System.String('System.VersionNumber_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "VersionNumber"});' Table, 'insert table { row { VersionNumber(204, 2) VersionNumber1, VersionNumber(190,12) VersionNumber2 }, row { VersionNumber(20,31), VersionNumber(1,1) } } into ListVersionNumberVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberTestTable over { VersionNumber1, VersionNumber2 }' Script, ') <> ListVersionNumberVersionNumberTestTable then raise Error("System.VersionNumber(Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1055ID, */ row { System.String('System.VersionNumber_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "VersionNumber"});' Table, 'insert table { row { VersionNumber(204, 23, 32) VersionNumber1, VersionNumber(94,12,23) VersionNumber2 }, row { VersionNumber(64,1,1), VersionNumber(188,1,1) } } into ListVersionNumberVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberTestTable over { VersionNumber1, VersionNumber2 }' Script, ') <> ListVersionNumberVersionNumberTestTable then raise Error("System.VersionNumber(Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1056ID, */ row { System.String('System.VersionNumber_System_Integer_System_Integer_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber", "VersionNumber"});' Table, 'insert table { row { VersionNumber(24,2,3,1) VersionNumber1, VersionNumber(100,12,23,23) VersionNumber2 }, row { VersionNumber(304,1,1,13), VersionNumber(188,1,1,14) } } into ListVersionNumberVersionNumberTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListVersionNumberVersionNumberTestTable over { VersionNumber1, VersionNumber2 }' Script, ') <> ListVersionNumberVersionNumberTestTable then raise Error("System.VersionNumber(Integer,Integer,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
	
		/*1057ID, */ row { System.String('System.Avg_System_Decimal_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, ';' InsertTableStatement, 'NegativeTest("' BeforeScript, 'table { row { System.Avg(Decimal1 from TripleDecimalTestTable) DecimalAggregate1, System.Avg(Decimal2 from TripleDecimalTestTable) DecimalAggregate2, System.Avg(Decimal3 from TripleDecimalTestTable) DecimalAggregate3 } };' Script, '", "System.Avg(Decimal) failed to throw on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1058ID, */ row { System.String('System.Avg_System_Integer_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, ';' InsertTableStatement, 'NegativeTest("' BeforeScript, 'table { row { System.Avg(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Avg(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Avg(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } };' Script, '", "System.Avg(Integer from TripleIntegerTestTable) failed to throw on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1059ID, */ row { System.String('System.Avg_System_Money_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, ';' InsertTableStatement, 'NegativeTest("' BeforeScript, 'table { row { System.Avg(Money1 from TripleMoneyTestTable) MoneyAggregate1, System.Avg(Money2 from TripleMoneyTestTable) MoneyAggregate2, System.Avg(Money3 from TripleMoneyTestTable) MoneyAggregate3 } };' Script, '", "System.Avg(Money) failed to throw on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1060ID, */ row { System.String('System.Avg_System_TimeSpan_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, ';' InsertTableStatement, 'NegativeTest("' BeforeScript, 'table { row { System.Avg(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Avg(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Avg(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } };' Script, '", "System.Avg(TimeSpan) failed to throw on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1061ID, */ row { System.String('System.CompareText_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Integer" });' Table, 'insert table { row { "" IString1, "" IString2, 0 Integer3 }, row { "Dataphor", "Dataphor", 0 }, row { "Alphora", "ALPHORA", 0 }, row { "Dataphor", "Alphora", 1 }, row { "Alphora", "Dataphor", -1 } } into ListIStringIStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIntegerTestTable over { IString1, IString2 } add { CompareText(IString1, IString2) Integer3 }' Script, ') <> ListIStringIStringIntegerTestTable then raise Error("System.CompareText(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1062ID, */ row { System.String('System.iAddition_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("IString");' Table, 'insert table { row { "IString" IString1, "Addition" IString2, "IStringAddition" IString3 }, row { "Concat", "enation", "Concatenation" } } into TripleIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'TripleIStringTestTable over { IString1, IString2 } add { IString1 + IString2 IString3 }' Script, ') <> TripleIStringTestTable then raise Error("iAddition(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1063ID, */ row { System.String('System.iAddition_System_Long_System_Long_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { 9223372036854775807l Long1, 9223372036854775807l Long2, 0 Long3 } } into TripleLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 + Long2 Long3 };' Script, '", "iAddition(Long,Long) failed to throw on positive overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1064ID, */ row { System.String('System.iAddition_System_Long_System_Long_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Long");' Table, 'insert table { row { -9223372036854775808l Long1, -9223372036854775808l Long2, 0 Long3 } } into TripleLongTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleLongTestTable over { Long1, Long2 } add { Long1 + Long2 Long3 };' Script, '", "iAddition(Long,Long) failed to throw on negative overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1065ID, */ row { System.String('System.iCompare_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Integer" });' Table, 'insert table { row { "Alphora" IString1, "Alphora" IString2, 0 Integer3 }, row { "Dataphor", "Alphora", 1 }, row { "Dataphor", "Dataphoria", -1 }, row { "Alphora", "ALPHORA", 0 } } into ListIStringIStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIntegerTestTable over { IString1, IString2 } add { IString1 ?= IString2 Integer3 }' Script, ') <> ListIStringIStringIntegerTestTable then raise Error("iCompare(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1066ID, */ row { System.String('System.iDivision_System_Decimal_System_Decimal_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 0.000000000000000000000001d Decimal1, 10000000000000000000d Decimal2, 0 Decimal3 } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 / Decimal2 Decimal3 };' Script, '", "iDivision(Decimal,Decimal) failed to throw on Positive Underflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1067ID, */ row { System.String('System.iDivision_System_Decimal_System_Decimal_') Name, 4 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 100000000000000000000d Decimal1, 0.000000000000000000000001d Decimal2, 0d Decimal3 } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { Decimal1 / Decimal2 Decimal3 };' Script, '", "iDivision(Decimal,Decimal) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1068ID, */ row { System.String('System.iDivision_System_TimeSpan_System_Decimal_') Name, 4 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "TimeSpan", "Decimal", "TimeSpan" });' Table, 'insert table { row { TimeSpan.Ticks(100000000000000000000) TimeSpan1, 0.000000000000000000000001d Decimal2, TimeSpan.Ticks(0) TimeSpan3 } } into ListTimeSpanDecimalTimeSpanTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListTimeSpanDecimalTimeSpanTestTable over { TimeSpan1, Decimal2 } add { TimeSpan1 / Decimal2 TimeSpan3 };' Script, '", "iDivision(TimeSpan,Decimal) failed to throw on Positive Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1069ID, */ row { System.String('System.iEqual_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "Alphora" IString1, "Alphora" IString2, true Boolean3 }, row { "Dataphor", "Dataphoria", false }, row { "Dataphor", "Alphora", false }, row { "Softwise", "Alphora", false }, row { "Dataphor", "DATAPHOR", true } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 = IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iEqual(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1070ID, */ row { System.String('System.iGreater_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "" IString1, "" IString2, false Boolean3 }, row { "Alphora", "Alphora", false }, row { "Dataphor", "Alphora", true }, row { "Alphora", "Alphor", false }, row { "ALPHORA", "Alphora", false } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 > IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iGreater(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1071ID, */ row { System.String('System.iInclusiveGreater_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "" IString1, "" IString2, true Boolean3 }, row { "Alphora", "Alphora", false }, row { "Dataphor", "Alphora", true }, row { "Alphora", "Alphor", false }, row { "ALPHORA", "Alphora", true } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 >= IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iInclusiveGreater(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1072ID, */ row { System.String('System.iInclusiveLess_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "" IString1, "" IString2, true Boolean3 }, row { "Alphora", "Alphora", true }, row { "Dataphor", "Alphora", false }, row { "Alphora", "Alphor", true }, row { "ALPHORA", "Alphora", false } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 <= IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iInclusiveLess(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1073ID, */ row { System.String('System.iIndexer_System_IString_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "This is a Test" IString1, 0 Integer2, "T" IString3 }, row { "Alphora", 5, "o" }, row { "Dataphor", 7, "r" }, row { "DBMS", 3, "S" }, row { "WhatIsTheMatrix", 1, "h" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { System.iIndexer(IString1, Integer2) IString3 }' Script, ') <> ListIStringIntegerIStringTestTable then raise Error("System.iIndexer(IString,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1074ID, */ row { System.String('System.iIndexer_System_IString_System_Integer_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "It Doesn''t Matter" IString1, -1 Integer2, ""It Doesn''t Matter"" IString3 } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { System.iIndexer(IString1, Integer2) IString3 };' Script, '", "System.iIndexer(IString,Integer) failed to throw on negative index.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1075ID, */ row { System.String('System.iIndexer_System_IString_System_Integer_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, "" IString3 } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { System.iIndexer(IString1, Integer2) IString3 };' Script, '", "System.iIndexer(IString,Integer) failed to throw on index larger than size of string.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1076ID, */ row { System.String('System.iLess_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "" IString1, "" IString2, false Boolean3 }, row { "Alphora", "Alphora", true }, row { "Dataphor", "Alphora", false }, row { "Alphora", "Alphor", true }, row { "ALPHORA", "Alphora", false } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 < IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iLess(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1077ID, */ row { System.String('System.iLike_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "" IString1, "" IString2, true Boolean3 }, row { "Alphora", "Al_HoR_", true }, row { "Alphora", "Dataphor", false }, row { "Alphora", "AL%", true }, row { "Alphora", "Alphor__", false } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 like IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iLike(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1078ID, */ row { System.String('System.IndexOf_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Integer" });' Table, 'insert table { row { "Alphora" IString1, "Alphora" IString2, 0 Integer3 }, row { "Alphora", "Dataphor", -1 }, row { "Alphora", "ORA", 4 } } into ListIStringIStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIntegerTestTable over { IString1, IString2 } add { IndexOf(IString1, IString2) Integer3 }' Script, ') <> ListIStringIStringIntegerTestTable then raise Error("System.IndexOf(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1079ID, */ row { System.String('System.iNotEqual_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Boolean" });' Table, 'insert table { row { "Alphora" IString1, "Alphora" IString2, false Boolean3 }, row { "Dataphor", "Dataphoria", true }, row { "Dataphor", "Alphora", true }, row { "Softwise", "Alphora", true }, row { "Dataphor", "DATAPHOR", false } } into ListIStringIStringBooleanTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringBooleanTestTable over { IString1, IString2 } add { IString1 <> IString2 Boolean3 }' Script, ') <> ListIStringIStringBooleanTestTable then raise Error("iNotEqual(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1080ID, */ row { System.String('System.Insert_System_IString_System_Integer_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, "" IString3, "" IString4 }, row { "Alphora", 2, "Data", "AlDataphora" }, row { "Alphora", 7, " Rocks", "Alphora Rocks" }, row { "Alphora", 3, "e", "Alephora"  } } into ListIStringIntegerIStringIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringIStringTestTable over { IString1, Integer2, IString3 } add { System.Insert(IString1, Integer2, IString3) IString4 }' Script, ') <> ListIStringIntegerIStringIStringTestTable then raise Error("System.Insert(IString,Integer,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1081ID, */ row { System.String('System.Insert_System_IString_System_Integer_System_IString_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "Alphora" IString1, 8 Integer2, "" IString3, "Alphora" IString4 } } into ListIStringIntegerIStringIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIStringIStringTestTable over { IString1, Integer2, IString3 } add { System.Insert(IString1, Integer2, IString3) IString4 };' Script, '", "System.Insert(IString,Integer,IString) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1082ID, */ row { System.String('System.IString') Name, 100 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "Test" then raise Error("System.IString ''Test'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1083ID, */ row { System.String('System.IString') Name, 101 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "Alphora" then raise Error("System.IString ''Alphora'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1084ID, */ row { System.String('System.IString') Name, 102 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Dataphor" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "Dataphor" then raise Error("System.IString ''Dataphor'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1085ID, */ row { System.String('System.IString') Name, 103 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "DAE" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "DAE" then raise Error("System.IString ''DAE'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1086ID, */ row { System.String('System.IString') Name, 104 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "McKay Salisbury" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "McKay Salisbury" then raise Error("System.IString ''McKay Salisbury'' value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1087ID, */ row { System.String('System.IString') Name, 105 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "
		 Whitespace Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "
		 Whitespace Test" then raise Error("System.IString with whitespace value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1088ID, */ row { System.String('System.IString') Name, 106 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "| [0N741n - 5ym|3075" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "| [0N741n - 5ym|3075" then raise Error("System.IString in 1337 sp33k (symbols and numbers test) was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1089ID, */ row { System.String('System.IString') Name, 107 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "WeIrD CaSe" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "WeIrD CaSe" then raise Error("System.IString containing strange mixed case value was not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1090ID, */ row { System.String('System.IString') Name, 108 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "TEST CASE" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "test case" then raise Error("System.IString compared sensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1091ID, */ row { System.String('System.IString') Name, 109 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "test case" IString1 } } into ListIStringTestTable;' InsertTableStatement, '' BeforeScript, 'if (IString1 from row from ListIStringTestTable) <> "TEST CASE" then raise Error("System.IString compared sensitively.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1092ID, */ row { System.String('System.IString') Name, 200 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, '' InsertTableStatement, '' BeforeScript, 'insert table { row { "True" IString1 } } into ListIStringTestTable; NegativeTest("insert table { row { ''True'' IString1 } } into ListIStringTestTable;", "Allowed to insert two of the same value into the table."); insert table { row { ''False'' IString1 } } into ListIStringTestTable; NegativeTest("insert table { row { ''False'' IString1 } } into ListIStringTestTable;", "Allowed to insert two of the same value into the table.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1093ID, */ row { System.String('System.IString') Name, 300 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { IString1 : IString, IString2 : IString, key { IString1 }, order { IString2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" IString1, "This is not" IString2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { IString2 asc }", "DeviceOrder order by { IString2 asc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1094ID, */ row { System.String('System.IString') Name, 301 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, 'create table MemoryOrder in System.Temp { IString1 : IString, IString2 : IString, key { IString1 }, order { IString2 } }; create table DeviceOrder from MemoryOrder;' Table, 'insert table { row { "This is a test" IString1, "This is not" IString2 }, row { "I have a period.", ".at the beginning" }, row { "Can you read", "Z is the last letter" }, row { "Cloud, Sora, Tidus", "Aeris, Kairi, Yuna" } } into MemoryOrder; insert MemoryOrder into DeviceOrder;' InsertTableStatement, '' BeforeScript, 'TestNavigable("MemoryOrder order by { IString2 desc }", "DeviceOrder order by { IString2 desc }");' Script, '' AfterScript, 'drop table MemoryOrder; drop table DeviceOrder;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1095ID, */ row { System.String('System.iSubtraction_System_TimeSpan_System_TimeSpan_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, 'insert table { row { TimeSpan.Ticks(0) TimeSpan1, TimeSpan.Ticks(1) TimeSpan2, TimeSpan.Ticks(0) TimeSpan3 } } into TripleTimeSpanTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'TripleTimeSpanTestTable over { TimeSpan1, TimeSpan2 } add { TimeSpan1 - TimeSpan2 TimeSpan3 };' Script, '", "iSubtraction(TimeSpan,TimeSpan) failed to throw on Negative Overflow.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1096ID, */ row { System.String('System.Length_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer" });' Table, 'insert table { row { "" IString1, 2003 Integer2, 0 Integer3 }, row { "Alphora", 2000, 7 }, row { "Dataphor", 2100, 8 }, row { "I am your father", 2004, 16 }, row { "DAE", 2005, 3 } } into ListIStringIntegerIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIntegerTestTable over { IString1, Integer2 } add { Length(IString1) Integer3 }' Script, ') <> ListIStringIntegerIntegerTestTable then raise Error("System.Length(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1097ID, */ row { System.String('System.Lower_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 2003 Integer2, "" IString3 }, row { "Alphora", 2000, "alphora" }, row { "Dataphor", 2100, "dataphor" }, row { "I am your father", 2004, "i am your father" }, row { "DAE", 2005, "dae" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { Lower(IString1) IString3 }' Script, ') <> ListIStringIntegerIStringTestTable then raise Error("System.Lower(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1098ID, */ row { System.String('System.Math.Exp_System_Decimal_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Integer", "Decimal" });' Table, 'insert table { row { 0d Decimal1, 0 Integer2, 1d Decimal3 } } into ListDecimalIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalIntegerDecimalTestTable over { Decimal1, Integer2 } add { System.Math.Exp(Decimal1) Decimal3 }' Script, ') <> ListDecimalIntegerDecimalTestTable then raise Error("System.Math.Exp(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1099ID, */ row { System.String('System.Math.Ln_System_Decimal_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Integer", "Decimal" });' Table, 'insert table { row { 1d Decimal1, 0 Integer2, 0d Decimal3 } } into ListDecimalIntegerDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalIntegerDecimalTestTable over { Decimal1, Integer2 } add { System.Math.Ln(Decimal1) Decimal3 }' Script, ') <> ListDecimalIntegerDecimalTestTable then raise Error("System.Math.Ln(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1100ID, */ row { System.String('System.Math.Log10_System_Decimal_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "Decimal", "Decimal", "Decimal" });' Table, 'insert table { row { 1d Decimal1, 1d Decimal2, 0d Decimal3 } } into ListDecimalDecimalDecimalTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListDecimalDecimalDecimalTestTable over { Decimal1, Decimal2 } add { System.Math.Log10(Decimal1) Decimal3 }' Script, ') <> ListDecimalDecimalDecimalTestTable then raise Error("System.Math.Log10(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1101ID, */ row { System.String('System.Max_System_Date_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Date");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { (System.Max(Date1 from TripleDateTestTable) < Date(1900,1,1)) DateAggregate1 } }' Script, ') <> table { row { true DateAggregate1 } } then raise Error("System.Max(Date) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1102ID, */ row { System.String('System.Max_System_DateTime_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("DateTime");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { (System.Max(DateTime1 from TripleDateTimeTestTable) < DateTime(1900,1,1)) DateTimeAggregate1 } }' Script, ') <> table { row { true DateTimeAggregate1 } } then raise Error("System.Max(DateTime) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1103ID, */ row { System.String('System.Max_System_Decimal_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Decimal");' Table, '' InsertTableStatement, 'if (table { row { (' BeforeScript, 'System.Max(Decimal1 from TripleDecimalTestTable)' Script, ' < Decimal(-1e19)) DecimalAggregate1 } }) <> table { row { true DecimalAggregate1 } } then raise Error("System.Max(Decimal) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1104ID, */ row { System.String('System.Max_System_Integer_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Integer");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(Integer1 from TripleIntegerTestTable) IntegerAggregate1, System.Max(Integer2 from TripleIntegerTestTable) IntegerAggregate2, System.Max(Integer3 from TripleIntegerTestTable) IntegerAggregate3 } }' Script, ') <> table { row { Integer(-2147483648) IntegerAggregate1, Integer(-2147483648) IntegerAggregate2, Integer(-2147483648) IntegerAggregate3 } } then raise Error("System.Max(Integer) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1105ID, */ row { System.String('System.Max_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("IString");' Table, 'insert table { row { "Alphora" IString1, "Dataphor" IString2, "I am your father" IString3 }, row { "alphora", "dataphor", "i am your father" }, row { "ALPHORA", "DATAPHOR", "I AM YOUR FATHER" }, row { "AAlphora", "ADataphor", "I am not your father" } } into TripleIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(IString1 from TripleIStringTestTable) IStringAggregate1, System.Max(IString2 from TripleIStringTestTable) IStringAggregate2, System.Max(IString3 from TripleIStringTestTable) IStringAggregate3 } }' Script, ') <> table { row { "ALPHORA" IStringAggregate1, "DATAPHOR" IStringAggregate2, "I AM YOUR FATHER" IStringAggregate3 } } then raise Error("System.Max(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1106ID, */ row { System.String('System.Max_System_Money_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Money");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { (System.Max(Money1 from TripleMoneyTestTable) < Money(-1e19)) MoneyAggregate1 } }' Script, ') <> table { row { true MoneyAggregate1 } } then raise Error("System.Max(Money) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1107ID, */ row { System.String('System.Max_System_String_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("String");' Table, '' InsertTableStatement, 'NegativeTest("' BeforeScript, 'table { row { System.Max(String1 from TripleStringTestTable) StringAggregate1 } };' Script, '", "System.Max(String) failed to throw on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1108ID, */ row { System.String('System.Max_System_Time_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("Time");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { (System.Max(Time1 from TripleTimeTestTable) = Time(0,0,0)) TimeAggregate1 } }' Script, ') <> table { row { true TimeAggregate1 } } then raise Error("System.Max(Time) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1109ID, */ row { System.String('System.Max_System_TimeSpan_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&TripleTable("TimeSpan");' Table, '' InsertTableStatement, 'if (' BeforeScript, 'table { row { System.Max(TimeSpan1 from TripleTimeSpanTestTable) TimeSpanAggregate1, System.Max(TimeSpan2 from TripleTimeSpanTestTable) TimeSpanAggregate2, System.Max(TimeSpan3 from TripleTimeSpanTestTable) TimeSpanAggregate3 } }' Script, ') <> table { row { TimeSpan.Ticks(-9223372036854775807 - 1) TimeSpanAggregate1, TimeSpan.Ticks(-9223372036854775807 - 1) TimeSpanAggregate2, TimeSpan.Ticks(-9223372036854775807 - 1) TimeSpanAggregate3 } } then raise Error("System.Max(TimeSpan) failed on zero rows.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1110ID, */ row { System.String('System.PadLeft_System_IString_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, "" IString3 }, row { "", 5, "     " }, row { "1", 2, " 1" }, row { "Four", 10, "      Four" }, row { "TooLong", 2, "TooLong" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { System.PadLeft(IString1, Integer2) IString3 }' Script, ') <> ListIStringIntegerIStringTestTable then raise Error("System.PadLeft(IString,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1111ID, */ row { System.String('System.PadLeft_System_IString_System_Integer_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, "" IString3, "Doesn''t Matter" IString4 }, row { "", 5, "     ", " ExtraStuff"}, row { "1", 2, "#1", "#" }, row { "Four", 10, "$$$$$$Four", "$" }, row { "TooLong", 2, "TooLong", "Again, This one doesn''t matter" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringIStringTestTable over { IString1, Integer2, IString3 } add { System.PadLeft(IString1, Integer2, IString3) IString4 }' Script, ') <> ListIStringIntegerIStringIStringTestTable then raise Error("System.PadLeft(IString,Integer,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1112ID, */ row { System.String('System.PadRight_System_IString_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, "" IString3 }, row { "", 5, "     " }, row { "1", 2, "1 " }, row { "Four", 10, "Four      " }, row { "TooLong", 2, "TooLong" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { System.PadRight(IString1, Integer2) IString3 }' Script, ') <> ListIStringIntegerIStringTestTable then raise Error("System.PadRight(IString,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1113ID, */ row { System.String('System.PadRight_System_IString_System_Integer_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, "" IString3, "Doesn''t Matter" IString4 }, row { "", 5, "     ", " ExtraStuff"}, row { "1", 2, "1#", "#" }, row { "Four", 10, "Four$$$$$$", "$" }, row { "TooLong", 2, "TooLong", "Again, This one doesn''t matter" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringIStringTestTable over { IString1, Integer2, IString3 } add { System.PadRight(IString1, Integer2, IString3) IString4 }' Script, ') <> ListIStringIntegerIStringIStringTestTable then raise Error("System.PadRight(IString,Integer,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1114ID, */ row { System.String('System.Pos_System_IString_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "Integer" });' Table, 'insert table { row { "ora" IString1, "Alphora" IString2, 4 Integer3 }, row { "Dataphor", "Dataphor", 0 }, row { "", "", 0 }, row { "Alphora", "Dataphor", -1 } } into ListIStringIStringIntegerTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIntegerTestTable over { IString1, IString2 } add { System.Pos(IString1, IString2) Integer3 }' Script, ') <> ListIStringIStringIntegerTestTable then raise Error("System.Pos(IString,IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1115ID, */ row { System.String('System.Remove_System_IString_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, 0 Integer3, "" IString4 }, row { "Alphora", 3, 0, "Alphora" }, row { "Alphora", 0, 3, "hora" }, row { "Alphora", 3, 4, "Alp"  } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.Remove(IString1, Integer2, Integer3) IString4 }' Script, ') <> ListIStringIntegerIntegerIStringTestTable then raise Error("System.Remove(IString,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1116ID, */ row { System.String('System.Remove_System_IString_System_Integer_System_Integer_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "Alphora" IString1, 0 Integer2, 8 Integer3, "Alphora" IString4 } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.Remove(IString1, Integer2, Integer3) IString4 };' Script, '", "System.Remove(IString,Integer,Integer) failed to throw on length out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1117ID, */ row { System.String('System.Remove_System_IString_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "Alphora" IString1, 7 Integer2, 0 Integer3, "Alphora" IString4 } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.Remove(IString1, Integer2, Integer3) IString4 };' Script, '", "System.Remove(IString,Integer,Integer) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1118ID, */ row { System.String('System.SubString_System_IString_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, 0 Integer3, "" IString4 }, row { "Alphora", 3, 0, "hora" }, row { "Alphora", 0, 3, "Alphora" }, row { "Alphora", 4, 4, "ora"  } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.SubString(IString1, Integer2) IString4 }' Script, ') <> ListIStringIntegerIntegerIStringTestTable then raise Error("System.SubString(IString,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1119ID, */ row { System.String('System.SubString_System_IString_System_Integer_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "Alphora" IString1, 7 Integer2, 0 Integer3, "Alphora" IString4 } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.SubString(IString1, Integer2) IString4 };' Script, '", "System.SubString(IString,Integer) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1120ID, */ row { System.String('System.SubString_System_IString_System_Integer_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 0 Integer2, 0 Integer3, "" IString4 }, row { "Alphora", 3, 0, "" }, row { "Alphora", 0, 3, "Alp" }, row { "Alphora", 3, 4, "hora"  } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.SubString(IString1, Integer2, Integer3) IString4 }' Script, ') <> ListIStringIntegerIntegerIStringTestTable then raise Error("System.SubString(IString,Integer,Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1121ID, */ row { System.String('System.SubString_System_IString_System_Integer_System_Integer_') Name, 3 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "Integer", "IString" });' Table, 'insert table { row { "Alphora" IString1, 7 Integer2, 0 Integer3, "Alphora" IString4 } } into ListIStringIntegerIntegerIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringIntegerIntegerIStringTestTable over { IString1, Integer2, Integer3 } add { System.SubString(IString1, Integer2, Integer3) IString4 };' Script, '", "System.SubString(IString,Integer,Integer) failed to throw on index out of range.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1122ID, */ row { System.String('System.Time') Name, 100 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Time"});' Table, 'insert table { row { Time() Time1 } } into ListTimeTestTable;' InsertTableStatement, '' BeforeScript, 'if (Time1 from row from ListTimeTestTable) <> Time() then raise Error("System.Time current time values were not retrieved properly.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1123ID, */ row { System.String('System.ToByte_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "IString"});' Table, 'insert table { row { 0 Byte1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" } } into ListByteIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteIStringTestTable over { IString2 } add { ToByte(IString2) Byte1 }' Script, ') <> ListByteIStringTestTable then raise Error("ToIString(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1124ID, */ row { System.String('System.ToByte_System_IString_') Name, 5 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1125ID, */ row { System.String('System.ToByte_System_IString_') Name, 6 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "12Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1126ID, */ row { System.String('System.ToByte_System_IString_') Name, 12 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-1" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1127ID, */ row { System.String('System.ToByte_System_IString_') Name, 13 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "256" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1128ID, */ row { System.String('System.ToByte_System_IString_') Name, 14 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-255" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1129ID, */ row { System.String('System.ToByte_System_IString_') Name, 15 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "32767" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1130ID, */ row { System.String('System.ToByte_System_IString_') Name, 22 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-32769" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1131ID, */ row { System.String('System.ToByte_System_IString_') Name, 23 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-2147483647" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1132ID, */ row { System.String('System.ToByte_System_IString_') Name, 24 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "1048576" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1133ID, */ row { System.String('System.ToByte_System_IString_') Name, 25 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "32768" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1134ID, */ row { System.String('System.ToByte_System_IString_') Name, 32 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "2147483648" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1135ID, */ row { System.String('System.ToByte_System_IString_') Name, 33 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-2147483649" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1136ID, */ row { System.String('System.ToByte_System_IString_') Name, 34 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "9223372036854775807" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1137ID, */ row { System.String('System.ToByte_System_IString_') Name, 35 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-9223372036854775808" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToByte(IString1) Byte2 };' Script, '", "ToByte(IString) failed to throw on numbers outside of the range of a Byte.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1138ID, */ row { System.String('System.ToDecimal_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "IString"});' Table, 'insert table { row { Decimal(0.0) Decimal1, "0.0" IString2 }, row { 1.0, "1.0" }, row { 128, "128.0" }, row { 254.0, "254.0" }, row { 255.0, "255.0" }, row { 256.0, "256.0" }, row { -1.0, "-1.0" }, row { -255.0, "-255.0" }, row { -32.768, "-32.768" }, row { 32767.0, "32767.0" }, row { 3.2768, "3.2768" }, row { -0.32769, "-0.32769" }, row { 214748364.7, "214748364.7" }, row { -2147483648.0, "-2147483648.0" }, row { 2147483648.0, "2147483648.0" }, row { -2147.483649, "-21474.83649" }, row { -92233720368.545807, "-92233720368.545808" }, row { 9223372036854.5807, "9223372036854.5807" } } into ListDecimalIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalIStringTestTable over { IString2 } add { ToDecimal(IString2) Decimal1 }' Script, ') <> ListDecimalIStringTestTable then raise Error("ToIString(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1139ID, */ row { System.String('System.ToDecimal_System_IString_') Name, 5 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToDecimal(IString1) Decimal2 };' Script, '", "ToDecimal(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1140ID, */ row { System.String('System.ToDecimal_System_IString_') Name, 6 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "1.2Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToDecimal(IString1) Decimal2 };' Script, '", "ToDecimal(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1141ID, */ row { System.String('System.ToGuid_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidIStringTestTable { Guid1 : Guid, IString2 : IString static tags { Storage.Length = "50" } };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-a23456789ab0") Guid1, "12345678-90ab-cdef-abcd-a23456789ab0" IString2 }, row { Guid("12345678-90ab-cdef-abcd-0123456789aa"), "12345678-90ab-cdef-abcd-0123456789aa" } } into ListGuidIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidIStringTestTable over { IString2 } add { ToGuid(IString2) Guid1 }' Script, ') <> ListGuidIStringTestTable then raise Error("ToGuid(IString) failed.");' AfterScript, 'drop table ListGuidIStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1142ID, */ row { System.String('System.ToGuid_System_IString_') Name, 2 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidIStringTestTable { Guid1 : Guid, IString2 : IString static tags { Storage.Length = "50" };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-a23456789ab0") Guid1, "12345678-90ab-cdef-abcd-a23456789ab0" IString2 }, row { Guid("12345678-90ab-cdef-abcd-0123456789aa"), "12345678-90ab-cdef-abcd-0123456789aa1" } } into ListGuidIStringTestTable;' InsertTableStatement, 'NegativeTest(' BeforeScript, 'ListGuidIStringTestTable over { IString2 } add { ToGuid(IString2) Guid1 };' Script, '", "ToGuid(IString) failed to throw on non-Guid values.");' AfterScript, 'drop table ListGuidIStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1143ID, */ row { System.String('System.ToInteger_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "IString"});' Table, 'insert table { row { 0 Integer1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" } } into ListIntegerIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerIStringTestTable over { IString2 } add { ToInteger(IString2) Integer1 }' Script, ') <> ListIntegerIStringTestTable then raise Error("ToIString(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1144ID, */ row { System.String('System.ToInteger_System_IString_') Name, 5 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToInteger(IString1) Integer2 };' Script, '", "ToInteger(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1145ID, */ row { System.String('System.ToInteger_System_IString_') Name, 6 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "12Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToInteger(IString1) Integer2 };' Script, '", "ToInteger(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1146ID, */ row { System.String('System.ToInteger_System_IString_') Name, 32 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "2147483648" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToInteger(IString1) Integer2 };' Script, '", "ToInteger(IString) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1147ID, */ row { System.String('System.ToInteger_System_IString_') Name, 33 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-2147483649" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToInteger(IString1) Integer2 };' Script, '", "ToInteger(IString) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1148ID, */ row { System.String('System.ToInteger_System_IString_') Name, 34 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "9223372036854775807" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToInteger(IString1) Integer2 };' Script, '", "ToInteger(IString) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1149ID, */ row { System.String('System.ToInteger_System_IString_') Name, 35 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-9223372036854775808" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToInteger(IString1) Integer2 };' Script, '", "ToInteger(IString) failed to throw on numbers outside of the range of a Integer.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1150ID, */ row { System.String('System.ToIString_System_Boolean_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Boolean", "IString"});' Table, 'insert table { row { false Boolean1, "False" IString2 }, row { true, "True" } } into ListBooleanIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListBooleanIStringTestTable over { Boolean1 } add { ToIString(Boolean1) IString2 }' Script, ') <> ListBooleanIStringTestTable then raise Error("ToIString(Boolean) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1151ID, */ row { System.String('System.ToIString_System_Byte_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Byte", "IString"});' Table, 'insert table { row { 0 Byte1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" } } into ListByteIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListByteIStringTestTable over { Byte1 } add { ToIString(Byte1) IString2 }' Script, ') <> ListByteIStringTestTable then raise Error("ToIString(Byte) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1152ID, */ row { System.String('System.ToIString_System_Decimal_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Decimal", "IString"});' Table, 'insert table { row { Decimal(0.0) Decimal1, "0.0" IString2 }, row { 1.0, "1.0" }, row { 128, "128.0" }, row { 254.0, "254.0" }, row { 255.0, "255.0" }, row { 256.0, "256.0" }, row { -1.0, "-1.0" }, row { -255.0, "-255.0" }, row { -32.768, "-32.768" }, row { 32767.0, "32767.0" }, row { 3.2768, "3.2768" }, row { -0.32769, "-0.32769" }, row { 214748364.7, "214748364.7" }, row { -2147483648.0, "-2147483648.0" }, row { 2147483648.0, "2147483648.0" }, row { -2147.483649, "-21474.83649" }, row { -92233720368.545807, "-92233720368.545808" }, row { 9223372036854.5807, "9223372036854.5807" } } into ListDecimalIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListDecimalIStringTestTable over { Decimal1 } add { ToIString(Decimal1) IString2 }' Script, ') <> ListDecimalIStringTestTable then raise Error("ToIString(Decimal) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1153ID, */ row { System.String('System.ToIString_System_Guid_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, 'create table ListGuidIStringTestTable { Guid1 : Guid, IString2 : IString static tags { Storage.Length = "50" } };' Table, 'insert table { row { Guid("12345678-90ab-cdef-abcd-a23456789ab0") Guid1, "12345678-90ab-cdef-abcd-a23456789ab0" IString2 }, row { Guid("12345678-90ab-cdef-abcd-0123456789aa"), "12345678-90ab-cdef-abcd-0123456789aa" } } into ListGuidIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListGuidIStringTestTable over { Guid1 } add { ToIString(Guid1) IString2 }' Script, ') <> ListGuidIStringTestTable then raise Error("ToIString(Guid) failed.");' AfterScript, 'drop table ListGuidIStringTestTable;' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1154ID, */ row { System.String('System.ToIString_System_Integer_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Integer", "IString"});' Table, 'insert table { row { 0 Integer1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" } } into ListIntegerIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListIntegerIStringTestTable over { Integer1 } add { ToIString(Integer1) IString2 }' Script, ') <> ListIntegerIStringTestTable then raise Error("ToIString(Integer) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1155ID, */ row { System.String('System.ToIString_System_Money_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money", "IString"});' Table, 'insert table { row { $0.0 Money1, "$0.0" IString2 }, row { $1.0, "$1.0" }, row { $128, "$128.0" }, row { $254.0, "$254.0" }, row { $255.0, "$255.0" }, row { $256.0, "$256.0" }, row { -$1.0, "-$1.0" }, row { -$255.0, "-$255.0" }, row { -$32.768, "-$32.768" }, row { $32767.0, "$32767.0" }, row { $3.2768, "$3.2768" }, row { -$0.32769, "-$0.32769" }, row { $214748364.7, "$214748364.7" }, row { -$2147483648.0, "-$2147483648.0" }, row { $2147483648.0, "$2147483648.0" }, row { -$2147.483649, "-$21474.83649" }, row { -$92233720368.5458087, "-$92233720368.545808" }, row { $9223372036854.5807, "$9223372036854.5807" } } into ListMoneyIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyIStringTestTable over { Money1 } add { ToIString(Money1) IString2 }' Script, ') <> ListMoneyIStringTestTable then raise Error("ToIString(Money) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1156ID, */ row { System.String('System.ToIString_System_Short_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "IString"});' Table, 'insert table { row { 0 Short1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" } } into ListShortIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortIStringTestTable over { Short1 } add { ToIString(Short1) IString2 }' Script, ') <> ListShortIStringTestTable then raise Error("ToIString(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1157ID, */ row { System.String('System.ToLong_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Long", "IString"});' Table, 'insert table { row { Long(0) Long1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" }, row { 32768, "32768" }, row { -32769, "-32769" }, row { 2147483647, "2147483647" }, row { -2147483648, "-2147483648" }, row { 2147483648, "2147483648" }, row { -2147483649, "-2147483649" }, row { -9223372036854775807 - 1, "-9223372036854775808" }, row { 9223372036854775807, "9223372036854775807" } } into ListLongIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListLongIStringTestTable over { IString2 } add { ToLong(IString2) Long1 }' Script, ') <> ListLongIStringTestTable then raise Error("ToIString(Long) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1158ID, */ row { System.String('System.ToLong_System_IString_') Name, 5 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToLong(IString1) Long2 };' Script, '", "ToLong(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1159ID, */ row { System.String('System.ToLong_System_IString_') Name, 6 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "12Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToLong(IString1) Long2 };' Script, '", "ToLong(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1160ID, */ row { System.String('System.ToMoney_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Money", "IString"});' Table, 'insert table { row { $0.0 Money1, "$0.0" IString2 }, row { $1.0, "$1.0" }, row { $128, "$128.0" }, row { $254.0, "$254.0" }, row { $255.0, "$255.0" }, row { $256.0, "$256.0" }, row { -$1.0, "-$1.0" }, row { -$255.0, "-$255.0" }, row { -$32.768, "-$32.768" }, row { $32767.0, "$32767.0" }, row { $3.2768, "$3.2768" }, row { -$0.32769, "-$0.32769" }, row { $214748364.7, "$214748364.7" }, row { -$2147483648.0, "-$2147483648.0" }, row { $2147483648.0, "$2147483648.0" }, row { -$2147.483649, "-$21474.83649" }, row { -$92233720368.545808, "-$92233720368.545808" }, row { $9223372036854.5807, "$9223372036854.5807" } } into ListMoneyIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListMoneyIStringTestTable over { IString2 } add { ToMoney(IString2) Money1 }' Script, ') <> ListMoneyIStringTestTable then raise Error("ToMoney(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1161ID, */ row { System.String('System.ToMoney_System_IString_') Name, 5 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToMoney(IString1) Money2 };' Script, '", "ToMoney(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1162ID, */ row { System.String('System.ToMoney_System_IString_') Name, 6 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "1.2Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToMoney(IString1) Money2 };' Script, '", "ToMoney(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1163ID, */ row { System.String('System.ToShort_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"Short", "IString"});' Table, 'insert table { row { 0 Short1, "0" IString2 }, row { 1, "1" }, row { 128, "128" }, row { 254, "254" }, row { 255, "255" }, row { 256, "256" }, row { -1, "-1" }, row { -255, "-255" }, row { -32768, "-32768" }, row { 32767, "32767" } } into ListShortIStringTestTable;' InsertTableStatement, 'if(' BeforeScript, 'ListShortIStringTestTable over { IString2 } add { ToShort(IString2) Short1 }' Script, ') <> ListShortIStringTestTable then raise Error("ToIString(Short) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1164ID, */ row { System.String('System.ToShort_System_IString_') Name, 5 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "Alphora" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1165ID, */ row { System.String('System.ToShort_System_IString_') Name, 6 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "12Test" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on strings unrepresentable as numbers.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1166ID, */ row { System.String('System.ToShort_System_IString_') Name, 22 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-32769" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1167ID, */ row { System.String('System.ToShort_System_IString_') Name, 23 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-2147483647" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1168ID, */ row { System.String('System.ToShort_System_IString_') Name, 24 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "1048576" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1169ID, */ row { System.String('System.ToShort_System_IString_') Name, 25 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "32768" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1170ID, */ row { System.String('System.ToShort_System_IString_') Name, 32 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "2147483648" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1171ID, */ row { System.String('System.ToShort_System_IString_') Name, 33 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-2147483649" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1172ID, */ row { System.String('System.ToShort_System_IString_') Name, 34 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "9223372036854775807" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1173ID, */ row { System.String('System.ToShort_System_IString_') Name, 35 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"IString"});' Table, 'insert table { row { "-9223372036854775808" IString1 } } into ListIStringTestTable;' InsertTableStatement, 'NegativeTest("' BeforeScript, 'ListIStringTestTable add {ToShort(IString1) Short2 };' Script, '", "ToShort(IString) failed to throw on numbers outside of the range of a Short.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1174ID, */ row { System.String('System.Trim_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "IString" });' Table, 'insert table { row { "" IString1, "" IString2, "" IString3 }, row { " ", "", "" }, row { " Left Spaces", "", "Left Spaces" }, row { "Right Spaces            ", "", "Right Spaces" }, row { "             Both Spaces                 ", "", "Both Spaces" } } into ListIStringIStringIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIStringTestTable over { IString1, IString2 } add { System.Trim(IString1) IString3 }' Script, ') <> ListIStringIStringIStringTestTable then raise Error("System.Trim(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1175ID, */ row { System.String('System.TrimLeft_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "IString" });' Table, 'insert table { row { "" IString1, "" IString2, "" IString3 }, row { " ", "", "" }, row { " Left Spaces", "", "Left Spaces" }, row { "Right Spaces     ", "", "Right Spaces     " }, row { "             Both Spaces       ", "", "Both Spaces       " } } into ListIStringIStringIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIStringTestTable over { IString1, IString2 } add { System.TrimLeft(IString1) IString3 }' Script, ') <> ListIStringIStringIStringTestTable then raise Error("System.TrimLeft(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1176ID, */ row { System.String('System.TrimRight_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "IString", "IString" });' Table, 'insert table { row { "" IString1, "" IString2, "" IString3 }, row { " ", "", "" }, row { " Left Spaces", "", " Left Spaces" }, row { "Right Spaces     ", "", "Right Spaces" }, row { "          Both Spaces       ", "", "          Both Spaces" } } into ListIStringIStringIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIStringIStringTestTable over { IString1, IString2 } add { System.TrimRight(IString1) IString3 }' Script, ') <> ListIStringIStringIStringTestTable then raise Error("System.TrimRight(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1177ID, */ row { System.String('System.Upper_System_IString_') Name, 1 Sequence, 'Operator' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({ "IString", "Integer", "IString" });' Table, 'insert table { row { "" IString1, 2003 Integer2, "" IString3 }, row { "Alphora", 2000, "ALPHORA" }, row { "Dataphor", 2100, "DATAPHOR" }, row { "I am your father.", 2004, "I AM YOUR FATHER." }, row { "DAE", 2005, "DAE" } } into ListIStringIntegerIStringTestTable;' InsertTableStatement, 'if (' BeforeScript, 'ListIStringIntegerIStringTestTable over { IString1, Integer2 } add { Upper(IString1) IString3 }' Script, ') <> ListIStringIntegerIStringTestTable then raise Error("System.Upper(IString) failed.");' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated}, 
		/*1178ID, */ row { System.String('System.VersionNumber') Name, 110 Sequence, 'Type' Type, false Enabled, SQLDevice.SQLText('') Description, '&ListTable({"VersionNumber"});' Table, 'insert table { row { VersionNumber.Undefined VersionNumber1 } } into ListVersionNumberTestTable;' InsertTableStatement, '' BeforeScript, 'if (VersionNumber1 from row from ListVersionNumberTestTable) <> VersionNumber(-1) then raise Error("System.VersionNumber compared incorrectly with -1 values.");' Script, '' AfterScript, '' DropStatement, 'Adam Stevenson' User_ID, System.DateTime.Ticks(632213277480000000) DateTimeCreated},
						 row { System.Name('System.IsDigit_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, TestFramework.Coverage.Devices.Script('&ListTable({"String", "Boolean"});') Table, TestFramework.Coverage.Devices.Script('insert table { row {"False" String1, false Boolean2 }, row { "TheyallWentToThe1", false }, row { "Tr3ue", false }, row { "1234", true }} into ListStringBooleanTestTable;') InsertTableStatement, TestFramework.Coverage.Devices.Script('if(') BeforeScript, TestFramework.Coverage.Devices.Script('ListStringBooleanTestTable over { String1 } add { IsDigit(String1) Boolean2 }') Script, TestFramework.Coverage.Devices.Script(') <> ListStringBooleanTestTable then raise Error("IsDigit(String) failed.");') AfterScript, TestFramework.Coverage.Devices.Script('') DropStatement, '' User_ID, System.DateTime.Ticks(632470928970000000) DateTimeCreated }, 
						 row { System.Name('System.IsLetter_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, TestFramework.Coverage.Devices.Script('&ListTable({"String", "Boolean"});') Table, TestFramework.Coverage.Devices.Script('insert table { row {"False" String1, true Boolean2 },  row { "TheyallWentTOthe1", false },  row { "Tr3ue", false }} into ListStringBooleanTestTable;') InsertTableStatement, TestFramework.Coverage.Devices.Script('if(') BeforeScript, TestFramework.Coverage.Devices.Script('ListStringIntegerBooleanTestTable over { String1 } add { IsLetter(String1) Boolean2 }') Script, TestFramework.Coverage.Devices.Script(') <> ListStringBooleanTestTable then raise Error("IsLetter(String) failed.");') AfterScript, TestFramework.Coverage.Devices.Script('') DropStatement, '' User_ID, System.DateTime.Ticks(632470928970000000) DateTimeCreated }, 
       				 row { System.Name('System.IsLetterOrDigit_System_String_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, TestFramework.Coverage.Devices.Script('&ListTable({"String", "Boolean"});') Table, TestFramework.Coverage.Devices.Script('insert table { row {"False" String1, true Boolean2 },  row { "TheyallWentTOthe1", true },  row { "Tr3ue", true }} into ListStringBooleanTestTable;') InsertTableStatement, TestFramework.Coverage.Devices.Script('if(') BeforeScript, TestFramework.Coverage.Devices.Script('ListStringBooleanTestTable over { String1 } add { IsLetterOrDigit(String1) Boolean2 }') Script, TestFramework.Coverage.Devices.Script(') <> ListStringBooleanTestTable then raise Error("IsLetterOrDigit(String, Integer) failed.");') AfterScript, TestFramework.Coverage.Devices.Script('') DropStatement, '' User_ID, System.DateTime.Ticks(632470928970000000) DateTimeCreated }, 
 						 row { System.Name('System.IsLetterOrDigit_System_String_System_Integer_') Name, 1 Sequence, 'Operator' Type, true Enabled, SQLDevice.SQLText('') Description, TestFramework.Coverage.Devices.Script('&ListTable({"String", "Integer", "Boolean"});') Table, TestFramework.Coverage.Devices.Script('insert table { row {"False" String1, 2 Integer2, true Boolean3 },  row { "TheyallWentTOthe1", 2, true },  row { "Tr*ue", 2, false }} into ListStringIntegerBooleanTestTable;') InsertTableStatement, TestFramework.Coverage.Devices.Script('if(') BeforeScript, TestFramework.Coverage.Devices.Script('ListStringIntegerBooleanTestTable over { String1, Integer2 } add { IsLetterOrDigit(String1, Integer2) Boolean3 }') Script, TestFramework.Coverage.Devices.Script(') <> ListStringIntegerBooleanTestTable then raise Error("IsLetterOrDigit(String, Integer) failed.");') AfterScript, TestFramework.Coverage.Devices.Script('') DropStatement, '' User_ID, System.DateTime.Ticks(632470928970000000) DateTimeCreated }

	} into DeviceCase;