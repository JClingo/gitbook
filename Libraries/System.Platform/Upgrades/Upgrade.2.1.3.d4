/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/
drop operator PlatformExecute(String, String, row { WorkingDirectory : String, NoWindow : Boolean, WindowStyle : Integer, RedirectOutput : Boolean });
drop operator PlatformExecute(String, String, row { WorkingDirectory : String, NoWindow : Boolean, WindowStyle : Integer, RedirectOutput : Boolean }, row { UserName : String, Password : String, Domain : String, LoadUserProfile : Boolean });

create operator PlatformExecute(const AFileName : String, const AArguments : String, const ASettings : row { WorkingDirectory : String, NoWindow : Boolean, WindowStyle : Integer, RedirectOutput : Boolean, RedirectErrors : Boolean }) : row { ExitCode : Integer, Output : String, Errors : String } class "System.Platform.PlatformExecuteNode" tags { DAE.IsRemotable = "false", DAE.IsFunctional = "false", DAE.IsLiteral = "false", DAE.IsDeterministic = "false", DAE.IsRepeatable = "false" };
grant usage on PlatformExecute(String, String, row { WorkingDirectory : String, NoWindow : Boolean, WindowStyle : Integer, RedirectOutput : Boolean, RedirectErrors : Boolean }) to role PlatformUser;
create operator PlatformExecute(const AFileName : String, const AArguments : String, const AWorkingDirectory : String) : row { ExitCode : Integer, Output : String }
begin
	var LResult := PlatformExecute(AFileName, AArguments, row { AWorkingDirectory WorkingDirectory, nil NoWindow, nil WindowStyle, nil RedirectOutput, nil RedirectErrors });
	result := row { LResult.ExitCode ExitCode, LResult.Output Output };
end;
grant usage on PlatformExecute(String, String, String) to role PlatformUser;
create operator PlatformExecute(const AFileName : String, const AArguments : String, const ASettings : row { WorkingDirectory : String, NoWindow : Boolean, WindowStyle : Integer, RedirectOutput : Boolean, RedirectErrors : Boolean }, const AStartAs : row { UserName : String, Password : String, Domain : String, LoadUserProfile : Boolean }) : row { ExitCode : Integer, Output : String, Errors : String } class "System.Platform.PlatformExecuteNode" tags { DAE.IsRemotable = "false", DAE.IsFunctional = "false", DAE.IsLiteral = "false", DAE.IsDeterministic = "false", DAE.IsRepeatable = "false" };
grant usage on PlatformExecute(String, String, row { WorkingDirectory : String, NoWindow : Boolean, WindowStyle : Integer, RedirectOutput : Boolean, RedirectErrors : Boolean }, row { UserName : String, Password : String, Domain : String, LoadUserProfile : Boolean }) to role PlatformUser;
