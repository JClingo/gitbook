/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/

begin
/*
	var LIsCaseSensitive : Boolean := {1};

	if LIsCaseSensitive then	
	begin
*/
		alter device {0}
		{{
			create type System.String class "OracleDevice.OracleString" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.String(System.String) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.String.ReadValue(System.String) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.String.WriteValue(System.String, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 

			create operator System.iCompare(System.String, System.String) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iEqual(System.String, System.String) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iNotEqual(System.String, System.String) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iLess(System.String, System.String) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iInclusiveLess(System.String, System.String) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iInclusiveGreater(System.String, System.String) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iGreater(System.String, System.String) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iLike(System.String, System.String) class "SQLDevice.SQLLike" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iLike(System.Name, System.String) class "SQLDevice.SQLLike" static tags {{ DAE.IsSystem = "true" }},
		    create operator System.iAddition(System.String, System.String) class "SQLDevice.SQLConcatenation" static tags {{ DAE.IsSystem = "true" }},
			create operator System.iAddition(System.Name, System.Name) class "SQLDevice.SQLConcatenation" static tags {{ DAE.IsSystem = "true" }},
			create operator System.Min(System.String) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Max(System.String) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.Length(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Length" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Lower(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Lower" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Upper(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Upper" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Trim(System.String) static tags {{ Storage.TranslationString = "Trim({{0}})", DAE.IsSystem = "true" }}, 
			create operator System.TrimLeft(System.String) static tags {{ Storage.TranslationString = "LTrim({{0}})", DAE.IsSystem = "true" }}, 
			create operator System.TrimRight(System.String) static tags {{ Storage.TranslationString = "RTrim({{0}})", DAE.IsSystem = "true" }}, 
			create operator System.PadLeft(System.String, System.Integer) static tags {{ Storage.TranslationString = "case when (Length({{0}}) > {{1}}) then {{0}} else LPad({{0}}, {{1}}) end", DAE.IsSystem = "true" }}, 
			create operator System.PadRight(System.String, System.Integer) static tags {{ Storage.TranslationString = "case when (Length({{0}}) > {{1}}) then {{0}} else RPad({{0}}, {{1}}) end", DAE.IsSystem = "true" }}, 
			create operator System.PadLeft(System.String, System.Integer, System.String) tags {{ Storage.TranslationString = "case when (Length({{0}}) > {{1}}) then {{0}} else LPad({{0}}, {{1}}, SubStr({{2}}, 1, 1)) end" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.PadRight(System.String, System.Integer, System.String) tags {{ Storage.TranslationString = "case when (Length({{0}}) > {{1}}) then {{0}} else RPad({{0}}, {{1}}, SubStr({{2}}, 1, 1)) end" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Pos(System.String, System.String) tags {{ Storage.TranslationString = "(InStr({{1}}, {{0}}) - 1)" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.IndexOf(System.String, System.String) tags {{ Storage.TranslationString = "(InStr({{0}}, {{1}}) - 1)" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.CompareText(System.String, System.String) static tags {{ Storage.TranslationString = "(case when Lower({{0}}) = Lower({{1}}) then 0 else case when Lower({{0}}) > Lower({{1}}) then 1 else -1 end end)", DAE.IsSystem = "true" }}, 
			create operator System.SubString(System.String, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, {{1}} + 1, {{2}})", DAE.IsSystem = "true" }}, 
			create operator System.SubString(System.String, System.Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, {{1}} + 1)", DAE.IsSystem = "true" }}, 
			create operator System.Insert(System.String, System.Integer, System.String) static tags {{ Storage.TranslationString = "(SubStr({{0}}, 0, {{1}}) || {{2}} || SubStr({{0}}, {{1}} + 1, Length({{0}}) - 1))", DAE.IsSystem = "true" }}, 
			create operator System.Remove(System.String, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "(SubStr({{0}}, 1, {{1}}) || SubStr({{0}}, {{1}} + {{2}} + 1))", DAE.IsSystem = "true" }}, 
			create operator System.iIndexer(System.String, System.Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, {{1}} + 1, 1)", DAE.IsSystem = "true" }}, 
			create operator System.ToGuid(System.String) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
			create operator System.ToString(System.Guid) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
			create operator System.ToString(System.Byte) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToString(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToString(System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToString(System.Long) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToString(System.Short) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToString(System.Boolean) static tags {{ Storage.TranslationString = "case when {{0}} = 0 then 'false' else 'true' end", DAE.IsSystem = "true" }},
			create operator System.ToString(System.Money) static tags {{ Storage.TranslationString = "Replace(Replace(Trim(To_Char({{0}}, 'L999G999G999G999G999D00PR')), '<', '('), '>', ')')", DAE.IsSystem = "true" }},
			create operator System.ToString(System.TimeSpan) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "RTrim(case when {{0}} / 6048000000000 < 1 then '' else To_Number(Trunc({{0}} / 6048000000000)) || 'wks ' end || case when Mod({{0}}, 6048000000000) / 864000000000 < 1 then '' else Trunc(Mod({{0}}, 6048000000000) / 864000000000)  || 'days ' end || case when Mod({{0}}, 864000000000) / 36000000000 < 1 then '' else Trunc(Mod({{0}}, 864000000000) / 36000000000) || 'hrs ' end || case when Mod({{0}}, 36000000000) / 600000000 < 1 then '' else Trunc(Mod({{0}}, 36000000000) / 600000000) || 'min ' end || case when Mod({{0}}, 600000000) / 10000000 < 1 then '' else Trunc(Mod({{0}}, 600000000) / 10000000) || 'sec ' end || case when Mod({{0}}, 10000000) / 10000 < 1 then '' else Trunc(Mod({{0}}, 10000000) / 10000) || 'mil ' end || case when Mod({{0}}, 10000) < 1 then '' else To_Char(Mod({{0}}, 10000) * 100 ) || 'nan ' end) " }}, 
			create operator System.ToByte(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToDecimal(System.String) static tags {{ Storage.TranslationString = "To_Number({{0}})", DAE.IsSystem = "true" }},
			create operator System.ToInteger(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToShort(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToLong(System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToString(System.DateTime) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'MM/DD/YYYY HH:MI:SS AM')" }},
			create operator System.ToString(System.Time) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'HH:MI:SS AM')" }},
			create operator System.ToString(System.Date) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'MM/DD/YYYY')" }},
						
			create type SQLDevice.SQLText class "OracleDevice.OracleSQLText" static tags {{ DAE.IsSystem = "true" }},
			create operator SQLDevice.SQLText(System.String) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }},
			create operator SQLDevice.SQLText.ReadValue(SQLDevice.SQLText) static tags {{ Storage.TranslationString = "cast({{0}} as varchar2(8000))", DAE.IsSystem = "true" }},
			create operator SQLDevice.SQLText.WriteValue(SQLDevice.SQLText, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }},
			create operator SQLDevice.iLike(SQLDevice.SQLText, System.String) class "SQLDevice.SQLLike" static tags {{ DAE.IsSystem = "true" }} 
		}};
/*
	end
	else
	begin
		alter device {0}
		{{
			create type System.IString class "OracleDevice.OracleString" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.IString(System.IString) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.IString.ReadValue(System.IString) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.IString.WriteValue(System.IString, System.IString) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 

			create operator System.iCompare(System.IString, System.IString) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iEqual(System.IString, System.IString) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iNotEqual(System.IString, System.IString) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iLess(System.IString, System.IString) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iInclusiveLess(System.IString, System.IString) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iInclusiveGreater(System.IString, System.IString) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iGreater(System.IString, System.IString) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iLike(System.IString, System.IString) class "SQLDevice.SQLLike" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.iAddition(System.IString, System.IString) class "SQLDevice.SQLConcatenation" static tags {{ DAE.IsSystem = "true" }},
			create operator System.Min(System.IString) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Max(System.IString) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.Length(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Length" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Lower(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Lower" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Upper(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Upper" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Trim(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Trim" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.TrimLeft(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "LTrim" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.TrimRight(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "RTrim" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.PadLeft(System.IString, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "LPad" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.PadRight(System.IString, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "RPad" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.PadLeft(System.IString, System.Integer, System.IString) tags {{ Storage.TranslationString = "LPad({{0}}, {{1}}, SubStr({{2}}, 1, 1))" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.PadRight(System.IString, System.Integer, System.IString) tags {{ Storage.TranslationString = "RPad({{0}}, {{1}}, SubStr({{2}}, 1, 1))" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.Pos(System.IString, System.IString) tags {{ Storage.TranslationString = "(InStr({{1}}, {{0}}) - 1)" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.IndexOf(System.IString, System.IString) tags {{ Storage.TranslationString = "(InStr({{0}}, {{1}}) - 1)" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.CompareText(System.IString, System.IString) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.SubString(System.IString, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, {{1}} + 1, {{2}})", DAE.IsSystem = "true" }}, 
			create operator System.SubString(System.IString, System.Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, {{1}} + 1)", DAE.IsSystem = "true" }}, 
			create operator System.iIndexer(System.IString, System.Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, {{1}} + 1, 1)", DAE.IsSystem = "true" }}, 
			create operator System.Insert(System.IString, System.Integer, System.IString) static tags {{ Storage.TranslationString = "(SubStr({{0}}, 1, {{1}}) || {{2}} || SubStr({{0}}, {{1}} + 1))", DAE.IsSystem = "true" }}, 
			create operator System.Remove(System.IString, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "(SubStr({{0}}, 1, {{1}}) || SubStr({{0}}, {{1}} + {{2}} + 1))", DAE.IsSystem = "true" }}, 
			create operator System.ToGuid(System.IString) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
			create operator System.ToIString(System.Guid) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
			create operator System.ToIString(System.Byte) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToIString(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToIString(System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToIString(System.Long) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToIString(System.Short) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Char" }} static tags {{ DAE.IsSystem = "true" }}, 
			create operator System.ToByte(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToDecimal(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToInteger(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToShort(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToLong(System.IString) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "To_Number" }} static tags {{ DAE.IsSystem = "true" }},
			create operator System.ToIString(System.DateTime) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'MM/DD/YYYY HH:MI:SS AM')" }},
			create operator System.ToIString(System.Time) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'HH:MI:SS AM')" }},
			create operator System.ToIString(System.Date) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'MM/DD/YYYY')" }},

			create type SQLDevice.SQLIText class "SQLDevice.SQLText" static tags {{ DAE.IsSystem = "true" }}

		}}; 
	end;
*/

	alter device {0}
	{{
		create type System.UserID static tags {{ DAE.IsSystem = "true" }},
		create operator System.UserID(System.String) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.UserID.ReadValue(System.UserID) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.UserID.WriteValue(System.UserID, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		
		create type System.Name class "SQLDevice.SQLString" static tags {{ DAE.IsSystem = "true" }},
        create operator System.Name(System.String) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Name.ReadValue(System.Name) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Name.WriteValue(System.Name, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
   
		create type System.Boolean class "OracleDevice.OracleBoolean" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Boolean(System.Boolean) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Boolean.ReadValue(System.Boolean) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Boolean.WriteValue(System.Boolean, System.Boolean) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Boolean.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Boolean.ReadAsString(System.Boolean) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} = 0 then 'false' else 'true' end" }},			
	    create operator System.Boolean.WriteAsString(System.Boolean, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
	 
		create type System.Decimal class "SQLDevice.SQLDecimal" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Decimal(System.Decimal) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Decimal.ReadValue(System.Decimal) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Decimal.WriteValue(System.Decimal, System.Decimal) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Decimal.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Decimal.ReadAsString(System.Decimal) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Decimal.WriteAsString(System.Decimal, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
		//create operator System.Truncate(System.Decimal) tags {{ Storage.TranslationString = "Trunc({{0}},0)" }} static tags {{ DAE.IsSystem = "true" }}, 
		//create operator System.Truncate(System.Money) tags {{ Storage.TranslationString = "Trunc({{0}},0)" }} static tags {{ DAE.IsSystem = "true" }}, 
		
		create type System.Long class "OracleDevice.OracleLong" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Long(System.Long) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Long.ReadValue(System.Long) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Long.WriteValue(System.Long, System.Long) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Long.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Long.ReadAsString(System.Long) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Long.WriteAsString(System.Long, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
	 
		create type System.Integer class "OracleDevice.OracleInteger" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Integer(System.Integer) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Integer.ReadValue(System.Integer) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Integer.WriteValue(System.Integer, System.Integer) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Integer.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Integer.ReadAsString(System.Integer) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Integer.WriteAsString(System.Integer, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
	 
		create type System.Short class "OracleDevice.OracleShort" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Short(System.Short) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Short.ReadValue(System.Short) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Short.WriteValue(System.Short, System.Short) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Short.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Short.ReadAsString(System.Short) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Short.WriteAsString(System.Short, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
	 
		create type System.Byte class "OracleDevice.OracleByte" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Byte(System.Byte) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Byte.ReadValue(System.Byte) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Byte.WriteValue(System.Byte, System.Byte) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Byte.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Byte.ReadAsString(System.Byte) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Byte.WriteAsString(System.Byte, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
	 
		create type System.Money class "SQLDevice.SQLMoney" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Money(System.Decimal) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Money.ReadValue(System.Money) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Money.WriteValue(System.Money, System.Decimal) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
        create operator System.Money.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{0}})" }},			
	    create operator System.Money.ReadAsString(System.Money) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Money.WriteAsString(System.Money, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number({{1}})" }},			
	    create operator System.Money.AsDisplayString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number(TRANSLATE({{0}}, '1<>$', '1-'))" }},			
	    create operator System.Money.ReadAsDisplayString(System.Money) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'L999G999G999G999G999D00PR')" }},			
	    create operator System.Money.WriteAsDisplayString(System.Money, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Number(TRANSLATE({{1}}, '1<>$', '1-'))" }},			

		create type System.TimeSpan class "OracleDevice.OracleTimeSpan" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan(System.Integer) class "SQLDevice.SQLTimeSpan1Operand" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan(System.Integer, System.Integer) class "SQLDevice.SQLTimeSpan2Operands" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan(System.Integer, System.Integer, System.Integer) class "SQLDevice.SQLTimeSpan3Operands" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan(System.Integer, System.Integer, System.Integer, System.Integer) class "SQLDevice.SQLTimeSpan4Operands" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan(System.Integer, System.Integer, System.Integer, System.Integer, System.Decimal) class "SQLDevice.SQLTimeSpan5Operands" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.Days(System.Decimal) class "SQLDevice.SQLTimeSpanDays" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadDays(System.TimeSpan) class "SQLDevice.SQLTimeSpanReadDays" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.WriteDays(System.TimeSpan, System.Decimal) class "SQLDevice.SQLTimeSpanWriteDays" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.Hours(System.Decimal) class "SQLDevice.SQLTimeSpanHours" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadHours(System.TimeSpan) class "SQLDevice.SQLTimeSpanReadHours" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.WriteHours(System.TimeSpan, System.Decimal) class "SQLDevice.SQLTimeSpanWriteHours" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.Minutes(System.Decimal) class "SQLDevice.SQLTimeSpanMinutes" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadMinutes(System.TimeSpan) class "SQLDevice.SQLTimeSpanReadMinutes" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.WriteMinutes(System.TimeSpan, System.Decimal) class "SQLDevice.SQLTimeSpanWriteMinutes" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.Seconds(System.Decimal) class "SQLDevice.SQLTimeSpanSeconds" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadSeconds(System.TimeSpan) class "SQLDevice.SQLTimeSpanReadSeconds" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.WriteSeconds(System.TimeSpan, System.Decimal) class "SQLDevice.SQLTimeSpanWriteSeconds" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.Milliseconds(System.Decimal) class "SQLDevice.SQLTimeSpanMilliseconds" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadMilliseconds(System.TimeSpan) class "SQLDevice.SQLTimeSpanReadMilliseconds" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.WriteMilliseconds(System.TimeSpan, System.Decimal) class "SQLDevice.SQLTimeSpanWriteMilliseconds" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.Ticks(System.Long) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadTicks(System.TimeSpan) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.WriteTicks(System.TimeSpan, System.Long) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadDay(System.TimeSpan) class "OracleDevice.OracleTimeSpanReadDay" static tags {{ DAE.IsSystem = "true" }},
		create operator System.TimeSpan.WriteDay(System.TimeSpan, System.Integer) class "OracleDevice.OracleTimeSpanWriteDay" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadHour(System.TimeSpan) class "OracleDevice.OracleTimeSpanReadHour" static tags {{ DAE.IsSystem = "true" }},
		create operator System.TimeSpan.WriteHour(System.TimeSpan, System.Integer) class "OracleDevice.OracleTimeSpanWriteHour" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadMinute(System.TimeSpan) class "OracleDevice.OracleTimeSpanReadMinute" static tags {{ DAE.IsSystem = "true" }},
		create operator System.TimeSpan.WriteMinute(System.TimeSpan, System.Integer) class "OracleDevice.OracleTimeSpanWriteMinute" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadSecond(System.TimeSpan) class "OracleDevice.OracleTimeSpanReadSecond" static tags {{ DAE.IsSystem = "true" }},
		create operator System.TimeSpan.WriteSecond(System.TimeSpan, System.Integer) class "OracleDevice.OracleTimeSpanWriteSecond" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimeSpan.ReadMillisecond(System.TimeSpan) class "OracleDevice.OracleTimeSpanReadMillisecond" static tags {{ DAE.IsSystem = "true" }},
		create operator System.TimeSpan.WriteMillisecond(System.TimeSpan, System.Decimal) class "OracleDevice.OracleTimeSpanWriteMillisecond" static tags {{ DAE.IsSystem = "true" }}, 

		create type System.DateTime class "SQLDevice.SQLDateTime" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.DateTime(System.Integer, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "TO_DATE(TO_CHAR({{0}}) || '/' || TO_CHAR({{1}}) || '/' || TO_CHAR({{2}}) || ' 00:00:00', 'yyyy/mm/dd hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.DateTime(System.Integer, System.Integer, System.Integer, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "TO_DATE(TO_CHAR({{0}}) || '/' || TO_CHAR({{1}}) || '/' || TO_CHAR({{2}}) || ' ' || TO_CHAR({{3}}) || ':' || TO_CHAR({{4}}) || ':00', 'yyyy/mm/dd hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.DateTime(System.Integer, System.Integer, System.Integer, System.Integer, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "TO_DATE(TO_CHAR({{0}}) || '/' || TO_CHAR({{1}}) || '/' || TO_CHAR({{2}}) || ' ' || TO_CHAR({{3}}) || ':' || TO_CHAR({{4}}) || ':' || TO_CHAR({{5}}), 'yyyy/mm/dd hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.DateTime.ReadYear(System.DateTime) class "OracleDevice.OracleDateTimeReadYear" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.WriteYear(System.DateTime, System.Integer) class "OracleDevice.OracleDateTimeWriteYear" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.ReadMonth(System.DateTime) class "OracleDevice.OracleDateTimeReadMonth" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.WriteMonth(System.DateTime, System.Integer) class "OracleDevice.OracleDateTimeWriteMonth" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.ReadDay(System.DateTime) class "OracleDevice.OracleDateTimeReadDay" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.WriteDay(System.DateTime, System.Integer) class "OracleDevice.OracleDateTimeWriteDay" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.ReadHour(System.DateTime) static tags {{ Storage.TranslationString = "To_Char({{0}}, 'HH24')", DAE.IsSystem = "true" }},
		create operator System.DateTime.WriteHour(System.DateTime, System.Integer) class "OracleDevice.OracleDateTimeWriteHour" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.ReadMinute(System.DateTime) class "OracleDevice.OracleDateTimeReadMinute" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.WriteMinute(System.DateTime, System.Integer) class "OracleDevice.OracleDateTimeWriteMinute" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.ReadSecond(System.DateTime) class "OracleDevice.OracleDateTimeReadSecond" static tags {{ DAE.IsSystem = "true" }},
		create operator System.DateTime.WriteSecond(System.DateTime, System.Integer) class "OracleDevice.OracleDateTimeWriteSecond" static tags {{ DAE.IsSystem = "true" }},
        create operator System.DateTime.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Date({{0}}, 'MM/DD/YYYY HH24:MI:SS')" }},			
	    create operator System.DateTime.ReadAsString(System.DateTime) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'MM/DD/YYYY HH24:MI:SS') " }},			
	    create operator System.DateTime.WriteAsString(System.DateTime, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Date({{1}}, 'MM/DD/YYYY HH24:MI:SS')" }},			
		create operator System.DateTime() static tags {{ Storage.TranslationString = "SysDate", DAE.IsSystem = "true" }}, 
		create operator System.DateTime.Ticks(System.Long) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date(Trunc({{0}} / 864000000000) + 1721426,'J') + (Mod({{0}}, 864000000000) / 864000000000)" }},
		create operator System.DateTime.ReadTicks(System.DateTime) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "(({{0}} - To_Date('01-Jan-0001')) - 2) * 864000000000" }},
		create operator System.DateTime.WriteTicks(System.DateTime, System.Long) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date(Trunc({{1}} / 864000000000) + 1721426,'J') + (Mod({{1}}, 864000000000) / 864000000000)" }},
		
		create type System.Date class "SQLDevice.SQLDate" static tags {{ DAE.IsSystem = "true" }},
		create operator System.Date(System.Integer, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "To_Date(To_Char({{0}}) || '/' || To_Char({{1}}) || '/' || To_Char({{2}}) || ' 00:00:00', 'yyyy/mm/dd hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.Date.ReadYear(System.Date) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DTReadYear" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Date.WriteYear(System.Date, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DTWriteYear" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Date.ReadMonth(System.Date) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DTReadMonth" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Date.WriteMonth(System.Date, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DTWriteMonth" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Date.ReadDay(System.Date) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DTReadDay" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Date.WriteDay(System.Date, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DTWriteDay" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Date.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Date({{0}}, 'MM/DD/YYYY')" }},			
	    create operator System.Date.ReadAsString(System.Date) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'MM/DD/YYYY')" }},			
	    create operator System.Date.WriteAsString(System.Date, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Date({{1}}, 'MM/DD/YYYY')" }},			
	    create operator System.Date.Ticks(System.Long) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date((({{0}} - 599266080000000000) / 864000000000) + 2415021, 'J')" }},
		create operator System.Date.ReadTicks(System.Date) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "(( {{0}} - To_Date('01-Jan-1900')) * 864000000000) + 599266080000000000" }},
		create operator System.Date.WriteTicks(System.Date, System.Long) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date((({{1}} - 599266080000000000) / 864000000000) + 2415021, 'J')" }},
		create operator System.AddYears(System.Date, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_AddYears" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.AddMonths(System.Date, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Add_Months" }} static tags {{ DAE.IsSystem = "true" }}, 

		create type System.Time class "SQLDevice.SQLTime" static tags {{ DAE.IsSystem = "true" }},
		create operator System.Time(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "To_Date('1/1/0001 ' || To_Char({{0}}) || ':' || To_Char({{1}}) || ':00', 'MM/DD/YYYY HH24:MI:SS')", DAE.IsSystem = "true"}}, 
		create operator System.Time(System.Integer, System.Integer, System.Integer) static tags {{ Storage.TranslationString = "To_Date('1/1/0001 ' || To_Char({{0}}) || ':' || To_Char({{1}}) || ':' || To_Char({{2}}), 'MM/DD/YYYY HH24:MI:SS')", DAE.IsSystem = "true"}},
		create operator System.Time.ReadHour(System.Time) static tags {{ Storage.TranslationString = "To_Char({{0}}, 'HH24')", DAE.IsSystem = "true" }}, 
		create operator System.Time.WriteHour(System.Time, System.Integer) static tags {{ Storage.TranslationString = "To_Date(To_Char({{1}}) || ':' || To_Char({{0}},'mi') || ':' || To_Char({{0}},'ss'), 'hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.Time.ReadMinute(System.Time) static tags {{ Storage.TranslationString = "To_Char({{0}}, 'MI')", DAE.IsSystem = "true" }}, 
		create operator System.Time.WriteMinute(System.Time, System.Integer) static tags {{ Storage.TranslationString = "To_Date(To_Char({{0}}, 'hh24') || ':' || To_Char({{1}}) || ':' || To_Char({{0}},'ss'), 'hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.Time.ReadSecond(System.Time) static tags {{ Storage.TranslationString = "To_Char({{0}}, 'SS')", DAE.IsSystem = "true" }}, 
		create operator System.Time.WriteSecond(System.Time, System.Integer) static tags {{ Storage.TranslationString = "To_Date(To_Char({{0}}, 'hh24') || ':' || To_Char({{0}},'mi') || ':' || To_Char({{1}}), 'hh24:mi:ss')", DAE.IsSystem = "true" }}, 
        create operator System.Time.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Date({{0}}, 'HH24:MI:SS')" }},			
	    create operator System.Time.ReadAsString(System.Time) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}}, 'hh24:mi:ss')" }},			
	    create operator System.Time.WriteAsString(System.Time, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Date({{1}}, 'HH24:MI:SS')" }},			
		create operator System.Time.Ticks(System.Long) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date(To_Char(Trunc(Mod({{0}}, 864000000000) / 36000000000)) || ':' || To_Char(Trunc(Mod({{0}}, 36000000000) / 600000000)) || ':' || To_Char(Trunc(Mod({{0}}, 600000000) / 10000000)), 'hh24:mi:ss')" }},
		create operator System.Time.ReadTicks(System.Time) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "(To_Char({{0}},'sssss') * 10000000)" }},
		create operator System.Time.WriteTicks(System.Time, System.Long) static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date({{1}} / 10000000,'SSSSS')" }},
        
		create type System.Guid class "SQLDevice.SQLGuid" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Guid(System.String) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Guid.ReadValue(System.Guid) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Guid.WriteValue(System.Guid, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Guid.AsString(System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Guid.ReadAsString(System.Guid) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{0}})" }},			
	    create operator System.Guid.WriteAsString(System.Guid, System.String) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "To_Char({{1}})" }},			
	    create operator System.NameFromGuid(System.Guid) static tags {{ Storage.TranslationString = "Replace({{0}}, '-', '_')", DAE.IsSystem = "true" }},
	  
		create type System.Binary class "SQLDevice.SQLBinary" static tags {{ DAE.IsSystem = "true" }},
		create operator System.Binary(System.String) static tags {{ Storage.TranslationString = "Cast({{0}} as Blob)", DAE.IsSystem = "true" }}, 
		create operator System.Binary.ReadValue(System.Binary) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Binary.WriteValue(System.Binary, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create type System.Graphic class "SQLDevice.SQLGraphic" static tags {{ DAE.IsSystem = "true" }},
		create operator System.Graphic(System.String) class "SQLDevice.SQLScalarSelector" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Graphic.ReadValue(System.Graphic) class "SQLDevice.SQLScalarReadAccessor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Graphic.WriteValue(System.Graphic, System.String) class "SQLDevice.SQLScalarWriteAccessor" static tags {{ DAE.IsSystem = "true" }}, 
       
		create type System.VersionNumber class "SQLDevice.SQLVersionNumber" static tags {{ DAE.IsSystem = "true" }},
		create operator System.IsUndefined(System.VersionNumber) class "SQLDevice.SQLVersionNumberIsUndefinedOperator" static tags {{ DAE.IsSystem = "true" }},
		create operator System.VersionNumber(Integer) static tags {{ Storage.TranslationString = "case when {{0}} = -1 then LPad('*', 40, '*') else LPad({{0}}, 10, '0') || LPad('*', 30, '*') end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber(Integer, Integer) static tags {{ Storage.TranslationString = "LPad({{0}}, 10, '0') || case when {{1}} = -1 then LPad('*', 30, '*') else RPad(LPad({{1}}, 10, '0'), 30, '*') end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber(Integer, Integer, Integer) static tags {{ Storage.TranslationString = "LPad({{0}}, 10, '0') || LPad({{1}}, 10, '0') || case when {{2}} = -1 then LPad('*', 20, '*') else RPad(LPad({{2}}, 10, '0'), 20, '*') end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber(Integer, Integer, Integer, Integer) static tags {{ Storage.TranslationString = "LPad({{0}}, 10, '0') || LPad({{1}}, 10, '0') || LPad({{2}}, 10, '0') || case when {{3}} = -1 then LPad('*', 10, '*') else RPad(LPad({{3}}, 10, '0'), 10, '*') end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.ReadMajor(VersionNumber) static tags {{ Storage.TranslationString = "case when SubStr({{0}}, 1, 10) = '**********' then -1 else Cast(SubStr({{0}}, 1, 10) as Number) end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.WriteMajor(VersionNumber, Integer) static tags {{ Storage.TranslationString = "SubStr(To_Char({{1}}, '0000000000'), 2) || SubStr({{0}}, 11)", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.ReadMinor(VersionNumber) static tags {{ Storage.TranslationString = "case when SubStr({{0}}, 11, 10) = '**********' then -1 else Cast(SubStr({{0}}, 11, 10) as Number) end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.WriteMinor(VersionNumber, Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, 1, 10) || SubStr(To_Char({{1}}, '0000000000'), 2) || SubStr({{0}}, 21)", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.ReadRevision(VersionNumber) static tags {{ Storage.TranslationString = "case when SubStr({{0}}, 21, 10) = '**********' then -1 else Cast(SubStr({{0}}, 21, 10) as Number) end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.WriteRevision(VersionNumber, Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, 1, 20) || SubStr(To_Char({{1}}, '0000000000'), 2) || SubStr({{0}}, 31)", DAE.IsSystem = "true" }},
	    create operator System.VersionNumber.ReadBuild(VersionNumber) static tags {{ Storage.TranslationString = "case when SubStr({{0}}, 31, 10) = '**********' then -1 else Cast(SubStr({{0}}, 31, 10) as Number) end", DAE.IsSystem = "true" }},
		create operator System.VersionNumber.WriteBuild(VersionNumber, Integer) static tags {{ Storage.TranslationString = "SubStr({{0}}, 1, 30) || SubStr(To_Char({{1}}, '0000000000'), 2)", DAE.IsSystem = "true" }}, 
		create operator System.VersionNumber.AsString(System.String) class "SQLCallOperator" attributes {{ "OperatorName" = "DAE_StringToVersionNumber" }} static tags {{ DAE.IsSystem = "true" }},
		create operator System.VersionNumber.ReadAsString(System.VersionNumber) class "SQLCallOperator" attributes {{ "OperatorName" = "DAE_VersionNumberToString" }} static tags {{ DAE.IsSystem = "true" }},
		create operator System.VersionNumber.WriteAsString(System.VersionNumber, System.String) static tags {{ Storage.TranslationString = "DAE_StringToVersionNumber( {{1}} )", DAE.IsSystem = "true" }},
		create operator System.Compatible(System.VersionNumber, System.VersionNumber) static tags {{ Storage.TranslationString = "case when {{0}} <= {{1}} then 1 else 0 end", DAE.IsSystem = "true" }},
		    
		create operator System.IsSpecial(System.Scalar) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Boolean) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Decimal) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Long) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Integer) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Short) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Byte) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Money) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.TimeSpan) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.DateTime) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Guid) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.String) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Binary) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Graphic) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Date) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Name) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.Time) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.UserID) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		
		//create operator System.IsSpecial(System.IString) class "SQLDevice.SQLScalarIsSpecialOperator" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.IsSpecial(System.VersionNumber) class "SQLDevice.SQLVersionNumberIsUndefinedOperator" static tags {{ DAE.IsSystem = "true" }},

		create operator System.iCompare(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.DateTime, System.DateTime) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Date, System.Date) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Time, System.Time) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Decimal, System.Decimal) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Money, System.Money) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Guid, System.Guid) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Boolean, System.Boolean) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Long, System.Long) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Byte, System.Byte) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Short, System.Short) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Integer, System.Integer) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.Name, System.Name) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.UserID, System.UserID) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iCompare(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLCompare" static tags {{ DAE.IsSystem = "true" }},
		
		create operator System.Max(System.Byte, System.Byte) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Short, System.Short) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Integer, System.Integer) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Long, System.Long) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.TimeSpan, System.TimeSpan) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.DateTime, System.DateTime) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Time, System.Time) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Date, System.Date) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Decimal, System.Decimal) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.Money, System.Money) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Max(System.VersionNumber, System.VersionNumber) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} > {{1}} then {{0}} else {{1}} end" }}, 

		create operator System.Min(System.Byte, System.Byte) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Short, System.Short) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Integer, System.Integer) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Long, System.Long) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.TimeSpan, System.TimeSpan) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.DateTime, System.DateTime) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Time, System.Time) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Date, System.Date) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Decimal, System.Decimal) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.Money, System.Money) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		create operator System.Min(System.VersionNumber, System.VersionNumber) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when {{0}} is null then {{1}} when {{1}} is null then {{0}} when {{0}} < {{1}} then {{0}} else {{1}} end" }}, 
		
		create operator System.iEqual(System.Boolean, System.Boolean) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Short, System.Short) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Decimal, System.Decimal) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Integer, System.Integer) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Byte, System.Byte) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Long, System.Long) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.DateTime, System.DateTime) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Time, System.Time) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Date, System.Date) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Money, System.Money) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Guid, System.Guid) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Error, System.Error) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.Name, System.Name) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.UserID, System.UserID) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iEqual(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Long, System.Long) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Byte, System.Byte) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Guid, System.Guid) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Short, System.Short) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.DateTime, System.DateTime) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Date, System.Date) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Time, System.Time) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Boolean, System.Boolean) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Decimal, System.Decimal) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Integer, System.Integer) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Money, System.Money) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.Name, System.Name) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNotEqual(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLNotEqual" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Integer, System.Integer) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Long, System.Long) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Guid, System.Guid) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Boolean, System.Boolean) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Money, System.Money) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.DateTime, System.DateTime) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Time, System.Time) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Date, System.Date) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Decimal, System.Decimal) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Short, System.Short) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Byte, System.Byte) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.Name, System.Name) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLess(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Decimal, System.Decimal) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Byte, System.Byte) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.DateTime, System.DateTime) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Time, System.Time) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Date, System.Date) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Long, System.Long) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Boolean, System.Boolean) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Guid, System.Guid) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Short, System.Short) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Money, System.Money) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveLess(System.Integer, System.Integer) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }},
		create operator System.iInclusiveLess(System.Name, System.Name) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }},
		create operator System.iInclusiveLess(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLInclusiveLess" static tags {{ DAE.IsSystem = "true" }},
		create operator System.iInclusiveGreater(System.Short, System.Short) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Byte, System.Byte) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Integer, System.Integer) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Decimal, System.Decimal) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Long, System.Long) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Boolean, System.Boolean) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.DateTime, System.DateTime) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Time, System.Time) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Date, System.Date) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Money, System.Money) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Guid, System.Guid) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.Name, System.Name) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iInclusiveGreater(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLInclusiveGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Byte, System.Byte) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.DateTime, System.DateTime) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Time, System.Time) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Date, System.Date) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Money, System.Money) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Boolean, System.Boolean) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Long, System.Long) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Integer, System.Integer) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Guid, System.Guid) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Decimal, System.Decimal) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Short, System.Short) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iGreater(System.Name, System.Name) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 
      	create operator System.iGreater(System.VersionNumber, System.VersionNumber) class "SQLDevice.SQLGreater" static tags {{ DAE.IsSystem = "true" }}, 

		create operator System.iNegate(System.Short) class "SQLDevice.SQLNegate" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNegate(System.Long) class "SQLDevice.SQLNegate" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNegate(System.Integer) class "SQLDevice.SQLNegate" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNegate(System.Decimal) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "(-({{0}}))"}},
		create operator System.iNegate(System.TimeSpan) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "(-({{0}}))"}},
		create operator System.iNegate(System.Money) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "(-({{0}}))"}},
		create operator System.iAddition(System.Decimal, System.Decimal) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Byte, System.Byte) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Long, System.Long) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Money, System.Money) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Integer, System.Integer) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Short, System.Short) class "SQLDevice.SQLAddition" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Date, System.TimeSpan) static tags {{ Storage.TranslationString = "({{0}} + {{1}} / 864000000000)", DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.DateTime, System.TimeSpan) static tags {{ Storage.TranslationString = "({{0}} + {{1}} / 864000000000)", DAE.IsSystem = "true" }}, 
		create operator System.iAddition(System.Time, System.TimeSpan) static tags {{ Storage.TranslationString = "To_Date('01/01/0001 ' || To_Char({{0}} + case when {{1}} > 864000000000 then Mod({{1}}, 864000000000) else {{1}} / 864000000000 end, 'hh24:mi:ss'), 'mm/dd/yyyy hh24:mi:ss')", DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Date, System.TimeSpan) static tags {{ Storage.TranslationString = "({{0}} - {{1}} / 864000000000)", DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.DateTime, System.TimeSpan) static tags {{ Storage.TranslationString = "({{0}} - {{1}} / 864000000000)", DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Time, System.TimeSpan) static tags {{ Storage.TranslationString = "{{0}} - ({{1}} / 864000000000)", DAE.IsSystem = "true" }}, 
		
		create operator System.iSubtraction(System.Time, System.Time) static tags {{ Storage.TranslationString = "({{0}} - {{1}}) * 864000000000", DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Long, System.Long) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Short, System.Short) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Byte, System.Byte) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Integer, System.Integer) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Decimal, System.Decimal) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Money, System.Money) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLSubtraction" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.Date, System.Date) static tags {{ Storage.TranslationString = "({{0}} - {{1}}) * 864000000000.0", DAE.IsSystem = "true" }}, 
		create operator System.iSubtraction(System.DateTime, System.DateTime) static tags {{ Storage.TranslationString = "({{0}} - {{1}}) * 864000000000.0", DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Integer, System.TimeSpan) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.TimeSpan, System.Integer) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Decimal, System.TimeSpan) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.TimeSpan, System.Decimal) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Decimal, System.Money) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Long, System.Long) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Money, System.Decimal) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Money, System.Integer) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Byte, System.Byte) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Integer, System.Money) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Decimal, System.Decimal) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Integer, System.Integer) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iMultiplication(System.Short, System.Short) class "SQLDevice.SQLMultiplication" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Money, System.Integer) class "SQLDevice.SQLDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Decimal, System.Decimal) class "SQLDevice.SQLDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Byte, System.Byte) class "SQLDevice.SQLIntegerDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.TimeSpan, System.TimeSpan) class "SQLDevice.SQLIntegerDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Long, System.Long) class "SQLDevice.SQLIntegerDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Integer, System.Integer) class "SQLDevice.SQLIntegerDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Money, System.Decimal) class "SQLDevice.SQLDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Money, System.Money) class "SQLDevice.SQLDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.Short, System.Short) class "SQLDevice.SQLIntegerDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.TimeSpan, System.Integer) class "SQLDevice.SQLIntegerDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDivision(System.TimeSpan, System.Decimal) class "SQLDevice.SQLDivision" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDiv(System.Decimal, System.Decimal) static tags {{ Storage.TranslationString = "floor({{0}} / {{1}})", DAE.IsSystem = "true" }}, 
		create operator System.iDiv(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "floor(cast({{0}} as Decimal) / cast({{1}} as Decimal))", DAE.IsSystem = "true" }}, 
		create operator System.iDiv(System.Long, System.Long) static tags {{ Storage.TranslationString = "floor(cast({{0}} as Decimal) / cast({{1}} as Decimal))", DAE.IsSystem = "true" }}, 
		create operator System.iDiv(System.Short, System.Short) static tags {{ Storage.TranslationString = "floor(cast({{0}} as Decimal) / cast({{1}} as Decimal))", DAE.IsSystem = "true" }}, 
		create operator System.iDiv(System.Byte, System.Byte) static tags {{ Storage.TranslationString = "floor(cast({{0}} as Decimal) / cast({{1}} as Decimal))", DAE.IsSystem = "true" }}, 
		create operator System.iMod(System.Long, System.Long) static tags {{ Storage.TranslationString = "{{0}} - (Floor({{0}}/{{1}}) * {{1}})", DAE.IsSystem = "true" }}, 
		create operator System.iMod(System.Byte, System.Byte) static tags {{ Storage.TranslationString = "{{0}} - (Floor({{0}}/{{1}}) * {{1}})", DAE.IsSystem = "true" }}, 
		create operator System.iMod(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "{{0}} - (Floor({{0}}/{{1}}) * {{1}})", DAE.IsSystem = "true" }}, 
		create operator System.iMod(System.Short, System.Short) static tags {{ Storage.TranslationString = "{{0}} - (Floor({{0}}/{{1}}) * {{1}})", DAE.IsSystem = "true" }}, 
		create operator System.iMod(System.Decimal,System.Decimal) static tags {{ Storage.TranslationString = "{{0}} - (Floor({{0}}/{{1}}) * {{1}})", DAE.IsSystem = "true" }}, 
		create operator System.iPower(System.Decimal, System.Decimal) static tags {{ Storage.TranslationString = "Cast(Power({{0}}, {{1}}) as Number(28, 8))", DAE.IsSystem = "true" }}, 

		create operator System.iAnd(System.Boolean, System.Boolean) class "SQLDevice.SQLAnd" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iOr(System.Boolean, System.Boolean) class "SQLDevice.SQLOr" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iXor(System.Boolean, System.Boolean) class "SQLDevice.SQLXor" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iNot(System.Boolean) class "SQLDevice.SQLNot" static tags {{ DAE.IsSystem = "true" }}, 

		create operator System.iIn(generic, list) class "SQLDevice.SQLIn" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iIn(System.Scalar, table) class "SQLDevice.SQLIn" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iExists(table) class "SQLDevice.SQLExists" static tags {{ DAE.IsSystem = "true" }}, 

		create operator System.iBitwiseAnd(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseAnd(System.Long, System.Long) static tags {{ Storage.TranslationString = "BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }},  
		create operator System.iBitwiseAnd(System.Byte, System.Byte) static tags {{ Storage.TranslationString = "BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseAnd(System.Short, System.Short) static tags {{ Storage.TranslationString = "BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseOr(System.Short, System.Short) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseOr(System.Byte, System.Byte) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseOr(System.Long, System.Long) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseOr(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseXor(System.Short, System.Short) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) - BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseXor(System.Long, System.Long) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) - BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseXor(System.Byte, System.Byte) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) - BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseXor(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, {{1}}) + {{1}}) - BitAnd({{0}}, {{1}}) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseNot(System.Long) static tags {{ Storage.TranslationString = "case when {{0}} < 0 then ({{0}} + 1) * -1 else ({{0}} * -1) - 1 end", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseNot(System.Byte) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, 255) + 255) - BitAnd({{0}}, 255) + 0", DAE.IsSystem = "true" }}, 
		
		create operator System.iBitwiseNot(System.Integer) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, -1) + -1) - BitAnd({{0}}, -1) + 0", DAE.IsSystem = "true" }}, 
		create operator System.iBitwiseNot(System.Short) static tags {{ Storage.TranslationString = "({{0}} - BitAnd({{0}}, -1) + -1) - BitAnd({{0}}, -1) + 0", DAE.IsSystem = "true" }}, 
		
		create operator System.iShiftLeft(System.Long, System.Integer) static tags {{ Storage.TranslationString = "{{0}} * (Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftLeft(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "{{0}} * (Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftLeft(System.Byte, System.Integer) static tags {{ Storage.TranslationString = "{{0}} * (Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftLeft(System.Short, System.Integer) static tags {{ Storage.TranslationString = "{{0}} * (Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftRight(System.Byte, System.Integer) static tags {{ Storage.TranslationString = "Floor({{0}} / Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftRight(System.Short, System.Integer) static tags {{ Storage.TranslationString = "Floor({{0}} / Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftRight(System.Long, System.Integer) static tags {{ Storage.TranslationString = "Floor({{0}} / Power(2, {{1}}))", DAE.IsSystem = "true" }}, 
		create operator System.iShiftRight(System.Integer, System.Integer) static tags {{ Storage.TranslationString = "Floor({{0}} / Power(2, {{1}}))", DAE.IsSystem = "true" }}, 

		create operator System.IsNil(generic) class "SQLDevice.SQLIsNull" static tags {{ DAE.IsSystem = "true" }},
		create operator System.IsNotNil(generic) class "SQLDevice.SQLIsNotNull" static tags {{ DAE.IsSystem = "true" }},
		create operator System.IfNil(generic, generic) static tags {{ Storage.TranslationString = "case when {{0}} is null then {{1}} else {{0}} end", DAE.IsSystem = "true" }},

		create operator System.AddYears(System.DateTime, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_AddYears" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.AddMonths(System.DateTime, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Add_Months" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Duration(System.TimeSpan) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Abs" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.DatePart(System.DateTime) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Trunc" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.TimePart(System.DateTime) static tags {{ Storage.TranslationString = "To_Date(To_Char({{0}}, 'HH24:MI:SS'), 'HH24:MI:SS')", DAE.IsSystem = "true" }}, 
		create operator System.IsLeapYear(System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_IsLeapYear" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Time() static tags {{ DAE.IsSystem = "True", Storage.TranslationString = "To_Date(To_Char(SysDate,'01-JAN-0001 HH:MI:SS')" }},
		create operator System.Date() class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_Today" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.DayOfYear(System.DateTime) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DayOfYear" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.DayOfWeek(System.DateTime) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DayOfWeek" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.DaysInMonth(System.Integer, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_DaysInMonth" }} static tags {{ DAE.IsSystem = "true" }}, 
		
        create operator System.Replace(System.String,System.String,System.String) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Replace" }} static tags {{ DAE.IsSystem = "true" }},

		create operator System.Math.Log(System.Decimal, System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_LogB" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Floor(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Floor" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Floor(System.Money) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Floor" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Math.Ln(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Ln" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Abs(System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Abs" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Truncate(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Trunc" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Truncate(System.Money) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Trunc" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Math.Exp(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Exp" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Ceiling(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Ceil" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Ceiling(System.Money) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Ceil" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Math.Factorial(System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_Factorial" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Math.Log10(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Log" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Abs(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Abs" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Abs(System.Money) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Abs" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Round(System.Decimal, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Round" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Round(System.Money, System.Integer) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "Round" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Frac(System.Decimal) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_Frac" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Frac(System.Money) class "SQLDevice.SQLCallOperator" attributes {{ "OperatorName" = "DAE_Frac" }} static tags {{ DAE.IsSystem = "true" }}, 
		
		create operator System.Count() class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Count" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Count(System.Scalar) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Count" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.Integer) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.Long) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }},
		create operator System.Min(System.Decimal) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.Money) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.TimeSpan) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.DateTime) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.Date) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Min(System.Time) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Min" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.Integer) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.Long) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.Decimal) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.Money) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.TimeSpan) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.DateTime) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.Time) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Max(System.Date) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Max" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Sum(System.Integer) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Sum" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Sum(System.Long) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Sum" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Sum(System.Decimal) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Sum" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Sum(System.Money) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Sum" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Sum(System.TimeSpan) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Sum" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Avg(System.Integer) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Avg" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Avg(System.Long) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Avg" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Avg(System.Decimal) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Avg" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Avg(System.Money) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Avg" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Avg(System.TimeSpan) class "SQLDevice.SQLAggregateOperator" attributes {{ "OperatorName" = "Avg" }} static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.Concat(System.String) class "OracleDevice.OracleAggregateOperator" attributes {{ "OperatorName" = "ListAgg" }} static tags {{ DAE.IsSystem = "true" }},
		create operator System.Concat(System.String, System.String) class "OracleDevice.OracleAggregateOperator" attributes {{ "OperatorName" = "ListAgg" }} static tags {{ DAE.IsSystem = "true" }},

		create operator System.iRetrieve() class "OracleDevice.OracleRetrieve" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iProject(table) class "SQLDevice.SQLProject" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iRemove(table) class "SQLDevice.SQLProject" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iRestrict(table, System.Boolean) class "SQLDevice.SQLRestrict" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iRename(table) class "SQLDevice.SQLRename" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iRename(row) class "SQLDevice.SQLRename" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iExtend(table) class "SQLDevice.SQLExtend" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAggregate(table) class "SQLDevice.SQLAggregate" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iOrder(table) class "SQLDevice.SQLOrder" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iAdorn(table) class "SQLDevice.SQLAdorn" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iRedefine(table) class "SQLDevice.SQLRedefine" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iUnion(table, table) class "SQLDevice.SQLUnion" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iDifference(table, table) class "SQLDevice.SQLDifference" static tags {{ DAE.IsSystem = "true" }}, 

		create operator System.iJoin(table, table) class "SQLDevice.SQLJoin" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iLeftJoin(table, table) class "SQLDevice.SQLJoin" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iRightJoin(table, table) class "SQLDevice.SQLJoin" static tags {{ DAE.IsSystem = "true" }}, 
		create operator System.iHaving(table, table) class "SQLDevice.SQLJoin" static tags {{ DAE.IsSystem = "true" }},
		create operator System.iWithout(table, table) class "SQLDevice.SQLJoin" static tags {{ DAE.IsSystem = "true" }},

		create operator System.ToBoolean(System.Byte) static tags {{ Storage.TranslationString = "case when {{0}} = 0 then 0 else 1 end", DAE.IsSystem = "true" }},
		create operator System.ToBoolean(System.Integer) static tags {{ Storage.TranslationString = "case when {{0}} = 0 then 0 else 1 end", DAE.IsSystem = "true" }},
		create operator System.ToBoolean(System.Long) static tags {{ Storage.TranslationString = "case when {{0}} = 0 then 0 else 1 end", DAE.IsSystem = "true" }},
		create operator System.ToBoolean(System.Short) static tags {{ Storage.TranslationString = "case when {{0}} = 0 then 0 else 1 end", DAE.IsSystem = "true" }},
		create operator System.ToBoolean(System.String) static tags {{ Storage.TranslationString = "case when (Upper({{0}}) = 'FALSE') then 0 when (Upper({{0}}) = 'TRUE') then 1 else 0 end", DAE.IsSystem = "true" }},
		create operator System.ToByte(System.Integer) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToByte(System.Long) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToByte(System.Short) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToByte(System.Boolean) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToDecimal(System.Integer) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToDecimal(System.Long) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToDecimal(System.Money) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToInteger(System.Decimal) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToInteger(System.Money) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToInteger(System.Long) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToInteger(System.Short) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToInteger(System.Boolean) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToInteger(System.Byte) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToLong(System.Decimal) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToLong(System.Money) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToLong(System.Integer) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToLong(System.Short) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToLong(System.Boolean) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToLong(System.Byte) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToMoney(System.Decimal) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToMoney(System.Integer) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToMoney(System.Long) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToMoney(System.String) static tags {{ Storage.TranslationString = "Trunc(To_Number({{0}}), 2) ", DAE.IsSystem = "true" }},
		create operator System.ToShort(System.Integer) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToShort(System.Long) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToShort(System.Boolean) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToShort(System.Byte) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToTime(System.String) static tags {{ Storage.TranslationString = "To_Date({{0}}, 'HH24:MI:SS')", DAE.IsSystem = "true" }}, 
		create operator System.ToDateTime(System.Date) static tags {{ Storage.TranslationString = "{{0}}", DAE.IsSystem = "true" }},
		create operator System.ToDateTime(System.String) static tags {{ Storage.TranslationString = "To_Date({{0}}, 'MM/DD/YYYY HH24:MI:SS')", DAE.IsSystem = "true" }},
		create operator System.ToDate(System.DateTime) static tags {{ Storage.TranslationString = "To_Date(To_Char({{0}}, 'DD-MON-YYYY'), 'DD-MON-YYYY')", DAE.IsSystem = "true" }},
		create operator System.ToDate(System.String) static tags {{ Storage.TranslationString = "To_Date({{0}}, 'MM/DD/YYYY')", DAE.IsSystem = "true" }},
		create operator System.ToVersionNumber(System.String) static tags {{ Storage.TranslationString = "case when SubStr({{0}}, 1, 1) = '*' then '****************************************' else LPad(SubStr({{0}}, 1, case when InStr({{0}}, '.', 1, 1) = 0 then Length({{0}}) else InStr({{0}}, '.', 1, 1) - 1 end), 10, '0') end || case when InStr({{0}}, '.') = 0 then '******************************' else case when SubStr({{0}}, InStr({{0}}, '.', 1, 1) + 1, 1) = '*' then '******************************' else LPad(SubStr({{0}}, InStr({{0}}, '.', 1, 1) + 1, case when InStr({{0}}, '.', 1, 2) = 0 then Length({{0}}) - InStr({{0}}, '.',1,1) else (InStr({{0}}, '.', 1, 2) - InStr({{0}}, '.', 1, 1)) - 1 end), 10, '0') || case when InStr({{0}}, '.', 1, 2) = 0 then '********************' else case when SubStr({{0}}, InStr({{0}}, '.', 1, 2) + 1, 1) = '*' then '********************' else LPad(SubStr({{0}}, InStr({{0}}, '.', 1, 2) + 1, case when InStr({{0}}, '.', 1, 3) = 0 then Length({{0}}) - InStr({{0}}, '.',1,2) else (InStr({{0}}, '.', 1, 3) - InStr({{0}}, '.', 1, 2)) - 1 end), 10, '0') || case when InStr({{0}}, '.', 1, 3) = 0 then '**********' else case when SubStr({{0}}, InStr({{0}}, '.', 1, 3) + 1, 1) = '*' then '**********' else LPad(SubStr({{0}}, InStr({{0}}, '.', 1, 3) + 1), 10, '0') end end end end end end", DAE.IsSystem = "true" }},
		
		create operator System.LastIndexOf(System.String, System.String) static tags {{ Storage.TranslationString = "Instr({{0}}, {{1}}, -1) - 1", DAE.IsSystem = "true" }},
		create operator System.LastPos(System.String, System.String) static tags {{ Storage.TranslationString = "Instr({{1}}, {{0}}, -1) - 1", DAE.IsSystem = "true" }}, 
		create operator System.ToString(System.VersionNumber) static tags {{ Storage.TranslationString = "case when SubStr({{0}}, 1, 10) = '**********' then '*' else LTrim(To_Char(Cast(SubStr({{0}}, 1, 10) as number))) || '.' || case when SubStr({{0}}, 11, 10) = '**********' then '*' else LTrim(To_Char(Cast(SubStr({{0}}, 11, 10) as number))) || '.' || case when SubStr({{0}}, 21, 10) = '**********' then '*' else LTrim(To_Char(Cast(SubStr({{0}}, 21, 10) as number))) || '.' || case when SubStr({{0}}, 31, 10) = '**********' then '*' else LTrim(To_Char(Cast(SubStr({{0}}, 31, 10) as number))) end end end end", DAE.IsSystem = "true" }}, 
		create operator System.EndsWith(System.String, System.String) static tags {{ Storage.TranslationString = "case when Instr({{0}}, {{1}}) = (Length({{0}}) - Length({{1}}) + 1) then 1 else 0 end", DAE.IsSystem = "true" }},
        create operator System.StartsWith(System.String, System.String) static tags {{ Storage.TranslationString = "case when Instr({{0}}, {{1}}) = 1 then 1 else 0 end", DAE.IsSystem = "true" }},
        create operator System.IsUpper(System.String, System.Integer) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when substr({{0}}, {{1}} + 1, 1) = upper(substr({{0}}, {{1}} + 1, 1)) then 1 else 0 end" }}, 
		create operator System.IsLower(System.String, System.Integer) static tags {{ DAE.IsSystem = "true", Storage.TranslationString = "case when substr({{0}}, {{1}}, 1) = lower(substr({{0}}, {{1}}, 1)) then 1 else 0 end" }}, 
		create operator System.IsDigit(System.String, System.Integer) static tags {{ Storage.TranslationString = "case when regexp_like(substr({{0}}, {{1}} + 1, 1), '[0-9]') then 1 else 0 end", DAE.IsSystem = "true" }},
		create operator System.IsDigit(System.String) static tags {{ Storage.TranslationString = "case when regexp_like({{0}}, '^[0-9]+$') then 1 else 0 end", DAE.IsSystem = "true" }},
		create operator System.IsLetter(System.String, System.Integer) static tags {{ Storage.TranslationString = "case when regexp_like(substr({{0}}, {{1}} + 1, 1), '[[:alpha:]]') then 1 else 0 end", DAE.IsSystem = "true" }},
		create operator System.IsLetter(System.String) static tags {{ Storage.TranslationString = "case when regexp_like({{0}}, '^[[:alpha:]]+$') then 1 else 0 end", DAE.IsSystem = "true" }},
		create operator System.IsLetterOrDigit(System.String, System.Integer) static tags {{ Storage.TranslationString = "case when regexp_like(substr({{0}}, {{1}} + 1, 1), '[[:alnum:]]') then 1 else 0 end", DAE.IsSystem = "true" }},
		create operator System.IsLetterOrDigit(System.String) static tags {{ Storage.TranslationString = "case when regexp_like({{0}}, '^[[:alnum:]]+$') then 1 else 0 end", DAE.IsSystem = "true" }}
		   
       
	}};
end;
		