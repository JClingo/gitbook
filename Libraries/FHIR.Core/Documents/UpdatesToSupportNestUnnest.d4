/*
	TODO: Support update through add using an "assignment" metaphor
	
*/

create table Employee
{
	ID : Integer,
	Name : String,
	key { ID }
};

create table EmployeeAddress
{
	EmployeeID : Integer,
	Lines : list(String),
	City : String,
	State : String,
	Zip : String,
	key { EmployeeID },
	reference EmployeeAddress_Employee { EmployeeID } references Employee { ID }
};

create table EmployeePhone
{
	EmployeeID : Integer,
	Phone : String,
	key { EmployeeID, Phone },
	reference EmployeePhone_Employee { EmployeeID } references Employee { ID }
};

delete EmployeePhone;
delete EmployeeAddress;
delete Employee;

insert row { 1 ID, "Joe" Name } into Employee;
insert row { 1 EmployeeID, { "123 Spinning Ave" } Lines, "Orem" City, "UT" State, "89408" Zip } into EmployeeAddress;
insert row { 1 EmployeeID, "123-4567" Phone } into EmployeePhone;
insert row { 1 EmployeeID, "456-7890" Phone } into EmployeePhone;

select Employee;
select EmployeeAddress;
select EmployeePhone;

select 
	Employee 
	{ 
		ID, 
		Name, 
		((EmployeeAddress where EmployeeID = ID { Lines, City, State, Zip })[]) Address, 
		(EmployeePhone where EmployeeID = ID { Phone }) Phones
	};
	
create view EmployeeView
	Employee 
	{ 
		ID, 
		Name, 
		((EmployeeAddress where EmployeeID = ID { Lines, City, State, Zip })[]) Address, 
		(EmployeePhone where EmployeeID = ID { Phone }) Phones
	};

// Complete insert
insert row { 2 ID, "John" Name, row { { "123 Erewhon" } Lines, "Orem" City, "UT" State, "94085" Zip } Address, table { row { "123-3456" Phone }, row { "456-4567" Phone } } Phones }
	into EmployeeView;
	
// Insert w/ nulls
select row { 3 ID, "Bob" Name, nil Address, nil Phones };
insert row { 3 ID, "Bob" Name, nil Address, nil Phones } into EmployeeView;

// Complete delete
delete EmployeeView where ID = 2;

// Delete w/ nulls
delete EmployeeView where ID = 3;

insert row { 2 ID, "John" Name, row { { "123 Erewhon" } Lines, "Orem" City, "UT" State, "94085" Zip } Address, table { row { "123-3456" Phone }, row { "456-4567" Phone } } Phones }
	into EmployeeView;

// Non-key update of Employee
update EmployeeView set { Name := "Johnson" } where ID = 2;

// Update to nil
update EmployeeView set { Address := nil, Phones := nil } where ID = 2;

// Update from nil
update EmployeeView 
	set 
	{ 
		Address := row { { "123 Erewhon" } Lines, "Orem" City, "UT" State, "94085" Zip }, 
		Phones := table { row { "123-3456" Phone }, row { "456-4567" Phone } } 
	}
	where ID = 2;
	
// Non-Key Update
update EmployeeView 
	set { Address := row { { "12345 Erewhon" } Lines, "Orem" City, "UT" State, "94085" Zip } }
	where ID = 2;

// Key Update
update EmployeeView
	set { Phones := table { row { "123-3457" Phone }, row { "456-4568" Phone } } }
	where ID = 2;
	
// Insert/Update/Delete
update EmployeeView
	set { Phones := table { row { "123-3456" Phone }, row { "123-3457" Phone }, row { "456-5468" Phone } } }
	where ID = 2;

// Key update of Employee?
update EmployeeView set { ID := 3 } where ID = 2;


select Employee;
select EmployeeAddress;
select EmployeePhone;


select EmployeeView;
select Employee { ID, Name, ID NewID, Name NewName }	

create view TestEmployeeView Employee { ID, Name, ID NewID, Name NewName }

select TestEmployeeView

insert row { 4 ID, "Bob" Name } into TestEmployeeView

create view RestrictedEmployeeView Employee where ID = 12

insert row { "Jim" Name } into RestrictedEmployeeView

select RestrictedEmployeeView
	

// Update

// Delete

// Updatability here would involve the ability to update through a RowNode in the same way that we currently support update through a TableNode...
select EmployeeAddress add { row { Lines Lines, City City, State State, Zip Zip } Address } over { EmployeeID, Address };

// An include shorthand would allow the use of reference names...
select
	Employee
	{
		ID,
		Name,
		include EmployeeAddress as Address,
		include EmployeePhone as Phones
	};

// Effectively, the update to EmployeeAddress becomes:

EmployeeAddress where EmployeeID = old.ID := table { new.Address add { new.ID EmployeeID } };

// And the update to EmployeePhone becomes:

EmployeePhone where EmployeeID = old.ID := new.Phones add { ID EmployeeID }

// Of course, assignment would need to be generalized to be more intelligent, right now it's a total replacement, it needs to be a smarter update
// And it needs to take into account concurrency checking
// And the update through the add would need to have some way of knowing how to correlate the key back to the source table.
// A fairly tricky thing to get right, but it is possible, and it would result in a very nice API
	// Actually, it is possible to infer it from the restriction
// And implementations could pick and choose how much of a given structure they wanted to persist directly, versus column-by-column

EmployeePhone nest { Phone } Phones unnest Phones

// Wrap/Unwrap
create view WrappedEmployeeAddress 
	EmployeeAddress wrap { Lines, City, State, Zip } Address;

select WrappedEmployeeAddress unwrap Address;

// Update through wrap would be the same as update through project
// Update through unwrap would be the same as update through project

// Nest/Unnest operators would give a nice way to correlate the key back to the source

create view NestedEmployeePhone 
	EmployeePhone nest { Phone } Phones;
	
select NestedEmployeePhone unnest Phones; // Note that we lose the key here....

// Update through nest would have to be done as an assignment equivalent cursor-level operation
// Update through unnest would have to update the nested attribute of the source

select 
	Employee { ID, Name } rename E 
		left join (EmployeeAddress wrap { Lines, City, State, Zip } Address) rename EA by E.ID = EA.EmployeeID
		left join (EmployeePhone nest { Phone } Phones) rename EP by E.ID = EP.EmployeeID
		
// Of course, this would not be a supported operation, so restrict optimization would be essential, but only for the seek optimization, really

// Could you map a recursive structure this way?

Action.title: string,
Action.number : integer,
Action.resource : reference,
Action.actions : list(Action)
	
create table Action
{
	id : integer,
	parent_id : integer,
	title : string,
	number : integer,
	resource : reference,
	key { id }
};

// First, you'd have to ensure a unique identifier was available

select Action { id, title, number, resource, Action where parent_id = id actions }

// Hmmm......