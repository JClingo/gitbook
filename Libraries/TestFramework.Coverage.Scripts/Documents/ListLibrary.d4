//	Alphora Dataphor
//	 Â© Copyright 2000-2008 Alphora
//	 This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt

// D4 List Library Coverage Script

// select Operators where Name like '%list%' add { OperatorName.Value + Signature FullName } over { FullName };
// iEqual(list, list)                                                                                                                  
// iIn(System.Generic, list)                                                                                                           
// iIndexer(list, System.Integer)                                                                                                      
// System.Add(var list, System.Generic)                                                                                                
// System.Clear(var list)                                                                                                              
// System.Count(list)                                                                                                                  
// System.IndexOf(list, System.Generic)                                                                                                
// System.Insert(var list, System.Generic, System.Integer)                                                                             
// System.Remove(var list, System.Generic)                                                                                             
// System.RemoveAt(var list, System.Integer)                                                                                           

begin
	// Scalar lists
	var LList : list(Integer) := { 1, 2, 3 };
	
	if LList <> { 1, 2, 3 } then
		raise Error('List selector or comparison failed.');
	
	if not(1 in LList) then
		raise Error('Positive list membership failed.');
		
	if (5 in LList) then
		raise Error('Negative list membership failed.');
		
	if LList[0] <> 1 then
		raise Error('List indexer failed.');
		
	if LList.Count() <> 3 then
		raise Error('List Count failed.');
	
	if { 1, 2, 3, 2, 1 }.IndexOf(2) <> 1 then
		raise Error('List IndexOf failed.');
		
	if list(Integer){ }.IndexOf(2) <> -1 then
		raise Error('List IndexOf failed.');
		
	if { 1, 2, 3, 2, 1 }.LastIndexOf(2) <> 3 then
		raise Error('List LastIndexOf failed.');
		
	if list(Integer){ }.LastIndexOf(2) <> -1 then
		raise Error('List LastIndexOf failed.');
		
	LList.Add(5);
	if LList[3] <> 5 then
		raise Error('List Add failed.');

	LList.Insert(4, 3);
	if LList[3] <> 4 then
		raise Error('List Insert failed.');
				
	LList.Remove(3);
	if LList[3] <> 5 then
		raise Error('List Remove failed.');

	LList.RemoveAt(2);
	if LList[2] <> 5 then
		raise Error('List RemoveAt failed.');
	
	LList.Clear();
end;

begin
	// Row lists
	var LList : list(row { ID : Integer }) := { row { 1 ID }, row { 2 ID }, row { 3 ID } };
	
	if LList <> { row { 1 ID }, row { 2 ID }, row { 3 ID } } then
		raise Error('List selector or comparison failed.');
	
	if not(row { 1 ID } in LList) then
		raise Error('Positive list membership failed.');
		
	if (row { 5 ID } in LList) then
		raise Error('Negative list membership failed.');
		
	if LList[0] <> row { 1 ID } then
		raise Error('List indexer failed.');
		
	if LList.Count() <> 3 then
		raise Error('List Count failed.');
	
	if LList.IndexOf(row { 1 ID }) <> 0 then
		raise Error('List IndexOf failed.');
		
	LList.Add(row { 5 ID });
	if LList[3] <> row { 5 ID } then
		raise Error('List Add failed.');

	LList.Insert(row { 4 ID }, 3);
	if LList[3] <> row { 4 ID } then
		raise Error('List Insert failed.');
		
	LList.Remove(row { 3 ID });
	if LList[3] <> row { 5 ID } then
		raise Error('List Remove failed.');
		
	LList.RemoveAt(2);
	if LList[2] <> row { 5 ID } then
		raise Error('List RemoveAt failed.');
	
	LList.Clear();
end;

begin
	// Table lists
	var LList : list(table { ID : Integer }) := { table { row { 1 ID } }, table { row { 2 ID } }, table { row { 3 ID } } };
	
	if LList <> { table { row { 1 ID } }, table { row { 2 ID } }, table { row { 3 ID } } } then
		raise Error('List selector or comparison failed.');

	if not(table { row { 1 ID } } in LList) then
		raise Error('Positive list membership failed.');

	if (table { row { 5 ID } } in LList) then
		raise Error('Negative list membership failed.');
		
	if LList[0] <> table { row { 1 ID } } then
		raise Error('List indexer failed.');
		
	if LList.Count() <> 3 then
		raise Error('List Count failed.');
	
	if LList.IndexOf(table { row { 1 ID } }) <> 0 then
		raise Error('List IndexOf failed.');
		
	LList.Add(table { row { 5 ID } });
	if LList[3] <> table { row { 5 ID } } then
		raise Error('List Add failed.');

	LList.Insert(table { row { 4 ID } }, 3);
	if LList[3] <> table { row { 4 ID } } then
		raise Error('List Insert failed.');
		
	LList.Remove(table { row { 3 ID } });
	if LList[3] <> table { row { 5 ID } } then
		raise Error('List Remove failed.');
		
	LList.RemoveAt(2);
	if LList[2] <> table { row { 5 ID } } then
		raise Error('List RemoveAt failed.');
	
	LList.Clear();
end;

create operator Test() : list(Integer)
begin
	result := {1, 2, 3};
end;

var LList : list(Integer) := Test();
if Test() <> {1, 2, 3} then
	raise Error("List-valued operator failed.");

drop operator Test();

//* Table -> List || List -> Table
begin
	var LSaveSessions := Sessions;
	if (LSaveSessions <> (ToTable(ToList(cursor(LSaveSessions order by { ID }))) remove { sequence })) then
		raise Error('ToTable and ToList are not symmetric');
end;

if ToTable({ 'A', 'B', 'C' }) <> table { row { 0 sequence, 'A' value }, row { 1, 'B' }, row { 2, 'C' } } then
	raise Error('ToTable(list) failed');
		
if ToTable({ 1, 2, 3 }, 'IntegerValue') <> table { row { 0 sequence, 1 IntegerValue }, row { 1, 2 }, row { 2, 3 } } then
	raise Error('ToTable(list, Name) failed');
