/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/
/*
	Upgrade 2.0.2
	-Adds DocumentCacheSize column to the windows settings
	-Consolidates the GetWindows... settings calls into GetWindowsSettings()
	-Adds GetCRC32 operator for caching
	-Adds LoadIfNecessary() operator
*/

// Save old data
create session table TempWindowsClientApplications from Frontend.WindowsClientApplications;

// Drop operators and table
drop operator Frontend.GetWindowsTheme(const System.Guid);
drop reference Frontend.WindowsClientApplications_Applications;
drop operator Frontend.GetWindowsDefaultIconImage(const System.Guid);
drop table Frontend.WindowsClientApplications;

// Create new table
create table WindowsClientApplications in ServerStore
{
	Application_ID : Guid tags { Frontend.Visible = "false" },
	ThemeDocument : String { default "" } tags { Frontend.Title = "Theme Document" },
	DefaultIconImage : String { default "" } tags { Frontend.Title = "Default Form Icon Image" },
	DocumentCacheSize : Integer { default 800 } tags { Frontend.Title = "Document Cache Size", Frontend.Hint = "0 = client-side document cache off" },
	ImageCacheSize : Integer { default 60 } tags { Frontend.Title = "Image Cache Size", Frontend.Hint = "0 = client-side image cache off" },
	key { Application_ID } static tags { Storage.Enforced = "true" },
	reference WindowsClientApplications_Applications { Application_ID } references Applications { ID } update cascade delete cascade
} tags { static Frontend.Title = "Windows Client Application Settings" };
grant usage on WindowsClientApplications to role User;

// Populate with old data
insert TempWindowsClientApplications into WindowsClientApplications;

// Drop the temp table
drop table TempWindowsClientApplications;

// Create the new operators

create operator GetWindowsSettings(const AApplicationID : Guid) : row { IconImage : Binary, Theme : String, DocumentCacheSize : Integer, ImageCacheSize : Integer }
begin
	result := row { nil IconImage, nil Theme, nil DocumentCacheSize, nil ImageCacheSize };
	if exists (WindowsClientApplications where Application_ID = AApplicationID) then
	begin
		var LRow := row from (WindowsClientApplications where Application_ID = AApplicationID);

		// Image
		var LImageExpression := DefaultIconImage from LRow;
		if LImageExpression <> "" then
			update result set { IconImage := Evaluate(LImageExpression) as Binary };
			
		// Theme
		var LThemeExpression := ThemeDocument from LRow;
		if LThemeExpression <> "" then
			update result set { Theme := Evaluate(LThemeExpression) as String };
		
		// DocumentCacheSize & ImageCacheSize
		update result set { DocumentCacheSize := (DocumentCacheSize from LRow), ImageCacheSize := (ImageCacheSize from LRow) };
	end;
end;
grant usage on GetWindowsSettings(Guid) to role User;

create operator GetCRC32(AValue : generic) : Integer class "Frontend.GetCRC32Node" static tags { DAE.IsRemotable = "false" };
grant usage on GetCRC32(generic) to role User;

create operator LoadIfNecessary(ADocument : String, ACRC32 : Integer) : row { CRCMatches : Boolean, Value : Scalar, ActualCRC32 : Integer }
begin
	var LData := Evaluate(ADocument) as Scalar;
	if not IsNil(LData) then
	begin
		var LCRC32 := GetCRC32(LData);
		if LCRC32 = ACRC32 then
			result := row { true CRCMatches, nil Value, LCRC32 ActualCRC32 }
		else
			result := row { false CRCMatches, LData Value, LCRC32 ActualCRC32 };
	end
	else
		result := row { false CRCMatches, LData Value, 0 ActualCRC32 };
end;
grant usage on LoadIfNecessary(String, Integer) to role User;

