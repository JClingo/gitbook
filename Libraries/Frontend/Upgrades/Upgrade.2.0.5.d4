/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/
// Backup the data
create session table TempWindowsClientApplications from Frontend.WindowsClientApplications;

// Drop the old stuff
drop operator Frontend.GetWindowsSettings(const System.Guid);
drop reference Frontend.WindowsClientApplications_Applications;
drop table Frontend.WindowsClientApplications;

// Create the new table
create table WindowsClientApplications in ServerStore
{
	Application_ID : Guid tags { Frontend.Visible = "false" },
	ThemeDocument : String { default "" } tags { Frontend.Title = "Theme Document" },
	DefaultIconImage : String { default "" } tags { Frontend.Title = "Default Form Icon Image" },
	DocumentCacheSize : Integer { default 800 } tags { Frontend.Title = "Document Cache Size", Frontend.Hint = "0 = client-side document cache off" },
	ImageCacheSize : Integer { default 60 } tags { Frontend.Title = "Image Cache Size", Frontend.Hint = "0 = client-side image cache off" },
	HelpDocument : String { default "" } tags { Frontend.Title = "Help Document" },
	key { Application_ID } static tags { Storage.Enforced = "true" },
	reference WindowsClientApplications_Applications { Application_ID } references Applications { ID } update cascade delete cascade
} tags { static Frontend.Title = "Windows Client Application Settings" };
grant usage on WindowsClientApplications to role User;

// Populate the new table
insert TempWindowsClientApplications into WindowsClientApplications;

// Create the new operator
create operator GetWindowsSettings(const AApplicationID : Guid) 
	: 
	row 
	{ 
		IconImage : Binary, 
		Theme : String, 
		DocumentCacheSize : Integer, 
		ImageCacheSize : Integer, 
		HelpDocument : String 
	}
begin
	result := row { nil IconImage, nil Theme, nil DocumentCacheSize, nil ImageCacheSize, nil HelpDocument };
	if exists (WindowsClientApplications where Application_ID = AApplicationID) then
	begin
		var LRow := row from (WindowsClientApplications where Application_ID = AApplicationID);

		// Image
		var LImageExpression := DefaultIconImage from LRow;
		if LImageExpression <> "" then
			update result set { IconImage := Evaluate(LImageExpression) as Binary };
			
		// Theme
		var LThemeExpression := ThemeDocument from LRow;
		if LThemeExpression <> "" then
			update result set { Theme := Evaluate(LThemeExpression) as String };
		
		// DocumentCacheSize & ImageCacheSize
		update result 
			set 
			{ 
				DocumentCacheSize := (DocumentCacheSize from LRow), 
				ImageCacheSize := (ImageCacheSize from LRow), 
				HelpDocument := (HelpDocument from LRow) 
			};
	end;
end;
grant usage on GetWindowsSettings(Guid) to role User;

// Register help document type
insert
	table 
	{
		row { "chm" ID, "Compiled Help" Description, "System.Binary" DataType },
		row { "htm" ID, "HTML" Description, "System.String" DataType },
		key { ID }
	}
	into DocumentTypes;
	
insert
	table
	{
		row { "htm" DocumentType_ID, "Text" Designer_ID }
	}
	into DocumentTypeDesigners;
	
insert
	table
	{
		row { "htm" DocumentType_ID, "Text" Default_Designer_ID }
	}
	into DocumentTypeDefaultDesigners;
	

