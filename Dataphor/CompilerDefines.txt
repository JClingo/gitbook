#define ALTERNATIVEOPERATORPRECEDENCE in Parser.cs // Indicates whether operator precedence is original or new (not and exists after comparison, in, like, matches, between, is, and as before comparison)
#define ALLOWARBITRARYAGGREGATEEXPRESSIONS in Parser.cs and D4\Language.cs // Indicates whether or not to allow arbitrary expressions in the by and compute clauses of an aggregate expression
//#define CHECKCLASSDEPENDENCY in Alphora.Dataphor.DAE (currently disabled) // Indicates whether or not class dependencies will be checked
#define DATAVIEWBOOKMARKS in Alphora.Dataphor.DAE.Client to enable the bookmark capabilities of the DataView
//#define DISALLOWAMBIGUOUSNAMES in Alphora.Dataphor.DAE (currently disabled) // To prevent the compiler from allowing ambiguous names to be defined
//#define DISALLOWMANYTOMANYOUTERJOINS in Alphora.Dataphor.DAE (currently disabled) // Disables support for many to many outer joins
//#define ENFORCERESTRICTIONPREDICATE in Alphora.Dataphor.DAE (currently disabled) // Performs restriction predicate checking by default
#define INVERTEXCEPTIONDESCRIPTIONS in Alphora.Dataphor.Base to display error messages beginning with the innermost exception
#define LOADFROMLIBRARIES in Alphora.Dataphor.DAE // Enables in-place library loading, instead of copying assemblies in to the bin directory
#define LOGDDLINSTRUCTIONS in Alphora.Dataphor.DAE to have the catalog log DDL as part of the transaction (should not be turned off)
#define LOGFILECACHEEVENTS in Alphora.Dataphor.DAE // ??
//#define LOGCACHEEVENTS in Alphora.Dataphor.DAE  // ??
#define NILPROPOGATION in Alphora.Dataphor.DAE // Enables nil propagation (1 + nil = nil i/o an error)
#define ORDERREFERENCESBYPRIORITYONLY in Frontend // Orders references by priority in derived documents
#define RELYONCURSORFLAGSAFTERUPDATE in Alphora.Dataphor.DAE.Client "This define forces the server cursor to recognize the BOF and EOF flags by actually navigating"
#define REMOVESUPERKEYS in Alphora.Dataphor.DAE // Enables superkey removal in the key inference algorithms in the compiler
#define REPORTNARROWINGCONVERSIONWARNINGS in Alphora.Dataphor.DAE to have the compiler report warnings when implicit narrowing conversions are used
#define REQUIRECASEMATCHONRESOLVE in Alphora.Dataphor.DAE // Use this to require a case match when resolving identifiers (see IBAS Proposal #26889)
#define REQUIRESAMEDATATYPESFORREFERENCECOLUMNS	in Alphora.Dataphor.DAE to disallow implicit conversions in compiler-generated reference constraint expressions
#define RESPECTREADONLY in Alphora.Dataphor.DAE and Frontend.Server to have the library and document sub systems respect read only flag on files
#define SKIPBETACHECK in Alphora.Dataphor.DAE to skip the beta time bomb check
//#define SQLSTORETIMING in Alphora.Dataphor.DAE, store assemblies (currently disabled) // Enables timing tracking on the SQL Stores (accessible via the GetStoreCounters() system operator)
//#define TRACKCALLDEPTH in Alphora.Dataphor.DAE (currently disabled) // Determines whether or not call depth tracking is enabled
//#define USEADOCONNECTION in MSSQLDevice (currently disabled) // Uses the ADOConnection as the default connectivity implementation for the MSSQL device
#define USEASYNCSTOPPROCESS in Alphora.Dataphor.DAE.Client to issue the stop process call asynchronously
//#define USECLEANUPNODES in Alphora.Dataphor.DAE (currently disabled) // Part of cleanup processing, currently disabled because cleanup processing is done with InstructionNodeBase.CleanupOperand
#define USECONNECTIONPOOLING in MSSQLDevice // Enables connection pooling
#define USECONVERSIONPATHCACHE in Alphora.Dataphor.DAE // Enables the conversion path cache
#define USEDATATYPESINNATIVEROW in Alphora.Dataphor.DAE // Determines whether or not the native row tracks the data type of the values it contains
#define USEELABORABLE in Alphora.Dataphor.DAE // Determines whether or not the ShouldElaborate setting is used to control reference inference in the compiler
//#define UseFileStreamProvider in Alphora.Dataphor.DAE // ??
#define USEINCLUDENILSWITHBROWSE in Alphora.Dataphor.DAE // Enables the include nil clause in the order by statement
#define USEINTERNALID in Alphora.Dataphor.DAE // This allows the internal index to store duplicates of logical values for non-unique indexes
#define USENAMEDROWVARIABLES in Alphora.Dataphor.DAE // Uses named variables in row contexts such as constraint evaluation, rather than prefix qualification of column names of unnamed variables
	// NOTE: This define is believed to obselesce the USEROOTEDIDENTIFIERSINKEYEXPRESSIONS define
#define USENATIVECONCURRENCYCOMPARE // ?? Enables native object comparison when performing concurrency checks
//#define USEOLEDBCONNECTION in MSSQLDevice (currently disabled) // Uses the OLEDBConnection as the default connectivity implementation for the MSSQL device
#define USEOPERATORRESOLUTIONCACHE int Alphora.Dataphor.DAE // Enables the operator resolution cache
//#define USEPROCESSDISPOSED in Plan and Program // Determines whether or not the plan and program listen to the process disposed event
//#define USEPROCESSUNBIND in Plan and Program // Determines whether or not to use process unbinding
//#define UseReaderWriterLock in Alphora.Dataphor.DAE (currently disabled) // Uses the .NET reader/writer lock rather than the Dataphor semaphore
#define UseReferenceDerivation in Alphora.Dataphor.DAE // Enables reference inference in the compiler
//#define USEROOTEDIDENTIFIERSINKEYEXPRESSIONS in Alphora.Dataphor.DAE // Enables rooted identifiers in key expressions
	// NOTE: This define was introduced to address a specific issue with ambiguous names
	// However, I believe this issue is more elegantly resolved with the USENAMEDROWVARIABLES define
	// I cannot be certain though, because I don't know exactly which issue was resolved by this define
#define USESPINLOCK in Alphora.Dataphor.DAE // ??
#define USESQLCONNECTION in Alphora.Dataphor.DAE, store assemblies // Use an SQLConnection descendent for connectivity in the SQLStore
#define USESQLOLEDB in MSSQLDevice // Uses the SQLOLEDB provider when using the ADO connection for MSSQL device connectivity
//#define USESTRICTNAMERESOLUTIONCACHECLEARING in Alphora.Dataphor.DAE (currently disabled) // Determines whether or not the name resolution cache only clears for potentially affected names, rather than a full clear
	// NOTE: This define was introduced because if the strict clearing algorithm is used, a catalog header lookup error occurs
	// Rather than fix the issue, it was decided to leave the define, because the strict algorithm did not have any affect on cache hits,
	// leading us to suspect that there is a larger issue with name resolution cache usage.
//#define USETAGNAMECACHE in Alphora.Dataphor.DAE (currently disabled)
// This define uses a tag name cache for the names of all tags.
// The idea is to try to reduce the amount of memory used for tags by using
// the same string reference for each tag of a given name.
// However, early indications are that the amount of memory saved is not significant,
// even when dealing with large catalogs such as IBAS.
//#define USETYPEDLIST throughout (currently disabled) // Determines whether or not to use the TypedList descendent or the new BaseList<T> and related generics for basic list support
#define USEUNIFIEDJOINKEYINFERENCE in Alphora.Dataphor.DAE // Unified join key inference uses the same algorithm for all joins. See InferJoinKeys for more information.
#define USEUPDATEVALUEFLAGS in Alphora.Dataphor.DAE // ??
#define WRAPRUNTIMEEXCEPTIONS in Alphora.Dataphor.DAE // Determines whether or not non-Dataphor descended runtime exceptions are wrapped with a Dataphor Exception

