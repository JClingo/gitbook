/*
	System Catalog Registration Script - Excluding Native Data Types
	 © Copyright 2000-2008 Alphora
	 This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/

begin
	create operator TimeSpan(const ADays : Integer, const AHours : Integer, const AMinutes : Integer, const ASeconds : Integer) : TimeSpan class "System.SystemTimeSpanTimeSpanSecondsSelectorNode";
	create operator TimeSpan(const ADays : Integer, const AHours : Integer, const AMinutes : Integer) : TimeSpan class "System.SystemTimeSpanTimeSpanMinutesSelectorNode";
	create operator TimeSpan(const ADays : Integer, const AHours : Integer) : TimeSpan class "System.SystemTimeSpanTimeSpanHoursSelectorNode";
	create operator TimeSpan(const ADays : Integer) : TimeSpan class "System.SystemTimeSpanTimeSpanDaysSelectorNode";
	create operator DateTime(const AYears : Integer, const AMonths : Integer, const ADays : Integer, const AHours : Integer, const AMinutes : Integer) : DateTime class "System.SystemDateTimeDateTimeMinutesSelectorNode";
	create operator DateTime(const AYears : Integer, const AMonths : Integer, const ADays : Integer) : DateTime class "System.SystemDateTimeDateTimeDaysSelectorNode";
	create operator Time(const AHours : Integer, const AMinutes : Integer) : Time class "System.SystemTimeTimeMinutesSelectorNode";
	create operator NewGuid() : Guid class "System.NewGuidNode" static tags { DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator IsNil(const AValue : generic) : Boolean class "System.IsNilNode";
	create operator IsNil(const AValue : row, const AColumnName : String) : Boolean class "System.IsNilRowNode";
	create operator IsNotNil(const AValue : generic) : Boolean class "System.IsNotNilNode";
	create operator IsNotNil(const AValue : row, const AColumnName : String) : Boolean class "System.IsNotNilRowNode";
	create operator IfNil(const ANilableValue : generic, const AReplacementValue : generic) : generic class "System.IfNilNode";
	create operator ToBoolean(const AValue : String) : Boolean class "System.StringToBooleanNode";
	create operator ToBoolean(const AValue : Byte) : Boolean class "System.ByteToBooleanNode";
	create operator ToBoolean(const AValue : Short) : Boolean class "System.ShortToBooleanNode";
	create operator ToBoolean(const AValue : Integer) : Boolean class "System.IntegerToBooleanNode";
	create operator ToBoolean(const AValue : Long) : Boolean class "System.LongToBooleanNode";
	create operator GenericToString(const AValue : generic) : String class "System.ObjectToStringNode";
	create operator ToString(const AValue : Boolean) : String class "System.BooleanToStringNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToString(const AValue : Byte) : String class "System.ByteToStringNode";
	create operator ToString(const AValue : Short) : String class "System.ShortToStringNode";
	create operator ToString(const AValue : Integer) : String class "System.IntegerToStringNode";
	create operator ToString(const AValue : Long) : String class "System.LongToStringNode";
	create operator ToString(const AValue : Decimal) : String class "System.DecimalToStringNode";
	create operator ToString(const AValue : Money) : String class "System.MoneyToStringNode";
	create operator ToString(const AValue : Guid) : String class "System.GuidToStringNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToString(const AValue : DateTime) : String class "System.DateTimeToStringNode";
	create operator ToString(const AValue : Date) : String class "System.DateToStringNode";
	create operator ToString(const AValue : TimeSpan) : String class "System.TimeSpanToStringNode";
	create operator ToString(const AValue : Time) : String class "System.TimeToStringNode";
	create operator ToBase64String(const AValue : Binary) : String class "System.BinaryToBase64StringNode";
	create operator ToBase64String(const AValue : Graphic) : String class "System.BinaryToBase64StringNode";
	create operator ToByte(const AValue : Boolean) : Byte class "System.BooleanToByteNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToByte(const AValue : String) : Byte class "System.StringToByteNode";
	create operator ToByte(const AValue : Short) : Byte class "System.ShortToByteNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToByte(const AValue : Integer) : Byte class "System.IntegerToByteNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToByte(const AValue : Long) : Byte class "System.LongToByteNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToShort(const AValue : Boolean) : Short class "System.BooleanToShortNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToShort(const AValue : String) : Short class "System.StringToShortNode";
	create operator ToShort(const AValue : Byte) : Short class "System.ByteToShortNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToShort(const AValue : Integer) : Short class "System.IntegerToShortNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToShort(const AValue : Long) : Short class "System.LongToShortNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToInteger(const AValue : Boolean) : Integer class "System.BooleanToIntegerNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToInteger(const AValue : String) : Integer class "System.StringToIntegerNode";
	create operator ToInteger(const AValue : Decimal) : Integer class "System.DecimalToIntegerNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToInteger(const AValue : Money) : Integer class "System.DecimalToIntegerNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToInteger(const AValue : Byte) : Integer class "System.ByteToIntegerNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToInteger(const AValue : Short) : Integer class "System.ShortToIntegerNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToInteger(const AValue : Long) : Integer class "System.LongToIntegerNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToLong(const AValue : Boolean) : Long class "System.BooleanToLongNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToLong(const AValue : String) : Long class "System.StringToLongNode";
	create operator ToLong(const AValue : Byte) : Long class "System.ByteToLongNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToLong(const AValue : Short) : Long class "System.ShortToLongNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToLong(const AValue : Integer) : Long class "System.IntegerToLongNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToLong(const AValue : Decimal) : Long class "System.DecimalToLongNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToLong(const AValue : Money) : Long class "System.DecimalToLongNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToDecimal(const AValue : String) : Decimal class "System.StringToDecimalNode";
	create operator ToDecimal(const AValue : Integer) : Decimal class "System.IntegerToDecimalNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToDecimal(const AValue : Long) : Decimal class "System.LongToDecimalNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToDecimal(const AValue : Money) : Decimal class "System.ScalarSelectorNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToMoney(const AValue : String) : Money class "System.StringToMoneyNode";
	create operator ToMoney(const AValue : Integer) : Money class "System.IntegerToDecimalNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToMoney(const AValue : Long) : Money class "System.LongToDecimalNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToMoney(const AValue : Decimal) : Money class "System.DecimalToMoneyNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToDateTime(const AValue : Date) : DateTime class "System.ScalarSelectorNode" static tags { DAE.IsOrderPreserving = "True" };
	create operator ToDateTime(const AValue : String) : DateTime class "System.StringToDateTimeNode";
	create operator ToTimeSpan(const AValue : String) : TimeSpan class "System.StringToTimeSpanNode";
	create operator ToDate(const AValue : DateTime) : Date class "System.ScalarSelectorNode";
	create operator ToDate(const AValue : String) : Date class "System.StringToDateNode";
	create operator ToTime(const AValue : String) : Time class "System.StringToTimeNode";
	create operator ToGuid(const AValue : String) : Guid class "System.StringToGuidNode";
	create operator ToList(const AValue : cursor) : list class "System.TableToListNode";
	create operator ToList(const AValue : table) : list class "System.TableToListNode";
	create operator ToTable(const AValue : list) : table class "System.ListToTableNode";
	create operator ToTable(const AValue : list, const AColumnName : Name) : table class "System.ListToTableNode";
	create operator ToTable(const AValue : list, const AColumnName : Name, const ASequenceName : Name) : table class "System.ListToTableNode";
	create operator iNegate(const AValue : Short) : Short class "System.ShortNegateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNegate(const AValue : Integer) : Integer class "System.IntegerNegateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNegate(const AValue : Long) : Long class "System.LongNegateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNegate(const AValue : Decimal) : Decimal class "System.DecimalNegateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNegate(const AValue : Money) : Money class "System.DecimalNegateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNegate(const AValue : TimeSpan) : TimeSpan class "System.TimeSpanNegateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iPower(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalPowerNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Money, const ARightValue : Decimal) : Money class "System.MoneyDecimalMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Decimal, const ARightValue : Money) : Money class "System.DecimalMoneyMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Money, const ARightValue : Integer) : Money class "System.MoneyIntegerMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Integer, const ARightValue : Money) : Money class "System.IntegerMoneyMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : TimeSpan, const ARightValue : Integer) : TimeSpan class "System.TimeSpanIntegerMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Integer, const ARightValue : TimeSpan) : TimeSpan class "System.IntegerTimeSpanMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : TimeSpan, const ARightValue : Decimal) : TimeSpan class "System.TimeSpanDecimalMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMultiplication(const ALeftValue : Decimal, const ARightValue : TimeSpan) : TimeSpan class "System.DecimalTimeSpanMultiplicationNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Byte, const ARightValue : Byte) : Decimal class "System.ByteDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Short, const ARightValue : Short) : Decimal class "System.ShortDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Integer, const ARightValue : Integer) : Decimal class "System.IntegerDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Long, const ARightValue : Long) : Decimal class "System.LongDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Money, const ARightValue : Money) : Decimal class "System.MoneyDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Money, const ARightValue : Decimal) : Money class "System.MoneyDecimalDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : Money, const ARightValue : Integer) : Money class "System.MoneyIntegerDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : TimeSpan, const ARightValue : Integer) : TimeSpan class "System.TimeSpanIntegerDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : TimeSpan, const ARightValue : Decimal) : TimeSpan class "System.TimeSpanDecimalDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDivision(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Decimal class "System.TimeSpanTimeSpanDivisionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDiv(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteDivNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDiv(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortDivNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDiv(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerDivNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDiv(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongDivNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDiv(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalDivNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMod(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteModNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMod(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortModNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMod(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerModNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMod(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongModNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMod(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalModNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : String, const ARightValue : String) : String class "System.StringAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Money, const ARightValue : Money) : Money class "System.MoneyAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : TimeSpan class "System.TimeSpanAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : DateTime, const ARightValue : TimeSpan) : DateTime class "System.DateTimeTimeSpanAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Date, const ARightValue : TimeSpan) : Date class "System.DateTimeSpanAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Time, const ARightValue : TimeSpan) : Time class "System.TimeTimeSpanAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAddition(const ALeftValue : Name, const ARightValue : Name) : String class "System.StringAdditionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Money, const ARightValue : Money) : Money class "System.MoneySubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : TimeSpan class "System.TimeSpanSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : DateTime, const ARightValue : TimeSpan) : DateTime class "System.DateTimeTimeSpanSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : DateTime, const ARightValue : DateTime) : TimeSpan class "System.DateTimeSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Date, const ARightValue : Date) : TimeSpan class "System.DateSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Date, const ARightValue : TimeSpan) : Date class "System.DateTimeSpanSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Time, const ARightValue : Time) : TimeSpan class "System.TimeSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iSubtraction(const ALeftValue : Time, const ARightValue : TimeSpan) : Time class "System.TimeTimeSpanSubtractionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Byte, const ARightValue : Byte) : Boolean class "System.ByteEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Short, const ARightValue : Short) : Boolean class "System.ShortEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Integer, const ARightValue : Integer) : Boolean class "System.IntegerEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Long, const ARightValue : Long) : Boolean class "System.LongEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Guid, const ARightValue : Guid) : Boolean class "System.GuidEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Decimal, const ARightValue : Decimal) : Boolean class "System.DecimalEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : String, const ARightValue : String) : Boolean class "System.StringEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Money, const ARightValue : Money) : Boolean class "System.MoneyEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Boolean class "System.TimeSpanEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : DateTime, const ARightValue : DateTime) : Boolean class "System.DateTimeEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Date, const ARightValue : Date) : Boolean class "System.DateEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Time, const ARightValue : Time) : Boolean class "System.TimeEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Error, const ARightValue : Error) : Boolean class "System.ErrorEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Binary, const ARightValue : Binary) : Boolean class "System.BinaryEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Graphic, const ARightValue : Graphic) : Boolean class "System.BinaryEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : Name, const ARightValue : Name) : Boolean class "System.StringEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(const ALeftValue : row, const ARightValue : row) : Boolean class "System.RowEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(ALeftValue : table, ARightValue : table) : Boolean class "System.TableEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iEqual(ALeftValue : list, ARightValue : list) : Boolean class "System.ListEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Byte, const ARightValue : Byte) : Boolean class "System.ByteNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Short, const ARightValue : Short) : Boolean class "System.ShortNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Integer, const ARightValue : Integer) : Boolean class "System.IntegerNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Long, const ARightValue : Long) : Boolean class "System.LongNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Guid, const ARightValue : Guid) : Boolean class "System.GuidNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Decimal, const ARightValue : Decimal) : Boolean class "System.DecimalNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : String, const ARightValue : String) : Boolean class "System.StringNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Boolean class "System.TimeSpanNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : DateTime, const ARightValue : DateTime) : Boolean class "System.DateTimeNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Date, const ARightValue : Date) : Boolean class "System.DateNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Time, const ARightValue : Time) : Boolean class "System.TimeNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Money, const ARightValue : Money) : Boolean class "System.MoneyNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(const ALeftValue : Name, const ARightValue : Name) : Boolean class "System.StringNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNotEqual(ALeftValue : table, ARightValue : table) : Boolean class "System.TableNotEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Byte, const ARightValue : Byte) : Boolean class "System.ByteGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Short, const ARightValue : Short) : Boolean class "System.ShortGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Integer, const ARightValue : Integer) : Boolean class "System.IntegerGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Long, const ARightValue : Long) : Boolean class "System.LongGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Guid, const ARightValue : Guid) : Boolean class "System.GuidGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Decimal, const ARightValue : Decimal) : Boolean class "System.DecimalGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : String, const ARightValue : String) : Boolean class "System.StringGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Boolean class "System.TimeSpanGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : DateTime, const ARightValue : DateTime) : Boolean class "System.DateTimeGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Date, const ARightValue : Date) : Boolean class "System.DateGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Time, const ARightValue : Time) : Boolean class "System.TimeGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Money, const ARightValue : Money) : Boolean class "System.MoneyGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(const ALeftValue : Name, const ARightValue : Name) : Boolean class "System.StringGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iGreater(ALeftValue : table, ARightValue : table) : Boolean class "System.TableGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Byte, const ARightValue : Byte) : Boolean class "System.ByteInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Short, const ARightValue : Short) : Boolean class "System.ShortInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Integer, const ARightValue : Integer) : Boolean class "System.IntegerInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Long, const ARightValue : Long) : Boolean class "System.LongInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Guid, const ARightValue : Guid) : Boolean class "System.GuidInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Decimal, const ARightValue : Decimal) : Boolean class "System.DecimalInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : String, const ARightValue : String) : Boolean class "System.StringInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Boolean class "System.TimeSpanInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : DateTime, const ARightValue : DateTime) : Boolean class "System.DateTimeInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Date, const ARightValue : Date) : Boolean class "System.DateInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Time, const ARightValue : Time) : Boolean class "System.TimeInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Money, const ARightValue : Money) : Boolean class "System.MoneyInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(const ALeftValue : Name, const ARightValue : Name) : Boolean class "System.StringInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveGreater(ALeftValue : table, ARightValue : table) : Boolean class "System.TableInclusiveGreaterNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Byte, const ARightValue : Byte) : Boolean class "System.ByteLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Short, const ARightValue : Short) : Boolean class "System.ShortLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Integer, const ARightValue : Integer) : Boolean class "System.IntegerLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Long, const ARightValue : Long) : Boolean class "System.LongLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Guid, const ARightValue : Guid) : Boolean class "System.GuidLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Decimal, const ARightValue : Decimal) : Boolean class "System.DecimalLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : String, const ARightValue : String) : Boolean class "System.StringLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Boolean class "System.TimeSpanLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : DateTime, const ARightValue : DateTime) : Boolean class "System.DateTimeLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Date, const ARightValue : Date) : Boolean class "System.DateLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Time, const ARightValue : Time) : Boolean class "System.TimeLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Money, const ARightValue : Money) : Boolean class "System.MoneyLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(const ALeftValue : Name, const ARightValue : Name) : Boolean class "System.StringLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLess(ALeftValue : table, ARightValue : table) : Boolean class "System.TableLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Byte, const ARightValue : Byte) : Boolean class "System.ByteInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Short, const ARightValue : Short) : Boolean class "System.ShortInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Integer, const ARightValue : Integer) : Boolean class "System.IntegerInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Long, const ARightValue : Long) : Boolean class "System.LongInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Guid, const ARightValue : Guid) : Boolean class "System.GuidInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Decimal, const ARightValue : Decimal) : Boolean class "System.DecimalInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : String, const ARightValue : String) : Boolean class "System.StringInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Boolean class "System.TimeSpanInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : DateTime, const ARightValue : DateTime) : Boolean class "System.DateTimeInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Date, const ARightValue : Date) : Boolean class "System.DateInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Time, const ARightValue : Time) : Boolean class "System.TimeInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Money, const ARightValue : Money) : Boolean class "System.MoneyInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(const ALeftValue : Name, const ARightValue : Name) : Boolean class "System.StringInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iInclusiveLess(ALeftValue : table, ARightValue : table) : Boolean class "System.TableInclusiveLessNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Boolean, const ARightValue : Boolean) : Integer class "System.BooleanCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Byte, const ARightValue : Byte) : Integer class "System.ByteCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Short, const ARightValue : Short) : Integer class "System.ShortCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Long, const ARightValue : Long) : Integer class "System.LongCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Guid, const ARightValue : Guid) : Integer class "System.GuidCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Decimal, const ARightValue : Decimal) : Integer class "System.DecimalCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : String, const ARightValue : String) : Integer class "System.StringCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : Integer class "System.TimeSpanCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : DateTime, const ARightValue : DateTime) : Integer class "System.DateTimeCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Date, const ARightValue : Date) : Integer class "System.DateCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Time, const ARightValue : Time) : Integer class "System.TimeCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Money, const ARightValue : Money) : Integer class "System.MoneyCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCompare(const ALeftValue : Name, const ARightValue : Name) : Integer class "System.StringCompareNode" static tags { DAE.IsBuiltin = "True" };
	create operator Max(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteMaxNode";
	create operator Max(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortMaxNode";
	create operator Max(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerMaxNode";
	create operator Max(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongMaxNode";
	create operator Max(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalMaxNode";
	create operator Max(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : TimeSpan class "System.TimeSpanMaxNode";
	create operator Max(const ALeftValue : DateTime, const ARightValue : DateTime) : DateTime class "System.DateTimeMaxNode";	
	create operator Max(const ALeftValue : Date, const ARightValue : Date) : Date class "System.DateMaxNode";
	create operator Max(const ALeftValue : Time, const ARightValue : Time) : Time class "System.TimeMaxNode";
	create operator Max(const ALeftValue : Money, const ARightValue : Money) : Money class "System.MoneyMaxNode";
	create operator Min(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteMinNode";
	create operator Min(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortMinNode";
	create operator Min(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerMinNode";
	create operator Min(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongMinNode";
	create operator Min(const ALeftValue : Decimal, const ARightValue : Decimal) : Decimal class "System.DecimalMinNode";
	create operator Min(const ALeftValue : TimeSpan, const ARightValue : TimeSpan) : TimeSpan class "System.TimeSpanMinNode";
	create operator Min(const ALeftValue : DateTime, const ARightValue : DateTime) : DateTime class "System.DateTimeMinNode";	
	create operator Min(const ALeftValue : Date, const ARightValue : Date) : Date class "System.DateMinNode";
	create operator Min(const ALeftValue : Time, const ARightValue : Time) : Time class "System.TimeMinNode";
	create operator Min(const ALeftValue : Money, const ARightValue : Money) : Money class "System.MoneyMinNode";	
	create operator Truncate(const AValue : Decimal) : Decimal class "System.DecimalTruncateNode";
	create operator Truncate(const AValue : Money) : Money class "System.DecimalTruncateNode";
	create operator Floor(const AValue : Decimal) : Decimal class "System.DecimalFloorNode";
	create operator Floor(const AValue : Money) : Money class "System.DecimalFloorNode";
	create operator Ceiling(const AValue : Decimal) : Decimal class "System.DecimalCeilingNode";
	create operator Ceiling(const AValue : Money) : Money class "System.DecimalCeilingNode";
	create operator Round(const AValue : Decimal, const ADigits : Integer) : Decimal class "System.DecimalRoundNode";
	create operator Round(const AValue : Decimal) : Decimal class "System.DecimalRoundNode";
	create operator Round(const AValue : Money, const ADigits : Integer) : Money class "System.DecimalRoundNode";
	create operator Round(const AValue : Money) : Money class "System.DecimalRoundNode";
	create operator Frac(const AValue : Decimal) : Decimal class "System.DecimalFracNode";
	create operator Frac(const AValue : Money) : Money class "System.DecimalFracNode";
	create operator Abs(const AValue : Decimal) : Decimal class "System.DecimalAbsNode";
	create operator Abs(const AValue : Money) : Money class "System.DecimalAbsNode";
	create operator Abs(const AValue : Integer) : Integer class "System.IntegerAbsNode";
	create operator Math.Log(const AValue : Decimal, const ABase : Decimal) : Decimal class "System.DecimalLogNode";
	create operator Math.Ln(const AValue : Decimal) : Decimal class "System.DecimalLnNode";
	create operator Math.Log10(const AValue : Decimal) : Decimal class "System.DecimalLog10Node";
	create operator Math.Exp(const AValue : Decimal) : Decimal class "System.DecimalExpNode";
	create operator Math.Factorial(const AValue : Integer) : Integer class "System.IntegerFactorialNode";
	create operator Math.Random() : Decimal class "System.DecimalRandomNode" static tags { DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Math.Random(const AUpperBound : Integer) : Integer class "System.IntegerRandomNode" static tags { DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Math.Random(const ALowerBound : Integer, const AUpperBound : Integer) : Integer class "System.IntegerIntegerRandomNode" static tags { DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Math.Seed() class "System.SeedNode";
	create operator Math.Seed(const AValue : Integer) class "System.SeedNode";
	create operator iBitwiseNot(const AValue : Byte) : Byte class "System.ByteBitwiseNotNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseNot(const AValue : Short) : Short class "System.ShortBitwiseNotNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseNot(const AValue : Integer) : Integer class "System.IntegerBitwiseNotNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseNot(const AValue : Long) : Long class "System.LongBitwiseNotNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseAnd(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteBitwiseAndNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseAnd(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortBitwiseAndNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseAnd(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerBitwiseAndNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseAnd(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongBitwiseAndNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseOr(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteBitwiseOrNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseOr(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortBitwiseOrNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseOr(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerBitwiseOrNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseOr(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongBitwiseOrNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseXor(const ALeftValue : Byte, const ARightValue : Byte) : Byte class "System.ByteBitwiseXorNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseXor(const ALeftValue : Short, const ARightValue : Short) : Short class "System.ShortBitwiseXorNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseXor(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerBitwiseXorNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBitwiseXor(const ALeftValue : Long, const ARightValue : Long) : Long class "System.LongBitwiseXorNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftLeft(const ALeftValue : Byte, const ARightValue : Integer) : Byte class "System.ByteShiftLeftNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftLeft(const ALeftValue : Short, const ARightValue : Integer) : Short class "System.ShortShiftLeftNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftLeft(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerShiftLeftNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftLeft(const ALeftValue : Long, const ARightValue : Integer) : Long class "System.LongShiftLeftNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftRight(const ALeftValue : Byte, const ARightValue : Integer) : Byte class "System.ByteShiftRightNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftRight(const ALeftValue : Short, const ARightValue : Integer) : Short class "System.ShortShiftRightNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftRight(const ALeftValue : Integer, const ARightValue : Integer) : Integer class "System.IntegerShiftRightNode" static tags { DAE.IsBuiltin = "True" };
	create operator iShiftRight(const ALeftValue : Long, const ARightValue : Integer) : Long class "System.LongShiftRightNode" static tags { DAE.IsBuiltin = "True" };
	create operator iNot(const AValue : Boolean) : Boolean class "System.BooleanNotNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAnd(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanAndNode" static tags { DAE.IsBuiltin = "True" };
	create operator iOr(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanOrNode" static tags { DAE.IsBuiltin = "True" };
	create operator iXor(const ALeftValue : Boolean, const ARightValue : Boolean) : Boolean class "System.BooleanXorNode" static tags { DAE.IsBuiltin = "True" };
	create operator iIndexer(const AList : list, const AIndex : Integer) : generic class "System.IndexerNode" static tags { DAE.IsBuiltin = "True" };
	create operator Count(const AList : list) : Integer class "System.ListCountNode";
	create operator Clear(var AList : list) class "System.ListClearNode" static tags { DAE.IsLocallyFunctional = "False" };
	create operator Add(var AList : list, AValue : generic) : Integer class "System.ListAddNode" static tags { DAE.IsLocallyFunctional = "False" };
	create operator Insert(var AList : list, AValue : generic, const AIndex : Integer) class "System.ListInsertNode" static tags { DAE.IsLocallyFunctional = "False" };
	create operator Remove(var AList : list, const AValue : generic) class "System.ListRemoveNode" static tags { DAE.IsLocallyFunctional = "False" };
	create operator RemoveAt(var AList : list, const AInteger : Integer) class "System.ListRemoveAtNode" static tags { DAE.IsLocallyFunctional = "False" };
	create operator IndexOf(const AList : list, const AValue : generic) : Integer class "System.ListIndexOfNode";
	create operator IndexOf(const AList : list, const AValue : generic, const AStartIndex : Integer) : Integer class "System.ListIndexOfStartNode";
	create operator IndexOf(const AList : list, const AValue : generic, const AStartIndex : Integer, const ALength : Integer) : Integer class "System.ListIndexOfStartLengthNode";
	create operator LastIndexOf(const AList : list, const AValue : generic) : Integer class "System.ListLastIndexOfNode";
	create operator LastIndexOf(const AList : list, const AValue : generic, const AStartIndex : Integer) : Integer class "System.ListLastIndexOfStartNode";
	create operator LastIndexOf(const AList : list, const AValue : generic, const AStartIndex : Integer, const ALength : Integer) : Integer class "System.ListLastIndexOfStartLengthNode";
	create operator iExists(ATable : table) : Boolean class "System.ExistsNode" static tags { DAE.IsBuiltin = "True" };
	create operator iIn(const AValue : generic, const AList : list) : Boolean class "System.ValueInListNode" static tags { DAE.IsBuiltin = "True" };
	create operator iIn(const AValue : Scalar, const ATable : table) : Boolean class "System.InTableNode" static tags { DAE.IsBuiltin = "True" };
	create operator iIn(const AValue : row, const ATable : table) : Boolean class "System.InTableNode" static tags { DAE.IsBuiltin = "True" };
	create operator iProject(const ARow : row) : row class "System.RowProjectNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRemove(const ARow : row) : row class "System.RowRemoveNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRename(const ARow : row) : row class "System.RowRenameNode" static tags { DAE.IsBuiltin = "True" };
	create operator iExtend(const ARow : row) : row class "System.RowExtendNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRedefine(const ARow : row) : row class "System.RowRedefineNode" static tags { DAE.IsBuiltin = "True" };
	create operator iJoin(const ALeftRow : row, const ARightRow : row) : row class "System.RowJoinNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRestrict(ATable : table, const ACondition : Boolean) : table class "System.RestrictNode" static tags { DAE.IsBuiltin = "True" };
	create operator iProject(ATable : table) : table class "System.ProjectNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRemove(ATable : table) : table class "System.RemoveNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAggregate(ATable : table) : table class "System.AggregateNode" static tags { DAE.IsBuiltin = "True" };
	create operator iOrder(ATable : table) : table class "System.OrderNode" static tags { DAE.IsBuiltin = "True" };
	create operator iCopy(ATable : table) : table class "System.CopyNode" static tags { DAE.IsBuiltin = "True" };
	create operator iBrowse(ATable : table) : table class "System.BrowseNode" static tags { DAE.IsBuiltin = "True" };
	create operator iQuota(ATable : table, const AQuota : Integer) : table class "System.QuotaNode" static tags { DAE.IsBuiltin = "True" };
	create operator iExplode(ATable : table, const ARootTable : table, const AParentTable : table) : table class "System.ExplodeNode" static tags { DAE.IsBuiltin = "True" };
	create operator iExtend(ATable : table) : table class "System.ExtendNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRename(ATable : table) : table class "System.RenameNode" static tags { DAE.IsBuiltin = "True" };
	create operator iAdorn(ATable : table) : table class "System.AdornNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRedefine(ATable : table) : table class "System.RedefineNode" static tags { DAE.IsBuiltin = "True" };
	create operator iUnion(ALeftTable : table, ARightTable : table) : table class "System.UnionNode" static tags { DAE.IsBuiltin = "True" };
	create operator iDifference(ALeftTable : table, ARightTable : table) : table class "System.DifferenceNode" static tags { DAE.IsBuiltin = "True" };
	create operator iJoin(ALeftTable : table, ARightTable : table) : table class "System.JoinNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLeftJoin(ALeftTable : table, ARightTable : table) : table class "System.LeftOuterJoinNode" static tags { DAE.IsBuiltin = "True" };
	create operator iRightJoin(ALeftTable : table, ARightTable : table) : table class "System.RightOuterJoinNode" static tags { DAE.IsBuiltin = "True" };
	create operator iHaving(ALeftTable : table, ARightTable : table) : table class "System.HavingNode" static tags { DAE.IsBuiltin = "True" };
	create operator iWithout(ALeftTable : table, ARightTable : table) : table class "System.WithoutNode" static tags { DAE.IsBuiltin = "True" };
	create operator iOn() : table class "System.OnNode" static tags { DAE.IsBuiltin = "True" };
	create operator iIndexer(const AValue : String, const AIndex : Integer) : String class "System.StringIndexerNode" static tags { DAE.IsBuiltin = "True" };
	create operator Length(const ABinary : Binary) : Long class "System.BinaryLengthNode";
	create operator Length(const AGraphic : Graphic) : Long class "System.BinaryLengthNode";
	create operator Length(const AString : String) : Integer class "System.StringLengthNode";
	create operator SubString(const AString : String, const AStartIndex : Integer, const ALength : Integer) : String class "System.StringSubStringTernaryNode";
	create operator SubString(const AString : String, const AStartIndex : Integer) : String class "System.StringSubStringNode";
	create operator Pos(const ASubString : String, const AString : String) : Integer class "System.StringPosNode";
	create operator LastPos(const ASubString : String, const AString : String) : Integer class "System.StringLastPosNode";
	create operator IndexOf(const AString : String, const ASubString : String) : Integer class "System.StringIndexOfNode";
	create operator IndexOf(const AString : String, const ASubString : String, const AStartIndex : Integer) : Integer class "System.StringIndexOfStartNode";
	create operator IndexOf(const AString : String, const ASubString : String, const AStartIndex : Integer, const ALength : Integer) : Integer class "System.StringIndexOfStartLengthNode";
	create operator IndexOfAny(const AString : String, const AAnyOf : list(String)) : Integer class "System.StringIndexOfAnyNode";
	create operator IndexOfAny(const AString : String, const AAnyOf : list(String), const AStartIndex : Integer) : Integer class "System.StringIndexOfAnyNode";
	create operator IndexOfAny(const AString : String, const AAnyOf : list(String), const AStartIndex : Integer, const ALength : Integer) : Integer class "System.StringIndexOfAnyNode";
	create operator LastIndexOf(const AString : String, const ASubString : String) : Integer class "System.StringLastIndexOfNode";
	create operator LastIndexOf(const AString : String, const ASubString : String, const AStartIndex : Integer) : Integer class "System.StringLastIndexOfStartNode";
	create operator LastIndexOf(const AString : String, const ASubString : String, const AStartIndex : Integer, const ALength : Integer) : Integer class "System.StringLastIndexOfStartLengthNode";
	create operator LastIndexOfAny(const AString : String, const AAnyOf : list(String)) : Integer class "System.StringLastIndexOfAnyNode";
	create operator LastIndexOfAny(const AString : String, const AAnyOf : list(String), const AStartIndex : Integer) : Integer class "System.StringLastIndexOfAnyNode";
	create operator LastIndexOfAny(const AString : String, const AAnyOf : list(String), const AStartIndex : Integer, const ALength : Integer) : Integer class "System.StringLastIndexOfAnyNode";
	create operator CountOf(const AString : String, const ASubString : String) : Integer class "System.StringCountOfNode";
	create operator StartsWith(const AString : String, const ASubString : String) : Boolean class "System.StringStartsWith";
	create operator EndsWith(const AString : String, const ASubString : String) : Boolean class "System.StringEndsWith";
	create operator IsUpper(const AString : String) : Boolean class "System.StringIsUpperNode";
	create operator IsUpper(const AString : String, const AIndex : Integer) : Boolean class "System.StringIsUpperNode";
	create operator Upper(const AString : String) : String class "System.StringUpperNode";
	create operator IsLower(const AString : String) : Boolean class "System.StringIsLowerNode";
	create operator IsLower(const AString : String, const AIndex : Integer) : Boolean class "System.StringIsLowerNode";
	create operator Lower(const AString : String) : String class "System.StringLowerNode";
	create operator IsLetter(const AString : String) : Boolean class "System.StringIsLetterNode";
	create operator IsLetter(const AString : String, const AIndex : Integer) : Boolean class "System.StringIsLetterNode";
	create operator IsDigit(const AString : String) : Boolean class "System.StringIsDigitNode";
	create operator IsDigit(const AString : String, const AIndex : Integer) : Boolean class "System.StringIsDigitNode";
	create operator IsLetterOrDigit(const AString : String) : Boolean class "System.StringIsLetterOrDigitNode";
	create operator IsLetterOrDigit(const AString : String, const AIndex : Integer) : Boolean class "System.StringIsLetterOrDigitNode";
	create operator CompareText(const ALeftString : String, const ARightString : String) : Integer class "System.StringCompareTextNode";
	create operator PadLeft(const AString : String, const ATotalLength : Integer) : String class "System.StringPadLeftNode";
	create operator PadLeft(const AString : String, const ATotalLength : Integer, const APadString : String) : String class "System.StringPadLeftNode";
	create operator PadRight(const AString : String, const ATotalLength : Integer) : String class "System.StringPadRightNode";
	create operator PadRight(const AString : String, const ATotalLength : Integer, const APadString : String) : String class "System.StringPadRightNode";
	create operator Insert(const AString : String, const AStartIndex : Integer, const AInsertString : String) : String class "System.StringInsertNode";
	create operator Remove(const AString : String, const AStartIndex : Integer, const ALength : Integer) : String class "System.StringRemoveNode";
	create operator Replace(const AString : String, const AOldString : String, const ANewString : String) : String class "System.StringReplaceNode";
	create operator Replace(const AString : String, const AOldString : String, const ANewString : String, const ACaseSensitive : Boolean) : String class "System.StringReplaceNode";
	create operator Trim(const AString : String) : String class "System.StringTrimNode";
	create operator TrimLeft(const AString : String) : String class "System.StringTrimLeftNode";
	create operator TrimRight(const AString : String) : String class "System.StringTrimRightNode";
	create operator Concat(const AStrings : list(String)) : String class "System.StringConcatNode";
	create operator Concat(const AStrings : list(String), const ADelimiter : String) : String class "System.StringConcatNode";
	create operator Split(const AString : String) : list(String) class "System.StringSplitNode";
	create operator Split(const AString : String, const ADelimiter : String) : list(String) class "System.StringSplitNode";
	create operator Split(const AString : String, const ADelimiters : list(String)) : list(String) class "System.StringSplitNode";
	create operator iMatches(const AString : String, const APattern : String) : Boolean class "System.StringMatchesNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLike(const AString : String, const APattern : String) : Boolean class "System.StringLikeNode" static tags { DAE.IsBuiltin = "True" };
	create operator iMatches(const AString : Name, const APattern : String) : Boolean class "System.StringMatchesNode" static tags { DAE.IsBuiltin = "True" };
	create operator iLike(const AString : Name, const APattern : String) : Boolean class "System.StringLikeNode" static tags { DAE.IsBuiltin = "True" };
	create operator DatePart(const AValue : DateTime) : Date class "System.DatePartNode";
	create operator TimePart(const AValue : DateTime) : Time class "System.TimePartNode";
	create operator DateTime() : DateTime class "System.DateTimeNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False", DAE.IsDeterministic = "False" };
	create operator Date() : Date class "System.DateNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False", DAE.IsDeterministic = "False" };
	create operator Time() : Time class "System.TimeNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False", DAE.IsDeterministic = "False" };
	create operator ActualDateTime() : DateTime class "System.ActualDateTimeNode" static tags { DAE.IsLiteral = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ActualDate() : Date class "System.ActualDateNode" static tags { DAE.IsLiteral = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ActualTime() : Time class "System.ActualTimeNode" static tags { DAE.IsLiteral = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator DayOfWeek(const AValue : DateTime) : Integer class "System.DayOfWeekNode";
	create operator DayOfYear(const AValue : DateTime) : Integer class "System.DayOfYearNode";
	create operator DaysInMonth(const AYear : Integer, const AMonth : Integer) : Integer class "System.DaysInMonthNode";
	create operator IsLeapYear(const AYear : Integer) : Boolean class "System.IsLeapYearNode";
	create operator Duration(const ATimeSpan : TimeSpan) : TimeSpan class "System.DurationNode";
	create operator AddMonths(const AValue : DateTime, const AMonths : Integer) : DateTime class "System.DateTimeAddMonthsNode";
	create operator AddYears(const AValue : DateTime, const AYears : Integer) : DateTime class "System.DateTimeAddYearsNode";
	create operator AddMonths(const AValue : Date, const AMonths : Integer) : Date class "System.DateAddMonthsNode";
	create operator AddYears(const AValue : Date, const AYears : Integer) : Date class "System.DateAddYearsNode";
	create operator MonthsBetween(const AStartDate : DateTime, const AEndDate : DateTime) : Integer class "System.DateTimeMonthsBetweenNode";
	create operator YearsBetween(const AStartDate : DateTime, const AEndDate : DateTime) : Integer class "System.DateTimeYearsBetweenNode";
	create operator MonthsBetween(const AStartDate : Date, const AEndDate : Date) : Integer class "System.DateTimeMonthsBetweenNode";
	create operator YearsBetween(const AStartDate : Date, const AEndDate : Date) : Integer class "System.DateTimeYearsBetweenNode";
	create operator Close(const ACursor : cursor) class "System.CursorCloseNode";
	create operator First(const ACursor : cursor) class "System.CursorFirstNode";
	create operator Last(const ACursor : cursor) class "System.CursorLastNode";
	create operator Next(const ACursor : cursor) : Boolean class "System.CursorNextNode";
	create operator Prior(const ACursor : cursor) : Boolean class "System.CursorPriorNode";
	create operator BOF(const ACursor : cursor) : Boolean class "System.CursorBOFNode";
	create operator EOF(const ACursor : cursor) : Boolean class "System.CursorEOFNode";
	create operator Select(const ACursor : cursor) : row class "System.CursorSelectNode";
	create operator Insert(const ACursor : cursor, const ARow : row) class "System.CursorInsertNode" static tags { DAE.IsFunctional = "False" };
	create operator Update(const ACursor : cursor, const ARow : row) class "System.CursorUpdateNode" static tags { DAE.IsFunctional = "False" };
	create operator Delete(const ACursor : cursor) class "System.CursorDeleteNode" static tags { DAE.IsFunctional = "False" };
	create operator Default(const ACursor : cursor, var ARow : row) : Boolean class "System.CursorDefaultNode" static tags { DAE.IsFunctional = "False" };
	create operator Default(const ACursor : cursor, var ARow : row, const AColumnName : String) : Boolean class "System.CursorDefaultNode" static tags { DAE.IsFunctional = "False" };
	create operator Change(const ACursor : cursor, const AOldRow : row, var ANewRow : row) : Boolean class "System.CursorChangeNode" static tags { DAE.IsFunctional = "False" };
	create operator Change(const ACursor : cursor, const AOldRow : row, var ANewRow : row, const AColumnName : String) : Boolean class "System.CursorChangeNode" static tags { DAE.IsFunctional = "False" };
	create operator Validate(const ACursor : cursor, const AOldRow : row, var ANewRow : row) : Boolean class "System.CursorValidateNode" static tags { DAE.IsFunctional = "False" };
	create operator Validate(const ACursor : cursor, const AOldRow : row, var ANewRow : row, const AColumnName : String) : Boolean class "System.CursorValidateNode" static tags { DAE.IsFunctional = "False" };
	create operator Reset(const ACursor : cursor) class "System.CursorResetNode";
	create operator Refresh(const ACursor : cursor, const ARow : row) class "System.CursorRefreshNode";
	create operator Refresh(const ACursor : cursor) class "System.CursorRefreshNode";
	create operator GetKey(const ACursor : cursor) : row class "System.CursorGetKeyNode";
	create operator FindKey(const ACursor : cursor, const ARow : row) : Boolean class "System.CursorFindKeyNode";
	create operator FindNearest(const ACursor : cursor, const ARow : row) class "System.CursorFindNearestNode";
	create operator GetBookmark(const ACursor : cursor) : row class "System.CursorGetBookmarkNode";
	create operator GotoBookmark(const ACursor : cursor, const ABookmark : row) : Boolean class "System.CursorGotoBookmarkNode";
	create operator CompareBookmarks(const ACursor : cursor, const ABookmark1 : row, const ABookmark2 : row) : Integer class "System.CursorCompareBookmarksNode";
	create operator Execute(const AScript : String, const AInParams : row) class "System.SystemExecuteNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Execute(const AScript : String, const AInParams : row, var AOutParams : row) class "System.SystemExecuteNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Execute(const AProcessID : Integer, const AScript : String) class "System.SystemExecuteNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Execute(const AProcessID : Integer, const AScript : String, const AInParams : row) class "System.SystemExecuteNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Execute(const AProcessID : Integer, const AScript : String, const AInParams : row, var AOutParams : row) class "System.SystemExecuteNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Evaluate(const AExpression : String) : generic class "System.SystemEvaluateNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator Evaluate(const AExpression : String, const AInParams : row) : generic class "System.SystemEvaluateNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator Evaluate(const AExpression : String, const AInParams : row, var AOutParams : row) : generic class "System.SystemEvaluateNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator Evaluate(const AProcessID : Integer, const AExpression : String) : generic class "System.SystemEvaluateNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotabe = "False", DAE.IsNilable = "True" };
	create operator Evaluate(const AProcessID : Integer, const AExpression : String, const AInParams : row) : generic class "System.SystemEvaluateNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator Evaluate(const AProcessID : Integer, const AExpression : String, const AInParams : row, var AOutParams : row) : generic class "System.SystemEvaluateNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator ExecuteMultiple(const AStatement : String, const ANumber : Integer, const AUserID : String, const APassword : String) class "System.SystemExecuteMultipleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteMultiple(const AStatement : String, const ANumber : Integer) class "System.SystemExecuteMultipleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAsync(const AScript : String) class "System.SystemExecuteAsyncNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAsync(const AScript : String, const AInParams : row) class "System.SystemExecuteAsyncNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAsync(const AScript : String, const AInParams : row, var AOutParams : row) class "System.SystemExecuteAsyncNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAsync(const AProcessID : Integer, const AScript : String) class "System.SystemExecuteAsyncNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAsync(const AProcessID : Integer, const AScript : String, const AInParams : row) class "System.SystemExecuteAsyncNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAsync(const AProcessID : Integer, const AScript : String, const AInParams : row, var AOutParams : row) class "System.SystemExecuteAsyncNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteWithTimeout(const AScript : String, const ATimeout : Integer) class "System.SystemExecuteWithTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteWithTimeout(const AScript : String, const ATimeout : Integer, const AInParams : row) class "System.SystemExecuteWithTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteWithTimeout(const AScript : String, const ATimeout : Integer, const AInParams : row, var AOutParams : row) class "System.SystemExecuteWithTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteWithTimeout(const AProcessID : Integer, const AScript : String, const ATimeout : Integer) class "System.SystemExecuteWithTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteWithTimeout(const AProcessID : Integer, const AScript : String, const ATimeout : Integer, const AInParams : row) class "System.SystemExecuteWithTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteWithTimeout(const AProcessID : Integer, const AScript : String, const ATimeout : Integer, const AInParams : row, var AOutParams : row) class "System.SystemExecuteWithTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Open(const AExpression : String) : cursor class "System.SystemOpenNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ExecuteOn(const AServerLinkName : Name, const AStatement : String) class "System.SystemExecuteOnNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteOn(const AServerLinkName : Name, const AStatement : String, const AInParams : row) class "System.SystemExecuteOnNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteOn(const AServerLinkName : Name, const AStatement : String, const AInParams : row, var AOutParams : row) class "System.SystemExecuteOnNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator EvaluateOn(const AServerLinkName : Name, const AExpression : String) : generic class "System.SystemEvaluateOnNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotabe = "False", DAE.IsNilable = "True" };
	create operator EvaluateOn(const AServerLinkName : Name, const AExpression : String, const AInParams : row) : generic class "System.SystemEvaluateOnNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator EvaluateOn(const AServerLinkName : Name, const AExpression : String, const AInParams : row, var AOutParams : row) : generic class "System.SystemEvaluateOnNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsNilable = "True" };
	create operator Reconcile() : table { Sequence : Integer, Error : Error } class "System.SystemReconcileNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Reconcile(const ADeviceName : Name) : table { Sequence : Integer, Error : Error } class "System.SystemReconcileNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Reconcile(const ADeviceName : Name, const ATableName : Name) : table { Sequence : Integer, Error : Error } class "System.SystemReconcileNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Sleep(const AValue : Integer) class "System.SystemSleepNode" static tags { DAE.IsRemotable = "False" };
	create operator HostName() : String class "System.SystemHostNameNode" static tags { DAE.IsLiteral = "False", DAE.IsDeterministic = "False", DAE.IsRemotable = "False" };
	create operator MachineName() : String class "System.SystemMachineNameNode" static tags { DAE.IsLiteral = "False", DAE.IsDeterministic = "False", DAE.IsRemotable = "False" };
	create operator CacheTimeStamp() : Long class "System.SystemCacheTimeStampNode" static tags { DAE.IsDeterministic = "False", DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DerivationTimeStamp() : Long class "System.SystemDerivationTimeStampNode" static tags { DAE.IsDeterministic = "False", DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator Script(const AName : Name) : String class "System.SystemScriptNode" static tags { DAE.IsRemotable = "False" };
	create operator Script(const ASpecifier : String) : String class "System.SystemScriptNode" static tags { DAE.IsRemotable = "False" };
	create operator Script(const ASpecifier : String, const AIncludeDependents : Boolean) : String class "System.SystemScriptNode" static tags { DAE.IsRemotable = "False" };
	create operator Script(const ASpecifier : String, const AIncludeDependents : Boolean, const AIncludeObject : Boolean) : String class "System.SystemScriptNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptLibrary(const ALibraryName : Name) : String class "System.SystemScriptLibraryNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptCatalog() : String class "System.SystemScriptCatalogNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptServerState() : String class "System.SystemScriptServerStateNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptExpression(const AExpression : String) : String class "System.SystemScriptExpressionNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptData(const AExpression : String) : String class "System.SystemScriptDataNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptDrop(const AName : Name) : String class "System.SystemScriptDropNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptDrop(const ASpecifier : String) : String class "System.SystemScriptDropNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptDrop(const ASpecifier : String, const AIncludeDependents : Boolean) : String class "System.SystemScriptDropNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptDrop(const ASpecifier : String, const AIncludeDependents : Boolean, const AIncludeObject : Boolean) : String class "System.SystemScriptDropNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptDropLibrary(const AName : Name) : String class "System.SystemScriptDropLibraryNode" static tags { DAE.IsRemotable = "False" };
	create operator ScriptDropCatalog() : String class "System.SystemScriptDropCatalogNode" static tags { DAE.IsRemotable = "False" };
	//create operator ScriptLibraryChanges(const AOldCatalogDirectory : String, const ALibraryName : Name) : String class "System.SystemScriptLibraryChangesNode" static tags { DAE.IsRemotable = "False" };
	create operator GetDefaultDeviceName() : Name class "System.SystemGetDefaultDeviceNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator GetDefaultDeviceName(const ALibraryName : Name) : Name class "System.SystemGetDefaultDeviceNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator SetDefaultDeviceName(const ADeviceName : Name) class "System.SystemSetDefaultDeviceNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDefaultDeviceName(const ALibraryName : Name, const ADeviceName : Name) class "System.SystemSetDefaultDeviceNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
end;

alter device Catalog { create operator iRestrict(table, Boolean) class "System.CatalogDeviceOperator" static tags { DAE.IsSystem = "true" } }; 

// Security types
create type UserID like String
{
	constraint LengthValid Length(value.Value) <= 255
}
	tags 
	{ 
		Frontend.Title = "User ID", 
		Frontend.Width = "10", 
		Frontend.TextBox.MaxLength = "255", 
		Frontend.TextBox.MaxWidth = "15"
	}
	static tags { Storage.Length = "255" };
	
/*
create type GroupName like String
{
	constraint LengthValid Length(value.Value) <= 255
}
	tags 
	{ 
		Frontend.Title = "Group Name", 
		Frontend.Width = "30",
		Frontend.TextBox.MaxLength = "255",
		Frontend.TextBox.MaxWidth = "50"
	}
	static tags { Storage.Length = "255" };
*/
	
// Library types
// VersionNumber
// Major undefined (*) or between 0 and 99 and 
// Minor undefined (*) or between 0 and 99 and
// Revision undefined (*) or between 0 and 9999 and
// Build undefined (*) or between 0 and 999999
// If Major is undefined, Minor, Revision and Build must be undefined.
// If Minor is undefined, Revision and Build must be undefined.
// If Revision is undefined, Build must be undefined.
// If Build is defined, Revision, Minor and Major must be defined.
// If Revision is defined, Minor and Major must be defined.
// If Minor is defined, Major must be defined.
create type VersionNumber
{
	representation VersionNumber
	{
		Major : Integer
			read class "System.VersionNumberMajorReadAccessorNode"
			write class "System.VersionNumberMajorWriteAccessorNode",
		Minor : Integer
			read class "System.VersionNumberMinorReadAccessorNode"
			write class "System.VersionNumberMinorWriteAccessorNode",
		Revision : Integer
			read class "System.VersionNumberRevisionReadAccessorNode"
			write class "System.VersionNumberRevisionWriteAccessorNode",
		Build : Integer
			read class "System.VersionNumberBuildReadAccessorNode"
			write class "System.VersionNumberBuildWriteAccessorNode"
	} class "System.VersionNumberSelectorNode",
	representation AsString
	{
		AsString : String
			read class "System.VersionNumberAsStringReadAccessorNode"
			write class "System.VersionNumberAsStringWriteAccessorNode"
	} class "System.VersionNumberAsStringSelectorNode"
} class "System.VersionNumberConveyor"
	static tags 
	{ 
		Storage.Length = "14",
		DAE.AsString = "AsString",
		dynamic Frontend.Width = "15",
		dynamic Frontend.TextBox.MaxLength = "14",
		dynamic Frontend.TextBox.MaxWidth = "15"
	};
	
create operator iCompare(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Integer class "System.VersionNumberCompareNode";
create operator Max(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : VersionNumber class "System.VersionNumberMaxNode";
create operator Min(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : VersionNumber class "System.VersionNumberMinNode";
create operator iEqual(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Boolean class "System.VersionNumberEqualNode";
create operator iNotEqual(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Boolean class "System.VersionNumberNotEqualNode";
create operator iLess(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Boolean class "System.VersionNumberLessNode";
create operator iInclusiveLess(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Boolean class "System.VersionNumberInclusiveLessNode";
create operator iGreater(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Boolean class "System.VersionNumberGreaterNode";
create operator iInclusiveGreater(const ALeftValue : VersionNumber, const ARightValue : VersionNumber) : Boolean class "System.VersionNumberInclusiveGreaterNode";
alter type VersionNumber { create special Undefined VersionNumber(-1, -1, -1, -1) };

create type LibraryReference
{
	representation LibraryReference
	{
		Name : Name
			read class "System.LibraryReferenceReadNameNode"
			write class "System.LibraryReferenceWriteNameNode",
		Version : VersionNumber
			read class "System.LibraryReferenceReadVersionNode"
			write class "System.LibraryReferenceWriteVersionNode"
	} class "System.LibraryReferenceNode"
} class "System.BOPObjectConveyor";

create type FileReference
{
	representation FileReference
	{
		Name : String
			read class "System.FileReferenceReadNameNode"
			write class "System.FileReferenceWriteNameNode",
		IsAssembly : Boolean
			read class "System.FileReferenceReadIsAssemblyNode"
			write class "System.FileReferenceWriteIsAssemblyNode",
		Environments : list(System.String)
			read class "System.FileReferenceReadEnvironmentsNode"
			write class "System.FileReferenceWriteEnvironmentsNode"
	} class "System.FileReferenceNode"
} class "System.BOPObjectConveyor";

create type LibraryDescriptor
{
	representation LibraryDescriptor
	{
		Name : Name
			read class "System.SystemLibraryDescriptorReadNameNode"
			write class "System.SystemLibraryDescriptorWriteNameNode",
		Version : VersionNumber
			read class "System.SystemLibraryDescriptorReadVersionNode"
			write class "System.SystemLibraryDescriptorWriteVersionNode",
		DefaultDeviceName : Name
			read class "System.SystemLibraryDescriptorReadDefaultDeviceNameNode"
			write class "System.SystemLibraryDescriptorWriteDefaultDeviceNameNode",
		Files : list(System.FileReference)
			read class "System.SystemLibraryDescriptorReadFilesNode"
			write class "System.SystemLibraryDescriptorWriteFilesNode",
		Requisites : list(System.LibraryReference)
			read class "System.SystemLibraryDescriptorReadRequisitesNode"
			write class "System.SystemLibraryDescriptorWriteRequisitesNode",
		Directory : String
			read class "System.SystemLibraryDescriptorReadDirectoryNode"
			write class "System.SystemLibraryDescriptorWriteDirectoryNode"
	} class "System.SystemLibraryDescriptorNode"
} class "System.BOPObjectConveyor";

begin
	create operator CreateRight(const ARightName : Name) class "System.SystemCreateRightNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateRight(const ARightName : Name, const AUserID : UserID) class "System.SystemCreateRightNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DropRight(const ARightName : Name) class "System.SystemDropRightNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RightExists(const ARightName : Name) : Boolean class "System.SystemRightExistsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator CreateGroup(const AGroupName : String, const AParentGroupName : String) class "System.SystemCreateGroupNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator CreateUser(const AUserID : UserID, const AUserName : String, const APassword : String) class "System.SystemCreateUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateUserWithEncryptedPassword(const AUserID : UserID, const AUserName : String, const AEncryptedPassword : String) class "System.SystemCreateUserWithEncryptedPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateUserWithEncryptedPassword(const AUserID : UserID, const AUserName : String, const AEncryptedPassword : String, const AGroupName : String) class "System.SystemCreateUserWithEncryptedPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator SetPassword(const AUserID : UserID, const APassword : String) class "System.SystemSetPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetEncryptedPassword(const AUserID : UserID, const AEncryptedPassword : String) class "System.SystemSetEncryptedPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator ChangePassword(const AOldPassword : String, const ANewPassword : String) class "System.SystemChangePasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator EncryptPassword(const APassword : String) : String class "System.SystemEncryptPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsDeterministic = "False" };
	create operator EncryptString(const AUnencrypted : String) : String class "System.SystemEncryptStringNode" static tags { DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator DecryptString(const AEncrypted : String) : String class "System.SystemDecryptStringNode";
	create operator SetUserName(const AUserID : UserID, const AUserName : String) class "System.SystemSetUserNameNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DropUser(const AUserID : UserID) class "System.SystemDropUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UserExists(const AUserID : UserID) : Boolean class "System.SystemUserExistsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator CreateRole(const ARoleName : Name) class "System.SystemCreateRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DropRole(const ARoleName : Name) class "System.SystemDropRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RoleExists(const ARoleName : Name) : Boolean class "System.SystemRoleExistsNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator RoleHasRight(const ARoleName : Name, const ARightName : Name) : Boolean class "System.SystemRoleHasRightNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator AddUserToRole(const AUserID : UserID, const ARoleName : Name) class "System.SystemAddUserToRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RemoveUserFromRole(const AUserID : UserID, const ARoleName : Name) class "System.SystemRemoveUserFromRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator AddGroupToRole(const AGroupName : String, const ARoleName : Name) class "System.SystemAddGroupToRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator AddGroupToRole(const AGroupName : String, const ARoleName : Name, const AInherited : Boolean) class "System.SystemAddGroupToRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator SafeGrantRightToGroup(const ARightName : Name, const AGroupName : String) class "System.SystemSafeGrantRightToGroupNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator SafeGrantRightToGroup(const ARightName : Name, const AGroupName : String, const AInherited : Boolean) class "System.SystemSafeGrantRightToGroupNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator SafeGrantRightToGroup(const ARightName : Name, const AGroupName : String, const AInherited : Boolean, const AApplyRecursively : Boolean, const AIncludeUsers : Boolean) class "System.SystemSafeGrantRightToGroupNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeprecated = "True" };
	create operator GrantRightToRole(const ARightName : Name, const ARoleName : Name) class "System.SystemGrantRightToRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SafeGrantRightToRole(const ARightName : Name, const ARoleName : Name) class "System.SystemSafeGrantRightToRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator GrantRightToUser(const ARightName : Name, const AUserID : UserID) class "System.SystemGrantRightToUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SafeGrantRightToUser(const ARightName : Name, const AUserID : UserID) class "System.SystemSafeGrantRightToUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RevokeRightFromRole(const ARightName : Name, const ARoleName : Name) class "System.SystemRevokeRightFromRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SafeRevokeRightFromRole(const ARightName : Name, const ARoleName : Name) class "System.SystemSafeRevokeRightFromRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RevokeRightFromUser(const ARightName : Name, const AUserID : UserID) class "System.SystemRevokeRightFromUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SafeRevokeRightFromUser(const ARightName : Name, const AUserID : UserID) class "System.SystemSafeRevokeRightFromUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RevertRightForRole(const ARightName : Name, const ARoleName : Name) class "System.SystemRevertRightForRoleNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RevertRightForUser(const ARightName : Name, const AUserID : UserID) class "System.SystemRevertRightForUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetObjectOwner(const AObjectName : Name, const AUserID : UserID) class "System.SystemSetObjectOwnerNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetRightOwner(const ARightName : Name, const AUserID : UserID) class "System.SystemSetRightOwnerNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UserHasRight(const AUserID : UserID, const ARightName : Name) : Boolean class "System.SystemUserHasRightNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator CreateDeviceUser(const AUserID : UserID, const ADeviceName : Name, const ADeviceUserID : String, const ADevicePassword : String) class "System.SystemCreateDeviceUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateDeviceUser(const AUserID : UserID, const ADeviceName : Name, const ADeviceUserID : String, const ADevicePassword : String, const AConnectionParameters : String) class "System.SystemCreateDeviceUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateDeviceUserWithEncryptedPassword(const AUserID : UserID, const ADeviceName : Name, const ADeviceUserID : String, const AEncryptedDevicePassword : String) class "System.SystemCreateDeviceUserWithEncryptedPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateDeviceUserWithEncryptedPassword(const AUserID : UserID, const ADeviceName : Name, const ADeviceUserID : String, const AEncryptedDevicePassword : String, const AConnectionParameters : String) class "System.SystemCreateDeviceUserWithEncryptedPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDeviceUserPassword(const AUserID : UserID, const ADeviceName : Name, const ADevicePassword : String) class "System.SystemSetDeviceUserPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator ChangeDeviceUserPassword(const ADeviceName : Name, const AOldPassword : String, const ANewPassword : String) class "System.SystemChangeDeviceUserPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDeviceUserID(const AUserID : UserID, const ADeviceName : Name, const ADeviceUserID : String) class "System.SystemSetDeviceUserIDNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDeviceUserConnectionParameters(const AUserID : UserID, const ADeviceName : Name, const AConnectionParameters : String) class "System.SystemSetDeviceUserConnectionParametersNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DropDeviceUser(const AUserID : UserID, const ADeviceName : Name) class "System.SystemDropDeviceUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DeviceUserExists(const AUserID : UserID, const ADeviceName : Name) : Boolean class "System.SystemDeviceUserExistsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
    create operator CreateServerLinkUser(AUserID : String, AServerLinkName : System.Name, AServerUserID : String, AServerPassword : String) class "System.SystemCreateServerLinkUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
    create operator CreateServerLinkUserWithEncryptedPassword(AUserID : String, AServerLinkName : System.Name, AServerUserID : String, AEncryptedServerPassword : String) class "System.SystemCreateServerLinkUserWithEncryptedPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
    create operator SetServerLinkUserID(AUserID : String, AServerLinkName : System.Name, AServerUserID : String) class "System.SystemSetServerLinkUserIDNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
    create operator SetServerLinkUserPassword(AUserID : String, AServerLinkName : System.Name, APassword : String) class "System.SystemSetServerLinkUserPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
    create operator ChangeServerLinkUserPassword(AServerLinkName : System.Name, AOldPassword : String, APassword : String) class "System.SystemChangeServerLinkUserPasswordNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
    create operator DropServerLinkUser(AUserID : String, AServerLinkName : System.Name) class "System.SystemDropServerLinkUserNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
    create operator ServerLinkUserExists(AUserID : String, AServerLinkName : System.Name) : Boolean class "System.SystemServerLinkUserExistsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator CloseSession(const ASessionID : Integer) class "System.SystemCloseSessionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator StartProcess() : Integer class "System.SystemStartProcessNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator StopProcess(const AProcessID : Integer) class "System.SystemStopProcessNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator GC.Collect() class "System.SystemCollectNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator GC.GetTotalMemory() : Long class "System.SystemGetTotalMemoryNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "True", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator SessionID() : Integer class "System.SystemSessionIDNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsDeterministic = "False" };
	create operator ProcessID() : Integer class "System.SystemProcessIDNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsDeterministic = "False" };
	create operator UserID() : UserID class "System.SystemUserIDNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsDeterministic = "False" };
	create operator UserName() : String class "System.SystemUserNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsDeterministic = "False" };
	create operator ServerName() : String class "System.SystemServerNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsDeterministic = "False" };
	create operator UpdateTimeStamps() class "System.SystemUpdateTimeStampsNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetMaxConcurrentProcesses(const AMaxConcurrentProcesses : Integer) class "System.SystemSetMaxConcurrentProcessesNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetProcessWaitTimeout(const AProcessWaitTimeout : TimeSpan) class "System.SystemSetProcessWaitTimeoutNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CreateGenerators()
	begin
		Execute
		(
			"
				create table Generators
				{
					ID : System.Name,
					NextKey : System.Integer,
					key { ID }
				} tags { DAE.ShouldTranslate = 'false' };
				
				create operator GetNextGenerator(const AID : System.Name) : System.Integer
				begin
					update Generators set { NextKey := NextKey + 1 } where ID = AID;
					if not exists (Generators where ID = AID) then
						insert table { row { AID ID, 2 NextKey } } into Generators;
					result := Generators[AID].NextKey - 1;
				end tags { DAE.IsDeterministic = 'false', DAE.IsRepeatable = 'false', DAE.ShouldTranslate = 'false' };
				
				grant usage on GetNextGenerator(System.Name) to role System.User;
			"
		);
	end;

	create operator BeginTransaction() class "System.SystemBeginTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator BeginTransaction(const AIsolationLevel : String) class "System.SystemBeginTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator PrepareTransaction() class "System.SystemPrepareTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CommitTransaction() class "System.SystemCommitTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RollbackTransaction() class "System.SystemRollbackTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator TransactionCount() : Integer class "System.SystemTransactionCountNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator InTransaction() : Boolean class "System.SystemInTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator BeginApplicationTransaction() : Guid class "System.BeginApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator BeginApplicationTransaction(const AShouldJoin : Boolean, const AIsInsert : Boolean) : Guid class "System.BeginApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator JoinApplicationTransaction(const AID : Guid, const AIsInsert : Boolean) class "System.JoinApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator LeaveApplicationTransaction() class "System.LeaveApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator PrepareApplicationTransaction(const AID : Guid) class "System.PrepareApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator CommitApplicationTransaction(const AID : Guid) class "System.CommitApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RollbackApplicationTransaction(const AID : Guid) class "System.RollbackApplicationTransactionNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SaveLibraryCatalog(const ALibraryName : Name) class "System.SystemSaveLibraryCatalogNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.EnableErrorLogging() class "System.SystemEnableErrorLoggingNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.DisableErrorLogging() class "System.SystemDisableErrorLoggingNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.LogError(const AError : Error) class "System.SystemLogErrorNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.LogMessage(const AMessage : String) class "System.SystemLogMessageNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.ListLogs() : table { Sequence : Integer, LogName : String } class "System.SystemListLogsNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator Diagnostics.ShowLog() : String class "System.SystemShowLogNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator Diagnostics.ShowLog(const ALogIndex : Integer) : String class "System.SystemShowLogNode" static tags { DAE.IsRemotable = "False", DAE.IsLiteral = "False" };
	create operator Diagnostics.IsSupported(const ADeviceName : Name, const AStatement : String) : Boolean class "System.SystemIsSupportedNode" static tags { DAE.IsRemotable = "False" };
	create operator Diagnostics.ShowPlan(const AStatement : String) : String class "System.SystemShowPlanNode" static tags { DAE.IsRemotable = "False" };
	create operator Diagnostics.GetRestrictionAlgorithm(const AExpression : String) : String class "System.SystemGetRestrictionAlgorithmNode" static tags { DAE.IsRemotable = "False" };
	create operator Diagnostics.GetJoinAlgorithm(const AExpression : String) : String class "System.SystemGetJoinAlgorithmNode" static tags { DAE.IsRemotable = "False" };
	create operator Diagnostics.GetStoreCounters() : table { Sequence : Integer, Operation : String, TableName : String, IndexName : String, IsMatched : Boolean, IsRanged : Boolean, IsUpdatable : Boolean, Duration : TimeSpan } class "System.SystemGetStoreCountersNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator Diagnostics.ClearStoreCounters() class "System.SystemClearStoreCountersNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Error(const AMessage : String) : Error class "System.SystemErrorSelectorNode";
	create operator Error(const AMessage : String, const AInnerError : Error) : Error class "System.SystemErrorSelectorNode";
	create operator Error(const ACode : Integer, const AMessage : String) : Error class "System.SystemErrorSelectorNode";
	create operator Error(const ACode : Integer, const AMessage : String, const AInnerError : Error) : Error class "System.SystemErrorSelectorNode";
	create operator Error(const ASeverity : String, const AMessage : String) : Error class "System.SystemErrorSelectorNode";
	create operator Error(const ASeverity : String, const AMessage : String, const AInnerError : Error) : Error class "System.SystemErrorSelectorNode";
	create operator Error(const ASeverity : String, const ACode : Integer, const AMessage : String) : Error class "System.SystemErrorSelectorNode";
	create operator Diagnostics.GetErrorDescription(const AValue : Error) : String class "System.SystemGetErrorDescriptionNode";
	create operator Diagnostics.GetDetailedErrorDescription(const AValue : Error) : String class "System.SystemGetDetailedErrorDescriptionNode";
	create operator Diagnostics.StreamCount() : Integer class "System.SystemStreamCountNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Diagnostics.LockCount() : Integer class "System.SystemLockCountNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Diagnostics.RowCount() : Integer class "System.SystemRowCountNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Diagnostics.UsedRowCount() : Integer class "System.SystemUsedRowCountNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Diagnostics.IsCatalogObjectLoaded(const AObjectID : Integer) : Boolean class "System.SystemIsCatalogObjectLoadedNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator Diagnostics.IsCatalogObjectLoaded(const AObjectName : Name) : Boolean class "System.SystemIsCatalogObjectLoadedNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator Diagnostics.ClearCatalogObject(const AObjectID : Integer) class "System.SystemClearCatalogObjectNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.ClearCatalogObject(const AObjectName : Name) class "System.SystemClearCatalogObjectNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.ClearLibrary(const ALibraryName : Name) class "System.SystemClearLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.ClearCatalog() class "System.SystemClearCatalogNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.EnsureDeviceStarted(const AName : Name) class "System.SystemEnsureDeviceStartedNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.ClearOperatorResolutionCache() class "System.SystemClearOperatorResolutionCacheNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.ClearConversionPathCache() class "System.SystemClearConversionPathCacheNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator Diagnostics.GetInstanceSize(const AReference : String, const AMode : String) : Integer class "System.SystemGetInstanceSizeNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "True", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Diagnostics.GetInstanceSizes(const AReference : String, const AMode : String) : table { DeclaringType : Name, FieldName : Name, FieldType : Name, FieldSize : Integer } class "System.SystemGetInstanceSizesNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "True", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator Diagnostics.GetPlanCount() : Integer class "System.SystemGetPlanCountNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False", DAE.IsFunctional = "True", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator RealSQLToD4(const ARealSQLStatement : String) : String class "System.RealSQLToD4Node" static tags { DAE.IsRemotable = "false" };
	create operator SetLanguage(const ALanguage : String) class "System.SystemSetLanguageNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetIsolationLevel(const AIsolationLevel : String) class "System.SystemSetIsolationLevelNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDefaultIsolationLevel(const AIsolationLevel : String) class "System.SystemSetDefaultIsolationLevelNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDefaultUseImplicitTransactions(const ADefaultUseImplicitTransactions : Boolean) class "System.SystemSetDefaultUseImplicitTransactionsNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetUseImplicitTransactions(const AUseImplicitTransactions : Boolean) class "System.SystemSetUseImplicitTransactionsNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDefaultMaxStackDepth(const ADefaultMaxStackDepth : Integer) class "System.SystemSetDefaultMaxStackDepthNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetDefaultMaxCallDepth(const ADefaultMaxCallDepth : Integer) class "System.SystemSetDefaultMaxCallDepthNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetMaxStackDepth(const AMaxStackDepth : Integer) class "System.SystemSetMaxStackDepthNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator SetMaxCallDepth(const AMaxCallDepth : Integer) class "System.SystemSetMaxCallDepthNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator EnableReconciliation() class "System.SystemEnableReconciliationNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DisableReconciliation() class "System.SystemDisableReconciliationNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator IsReconciliationEnabled() : Boolean class "System.SystemIsReconciliationEnabledNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator PushNonLoggedContext() class "System.SystemPushNonLoggedContextNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator PopNonLoggedContext() class "System.SystemPopNonLoggedContextNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator IsNonLoggedContext() class "System.SystemIsNonLoggedContextNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectID(const AName : Name) : Integer class "System.SystemObjectIDNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectID(const ASpecifier : String) : Integer class "System.SystemObjectIDNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectName(const ASpecifier : String) : Name class "System.FullObjectNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectName(const AName : Name) : Name class "System.FullObjectNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectName(const AID : Integer) : Name class "System.SystemObjectNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectDisplayName(const AName : Name) : String class "System.ObjectDisplayNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectDisplayName(const ASpecifier : String) : String class "System.ObjectDisplayNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectDisplayName(const AID : Integer) : String class "System.ObjectDisplayNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectDescription(const AName : Name) : String class "System.ObjectDescriptionNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectDescription(const ASpecifier : String) : String class "System.ObjectDescriptionNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectDescription(const AID : Integer) : String class "System.ObjectDescriptionNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator OperatorSignature(const AName : Name) : String class "System.OperatorSignatureNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator OperatorSignature(const ASpecifier : String) : String class "System.OperatorSignatureNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator OperatorSignature(const AID : Integer) : String class "System.OperatorSignatureNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectMetaData(const AID : Integer, const ATagName : String, const ADefaultValue : String) : String class "System.ObjectMetaDataNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectMetaData(const AName : Name, const ATagName : String, const ADefaultValue : String) : String class "System.ObjectMetaDataNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator ObjectMetaData(const ASpecifier : String, const ATagName : String, const ADefaultValue : String) : String class "System.ObjectMetaDataNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator RequiredObjects(const AObjectID : Integer) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemRequiredObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator RequiredObjects(const AObjectID : Integer, const ARecursive : Boolean) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemRequiredObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator RequiredObjects(const AObjectName : Name) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemRequiredObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator RequiredObjects(const AObjectName : Name, const ARecursive : Boolean) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemRequiredObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DependentObjects(const AObjectID : Integer) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemDependentObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DependentObjects(const AObjectID : Integer, const ARecursive : Boolean) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemDependentObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DependentObjects(const AObjectName : Name) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemDependentObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DependentObjects(const AObjectName : Name, const ARecursive : Boolean) : table { Object_ID : Integer, Object_Name : Name, Object_Description : String, Sequence : Integer, Level : Integer } class "System.SystemDependentObjectsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator IsSystem(const AName : Name) : Boolean class "System.ObjectIsSystemNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator IsSystem(const ASpecifier : String) : Boolean class "System.ObjectIsSystemNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator IsSystem(const AID : Integer) : Boolean class "System.ObjectIsSystemNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator IsGenerated(const AName : Name) : Boolean class "System.ObjectIsGeneratedNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator IsGenerated(const AString : String) : Boolean class "System.ObjectIsGeneratedNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator IsGenerated(const AID : Integer) : Boolean class "System.ObjectIsGeneratedNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator NameFromGuid(const AID : Guid) : Name class "System.SystemNameFromGuidNode";
	create operator iEqual(const ALeftValue : FileReference, const ARightValue : FileReference) : Boolean class "System.FileReferenceEqualNode" static tags { DAE.IsBuiltin = "True" };
    create operator iEqual(const ALeftValue : LibraryDescriptor, const ARightValue : LibraryDescriptor) : Boolean class "System.SystemLibraryDescriptorEqualNode" static tags { DAE.IsBuiltin = "True" };
	create operator CreateLibrary(const ALibraryDescriptor : LibraryDescriptor) class "System.SystemCreateLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DropLibrary(const AName : Name) class "System.SystemDropLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RenameLibrary(const AOldName : Name, const ANewName : Name) class "System.SystemRenameLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator GetLibraryDescriptor(const AName : Name) : LibraryDescriptor class "System.SystemGetLibraryDescriptorNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator SetLibraryDescriptor(const AName : Name, const ADescriptor : LibraryDescriptor) class "System.SystemSetLibraryDescriptorNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator FileReference(const AName : Name, const AIsAssembly : Boolean) : FileReference class "System.FileReferenceNode";
	create operator LibraryDescriptor(const AName : Name) : LibraryDescriptor class "System.SystemLibraryDescriptorNode";
	create operator LibraryDescriptor(const AName : Name, const AVersion : VersionNumber) : LibraryDescriptor class "System.SystemLibraryDescriptorNode";
	create operator LibraryDescriptor(const AName : Name, const AVersion : VersionNumber, const ADefaultDeviceName : Name) : LibraryDescriptor class "System.SystemLibraryDescriptorNode";
	create operator LibraryDescriptor(const AName : Name, const AVersion : VersionNumber, const ADefaultDeviceName : Name, const AFiles : list(FileReference), const ALibraries : list(LibraryReference)) : LibraryDescriptor class "System.SystemLibraryDescriptorNode";
	create operator RefreshLibraries() class "System.SystemRefreshLibrariesNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RequiredLibraries(const ALibraryName : Name) : table { Library_Name : Name, Sequence : Integer, Level : Integer } class "System.SystemRequiredLibrariesNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator RequiredLibraries(const ALibraryName : Name, const ARecursive : Boolean) : table { Library_Name : Name, Sequence : Integer, Level : Integer } class "System.SystemRequiredLibrariesNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DependentLibraries(const ALibraryName : Name) : table { Library_Name : Name, Sequence : Integer, Level : Integer } class "System.SystemDependentLibrariesNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator DependentLibraries(const ALibraryName : Name, const ARecursive : Boolean) : table { Library_Name : Name, Sequence : Integer, Level : Integer } class "System.SystemDependentLibrariesNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator RegisterLibrary(const AName : Name) class "System.SystemRegisterLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator RegisterLibrary(const AName : Name, const AWithReconciliation : Boolean) class "System.SystemRegisterLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UnregisterLibrary(const AName : Name) class "System.SystemUnregisterLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UnregisterLibrary(const AName : Name, const AWithReconciliation : Boolean) class "System.SystemUnregisterLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator EnsureLibraryRegistered(const AName : Name) class "System.SystemEnsureLibraryRegisteredNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator LoadLibrary(const AName : Name) class "System.SystemLoadLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UnloadLibrary(const AName : Name) class "System.SystemUnloadLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator AttachLibrary(const AName : Name, const ADirectory : String) class "System.SystemAttachLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator AttachLibraries(const ADirectory : String) class "System.SystemAttachLibrariesNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DetachLibrary(const AName : Name) class "System.SystemDetachLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UpgradeLibrary(const AName : Name) class "System.SystemUpgradeLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UpgradeLibraries() class "System.SystemUpgradeLibrariesNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator LibraryName() : Name class "System.SystemLibraryNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator LibraryName(const AObjectName : Name) : Name class "System.SystemLibraryNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator LibraryName(const AObjectID : Integer) : Name class "System.SystemLibraryNameNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator SetLibrary(const AName : Name) class "System.SystemSetLibraryNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator UpgradeVersions(const ALibraryName : Name) : table { Version : VersionNumber } class "System.UpgradeVersionsNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator LoadUpgrade(const ALibraryName : Name, const AVersion : VersionNumber) : String class "System.LoadUpgradeNode" static tags { DAE.IsLiteral = "False", DAE.IsRemotable = "False" };
	create operator SaveUpgrade(const ALibraryName : Name, const AVersion : VersionNumber, const AScript : String) class "System.SaveUpgradeNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator DeleteUpgrade(const ALibraryName : Name, const AVersion : VersionNumber) class "System.DeleteUpgradeNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator InjectUpgrade(const ALibraryName : Name, const AScript : String) : VersionNumber class "System.InjectUpgradeNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False" };
	create operator VersionNumber(const AMajor : Integer) : VersionNumber class "System.VersionNumberSelectorNode";
	create operator VersionNumber(const AMajor : Integer, const AMinor : Integer) : VersionNumber class "System.VersionNumberSelectorNode";
	create operator VersionNumber(const AMajor : Integer, const AMinor : Integer, const ARevision : Integer) : VersionNumber class "System.VersionNumberSelectorNode";
	create operator iCompare(const ALeftValue : LibraryReference, const ARightValue : LibraryReference) : Integer class "System.LibraryReferenceCompareNode";
	create operator Compatible(const ASource : VersionNumber, const ATarget : VersionNumber) : Boolean class "System.VersionNumberCompatibleNode";
	create operator ToString(const AValue : VersionNumber) : String class "System.VersionNumberToStringNode";
	create operator ToVersionNumber(const AValue : String) : VersionNumber class "System.StringToVersionNumberNode";
	create operator ExecuteAs(const AScript : String, const AUserID : UserID, const APassword : String) class "System.SystemExecuteAsNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAs(const AScript : String, const AUserID : UserID, const APassword : String, const AInParams : row) class "System.SystemExecuteAsNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create operator ExecuteAs(const AScript : String, const AUserID : UserID, const APassword : String, const AInParams : row, var AOutParams : row) class "System.SystemExecuteAsNode" static tags { DAE.IsRemotable = "False", DAE.IsFunctional = "False", DAE.IsDeterministic = "False", DAE.IsRepeatable = "False" };
	create aggregate operator Count() : Integer
		initialization class "System.CountInitializationNode"
		aggregation class "System.CountAggregationNode"
		finalization class "System.EmptyFinalizationNode";
	create aggregate operator Count(AValue : Scalar) : Integer
		initialization class "System.CountInitializationNode"
		aggregation class "System.ObjectCountAggregationNode"
		finalization class "System.EmptyFinalizationNode";
	create aggregate operator Sum(AValue : Integer) : Integer
		initialization class "System.IntegerInitializationNode"
		aggregation class "System.IntegerSumAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : Integer) : Integer
		initialization class "System.IntegerInitializationNode"
		aggregation class "System.IntegerMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : Integer) : Integer
		initialization class "System.IntegerInitializationNode"
		aggregation class "System.IntegerMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Avg(AValue : Integer) : Decimal
		initialization class "System.IntegerAvgInitializationNode"
		aggregation class "System.IntegerAvgAggregationNode"
		finalization class "System.IntegerAvgFinalizationNode"
		static tags { DAE.Initialization.StackDisplacement = "1", DAE.IsNilable = "True" };
	create aggregate operator Sum(AValue : Long) : Long
		initialization class "System.LongInitializationNode"
		aggregation class "System.LongSumAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : Long) : Long
		initialization class "System.LongInitializationNode"
		aggregation class "System.LongMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : Long) : Long
		initialization class "System.LongInitializationNode"
		aggregation class "System.LongMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Avg(AValue : Long) : Decimal
		initialization class "System.LongAvgInitializationNode"
		aggregation class "System.LongAvgAggregationNode"
		finalization class "System.LongAvgFinalizationNode"
		static tags { DAE.Initialization.StackDisplacement = "1", DAE.IsNilable = "True" };
	create aggregate operator Sum(AValue : Decimal) : Decimal
		initialization class "System.DecimalInitializationNode"
		aggregation class "System.DecimalSumAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : Decimal) : Decimal
		initialization class "System.DecimalInitializationNode"
		aggregation class "System.DecimalMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : Decimal) : Decimal
		initialization class "System.DecimalInitializationNode"
		aggregation class "System.DecimalMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Avg(AValue : Decimal) : Decimal
		initialization class "System.DecimalAvgInitializationNode"
		aggregation class "System.DecimalAvgAggregationNode"
		finalization class "System.DecimalAvgFinalizationNode"
		static tags { DAE.Initialization.StackDisplacement = "1", DAE.IsNilable = "True" };
	create aggregate operator Sum(AValue : Money) : Money
		initialization class "System.MoneyInitializationNode"
		aggregation class "System.MoneySumAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : Money) : Money
		initialization class "System.MoneyInitializationNode"
		aggregation class "System.MoneyMinAggregationNode"
		finalization class "System.EmptyFinalizationNode";
	create aggregate operator Max(AValue : Money) : Money
		initialization class "System.MoneyInitializationNode"
		aggregation class "System.MoneyMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Avg(AValue : Money) : Money
		initialization class "System.MoneyAvgInitializationNode"
		aggregation class "System.MoneyAvgAggregationNode"
		finalization class "System.MoneyAvgFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : String) : String
		initialization class "System.StringInitializationNode"
		aggregation class "System.StringMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : String) : String
		initialization class "System.StringInitializationNode"
		aggregation class "System.StringMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : VersionNumber) : VersionNumber
		initialization class "System.EmptyFinalizationNode"
		aggregation class "System.VersionNumberMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : VersionNumber) : VersionNumber
		initialization class "System.EmptyFinalizationNode"
		aggregation class "System.VersionNumberMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator All(AValue : Boolean) : Boolean
		initialization class "System.BooleanAllInitializationNode"
		aggregation class "System.BooleanAllAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Any(AValue : Boolean) : Boolean
		initialization class "System.BooleanAnyInitializationNode"
		aggregation class "System.BooleanAnyAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Sum(AValue : TimeSpan) : TimeSpan
		initialization class "System.TimeSpanInitializationNode"
		aggregation class "System.TimeSpanSumAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : TimeSpan) : TimeSpan
		initialization class "System.TimeSpanMinInitializationNode"
		aggregation class "System.TimeSpanMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : TimeSpan) : TimeSpan
		initialization class "System.TimeSpanMaxInitializationNode"
		aggregation class "System.TimeSpanMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Avg(AValue : TimeSpan) : TimeSpan
		initialization class "System.TimeSpanAvgInitializationNode"
		aggregation class "System.TimeSpanAvgAggregationNode"
		finalization class "System.TimeSpanAvgFinalizationNode"
		static tags { DAE.Initialization.StackDisplacement = "1", DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : DateTime) : DateTime
		initialization class "System.DateTimeMinInitializationNode"
		aggregation class "System.DateTimeMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : DateTime) : DateTime
		initialization class "System.DateTimeMaxInitializationNode"
		aggregation class "System.DateTimeMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : Date) : Date
		initialization class "System.DateMinInitializationNode"
		aggregation class "System.DateMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : Date) : Date
		initialization class "System.DateMaxInitializationNode"
		aggregation class "System.DateMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Min(AValue : Time) : Time
		initialization class "System.TimeMinInitializationNode"
		aggregation class "System.TimeMinAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Max(AValue : Time) : Time
		initialization class "System.TimeMaxInitializationNode"
		aggregation class "System.TimeMaxAggregationNode"
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True" };
	create aggregate operator Concat(AString : String) : String
		initialization class "System.EmptyFinalizationNode"
		aggregation
		begin
			if not(IsNil(AString)) then
				result := IfNil(result, "") + AString;
		end
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True", DAE.IsOrderDependent = "True" };
	create aggregate operator Concat(AString : String, ADelimiter : String) : String
		initialization class "System.EmptyFinalizationNode"
		aggregation
		begin
			if not(IsNil(AString)) then
				if Length(result) > 0 then
					result := result + IfNil(ADelimiter, "") + AString
				else
					result := IfNil(result, "") + AString;
		end
		finalization class "System.EmptyFinalizationNode"
		static tags { DAE.IsNilable = "True", DAE.IsOrderDependent = "True" };
	create conversion Byte to Short using ToShort widening;
	create conversion Short to Byte using ToByte narrowing;
	create conversion Byte to Integer using ToInteger widening;
	create conversion Integer to Byte using ToByte narrowing;
	create conversion Short to Integer using ToInteger widening;
	create conversion Integer to Short using ToShort narrowing;
	create conversion Integer to Long using ToLong widening;
	create conversion Long to Integer using ToInteger narrowing;
	create conversion Integer to Decimal using ToDecimal widening;
	create conversion Long to Decimal using ToDecimal widening;
	create conversion Date to DateTime using ToDateTime widening;
end;

CreateRole("CatalogUser");

begin
	grant usage on Scalar to role User;
	grant usage on IsSpecial(Scalar) to role User;
	grant usage on Boolean to role User;
	grant usage on IsSpecial(Boolean) to role User;
	grant usage on Decimal to role User;
	grant usage on Long to role User;
	grant usage on Integer to role User;
	grant usage on Short to role User;
	grant usage on Byte to role User;
	grant usage on String to role User;
	grant usage on Money to role User;
	grant usage on Guid to role User;
	grant usage on TimeSpan to role User;
	grant usage on DateTime to role User;
	grant usage on Date to role User;
	grant usage on Time to role User;
	grant usage on Binary to role User;
	grant usage on Graphic to role User;
	grant usage on Error to role User;
	grant usage on Name to role User;
	grant usage on UserID to role User;
	grant usage on LibraryDescriptor to role User;
	grant usage on VersionNumber to role User;
	grant usage on LibraryReference to role User;
	grant usage on FileReference to role User;

	grant { Read } on Catalog to role User;	
 
	create operator SafeDrop(const AObjectSpecifier : String)
	begin
		if ObjectExists(AObjectSpecifier) then
			Execute(ScriptDrop(AObjectSpecifier));
	end;
	grant usage on SafeDrop(String) to role User;

 	create table TableDum in Catalog 
 	{ 
 		transition constraint TableDumValid
 			on insert false
 	} static tags { Catalog.CacheLevel = "Cached" };

	grant usage on TableDum to role User;
	
	create table TableDee in Catalog 
	{ 
		transition constraint TableDeeValid
			on delete false
	} static tags { Catalog.CacheLevel = "Cached" };
	insert table { row { } } into TableDee;
	grant usage on TableDee to role User;

	grant { Read, Write } on Catalog to role CatalogUser;
	
	create table ServerSettings in Catalog
	{
		Name : Name, 
		Version : String,
		LogErrors : Boolean,
		TimeStamp : Long,
		CacheTimeStamp : Long, 
		PlanCacheTimeStamp : Long,
		DerivationTimeStamp : Long, 
		InstanceDirectory : String, 
		LibraryDirectory : String,
		IsEngine : Boolean, 
		MaxConcurrentProcesses : Integer,
		ProcessWaitTimeout : TimeSpan,
		ProcessTerminateTimeout : TimeSpan,
		PlanCacheSize : Integer,
		key { } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on ServerSettings to role CatalogUser;
	
	create view ViewLog
		table { row { ShowLog() Log } }
		adorn
		{
			Log tags { Frontend.Width = "120", Frontend.TextBox.Height = "30" } 
		}
		tags { Frontend.Title = "Log" };
	grant { Select } on ViewLog to role CatalogUser;
	
	create view ListLogs
		ListLogs()
		adorn
		{
			Sequence tags { Frontend.Title = "Log #" },
			LogName tags { Frontend.Title = "Description" }
		}
		tags 
		{ 
			Frontend.Caption = "Select a log to display...",
			Frontend.Search.Visible = "False"
		};
	grant { Select } on ListLogs to role CatalogUser;
	
	create table LibraryVersions in Catalog
	{
		LibraryName : Name,
		Version : VersionNumber,
		key { LibraryName }
	} static tags { Catalog.CacheLevel = "Maintained" };

	//grant usage on LibraryVersions to role Admin;	
	grant { Select } on LibraryVersions to role CatalogUser;
	
	create table LibraryOwners in Catalog
	{
		LibraryName : Name,
		Owner : UserID,
		key { LibraryName }
	} static tags { Catalog.CacheLevel = "Maintained" };
	
	grant { Select } on LibraryOwners to role CatalogUser;

	create table Libraries in Catalog
	{
		Name : Name tags { Frontend.Preview.Include = "True" },
		Directory : String { default "" } tags { Frontend.Width = "50", Frontend.Edit.ReadOnly = "True", Frontend.Hint = "The server-side physical directory for the library, if different from the default library directory." },
		Version : VersionNumber { default VersionNumberUndefined() },
		DefaultDeviceName : Name { default "" } tags { Frontend.Title = "Default Device Name",  Frontend.TextBox.NilIfBlank = "False" },
		CanLoad : Boolean { default false } tags { Frontend.Visible = "False" },
		IsSuspect : Boolean { default false } tags { Frontend.Title = "Is Suspect", Frontend.Visible = "False", Frontend.View.Visible = "True", Frontend.ReadOnly = "True" },
		SuspectReason : String { nil } tags { Frontend.Title = "Suspect Reason", Frontend.Visible = "False", Frontend.View.Visible = "True", Frontend.ReadOnly = "True", Frontend.TextBox.Height = "7" },
		key { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseApplicationTransactions = "True" }; // Use A/T false causes optimistic concurrency check

	grant usage on Libraries to role CatalogUser;
	
	create view LibraryView
		Libraries
			left join (LibraryVersions rename { LibraryName Name, Version LoadedVersion })
			add { IfNil(Version > LoadedVersion, false) UpgradeRequired }
			adorn
			{
				LoadedVersion tags { Frontend.Title = "Loaded Version", Frontend.FlowBreak = "True" },
				UpgradeRequired tags { Frontend.Title = "Upgrade Required?" }
			}
			tags { Frontend.Title = "Library" };
	grant { Select } on LibraryView to role CatalogUser;
	
	create view AttachLibrary
		Libraries { Name, Directory }
		tags
		{
			Frontend.UseApplicationTransactions = "False",
			Frontend.Add.Caption = "Attach Library"
		};
	grant { Select, Insert } on AttachLibrary to role CatalogUser;
	
	create operator AttachLibraryInsert(var ARow : typeof(AttachLibrary[]), var APerformUpdate : Boolean)
	begin
		APerformUpdate := false;
		AttachLibrary(ARow.Name, ARow.Directory);
	end;
	attach AttachLibraryInsert to AttachLibrary on before insert;
	
	create view AttachLibraries
		Libraries { Directory }
		adorn
		{
			Directory tags { Frontend.Hint = "Server-side physical directory containing the library directories to load." }
		}
		tags
		{
			Frontend.UseApplicationTransactions = "False",
			Frontend.Add.Caption = "Attach Libraries"
		};
	grant { Select, Insert } on AttachLibraries to role CatalogUser;
		
	create operator AttachLibrariesInsert(var ARow : typeof(AttachLibraries[]), var APerformUpdate : Boolean)
	begin
		APerformUpdate := false;
		AttachLibraries(ARow.Directory);
	end;
	attach AttachLibrariesInsert to AttachLibraries on before insert;
	
	create view DetachLibrary
		Libraries { Name, Directory }
		tags
		{
			Frontend.UseApplicationTransactions = "False",
			Frontend.Delete.Caption = "Detach Library"
		};
	grant { Select, Delete } on DetachLibrary to role CatalogUser;
	
	create operator DetachLibraryDelete(const ARow : typeof(DetachLibrary[]), var APerformUpdate : Boolean)
	begin
		APerformUpdate := false;
		DetachLibrary(ARow.Name);
	end;
	attach DetachLibraryDelete to DetachLibrary on before delete;
	
	create table LibraryFiles in Catalog
	{
		Library_Name : Name tags { Frontend.Title = "Library Name" },
		FileName : String tags { Frontend.Title = "Name", Frontend.Width = "50" },
		IsAssembly : Boolean { default true } tags { Frontend.Title = "Register as Assembly" },
		key { Library_Name, FileName } static tags { DAE.Enforced = "False" },
		reference LibraryFiles_Libraries { Library_Name } references Libraries { Name } tags { Frontend.Add.Detail.Embedded = "True", Frontend.Edit.Detail.Embedded = "True", Frontend.Priority = "200" } static tags { DAE.Enforced = "False" }
	} tags { Frontend.Title = "Files" };

	grant usage on LibraryFiles to role CatalogUser;
	
	create table LibraryFileEnvironments in Catalog
	{
		Library_Name : Name tags { Frontend.Title = "Library Name" },
		LibraryFile_FileName : String tags { Frontend.Title = "File Name", Frontend.Width = "50" },
		Environment : String tags { Frontend.Title = "Environment", Frontend.Width = "50" },
		key { Library_Name, LibraryFile_FileName, Environment },
		reference LibraryFileEnvironments_LibraryFiles { Library_Name, LibraryFile_FileName } references LibraryFiles { Library_Name, FileName } tags { Frontend.Add.Detail.Embedded = "True", Frontend.Edit.Detail.Embedded = "True" } static tags { DAE.Enforced = "False" }
	} tags { Frontend.Title = "Environments" };
	
	grant usage on LibraryFileEnvironments to role CatalogUser;
	
	create table LibraryRequisites in Catalog
	{
		Library_Name : Name tags { Frontend.Title = "Library Name" },
		Required_Library_Name : Name tags { Frontend.Title = "Requisite Library Name" },
		Required_Library_Version : VersionNumber { default VersionNumberUndefined() } tags { Frontend.Title = "Requisite Library Version" },
		key { Library_Name, Required_Library_Name } static tags { DAE.Enforced = "False" },
		reference LibraryRequisites_Libraries { Library_Name } references Libraries { Name } tags { Frontend.Add.Detail.Embedded = "True", Frontend.Edit.Detail.Embedded = "True", Frontend.Priority = "100" } static tags { DAE.Enforced = "False" },
		reference LibraryRequisites_Required_Libraries { Required_Library_Name } references Libraries { Name } tags { Frontend.Detail.Title = "Required By Libraries" } static tags { DAE.Enforced = "False" }
	} tags { Frontend.Title = "Requisites" };

	grant usage on LibraryRequisites to role CatalogUser;
	
	create table LibrarySettings in Catalog
	{
		Library_Name : Name tags { Frontend.Title = "Library Name" },
		Name : String tags { Frontend.Title = "Setting" },
		Value : String,
		key { Library_Name, Name },
		reference LibrarySettings_Libraries { Library_Name } references Libraries { Name } tags { Frontend.Add.Detail.Embedded = "True", Frontend.Edit.Detail.Embedded = "True", Frontend.Priority = "300" } static tags { DAE.Enforced = "False" }
	} tags { Frontend.Title = "Settings" };
	
	grant usage on LibrarySettings to role CatalogUser;
	
	create operator LibrarySetting(const ALibraryName : Name, const ASettingName : String) : String
	begin
		result := LibrarySettings[ALibraryName, ASettingName].Value;
	end;
	
	grant usage on LibrarySetting(Name, String) to role CatalogUser;
	
	create operator LibrarySetting(const ASettingName : String) : String class "System.SystemLibrarySettingNode" static tags { DAE.IsRemotable = "False" };
	
	grant usage on LibrarySetting(String) to role CatalogUser;

	create table LoadedLibraries in Catalog
	{
		Name : Name,
		key { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" };

	grant usage on LoadedLibraries to role CatalogUser;
	
	create table RegisteredAssemblies in Catalog
	{
		Name : String,
		Library_Name : Name,
		Location : String,
		key { Name } static tags { DAE.Enforced = "False" },
		reference RegisteredAssemblies_LoadedLibraries { Library_Name } references LoadedLibraries { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" };
	
	grant usage on RegisteredAssemblies to role CatalogUser;
	
	create table RegisteredClasses in Catalog
	{
		Name : String,
		Library_Name : Name,
		Assembly_Name : String,
		ClassName : String,
		key { Name } static tags { DAE.Enforced = "False" },
		reference RegisteredClasses_RegisteredAssemblies { Assembly_Name } references RegisteredAssemblies { Name } static tags { DAE.Enforced = "False" },
		reference RegisteredClasses_LoadedLibraries { Library_Name } references LoadedLibraries { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" };

	grant usage on RegisteredClasses to role CatalogUser;
	
	create table Users in Catalog
	{
		ID : UserID, 
		Name : String,
		key { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on Users to role CatalogUser;
	
	create table Connections in Catalog
	{
		Name : String,
		HostName : String,
		key { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on Connections to role CatalogUser;

	create table Sessions in Catalog
	{
		ID : Integer, 
		User_ID : UserID,
		HostName : String,
		Connection_Name : String nil,
		Environment : String nil,
		Current_Library_Name : Name, 
		DefaultIsolationLevel : String,
		DefaultUseDTC : Boolean,
		DefaultUseImplicitTransactions : Boolean,
		Language : String,
		FetchCount : Integer,
		DefaultMaxStackDepth : Integer,
		DefaultMaxCallDepth : Integer,
		UsePlanCache : Boolean,
		ShouldEmitIL : Boolean,
		ShouldElaborate : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		reference Sessions_Connections { Connection_Name } references Connections { Name } static tags { DAE.Enforced = "False" },
		reference Sessions_Users { User_ID } references Users { ID } static tags { DAE.Enforced = "False" },
		reference Sessions_Libraries { Current_Library_Name } references LoadedLibraries { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "true" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on Sessions to role CatalogUser;

	create table Processes in Catalog
	{
		ID : Integer, 
		Session_ID : Integer, 
		DefaultIsolationLevel : String,
		UseDTC : Boolean,
		UseImplicitTransactions : Boolean,
		Language : String,
		MaxStackDepth : Integer, 
		MaxNestingLevel : Integer,
		IsRunning : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		reference Processes_Sessions { Session_ID } references Sessions { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on Processes to role CatalogUser;

	create table Scripts in Catalog
	{
		ID : Integer, 
		Process_ID : Integer, 
		key { ID } static tags { DAE.Enforced = "False" },
		reference Scripts_Processes { Process_ID } references Processes { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on Scripts to role CatalogUser;

	create table Plans in Catalog
	{
		ID : Guid, 
		Process_ID : Integer, 
		key { ID } static tags { DAE.Enforced = "False" },
		reference Plans_Processes { Process_ID } references Processes { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on Plans to role CatalogUser;

	create table Objects in Catalog
	{
		ID : Integer,
		Name : String,
		Library_Name : String,
		DisplayName : String tags { Frontend.Preview.Include = "True" },
		Description : String,
		Type : String,
		IsSystem : Boolean,
		IsRemotable : Boolean,
		IsGenerated : Boolean,
		IsATObject : Boolean,
		IsSessionObject : Boolean,
		IsPersistent : Boolean,
		Catalog_Object_ID : Integer,
		Parent_Object_ID : Integer,
		Generator_Object_ID : Integer,
		ServerData : String nil
			tags { Frontend.TextBox.Height = "10", Frontend.TextBox.WordWrap = "False", Frontend.TextBox.Width = "60" }, 
		key { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on Objects to role CatalogUser;

	create table ObjectDependencies in Catalog
	{
		Object_ID : Integer, 
		Dependency_Object_ID : Integer, 
		key { Object_ID, Dependency_Object_ID } static tags { DAE.Enforced = "False" },
		reference ObjectDependencies_Objects { Object_ID } references Objects { ID } static tags { DAE.Enforced = "False" },
		reference ObjectDependencies_Dependency_Objects { Dependency_Object_ID } references Objects { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on ObjectDependencies to role CatalogUser;

	create table CatalogObjects in Catalog
	{
		ID : Integer,
		Name : Name, 
		Library_Name : Name,
		Owner_User_ID : UserID,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference CatalogObjects_Objects { ID } references Objects { ID } static tags { DAE.Enforced = "False" },
		reference CatalogObjects_Users { Owner_User_ID } references Users { ID } static tags { DAE.Enforced = "False" },
		reference CatalogObjects_LoadedLibraries { Library_Name } references LoadedLibraries { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on CatalogObjects to role CatalogUser;
	
	create table Rights in Catalog
	{
		Name : Name,
		Owner_User_ID : UserID,
		Catalog_Object_ID : Integer,
		key { Name } static tags { DAE.Enforced = "False" },
		reference Rights_Users { Owner_User_ID } references Users { ID } static tags { DAE.Enforced = "False" },
		reference Rights_CatalogObjects { Catalog_Object_ID } references CatalogObjects { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on Rights to role CatalogUser;

	create table UserRightAssignments in Catalog
	{
		User_ID : UserID,
		Right_Name : Name tags { Frontend.Preview.Include = "True" },
		IsGranted : Boolean,
		key { User_ID, Right_Name } static tags { DAE.Enforced = "False" },
		reference UserRightAssignments_Users { User_ID } references Users { ID } static tags { DAE.Enforced = "False" },
		reference UserRightAssignments_Rights { Right_Name } references Rights { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on UserRightAssignments to role CatalogUser;
	
	create table SessionCatalogObjects in Catalog
	{
		Session_ID : Integer,
		Name : Name,
		CatalogObject_Name : Name,
		key { Session_ID, Name } static tags { DAE.Enforced = "False" },
		reference SessionCatalogObjects_Sessions { Session_ID } references Sessions { ID } static tags { DAE.Enforced = "False" },
		reference SessionCatalogObjects_CatalogObjects { CatalogObject_Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on SessionCatalogObjects to role CatalogUser;

	create table Operators in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		OperatorName : Name,
		Signature : String,
		Locator : String,
		Line : Integer,
		LinePos : Integer,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference Operators_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on Operators to role CatalogUser;

	create table ScalarTypes in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference ScalarTypes_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on ScalarTypes to role CatalogUser;
	
	create table Sorts in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference Sorts_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on Sorts to role CatalogUser;
	
	create table Devices in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		ReconciliationMaster : String,
		ReconciliationMode : String,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference Devices_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on Devices to role CatalogUser;
		
	create view DevicesNameAndLibrary
	Devices over {ID ,Name,Library_Name} 
	adorn
	{ 
		ID tags { Frontend.Visible = "false" }
	};
	
	create reference Libraries_Devices 
		Libraries { Name, DefaultDeviceName } references DevicesNameAndLibrary { Library_Name, Name }
	tags { DAE.Enforced = "false" };

	create table DeviceUsers in Catalog
	{
		User_ID : UserID,
		Device_Name : Name static tags { Storage.Name = "C.Name" },
		UserID : String,
		ConnectionParameters : String,
		key { Device_Name, User_ID } static tags { DAE.Enforced = "False" },
		reference DeviceUsers_Devices { Device_Name } references Devices { Name } static tags { DAE.Enforced = "False" },
		reference DeviceUsers_Users { User_ID } references Users { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on DeviceUsers to role CatalogUser;

	create table DeviceSessions in Catalog
	{
		Device_Name : Name,	
		Process_ID : Integer,
		key { Device_Name, Process_ID } static tags { DAE.Enforced = "False" },
		reference DeviceSessions_Devices { Device_Name } references Devices { Name } static tags { DAE.Enforced = "False" },
		reference DeviceSessions_Processes { Process_ID } references Processes { ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on DeviceSessions to role CatalogUser;

	create table DeviceScalarTypes in Catalog
	{
		Name : Name static tags { Storage.Name = "O.Name" },
		Device_Name : Name static tags { Storage.Name = "D.Name" },
		ScalarType_Name : Name static tags { Storage.Name = "S.Name" },
		key { Name } static tags { DAE.Enforced = "False" },
		key { Device_Name, ScalarType_Name } static tags { DAE.Enforced = "False" },
		reference DeviceScalarTypes_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" },
		reference DeviceScalarTypes_Devices { Device_Name } references Devices { Name } static tags { DAE.Enforced = "False" },
		reference DeviceScalarTypes_ScalarTypes { ScalarType_Name } references ScalarTypes { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on DeviceScalarTypes to role CatalogUser;

	create table DeviceOperators in Catalog
	{
		Name : Name static tags { Storage.Name = "O.Name" },
		Device_Name : Name static tags { Storage.Name = "D.Name" },
		Operator_Name : Name static tags { Storage.Name = "S.Name" },
		key { Name } static tags { DAE.Enforced = "False" },
		key { Device_Name, Operator_Name } static tags { DAE.Enforced = "False" },
		reference DeviceOperators_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" },
		reference DeviceOperators_Devices { Device_Name } references Devices { Name } static tags { DAE.Enforced = "False" },
		reference DeviceOperators_Operators { Operator_Name } references Operators { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on DeviceOperators to role CatalogUser;

	create table ServerLinks in Catalog
	{
		ID : Integer,
		Name : Name,
		Library_Name : Name,
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		HostName : String,
		InstanceName : String,
		OverridePortNumber : Integer,
		UseSessionInfo : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference ServerLinks_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on ServerLinks to role CatalogUser;
	
	create table ServerLinkUsers in Catalog
	{
		User_ID : UserID,
		ServerLink_Name : Name,
		UserID : String,
		key { User_ID, ServerLink_Name } static tags { DAE.Enforced = "False" },
		reference ServerLinkUsers_ServerLinks { ServerLink_Name } references ServerLinks { Name } tags { DAE.Enforced = "False" },
		reference ServerLinkUsers_Users { User_ID } references Users { ID } tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on ServerLinkUsers to role CatalogUser;
	
	create table RemoteSessions in Catalog
	{
		ServerLink_Name : Name,
		Process_ID : Integer,
		key { ServerLink_Name, Process_ID } static tags { DAE.Enforced = "False" },
		reference RemoteSessions_ServerLinks { ServerLink_Name } references ServerLinks { Name } tags { DAE.Enforced = "False" },
		reference RemoteSessions_Processes { Process_ID } references Processes { ID } tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on RemoteSessions to role CatalogUser;
	
	create table TableVars in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference TableVars_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on TableVars to role CatalogUser;

	create table BaseTableVars in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference BaseTableVars_TableVars { Name } references TableVars { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on BaseTableVars to role CatalogUser;
	
	create table ApplicationTransactions in Catalog
	{
		ID : Guid,
		Session_ID : Integer,
		Device_Name : Name,
		key { ID } static tags { DAE.Enforced = "False" },
		reference ApplicationTransactions_Sessions { Session_ID } references Sessions { ID } static tags { DAE.Enforced = "False" },
		reference ApplicationTransactions_Devices { Device_Name } references Devices { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "None" };
	
	grant usage on ApplicationTransactions to role CatalogUser;
	
	create table ApplicationTransactionTableMaps in Catalog
	{
		Source_TableVar_ID : Integer,
		Translated_TableVar_ID : Integer,
		Deleted_TableVar_ID : Integer,
		key { Source_TableVar_ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on ApplicationTransactionTableMaps to role CatalogUser;
	
	create table ApplicationTransactionOperatorNameMaps in Catalog
	{
		Source_OperatorName : Name,
		Translated_OperatorName : Name,
		key { Source_OperatorName } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on ApplicationTransactionOperatorNameMaps to role CatalogUser;
	
	create table ApplicationTransactionOperatorMaps in Catalog
	{
		Source_Operator_ID : Integer,
		Translated_Operator_ID : Integer,
		key { Source_Operator_ID } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreTable" };
	
	grant usage on ApplicationTransactionOperatorMaps to role CatalogUser;
	
	create table DerivedTableVars in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference DerivedTableVars_TableVars { Name } references TableVars { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on DerivedTableVars to role CatalogUser;

	create table References in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference References_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on References to role CatalogUser;
	
/*
	// A derived reference in which the derived table var causing the derived reference is the source
	create table SourceDerivedReferences in Catalog
	{
	};
	
	// A derived reference in which the derived table var causing the derived reference is the target
	create table TargetDerivedReferences in Catalog
	{
	};

	create table DerivedReferences in Catalog
	{
		Name : Name,
		Source_TableVar_Name : Name,
		Target_TableVar_Name : Name,
		Source_IsUnique : Boolean,
		Target_IsUnique : Boolean,
		key { Name, Source_TableVar_Name } static tags { DAE.Enforced = "False" },
		key { Name, Target_TableVar_Name } static tags { DAE.Enforced = "False" },
		reference DerivedReferences_Source_TableVars { Source_TableVar_Name } references TableVars { Name } static tags { DAE.Enforced = "False" },
		reference DerivedReferences_Target_TableVars { Target_TableVar_Name } references TableVars { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" };
	
	grant usage on DerivedReferences to role CatalogUser;
	
	create table DerivedReferenceColumns in Catalog
	{
		DerivedReference_Name : Name,
		Source_TableVar_Name : Name,
		Source_TableVarColumn_Name : Name,
		Target_TableVar_Name : Name,
		Target_TableVarColumn_Name : Name,
		key { DerivedReference_Name, Source_TableVarColumn_Name } static tags { DAE.Enforced = "False" },
		key { DerivedReference_Name, Target_TableVarColumn_Name } static tags { DAE.Enforced = "False" },
		reference DerivedReferenceColumns_DerivedReferences { DerivedReference_Name } references DerivedReferences { Name } static tags { DAE.Enforced = "False" },
		reference DerivedReferenceColumns_Source_TableVarColumns { Source_TableVar_Name, Source_TableVarColumn_Name } references TableVarColumns { TableVar_Name, Name } static tags { DAE.Enforced = "False" },
		reference DerivedReferenceColumns_Target_TableVarColumns { Target_TableVar_Name, Target_TableVarColumn_Name } references TableVarColumns { TableVar_Name, Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" };
	
	grant usage on DerivedReferenceColumns to role CatalogUser;
	
	create table DerivedReferenceParents in Catalog
	{
		DerivedReference_Name : Name,
		Source_TableVar_Name : Name,
		Target_TableVar_Name : Name,
		Parent_Reference_Name : Name,
		key { DerivedReference_Name, Source_TableVar_Name }
	
	create table DerivedReferenceDerivedParents in Catalog
	{
		DerivedReference_Name : Name,
		Source_TableVar_Name : Name,
		Target_TableVar_Name : Name,
		Parent_DerivedReference_Name : Name,
		Parent_Source_TableVar_Name : Name,
		Parent_Target_TableVar_Name : Name,
		key { DerivedReference_Name, Source_TableVar_Name }
	};
	
	grant usage on DerivedReferenceDerivedParents to role CatalogUser;
*/

	create table CatalogConstraints in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference Constraints_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on CatalogConstraints to role CatalogUser;

	create table Roles in Catalog
	{
		ID : Integer static tags { Storage.Name = "C.ID" },
		Name : Name static tags { Storage.Name = "C.Name" }, 
		Library_Name : Name static tags { Storage.Name = "C.Library_Name" },
		Owner_User_ID : UserID,
		IsSystem : Boolean,
		IsGenerated : Boolean,
		key { ID } static tags { DAE.Enforced = "False" },
		key { Name } static tags { DAE.Enforced = "False" },
		reference Roles_CatalogObjects { Name } references CatalogObjects { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on Roles to role CatalogUser;
	
	create table RoleRightAssignments in Catalog
	{
		Role_Name : Name static tags { Storage.Name = "O.Name" },
		Right_Name : Name,
		IsGranted : Boolean,
		key { Role_Name, Right_Name } static tags { DAE.Enforced = "False" },
		reference RoleRightAssignments_Roles { Role_Name } references Roles { Name } static tags { DAE.Enforced = "False" },
		reference RoleRightAssignments_Rights { Right_Name } references Rights { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on RoleRightAssignments to role CatalogUser;
	
	create table UserRoles in Catalog
	{
		User_ID : UserID,
		Role_Name : Name static tags { Storage.Name = "R.Name" },
		key { User_ID, Role_Name } static tags { DAE.Enforced = "False" },
		reference UserRoles_Users { User_ID } references Users { ID } static tags { DAE.Enforced = "False" },
		reference UserRoles_Roles { Role_Name } references Roles { Name } static tags { DAE.Enforced = "False" }
	} tags { Frontend.UseList = "True" } static tags { Catalog.CacheLevel = "StoreView" };
	
	grant usage on UserRoles to role CatalogUser;
	
	create operator EnsureGenerators()
	begin
		if not exists (TableVars where Name = LibraryName() + '.Generators') then
		begin
			CreateGenerators();
		end;
	end;

	create operator Columns(const ARow : row) : table class "System.RowColumnsNode";
	create operator Columns(const ATable : table) : table class "System.TableColumnsNode";
	create operator ColumnDefaults(const ATable : table) : table class "System.ColumnDefaultsNode";
	create operator ColumnConstraints(const ATable : table) : table class "System.ColumnConstraintsNode";
	create operator ColumnEventHandlers(const ATable : table) : table class "System.ColumnEventHandlersNode";
	create operator Keys(const ATable : table) : table class "System.KeysNode";
	create operator KeyColumns(const ATable : table) : table class "System.KeyColumnsNode";
	create operator Orders(const ATable : table) : table class "System.OrdersNode";
	create operator OrderColumns(const ATable : table) : table class "System.OrderColumnsNode";
	create operator Constraints(const ATable : table) : table class "System.ConstraintsNode";
	create operator EventHandlers(const ATable : table) : table class "System.EventHandlersNode";
	create operator References(const ATable : table) : table class "System.ReferencesNode";
	create operator ReferenceColumns(const ATable : table) : table class "System.ReferenceColumnsNode";
	grant usage on Columns(row) to role User;
	grant usage on Columns(table) to role User;
	grant usage on ColumnDefaults(table) to role User;
	grant usage on ColumnConstraints(table) to role User;
	grant usage on ColumnEventHandlers(table) to role User;
	grant usage on Keys(table) to role User;
	grant usage on KeyColumns(table) to role User;
	grant usage on Orders(table) to role User;
	grant usage on OrderColumns(table) to role User;
	grant usage on Constraints(table) to role User;
	grant usage on EventHandlers(table) to role User;
	grant usage on References(table) to role User;
	grant usage on ReferenceColumns(table) to role User;

	grant usage on CreateRight(Name) to role CatalogUser;
	grant usage on CreateRight(Name, UserID) to role CatalogUser;
	grant usage on DropRight(Name) to role CatalogUser;
	grant usage on CreateUser(UserID, String, String) to role CatalogUser;
	grant usage on SetPassword(UserID, String) to role CatalogUser;
	grant usage on SetUserName(UserID, String) to role CatalogUser;
	grant usage on DropUser(UserID) to role CatalogUser;
	grant usage on CreateRole(Name) to role CatalogUser;
	grant usage on DropRole(Name) to role CatalogUser;
	grant usage on AddUserToRole(UserID, Name) to role CatalogUser;
	grant usage on RemoveUserFromRole(UserID, Name) to role CatalogUser;
	grant usage on GrantRightToRole(Name, Name) to role CatalogUser;
	grant usage on SafeGrantRightToRole(Name, Name) to role CatalogUser;
	grant usage on GrantRightToUser(Name, UserID) to role CatalogUser;
	grant usage on SafeGrantRightToUser(Name, UserID) to role CatalogUser;
	grant usage on RevokeRightFromRole(Name, Name) to role CatalogUser;
	grant usage on SafeRevokeRightFromRole(Name, Name) to role CatalogUser;
	grant usage on RevokeRightFromUser(Name, UserID) to role CatalogUser;
	grant usage on SafeRevokeRightFromUser(Name, UserID) to role CatalogUser;
	grant usage on RevertRightForRole(Name, Name) to role CatalogUser;
	grant usage on RevertRightForUser(Name, UserID) to role CatalogUser;
	grant usage on SetObjectOwner(Name, UserID) to role CatalogUser;
	grant usage on SetRightOwner(Name, UserID) to role CatalogUser;
	grant usage on CreateDeviceUser(UserID, Name, String, String) to role CatalogUser;
	grant usage on CreateDeviceUser(UserID, Name, String, String, String) to role CatalogUser;
	grant usage on SetDeviceUserPassword(UserID, Name, String) to role CatalogUser;
	grant usage on SetDeviceUserID(UserID, Name, String) to role CatalogUser;
	grant usage on SetDeviceUserConnectionParameters(UserID, Name, String) to role CatalogUser;
	grant usage on DropDeviceUser(UserID, Name) to role CatalogUser;

	grant usage on Abs(Decimal) to role User;                                                                                            
	grant usage on Abs(Integer) to role User;                                                                                            
	grant usage on Abs(Money) to role User;                                                                                            
	grant usage on ActualDateTime() to role User;
	grant usage on ActualDate() to role User;
	grant usage on ActualTime() to role User;
	grant usage on Add(var list, generic) to role User;                                                                                  
	grant usage on AddMonths(Date, Integer) to role User;                                                                         
	grant usage on AddMonths(DateTime, Integer) to role User;                                                                     
	grant usage on AddYears(Date, Integer) to role User;                                                                          
	grant usage on AddYears(DateTime, Integer) to role User;                                                                      
	grant usage on All(Boolean) to role User;                                                                                            
	grant usage on Any(Boolean) to role User;                                                                                            
	grant usage on Avg(Decimal) to role User;                                                                                            
	grant usage on Avg(Integer) to role User;                                                                                            
	grant usage on Avg(Money) to role User;                                                                                              
	grant usage on Avg(TimeSpan) to role User;                                                                                           
	grant usage on BeginApplicationTransaction() to role User;                                                                                  
	grant usage on BeginApplicationTransaction(Boolean, Boolean) to role User;                                                    
	grant usage on BeginTransaction() to role User;                                                                                             
	grant usage on BeginTransaction(String) to role User;                                                                                
	grant usage on BOF(cursor) to role User;                                                                                                    
	grant usage on CacheTimeStamp() to role User;                                                                                               
	grant usage on Ceiling(Decimal) to role User;                                                                                        
	grant usage on Ceiling(Money) to role User;                                                                                        
	grant usage on Change(cursor, row, var row) to role User;                                                                                   
	grant usage on Change(cursor, row, var row, String) to role User;                                                                    
	grant usage on ChangeDeviceUserPassword(Name, String, String) to role User;                                            
	grant usage on ChangePassword(String, String) to role User;                                                                   
	grant usage on ChangeServerLinkUserPassword(Name, String, String) to role User;
	grant usage on Clear(var list) to role User;                                                                                                
	grant usage on Close(cursor) to role User;                                                                                                  
	grant usage on CommitApplicationTransaction(Guid) to role User;                                                                      
	grant usage on CommitTransaction() to role User;                                                                                            
	grant usage on CompareBookmarks(cursor, row, row) to role User;                                                                             
	grant usage on CompareText(String, String) to role User;                                                                      
	grant usage on Compatible(VersionNumber, VersionNumber) to role User;                                                         
	grant usage on Concat(list(String)) to role User;                                                                                    
	grant usage on Concat(list(String), String) to role User;                                                                     
	grant usage on Concat(String) to role User;                                                                                          
	grant usage on Concat(String, String) to role User;                                                                           
	grant usage on Count() to role User;                                                                                                        
	grant usage on Count(list) to role User;                                                                                                    
	grant usage on Count(Scalar) to role User;                                                                                           
	grant usage on CountOf(String, String) to role User;                                                                          
	grant usage on CreateGenerators() to role User;                                                                                             
	grant usage on CreateServerLinkUser(String, Name, String, String) to role CatalogUser;
	grant usage on CreateServerLinkUserWithEncryptedPassword(String, Name, String, String) to role CatalogUser;
	grant usage on Date() to role User;                                                                                                         
	grant usage on DatePart(DateTime) to role User;                                                                                      
	grant usage on DateTime() to role User;                                                                                                     
	grant usage on DateTime(Integer, Integer, Integer) to role User;                                                       
	grant usage on DateTime(Integer, Integer, Integer, Integer, Integer) to role User;                       
	grant usage on DayOfWeek(DateTime) to role User;                                                                                     
	grant usage on DayOfYear(DateTime) to role User;                                                                                     
	grant usage on DaysInMonth(Integer, Integer) to role User;                                                                    
	grant usage on DecryptString(String) to role User;
	grant usage on Default(cursor, var row) to role User;                                                                                       
	grant usage on Default(cursor, var row, String) to role User;                                                                        
	grant usage on Delete(cursor) to role User;                                                                                                 
	grant usage on DependentLibraries(Name) to role CatalogUser;                                                                                
	grant usage on DependentLibraries(Name, Boolean) to role CatalogUser;                                                                
	grant usage on DependentObjects(Integer) to role CatalogUser;                                                                               
	grant usage on DependentObjects(Integer, Boolean) to role CatalogUser;                                                               
	grant usage on DependentObjects(Name) to role CatalogUser;                                                                                  
	grant usage on DependentObjects(Name, Boolean) to role CatalogUser;                                                                  
	grant usage on DerivationTimeStamp() to role User;                                                                                          
	grant usage on DeviceUserExists(UserID, Name) to role CatalogUser;                                                                   
	grant usage on DropServerLinkUser(String, Name) to role CatalogUser;
	grant usage on Duration(TimeSpan) to role User;                                                                                      
	grant usage on EncryptString(String) to role User;
	grant usage on EndsWith(String, String) to role User;                                                                         
	grant usage on EnsureGenerators() to role User;                                                                                             
	grant usage on EOF(cursor) to role User;                                                                                                    
	grant usage on Error(Integer, String) to role User;                                                                           
	grant usage on Error(Integer, String, Error) to role User;                                                             
	grant usage on Error(String) to role User;                                                                                           
	grant usage on Error(String, Error) to role User;                                                                             
	grant usage on Error(String, Integer, String) to role User;                                                            
	grant usage on Error(String, String) to role User;                                                                            
	grant usage on Error(String, String, Error) to role User;                                                              
	grant usage on Evaluate(Integer, String) to role User;                                                                        
	grant usage on Evaluate(Integer, String, row) to role User;                                                                   
	grant usage on Evaluate(Integer, String, row, var row) to role User;                                                          
	grant usage on Evaluate(String) to role User;                                                                                        
	grant usage on Evaluate(String, row) to role User;                                                                                   
	grant usage on Evaluate(String, row, var row) to role User;                                                                          
	grant usage on EvaluateOn(Name, String) to role User;
	grant usage on EvaluateOn(Name, String, row) to role User;
	grant usage on EvaluateOn(Name, String, row, var row) to role User;
	grant usage on Execute(Integer, String) to role User;                                                                         
	grant usage on Execute(Integer, String, row) to role User;                                                                    
	grant usage on Execute(Integer, String, row, var row) to role User;                                                           
	grant usage on Execute(String) to role User;                                                                                         
	grant usage on Execute(String, row) to role User;                                                                                    
	grant usage on Execute(String, row, var row) to role User;                                                                           
	grant usage on ExecuteAsync(Integer, String) to role User;                                                                    
	grant usage on ExecuteAsync(Integer, String, row) to role User;                                                               
	grant usage on ExecuteAsync(Integer, String, row, var row) to role User;                                                      
	grant usage on ExecuteAsync(String) to role User;                                                                                    
	grant usage on ExecuteAsync(String, row) to role User;                                                                               
	grant usage on ExecuteAsync(String, row, var row) to role User;                                                                      
	grant usage on ExecuteMultiple(String, Integer) to role User;                                                                 
	grant usage on ExecuteMultiple(String, Integer, String, String) to role User;                                   
	grant usage on ExecuteOn(Name, String) to role User;
	grant usage on ExecuteOn(Name, String, row) to role User;
	grant usage on ExecuteOn(Name, String, row, var row) to role User;
	grant usage on ExecuteWithTimeout(Integer, String, Integer) to role User;                                              
	grant usage on ExecuteWithTimeout(Integer, String, Integer, row) to role User;                                         
	grant usage on ExecuteWithTimeout(Integer, String, Integer, row, var row) to role User;                                
	grant usage on ExecuteWithTimeout(String, Integer) to role User;                                                              
	grant usage on ExecuteWithTimeout(String, Integer, row) to role User;                                                         
	grant usage on ExecuteWithTimeout(String, Integer, row, var row) to role User;                                                
	grant usage on FileReference(Name, Boolean) to role User;
	grant usage on FindKey(cursor, row) to role User;                                                                                           
	grant usage on FindNearest(cursor, row) to role User;                                                                                       
	grant usage on First(cursor) to role User;                                                                                                  
	grant usage on Floor(Decimal) to role User;                                                                                          
	grant usage on Floor(Money) to role User;                                                                                          
	grant usage on Frac(Decimal) to role User;                                                                                           
	grant usage on Frac(Money) to role User;                                                                                           
	grant usage on GetBookmark(cursor) to role User;                                                                                            
	grant usage on GetDefaultDeviceName() to role User;                                                                                         
	grant usage on GetDefaultDeviceName(Name) to role User;                                                                              
	grant usage on GetKey(cursor) to role User;                                                                                                 
	grant usage on GetLibraryDescriptor(Name) to role CatalogUser;                                                                              
	grant usage on GotoBookmark(cursor, row) to role User;                                                                                      
	grant usage on HostName() to role User;                                                                                                     
	grant usage on iAddition(Byte, Byte) to role User;                                                                            
	grant usage on iAddition(Date, TimeSpan) to role User;                                                                        
	grant usage on iAddition(DateTime, TimeSpan) to role User;                                                                    
	grant usage on iAddition(Decimal, Decimal) to role User;                                                                      
	grant usage on iAddition(Integer, Integer) to role User;                                                                      
	grant usage on iAddition(Long, Long) to role User;                                                                            
	grant usage on iAddition(Money, Money) to role User;                                                                          
	grant usage on iAddition(Name, Name) to role User;                                                                            
	grant usage on iAddition(Short, Short) to role User;                                                                          
	grant usage on iAddition(String, String) to role User;                                                                        
	grant usage on iAddition(Time, TimeSpan) to role User;                                                                        
	grant usage on iAddition(TimeSpan, TimeSpan) to role User;                                                                    
	grant usage on iAdorn(table) to role User;                                                                                                  
	grant usage on iAggregate(table) to role User;                                                                                              
	grant usage on iAnd(Boolean, Boolean) to role User;                                                                           
	grant usage on iBitwiseAnd(Byte, Byte) to role User;                                                                          
	grant usage on iBitwiseAnd(Integer, Integer) to role User;                                                                    
	grant usage on iBitwiseAnd(Long, Long) to role User;                                                                          
	grant usage on iBitwiseAnd(Short, Short) to role User;                                                                        
	grant usage on iBitwiseNot(Byte) to role User;                                                                                       
	grant usage on iBitwiseNot(Integer) to role User;                                                                                    
	grant usage on iBitwiseNot(Long) to role User;                                                                                       
	grant usage on iBitwiseNot(Short) to role User;                                                                                      
	grant usage on iBitwiseOr(Byte, Byte) to role User;                                                                           
	grant usage on iBitwiseOr(Integer, Integer) to role User;                                                                     
	grant usage on iBitwiseOr(Long, Long) to role User;                                                                           
	grant usage on iBitwiseOr(Short, Short) to role User;                                                                         
	grant usage on iBitwiseXor(Byte, Byte) to role User;                                                                          
	grant usage on iBitwiseXor(Integer, Integer) to role User;                                                                    
	grant usage on iBitwiseXor(Long, Long) to role User;                                                                          
	grant usage on iBitwiseXor(Short, Short) to role User;                                                                        
	grant usage on iBrowse(table) to role User;                                                                                                 
	grant usage on iCompare(Boolean, Boolean) to role User;                                                                       
	grant usage on iCompare(Byte, Byte) to role User;                                                                             
	grant usage on iCompare(Date, Date) to role User;                                                                             
	grant usage on iCompare(DateTime, DateTime) to role User;                                                                     
	grant usage on iCompare(Decimal, Decimal) to role User;                                                                       
	grant usage on iCompare(Guid, Guid) to role User;                                                                             
	grant usage on iCompare(Integer, Integer) to role User;                                                                       
	grant usage on iCompare(LibraryReference, LibraryReference) to role User;                                                     
	grant usage on iCompare(Long, Long) to role User;                                                                             
	grant usage on iCompare(Money, Money) to role User;                                                                           
	grant usage on iCompare(Name, Name) to role User;                                                                             
	grant usage on iCompare(Short, Short) to role User;                                                                           
	grant usage on iCompare(String, String) to role User;                                                                         
	grant usage on iCompare(Time, Time) to role User;                                                                             
	grant usage on iCompare(TimeSpan, TimeSpan) to role User;                                                                     
	grant usage on iCompare(VersionNumber, VersionNumber) to role User;                                                           
	grant usage on iCopy(table) to role User;                                                                                                   
	grant usage on iDifference(table, table) to role User;                                                                                      
	grant usage on iDiv(Byte, Byte) to role User;                                                                                 
	grant usage on iDiv(Decimal, Decimal) to role User;                                                                           
	grant usage on iDiv(Integer, Integer) to role User;                                                                           
	grant usage on iDiv(Long, Long) to role User;                                                                                 
	grant usage on iDiv(Short, Short) to role User;                                                                               
	grant usage on iDivision(Byte, Byte) to role User;                                                                            
	grant usage on iDivision(Decimal, Decimal) to role User;                                                                      
	grant usage on iDivision(Integer, Integer) to role User;                                                                      
	grant usage on iDivision(Long, Long) to role User;                                                                            
	grant usage on iDivision(Money, Decimal) to role User;                                                                        
	grant usage on iDivision(Money, Integer) to role User;                                                                        
	grant usage on iDivision(Money, Money) to role User;
	grant usage on iDivision(Short, Short) to role User;                                                                          
	grant usage on iDivision(TimeSpan, Decimal) to role User;                                                                     
	grant usage on iDivision(TimeSpan, Integer) to role User;                                                                     
	grant usage on iDivision(TimeSpan, TimeSpan) to role User;                                                                    
	grant usage on iEqual(list, list) to role User;                                                                                             
	grant usage on iEqual(row, row) to role User;                                                                                               
	grant usage on iEqual(Binary, Binary) to role User;                                                                           
	grant usage on iEqual(Boolean, Boolean) to role User;                                                                         
	grant usage on iEqual(Byte, Byte) to role User;                                                                               
	grant usage on iEqual(Date, Date) to role User;                                                                               
	grant usage on iEqual(DateTime, DateTime) to role User;                                                                       
	grant usage on iEqual(Decimal, Decimal) to role User;                                                                         
	grant usage on iEqual(Error, Error) to role User;                                                                             
	grant usage on iEqual(FileReference, FileReference) to role User;                                                             
	grant usage on iEqual(Graphic, Graphic) to role User;                                                                         
	grant usage on iEqual(Guid, Guid) to role User;                                                                               
	grant usage on iEqual(Integer, Integer) to role User;                                                                         
	grant usage on iEqual(LibraryDescriptor, LibraryDescriptor) to role User;                                                     
	grant usage on iEqual(Long, Long) to role User;                                                                               
	grant usage on iEqual(Money, Money) to role User;                                                                             
	grant usage on iEqual(Name, Name) to role User;                                                                               
	grant usage on iEqual(Short, Short) to role User;                                                                             
	grant usage on iEqual(String, String) to role User;                                                                           
	grant usage on iEqual(Time, Time) to role User;                                                                               
	grant usage on iEqual(TimeSpan, TimeSpan) to role User;                                                                       
	grant usage on iEqual(VersionNumber, VersionNumber) to role User;                                                             
	grant usage on iEqual(table, table) to role User;                                                                                           
	grant usage on iExists(table) to role User;                                                                                                 
	grant usage on iExplode(table, table, table) to role User;                                                                                  
	grant usage on iExtend(row) to role User;                                                                                                   
	grant usage on iExtend(table) to role User;                                                                                                 
	grant usage on IfNil(generic, generic) to role User;                                                                          
	grant usage on iGreater(Boolean, Boolean) to role User;                                                                       
	grant usage on iGreater(Byte, Byte) to role User;                                                                             
	grant usage on iGreater(Date, Date) to role User;                                                                             
	grant usage on iGreater(DateTime, DateTime) to role User;                                                                     
	grant usage on iGreater(Decimal, Decimal) to role User;                                                                       
	grant usage on iGreater(Guid, Guid) to role User;                                                                             
	grant usage on iGreater(Integer, Integer) to role User;                                                                       
	grant usage on iGreater(Long, Long) to role User;                                                                             
	grant usage on iGreater(Money, Money) to role User;                                                                           
	grant usage on iGreater(Name, Name) to role User;                                                                             
	grant usage on iGreater(Short, Short) to role User;                                                                           
	grant usage on iGreater(String, String) to role User;                                                                         
	grant usage on iGreater(Time, Time) to role User;                                                                             
	grant usage on iGreater(TimeSpan, TimeSpan) to role User;                                                                     
	grant usage on iGreater(VersionNumber, VersionNumber) to role User;                                                           
	grant usage on iGreater(table, table) to role User;                                                                                         
	grant usage on iHaving(table, table) to role User;                                                                                          
	grant usage on iIn(row, table) to role User;                                                                                                
	grant usage on iIn(generic, list) to role User;                                                                                      
	grant usage on iIn(Scalar, table) to role User;                                                                                      
	grant usage on iInclusiveGreater(Boolean, Boolean) to role User;                                                              
	grant usage on iInclusiveGreater(Byte, Byte) to role User;                                                                    
	grant usage on iInclusiveGreater(Date, Date) to role User;                                                                    
	grant usage on iInclusiveGreater(DateTime, DateTime) to role User;                                                            
	grant usage on iInclusiveGreater(Decimal, Decimal) to role User;                                                              
	grant usage on iInclusiveGreater(Guid, Guid) to role User;                                                                    
	grant usage on iInclusiveGreater(Integer, Integer) to role User;                                                              
	grant usage on iInclusiveGreater(Long, Long) to role User;                                                                    
	grant usage on iInclusiveGreater(Money, Money) to role User;                                                                  
	grant usage on iInclusiveGreater(Name, Name) to role User;                                                                    
	grant usage on iInclusiveGreater(Short, Short) to role User;                                                                  
	grant usage on iInclusiveGreater(String, String) to role User;                                                                
	grant usage on iInclusiveGreater(Time, Time) to role User;                                                                    
	grant usage on iInclusiveGreater(TimeSpan, TimeSpan) to role User;                                                            
	grant usage on iInclusiveGreater(VersionNumber, VersionNumber) to role User;                                                  
	grant usage on iInclusiveGreater(table, table) to role User;                                                                                
	grant usage on iInclusiveLess(Boolean, Boolean) to role User;                                                                 
	grant usage on iInclusiveLess(Byte, Byte) to role User;                                                                       
	grant usage on iInclusiveLess(Date, Date) to role User;                                                                       
	grant usage on iInclusiveLess(DateTime, DateTime) to role User;                                                               
	grant usage on iInclusiveLess(Decimal, Decimal) to role User;                                                                 
	grant usage on iInclusiveLess(Guid, Guid) to role User;                                                                       
	grant usage on iInclusiveLess(Integer, Integer) to role User;                                                                 
	grant usage on iInclusiveLess(Long, Long) to role User;                                                                       
	grant usage on iInclusiveLess(Money, Money) to role User;                                                                     
	grant usage on iInclusiveLess(Name, Name) to role User;                                                                       
	grant usage on iInclusiveLess(Short, Short) to role User;                                                                     
	grant usage on iInclusiveLess(String, String) to role User;                                                                   
	grant usage on iInclusiveLess(Time, Time) to role User;                                                                       
	grant usage on iInclusiveLess(TimeSpan, TimeSpan) to role User;                                                               
	grant usage on iInclusiveLess(VersionNumber, VersionNumber) to role User;                                                     
	grant usage on iInclusiveLess(table, table) to role User;                                                                                   
	grant usage on iIndexer(list, Integer) to role User;                                                                                 
	grant usage on iIndexer(String, Integer) to role User;                                                                        
	grant usage on iJoin(row, row) to role User;                                                                                                
	grant usage on iJoin(table, table) to role User;                                                                                            
	grant usage on iLeftJoin(table, table) to role User;                                                                                        
	grant usage on iLess(Boolean, Boolean) to role User;                                                                          
	grant usage on iLess(Byte, Byte) to role User;                                                                                
	grant usage on iLess(Date, Date) to role User;                                                                                
	grant usage on iLess(DateTime, DateTime) to role User;                                                                        
	grant usage on iLess(Decimal, Decimal) to role User;                                                                          
	grant usage on iLess(Guid, Guid) to role User;                                                                                
	grant usage on iLess(Integer, Integer) to role User;                                                                          
	grant usage on iLess(Long, Long) to role User;                                                                                
	grant usage on iLess(Money, Money) to role User;                                                                              
	grant usage on iLess(Name, Name) to role User;                                                                                
	grant usage on iLess(Short, Short) to role User;                                                                              
	grant usage on iLess(String, String) to role User;                                                                            
	grant usage on iLess(Time, Time) to role User;                                                                                
	grant usage on iLess(TimeSpan, TimeSpan) to role User;                                                                        
	grant usage on iLess(VersionNumber, VersionNumber) to role User;                                                              
	grant usage on iLess(table, table) to role User;                                                                                            
	grant usage on iLike(Name, String) to role User;                                                                              
	grant usage on iLike(String, String) to role User;                                                                            
	grant usage on iMatches(Name, String) to role User;                                                                           
	grant usage on iMatches(String, String) to role User;                                                                         
	grant usage on iMod(Byte, Byte) to role User;                                                                                 
	grant usage on iMod(Decimal, Decimal) to role User;                                                                           
	grant usage on iMod(Integer, Integer) to role User;                                                                           
	grant usage on iMod(Long, Long) to role User;                                                                                 
	grant usage on iMod(Short, Short) to role User;                                                                               
	grant usage on iMultiplication(Byte, Byte) to role User;                                                                      
	grant usage on iMultiplication(Decimal, Decimal) to role User;                                                                
	grant usage on iMultiplication(Decimal, Money) to role User;                                                                  
	grant usage on iMultiplication(Decimal, TimeSpan) to role User;                                                               
	grant usage on iMultiplication(Integer, Integer) to role User;                                                                
	grant usage on iMultiplication(Integer, Money) to role User;                                                                  
	grant usage on iMultiplication(Integer, TimeSpan) to role User;                                                               
	grant usage on iMultiplication(Long, Long) to role User;                                                                      
	grant usage on iMultiplication(Money, Decimal) to role User;                                                                  
	grant usage on iMultiplication(Money, Integer) to role User;                                                                  
	grant usage on iMultiplication(Short, Short) to role User;                                                                    
	grant usage on iMultiplication(TimeSpan, Decimal) to role User;                                                               
	grant usage on iMultiplication(TimeSpan, Integer) to role User;                                                               
	grant usage on IndexOf(list, generic) to role User;                                                                                  
	grant usage on IndexOf(list, generic, Integer) to role User;                                                                  
	grant usage on IndexOf(list, generic, Integer, Integer) to role User;                                                  
	grant usage on IndexOf(String, String) to role User;                                                                          
	grant usage on IndexOf(String, String, Integer) to role User;                                                          
	grant usage on IndexOf(String, String, Integer, Integer) to role User;                                          
	grant usage on IndexOfAny(String, list(String)) to role User;                                                                 
	grant usage on IndexOfAny(String, list(String), Integer) to role User;                                                 
	grant usage on IndexOfAny(String, list(String), Integer, Integer) to role User;                                 
	grant usage on iNegate(Decimal) to role User;                                                                                        
	grant usage on iNegate(Integer) to role User;                                                                                        
	grant usage on iNegate(Long) to role User;                                                                                           
	grant usage on iNegate(Money) to role User;                                                                                          
	grant usage on iNegate(Short) to role User;                                                                                          
	grant usage on iNegate(TimeSpan) to role User;                                                                                       
	grant usage on iNot(Boolean) to role User;                                                                                           
	grant usage on iNotEqual(Boolean, Boolean) to role User;                                                                      
	grant usage on iNotEqual(Byte, Byte) to role User;                                                                            
	grant usage on iNotEqual(Date, Date) to role User;                                                                            
	grant usage on iNotEqual(DateTime, DateTime) to role User;                                                                    
	grant usage on iNotEqual(Decimal, Decimal) to role User;                                                                      
	grant usage on iNotEqual(Guid, Guid) to role User;                                                                            
	grant usage on iNotEqual(Integer, Integer) to role User;                                                                      
	grant usage on iNotEqual(Long, Long) to role User;                                                                            
	grant usage on iNotEqual(Money, Money) to role User;                                                                          
	grant usage on iNotEqual(Name, Name) to role User;                                                                            
	grant usage on iNotEqual(Short, Short) to role User;                                                                          
	grant usage on iNotEqual(String, String) to role User;                                                                        
	grant usage on iNotEqual(Time, Time) to role User;                                                                            
	grant usage on iNotEqual(TimeSpan, TimeSpan) to role User;                                                                    
	grant usage on iNotEqual(VersionNumber, VersionNumber) to role User;                                                          
	grant usage on iNotEqual(table, table) to role User;                                                                                        
	grant usage on Insert(cursor, row) to role User;                                                                                            
	grant usage on Insert(String, Integer, String) to role User;                                                           
	grant usage on Insert(var list, generic, Integer) to role User;                                                               
	grant usage on InTransaction() to role User;                                                                                                
	grant usage on iOn() to role User;                                                                            
	grant usage on iOr(Boolean, Boolean) to role User;                                                                            
	grant usage on iOrder(table) to role User;                                                                                                  
	grant usage on iPower(Decimal, Decimal) to role User;                                                                         
	grant usage on iProject(row) to role User;                                                                                                  
	grant usage on iProject(table) to role User;                                                                                                
	grant usage on iQuota(table, Integer) to role User;                                                                                  
	grant usage on iRedefine(row) to role User;                                                                                                 
	grant usage on iRedefine(table) to role User;                                                                                               
	grant usage on iRemove(row) to role User;                                                                                                   
	grant usage on iRemove(table) to role User;                                                                                                 
	grant usage on iRename(row) to role User;                                                                                                   
	grant usage on iRename(table) to role User;                                                                                                 
	grant usage on iRestrict(table, Boolean) to role User;                                                                               
	grant usage on iRetrieve() to role User;                                                                                                    
	grant usage on iRightJoin(table, table) to role User;                                                                                       
	grant usage on IsDigit(String) to role User;                                                                                         
	grant usage on IsDigit(String, Integer) to role User;                                                                         
	grant usage on IsGenerated(Integer) to role CatalogUser;                                                                                    
	grant usage on IsGenerated(Name) to role CatalogUser;                                                                                       
	grant usage on IsGenerated(String) to role CatalogUser;                                                                                     
	grant usage on iShiftLeft(Byte, Integer) to role User;                                                                        
	grant usage on iShiftLeft(Integer, Integer) to role User;                                                                     
	grant usage on iShiftLeft(Long, Integer) to role User;                                                                        
	grant usage on iShiftLeft(Short, Integer) to role User;                                                                       
	grant usage on iShiftRight(Byte, Integer) to role User;                                                                       
	grant usage on iShiftRight(Integer, Integer) to role User;                                                                    
	grant usage on iShiftRight(Long, Integer) to role User;                                                                       
	grant usage on iShiftRight(Short, Integer) to role User;                                                                      
	grant usage on IsLeapYear(Integer) to role User;                                                                                     
	grant usage on IsLetter(String) to role User;                                                                                        
	grant usage on IsLetter(String, Integer) to role User;                                                                        
	grant usage on IsLetterOrDigit(String) to role User;                                                                                 
	grant usage on IsLetterOrDigit(String, Integer) to role User;                                                                 
	grant usage on IsLower(String) to role User;                                                                                         
	grant usage on IsLower(String, Integer) to role User;                                                                         
	grant usage on IsNil(row, String) to role User;                                                                                      
	grant usage on IsNil(generic) to role User;                                                                                          
	grant usage on IsNonLoggedContext() to role User;                                                                                           
	grant usage on IsNotNil(row, String) to role User;                                                                                      
	grant usage on IsNotNil(generic) to role User;                                                                                          
	grant usage on IsSystem(Integer) to role CatalogUser;                                                                                       
	grant usage on IsSystem(Name) to role CatalogUser;                                                                                          
	grant usage on IsSystem(String) to role CatalogUser;                                                                                        
	grant usage on iSubtraction(Byte, Byte) to role User;                                                                         
	grant usage on iSubtraction(Date, Date) to role User;                                                                         
	grant usage on iSubtraction(Date, TimeSpan) to role User;                                                                     
	grant usage on iSubtraction(DateTime, DateTime) to role User;                                                                 
	grant usage on iSubtraction(DateTime, TimeSpan) to role User;                                                                 
	grant usage on iSubtraction(Decimal, Decimal) to role User;                                                                   
	grant usage on iSubtraction(Integer, Integer) to role User;                                                                   
	grant usage on iSubtraction(Long, Long) to role User;                                                                         
	grant usage on iSubtraction(Money, Money) to role User;                                                                       
	grant usage on iSubtraction(Short, Short) to role User;                                                                       
	grant usage on iSubtraction(Time, Time) to role User;                                                                         
	grant usage on iSubtraction(Time, TimeSpan) to role User;                                                                     
	grant usage on iSubtraction(TimeSpan, TimeSpan) to role User;                                                                 
	grant usage on IsUpper(String) to role User;                                                                                         
	grant usage on IsUpper(String, Integer) to role User;                                                                         
	grant usage on iUnion(table, table) to role User;                                                                                           
	grant usage on iWithout(table, table) to role User;                                                                                         
	grant usage on iXor(Boolean, Boolean) to role User;                                                                           
	grant usage on JoinApplicationTransaction(Guid, Boolean) to role User;                                                        
	grant usage on Last(cursor) to role User;                                                                                                   
	grant usage on LastIndexOf(list, generic) to role User;                                                                              
	grant usage on LastIndexOf(list, generic, Integer) to role User;                                                              
	grant usage on LastIndexOf(list, generic, Integer, Integer) to role User;                                              
	grant usage on LastIndexOf(String, String) to role User;                                                                      
	grant usage on LastIndexOf(String, String, Integer) to role User;                                                      
	grant usage on LastIndexOf(String, String, Integer, Integer) to role User;                                      
	grant usage on LastIndexOfAny(String, list(String)) to role User;                                                             
	grant usage on LastIndexOfAny(String, list(String), Integer) to role User;                                             
	grant usage on LastIndexOfAny(String, list(String), Integer, Integer) to role User;                             
	grant usage on LastPos(String, String) to role User;                                                                          
	grant usage on LeaveApplicationTransaction() to role User;                                                                                  
	grant usage on Length(Binary) to role User;                                                                                          
	grant usage on Length(Graphic) to role User;                                                                                         
	grant usage on Length(String) to role User;                                                                                          
	grant usage on LibraryDescriptor(Name) to role User;                                                                                 
	grant usage on LibraryDescriptor(Name, VersionNumber) to role User;                                                           
	grant usage on LibraryDescriptor(Name, VersionNumber, Name) to role User;                                              
	grant usage on LibraryName() to role User;                                                                                                  
	grant usage on LibraryName(Integer) to role CatalogUser;                                                                                    
	grant usage on LibraryName(Name) to role CatalogUser;                                                                                       
	grant usage on LibrarySetting(Name, String) to role User;                                                                     
	grant usage on LibrarySetting(String) to role User;                                                                                  
	grant usage on Lower(String) to role User;                                                                                           
	grant usage on MachineName() to role User;                                                                                                  
	grant usage on Math.Exp(Decimal) to role User;                                                                                       
	grant usage on Math.Factorial(Integer) to role User;                                                                                 
	grant usage on Math.Ln(Decimal) to role User;                                                                                        
	grant usage on Math.Log(Decimal, Decimal) to role User;                                                                       
	grant usage on Math.Log10(Decimal) to role User;                                                                                     
	grant usage on Math.Random() to role User;                                                                                                  
	grant usage on Math.Random(Integer) to role User;                                                                                    
	grant usage on Math.Random(Integer, Integer) to role User;                                                                    
	grant usage on Math.Seed() to role User;                                                                                                    
	grant usage on Math.Seed(Integer) to role User;                                                                                      
	grant usage on Max(Byte, Byte) to role User;
	grant usage on Max(Date) to role User;                                                                                               
	grant usage on Max(Date, Date) to role User;
	grant usage on Max(DateTime) to role User;                                                                                           
	grant usage on Max(DateTime, DateTime) to role User;
	grant usage on Max(Decimal) to role User;                                                                                            
	grant usage on Max(Decimal, Decimal) to role User;
	grant usage on Max(Integer) to role User;                                                                                            
	grant usage on Max(Integer, Integer) to role User;
	grant usage on Max(Long, Long) to role User;
	grant usage on Max(Money) to role User;                                                                                              
	grant usage on Max(Money, Money) to role User;
	grant usage on Max(Short, Short) to role User;
	grant usage on Max(String) to role User;                                                                                             
	grant usage on Max(Time) to role User;                                                                                               
	grant usage on Max(Time, Time) to role User;
	grant usage on Max(TimeSpan) to role User;                                                                                           
	grant usage on Max(TimeSpan, TimeSpan) to role User;
	grant usage on Max(VersionNumber) to role User;                                                                                      
	grant usage on Min(Byte, Byte) to role User;
	grant usage on Min(Date) to role User;                                                                                               
	grant usage on Min(Date, Date) to role User;
	grant usage on Min(DateTime) to role User;                                                                                           
	grant usage on Min(DateTime, DateTime) to role User;
	grant usage on Min(Decimal) to role User;                                                                                            
	grant usage on Min(Decimal, Decimal) to role User;
	grant usage on Min(Integer) to role User;                                                                                            
	grant usage on Min(Integer, Integer) to role User;
	grant usage on Min(Long, Long) to role User;
	grant usage on Min(Money) to role User;                                                                                              
	grant usage on Min(Money, Money) to role User;
	grant usage on Min(Short, Short) to role User;
	grant usage on Min(String) to role User;                                                                                             
	grant usage on Min(Time) to role User;                                                                                               
	grant usage on Min(Time, Time) to role User;
	grant usage on Min(TimeSpan) to role User;                                                                                           
	grant usage on Min(TimeSpan, TimeSpan) to role User;
	grant usage on Min(VersionNumber) to role User;                                                                                      
	grant usage on MonthsBetween(DateTime, DateTime) to role User;
	grant usage on MonthsBetween(Date, Date) to role User;
	grant usage on NameFromGuid(Guid) to role User;                                                                                      
	grant usage on NewGuid() to role User;                                                                                                      
	grant usage on Next(cursor) to role User;                                                                                                   
	grant usage on ObjectDescription(Integer) to role CatalogUser;                                                                              
	grant usage on ObjectDescription(Name) to role CatalogUser;                                                                                 
	grant usage on ObjectDescription(String) to role CatalogUser;                                                                               
	grant usage on ObjectDisplayName(Integer) to role CatalogUser;                                                                              
	grant usage on ObjectDisplayName(Name) to role CatalogUser;                                                                                 
	grant usage on ObjectDisplayName(String) to role CatalogUser;                                                                               
	grant usage on ObjectExists(Name) to role CatalogUser;                                                                                      
	grant usage on ObjectExists(String) to role CatalogUser;                                                                                    
	grant usage on ObjectID(Name) to role CatalogUser;                                                                                          
	grant usage on ObjectID(String) to role CatalogUser;                                                                                        
	grant usage on ObjectMetaData(Integer, String, String) to role CatalogUser;                                                   
	grant usage on ObjectMetaData(Name, String, String) to role CatalogUser;                                                      
	grant usage on ObjectMetaData(String, String, String) to role CatalogUser;                                                    
	grant usage on ObjectName(Integer) to role CatalogUser;                                                                                     
	grant usage on ObjectName(Name) to role CatalogUser;                                                                                        
	grant usage on ObjectName(String) to role CatalogUser;                                                                                      
	grant usage on Open(String) to role User;                                                                                            
	grant usage on OperatorSignature(Integer) to role CatalogUser;                                                                              
	grant usage on OperatorSignature(Name) to role CatalogUser;                                                                                 
	grant usage on OperatorSignature(String) to role CatalogUser;                                                                               
	grant usage on PadLeft(String, Integer) to role User;                                                                         
	grant usage on PadLeft(String, Integer, String) to role User;                                                          
	grant usage on PadRight(String, Integer) to role User;                                                                        
	grant usage on PadRight(String, Integer, String) to role User;                                                         
	grant usage on PopNonLoggedContext() to role User;                                                                                          
	grant usage on Pos(String, String) to role User;                                                                              
	grant usage on PrepareApplicationTransaction(Guid) to role User;                                                                     
	grant usage on PrepareTransaction() to role User;                                                                                           
	grant usage on Prior(cursor) to role User;                                                                                                  
	grant usage on ProcessID() to role User;                                                                                                    
	grant usage on PushNonLoggedContext() to role User;                                                                                         
	grant usage on RealSQLToD4(String) to role User;
	grant usage on Refresh(cursor) to role User;                                                                                                
	grant usage on Refresh(cursor, row) to role User;                                                                                           
	grant usage on Remove(String, Integer, Integer) to role User;                                                          
	grant usage on Remove(var list, generic) to role User;                                                                               
	grant usage on RemoveAt(var list, Integer) to role User;                                                                             
	grant usage on RenameLibrary(Name, Name) to role User;                                                                        
	grant usage on Replace(String, String, String) to role User;                                                           
	grant usage on Replace(String, String, String, Boolean) to role User;                                           
	grant usage on RequiredLibraries(Name) to role CatalogUser;                                                                                 
	grant usage on RequiredLibraries(Name, Boolean) to role CatalogUser;                                                                 
	grant usage on RequiredObjects(Integer) to role CatalogUser;                                                                                
	grant usage on RequiredObjects(Integer, Boolean) to role CatalogUser;                                                                
	grant usage on RequiredObjects(Name) to role CatalogUser;                                                                                   
	grant usage on RequiredObjects(Name, Boolean) to role CatalogUser;                                                                   
	grant usage on Reset(cursor) to role User;                                                                                                  
	grant usage on RightExists(Name) to role CatalogUser;                                                                                       
	grant usage on RoleExists(Name) to role CatalogUser;                                                                                        
	grant usage on RoleHasRight(Name, Name) to role CatalogUser;                                                                         
	grant usage on RollbackApplicationTransaction(Guid) to role User;                                                                    
	grant usage on RollbackTransaction() to role User;                                                                                          
	grant usage on Round(Decimal, Integer) to role User;                                                                          
	grant usage on Round(Decimal) to role User;
	grant usage on Round(Money, Integer) to role User;
	grant usage on Round(Money) to role User;
	grant usage on Script(Name) to role CatalogUser;                                                                                            
	grant usage on Script(String) to role CatalogUser;                                                                                          
	grant usage on Script(String, Boolean) to role CatalogUser;                                                                          
	grant usage on Script(String, Boolean, Boolean) to role CatalogUser;                                                          
	grant usage on ScriptCatalog() to role CatalogUser;                                                                                                
	grant usage on ScriptData(String) to role CatalogUser;                                                                                      
	grant usage on ScriptDrop(Name) to role CatalogUser;                                                                                        
	grant usage on ScriptDrop(String) to role CatalogUser;                                                                                      
	grant usage on ScriptDrop(String, Boolean) to role CatalogUser;                                                                      
	grant usage on ScriptDrop(String, Boolean, Boolean) to role CatalogUser;                                                      
	grant usage on ScriptDropCatalog() to role CatalogUser;                                                                                            
	grant usage on ScriptDropLibrary(Name) to role CatalogUser;                                                                                 
	grant usage on ScriptExpression(String) to role CatalogUser;                                                                                
	grant usage on ScriptLibrary(Name) to role CatalogUser;                                                                                     
	grant usage on Select(cursor) to role User;                                                                                                 
	grant usage on ServerName() to role User;                                                                                                   
	grant usage on ServerLinkUserExists(String, Name) to role CatalogUser;
	grant usage on SessionID() to role User;                                                                                                    
	grant usage on SetDefaultIsolationLevel(String) to role User;                                                                        
	grant usage on SetDefaultMaxCallDepth(Integer) to role User;                                                                         
	grant usage on SetDefaultMaxStackDepth(Integer) to role User;                                                                        
	grant usage on SetDefaultUseImplicitTransactions(Boolean) to role User;                                                              
	grant usage on SetIsolationLevel(String) to role User;                                                                               
	grant usage on SetLanguage(String) to role User;                                                                                     
	grant usage on SetLibrary(Name) to role User;                                                                                        
	grant usage on SetMaxCallDepth(Integer) to role User;                                                                                
	grant usage on SetMaxStackDepth(Integer) to role User;                                                                               
	grant usage on SetServerLinkUserID(String, Name, String) to role CatalogUser;
	grant usage on SetServerLinkUserPassword(String, Name, String) to role CatalogUser;
	grant usage on SetUseImplicitTransactions(Boolean) to role User;                                                                     
	grant usage on SetUserName(UserID, String) to role User;
	grant usage on Sleep(Integer) to role User;                                                                                          
	grant usage on Split(String) to role User;                                                                                           
	grant usage on Split(String, list(String)) to role User;                                                                      
	grant usage on Split(String, String) to role User;                                                                            
	grant usage on StartProcess() to role User;
	grant usage on StartsWith(String, String) to role User;                                                                       
	grant usage on StopProcess(Integer) to role User;
	grant usage on SubString(String, Integer) to role User;                                                                       
	grant usage on SubString(String, Integer, Integer) to role User;                                                       
	grant usage on Sum(Decimal) to role User;                                                                                            
	grant usage on Sum(Integer) to role User;                                                                                            
	grant usage on Sum(Money) to role User;                                                                                              
	grant usage on Sum(TimeSpan) to role User;                                                                                           
	grant usage on Time() to role User;                                                                                                         
	grant usage on Time(Integer, Integer) to role User;                                                                           
	grant usage on TimePart(DateTime) to role User;                                                                                      
	grant usage on TimeSpan(Integer) to role User;                                                                                       
	grant usage on TimeSpan(Integer, Integer) to role User;                                                                       
	grant usage on TimeSpan(Integer, Integer, Integer) to role User;                                                       
	grant usage on TimeSpan(Integer, Integer, Integer, Integer) to role User;                                       
	grant usage on ToBoolean(Byte) to role User;                                                                                         
	grant usage on ToBoolean(Integer) to role User;                                                                                      
	grant usage on ToBoolean(Long) to role User;                                                                                         
	grant usage on ToBoolean(Short) to role User;                                                                                        
	grant usage on ToBoolean(String) to role User;                                                                                       
	grant usage on ToByte(Boolean) to role User;                                                                                         
	grant usage on ToByte(Integer) to role User;                                                                                         
	grant usage on ToByte(Long) to role User;                                                                                            
	grant usage on ToByte(Short) to role User;                                                                                           
	grant usage on ToByte(String) to role User;                                                                                          
	grant usage on ToDate(DateTime) to role User;                                                                                        
	grant usage on ToDate(String) to role User;                                                                                          
	grant usage on ToDateTime(Date) to role User;                                                                                        
	grant usage on ToDateTime(String) to role User;                                                                                      
	grant usage on ToDecimal(Integer) to role User;                                                                                      
	grant usage on ToDecimal(Long) to role User;                                                                                         
	grant usage on ToDecimal(Money) to role User;                                                                                        
	grant usage on ToDecimal(String) to role User;                                                                                       
	grant usage on ToGuid(String) to role User;                                                                                          
	grant usage on ToInteger(Boolean) to role User;                                                                                      
	grant usage on ToInteger(Byte) to role User;                                                                                         
	grant usage on ToInteger(Decimal) to role User;                                                                                      
	grant usage on ToInteger(Long) to role User;                                                                                         
	grant usage on ToInteger(Money) to role User;                                                                                        
	grant usage on ToInteger(Short) to role User;                                                                                        
	grant usage on ToInteger(String) to role User;                                                                                       
	grant usage on ToList(cursor) to role User;                                                                                                 
	grant usage on ToList(table) to role User;
	grant usage on ToLong(Boolean) to role User;                                                                                         
	grant usage on ToLong(Byte) to role User;                                                                                            
	grant usage on ToLong(Decimal) to role User;                                                                                         
	grant usage on ToLong(Integer) to role User;                                                                                         
	grant usage on ToLong(Money) to role User;                                                                                           
	grant usage on ToLong(Short) to role User;                                                                                           
	grant usage on ToLong(String) to role User;                                                                                          
	grant usage on ToMoney(Decimal) to role User;                                                                                        
	grant usage on ToMoney(Integer) to role User;                                                                                        
	grant usage on ToMoney(Long) to role User;                                                                                           
	grant usage on ToMoney(String) to role User;                                                                                         
	grant usage on ToShort(Boolean) to role User;                                                                                        
	grant usage on ToShort(Byte) to role User;                                                                                           
	grant usage on ToShort(Integer) to role User;                                                                                        
	grant usage on ToShort(Long) to role User;                                                                                           
	grant usage on ToShort(String) to role User;                                                                                         
	grant usage on GenericToString(generic) to role User;                                                                                    
	grant usage on ToString(Boolean) to role User;                                                                                       
	grant usage on ToString(Byte) to role User;                                                                                          
	grant usage on ToString(Date) to role User;                                                                                          
	grant usage on ToString(DateTime) to role User;                                                                                      
	grant usage on ToString(Decimal) to role User;                                                                                       
	grant usage on ToString(Guid) to role User;                                                                                          
	grant usage on ToString(Integer) to role User;                                                                                       
	grant usage on ToString(Long) to role User;                                                                                          
	grant usage on ToString(Money) to role User;                                                                                         
	grant usage on ToString(Short) to role User;                                                                                         
	grant usage on ToString(Time) to role User;                                                                                          
	grant usage on ToString(TimeSpan) to role User;                                                                                      
	grant usage on ToString(VersionNumber) to role User;                                                                                 
	grant usage on ToBase64String(Binary) to role User;
	grant usage on ToBase64String(Graphic) to role User;                                                                              
	grant usage on ToTable(list) to role User;
	grant usage on ToTable(list, Name) to role User;                                                                                     
	grant usage on ToTable(list, Name, Name) to role User;
	grant usage on ToTime(String) to role User;                                                                                          
	grant usage on ToTimeSpan(String) to role User;                                                                                      
	grant usage on ToVersionNumber(String) to role User;                                                                                 
	grant usage on TransactionCount() to role User;                                                                                             
	grant usage on Trim(String) to role User;                                                                                            
	grant usage on TrimLeft(String) to role User;                                                                                        
	grant usage on TrimRight(String) to role User;                                                                                       
	grant usage on Truncate(Decimal) to role User;                                                                                       
	grant usage on Truncate(Money) to role User;                                                                                       
	grant usage on Update(cursor, row) to role User;                                                                                            
	grant usage on UpdateTimeStamps() to role User;
	grant usage on Upper(String) to role User;                                                                                           
	grant usage on UserExists(UserID) to role CatalogUser;                                                                                      
	grant usage on UserHasRight(UserID, Name) to role CatalogUser;                                                                       
	grant usage on UserID() to role User;                                                                                                       
	grant usage on UserName() to role User;                                                                                                     
	grant usage on Validate(cursor, row, var row) to role User;                                                                                 
	grant usage on Validate(cursor, row, var row, String) to role User;                                                                  
	grant usage on VersionNumber(Integer) to role User;                                                                                  
	grant usage on VersionNumber(Integer, Integer) to role User;                                                                  
	grant usage on VersionNumber(Integer, Integer, Integer) to role User;                                                  
	grant usage on YearsBetween(DateTime, DateTime) to role User;
	grant usage on YearsBetween(Date, Date) to role User;
end;
